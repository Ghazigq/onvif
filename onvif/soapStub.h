/* soapStub.h
   Generated by gSOAP 2.8.122 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_WSDD_2005
#define SOAP_WSA_200408
#define SOAP_NAMESPACE_OF_wsa	"http://schemas.xmlsoap.org/ws/2004/08/addressing"
#define SOAP_NAMESPACE_OF_wsdd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_wsa5	"http://www.w3.org/2005/08/addressing"
#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_tdn	"http://www.onvif.org/ver10/network/wsdl"
#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_wsrfrw	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_wsrfr	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_timg	"http://www.onvif.org/ver20/imaging/wsdl"
#define SOAP_NAMESPACE_OF_tr2	"http://www.onvif.org/ver20/media/wsdl"
#define SOAP_NAMESPACE_OF_tptz	"http://www.onvif.org/ver20/ptz/wsdl"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 208122
# error "GSOAP VERSION 208122 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* wsa.h:124 */
#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (12)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues {
	wsa__Reply = 0
};
#endif

/* wsa.h:132 */
#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (13)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues {
	wsa__InvalidMessageInformationHeader = 0,
	wsa__MessageInformationHeaderRequired = 1,
	wsa__DestinationUnreachable = 2,
	wsa__ActionNotSupported = 3,
	wsa__EndpointUnavailable = 4
};
#endif

/* wsdd10.h:109 */
#ifndef SOAP_TYPE_wsdd__FaultCodeType
#define SOAP_TYPE_wsdd__FaultCodeType (49)
/* wsdd:FaultCodeType */
enum wsdd__FaultCodeType {
	wsdd__MatchingRuleNotSupported = 0
};
#endif

/* wsa5.h:96 */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (100)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {
	http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0
};
#endif

/* wsa5.h:104 */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (101)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {
	wsa5__InvalidAddressingHeader = 0,
	wsa5__InvalidAddress = 1,
	wsa5__InvalidEPR = 2,
	wsa5__InvalidCardinality = 3,
	wsa5__MissingAddressInEPR = 4,
	wsa5__DuplicateMessageID = 5,
	wsa5__ActionMismatch = 6,
	wsa5__MessageAddressingHeaderRequired = 7,
	wsa5__DestinationUnreachable = 8,
	wsa5__ActionNotSupported = 9,
	wsa5__EndpointUnavailable = 10
};
#endif

/* wsa5.h:254 */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (120)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {
	_wsa5__IsReferenceParameter__false = 0,
	_wsa5__IsReferenceParameter__true = 1
};
#endif

/* onvif.h:2732 */
#ifndef SOAP_TYPE_tds__AutoGeoModes
#define SOAP_TYPE_tds__AutoGeoModes (1253)
/* tds:AutoGeoModes */
enum tds__AutoGeoModes {
	tds__AutoGeoModes__Location = 0,
	tds__AutoGeoModes__Heading = 1,
	tds__AutoGeoModes__Leveling = 2
};
#endif

/* onvif.h:2762 */
#ifndef SOAP_TYPE_tds__StorageType
#define SOAP_TYPE_tds__StorageType (1255)
/* tds:StorageType */
enum tds__StorageType {
	tds__StorageType__NFS = 0,
	tds__StorageType__CIFS = 1,
	tds__StorageType__CDMI = 2,
	tds__StorageType__FTP = 3
};
#endif

/* onvif.h:2822 */
#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (1259)
/* tt:RotateMode */
enum tt__RotateMode {
	tt__RotateMode__OFF = 0,
	tt__RotateMode__ON = 1,
	tt__RotateMode__AUTO = 2
};
#endif

/* onvif.h:2852 */
#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (1261)
/* tt:SceneOrientationMode */
enum tt__SceneOrientationMode {
	tt__SceneOrientationMode__MANUAL = 0,
	tt__SceneOrientationMode__AUTO = 1
};
#endif

/* onvif.h:2873 */
#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (1263)
/* tt:SceneOrientationOption */
enum tt__SceneOrientationOption {
	tt__SceneOrientationOption__Below = 0,
	tt__SceneOrientationOption__Horizon = 1,
	tt__SceneOrientationOption__Above = 2
};
#endif

/* onvif.h:2895 */
#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (1265)
/* tt:ViewModes */
enum tt__ViewModes {
	tt__ViewModes__tt_x003aFisheye = 0,
	tt__ViewModes__tt_x003a360Panorama = 1,
	tt__ViewModes__tt_x003a180Panorama = 2,
	tt__ViewModes__tt_x003aQuad = 3,
	tt__ViewModes__tt_x003aOriginal = 4,
	tt__ViewModes__tt_x003aLeftHalf = 5,
	tt__ViewModes__tt_x003aRightHalf = 6,
	tt__ViewModes__tt_x003aDewarp = 7
};
#endif

/* onvif.h:2950 */
#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (1267)
/* tt:VideoEncoding */
enum tt__VideoEncoding {
	tt__VideoEncoding__JPEG = 0,
	tt__VideoEncoding__MPEG4 = 1,
	tt__VideoEncoding__H264 = 2
};
#endif

/* onvif.h:2968 */
#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (1269)
/* tt:Mpeg4Profile */
enum tt__Mpeg4Profile {
	tt__Mpeg4Profile__SP = 0,
	tt__Mpeg4Profile__ASP = 1
};
#endif

/* onvif.h:2985 */
#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (1271)
/* tt:H264Profile */
enum tt__H264Profile {
	tt__H264Profile__Baseline = 0,
	tt__H264Profile__Main = 1,
	tt__H264Profile__Extended = 2,
	tt__H264Profile__High = 3
};
#endif

/* onvif.h:3008 */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (1273)
/* tt:VideoEncodingMimeNames */
enum tt__VideoEncodingMimeNames {
	tt__VideoEncodingMimeNames__JPEG = 0,
	tt__VideoEncodingMimeNames__MPV4_ES = 1,
	tt__VideoEncodingMimeNames__H264 = 2,
	tt__VideoEncodingMimeNames__H265 = 3
};
#endif

/* onvif.h:3027 */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (1275)
/* tt:VideoEncodingProfiles */
enum tt__VideoEncodingProfiles {
	tt__VideoEncodingProfiles__Simple = 0,
	tt__VideoEncodingProfiles__AdvancedSimple = 1,
	tt__VideoEncodingProfiles__Baseline = 2,
	tt__VideoEncodingProfiles__Main = 3,
	tt__VideoEncodingProfiles__Main10 = 4,
	tt__VideoEncodingProfiles__Extended = 5,
	tt__VideoEncodingProfiles__High = 6
};
#endif

/* onvif.h:3049 */
#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (1277)
/* tt:AudioEncoding */
enum tt__AudioEncoding {
	tt__AudioEncoding__G711 = 0,
	tt__AudioEncoding__G726 = 1,
	tt__AudioEncoding__AAC = 2
};
#endif

/* onvif.h:3071 */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (1279)
/* tt:AudioEncodingMimeNames */
enum tt__AudioEncodingMimeNames {
	tt__AudioEncodingMimeNames__PCMU = 0,
	tt__AudioEncodingMimeNames__G726 = 1,
	tt__AudioEncodingMimeNames__MP4A_LATM = 2,
	tt__AudioEncodingMimeNames__mpeg4_generic = 3
};
#endif

/* onvif.h:3094 */
#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (1281)
/* tt:MetadataCompressionType */
enum tt__MetadataCompressionType {
	tt__MetadataCompressionType__None = 0,
	tt__MetadataCompressionType__GZIP = 1,
	tt__MetadataCompressionType__EXI = 2
};
#endif

/* onvif.h:3112 */
#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (1283)
/* tt:StreamType */
enum tt__StreamType {
	tt__StreamType__RTP_Unicast = 0,
	tt__StreamType__RTP_Multicast = 1
};
#endif

/* onvif.h:3129 */
#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (1285)
/* tt:TransportProtocol */
enum tt__TransportProtocol {
	tt__TransportProtocol__UDP = 0,
	tt__TransportProtocol__TCP = 1,
	tt__TransportProtocol__RTSP = 2,
	tt__TransportProtocol__HTTP = 3
};
#endif

/* onvif.h:3152 */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (1287)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition {
	tt__ScopeDefinition__Fixed = 0,
	tt__ScopeDefinition__Configurable = 1
};
#endif

/* onvif.h:3169 */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (1289)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode {
	tt__DiscoveryMode__Discoverable = 0,
	tt__DiscoveryMode__NonDiscoverable = 1
};
#endif

/* onvif.h:3199 */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (1293)
/* tt:Duplex */
enum tt__Duplex {
	tt__Duplex__Full = 0,
	tt__Duplex__Half = 1
};
#endif

/* onvif.h:3232 */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (1297)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration {
	tt__IPv6DHCPConfiguration__Auto = 0,
	tt__IPv6DHCPConfiguration__Stateful = 1,
	tt__IPv6DHCPConfiguration__Stateless = 2,
	tt__IPv6DHCPConfiguration__Off = 3
};
#endif

/* onvif.h:3251 */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (1299)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType {
	tt__NetworkProtocolType__HTTP = 0,
	tt__NetworkProtocolType__HTTPS = 1,
	tt__NetworkProtocolType__RTSP = 2
};
#endif

/* onvif.h:3269 */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (1301)
/* tt:NetworkHostType */
enum tt__NetworkHostType {
	tt__NetworkHostType__IPv4 = 0,
	tt__NetworkHostType__IPv6 = 1,
	tt__NetworkHostType__DNS = 2
};
#endif

/* onvif.h:3323 */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (1309)
/* tt:IPType */
enum tt__IPType {
	tt__IPType__IPv4 = 0,
	tt__IPType__IPv6 = 1
};
#endif

/* onvif.h:3364 */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (1315)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType {
	tt__IPAddressFilterType__Allow = 0,
	tt__IPAddressFilterType__Deny = 1
};
#endif

/* onvif.h:3381 */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (1317)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType {
	tt__DynamicDNSType__NoUpdate = 0,
	tt__DynamicDNSType__ClientUpdates = 1,
	tt__DynamicDNSType__ServerUpdates = 2
};
#endif

/* onvif.h:3412 */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (1321)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode {
	tt__Dot11StationMode__Ad_hoc = 0,
	tt__Dot11StationMode__Infrastructure = 1,
	tt__Dot11StationMode__Extended = 2
};
#endif

/* onvif.h:3430 */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (1323)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode {
	tt__Dot11SecurityMode__None = 0,
	tt__Dot11SecurityMode__WEP = 1,
	tt__Dot11SecurityMode__PSK = 2,
	tt__Dot11SecurityMode__Dot1X = 3,
	tt__Dot11SecurityMode__Extended = 4
};
#endif

/* onvif.h:3450 */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (1325)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher {
	tt__Dot11Cipher__CCMP = 0,
	tt__Dot11Cipher__TKIP = 1,
	tt__Dot11Cipher__Any = 2,
	tt__Dot11Cipher__Extended = 3
};
#endif

/* onvif.h:3495 */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (1331)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength {
	tt__Dot11SignalStrength__None = 0,
	tt__Dot11SignalStrength__Very_x0020Bad = 1,
	tt__Dot11SignalStrength__Bad = 2,
	tt__Dot11SignalStrength__Good = 3,
	tt__Dot11SignalStrength__Very_x0020Good = 4,
	tt__Dot11SignalStrength__Extended = 5
};
#endif

/* onvif.h:3516 */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (1333)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite {
	tt__Dot11AuthAndMangementSuite__None = 0,
	tt__Dot11AuthAndMangementSuite__Dot1X = 1,
	tt__Dot11AuthAndMangementSuite__PSK = 2,
	tt__Dot11AuthAndMangementSuite__Extended = 3
};
#endif

/* onvif.h:3535 */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (1335)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory {
	tt__CapabilityCategory__All = 0,
	tt__CapabilityCategory__Analytics = 1,
	tt__CapabilityCategory__Device = 2,
	tt__CapabilityCategory__Events = 3,
	tt__CapabilityCategory__Imaging = 4,
	tt__CapabilityCategory__Media = 5,
	tt__CapabilityCategory__PTZ = 6
};
#endif

/* onvif.h:3561 */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (1337)
/* tt:SystemLogType */
enum tt__SystemLogType {
	tt__SystemLogType__System = 0,
	tt__SystemLogType__Access = 1
};
#endif

/* onvif.h:3590 */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (1339)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType {
	tt__FactoryDefaultType__Hard = 0,
	tt__FactoryDefaultType__Soft = 1
};
#endif

/* onvif.h:3615 */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (1341)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType {
	tt__SetDateTimeType__Manual = 0,
	tt__SetDateTimeType__NTP = 1
};
#endif

/* onvif.h:3640 */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (1343)
/* tt:UserLevel */
enum tt__UserLevel {
	tt__UserLevel__Administrator = 0,
	tt__UserLevel__Operator = 1,
	tt__UserLevel__User = 2,
	tt__UserLevel__Anonymous = 3,
	tt__UserLevel__Extended = 4
};
#endif

/* onvif.h:3660 */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (1345)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState {
	tt__RelayLogicalState__active = 0,
	tt__RelayLogicalState__inactive = 1
};
#endif

/* onvif.h:3677 */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (1347)
/* tt:RelayIdleState */
enum tt__RelayIdleState {
	tt__RelayIdleState__closed = 0,
	tt__RelayIdleState__open = 1
};
#endif

/* onvif.h:3694 */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (1349)
/* tt:RelayMode */
enum tt__RelayMode {
	tt__RelayMode__Monostable = 0,
	tt__RelayMode__Bistable = 1
};
#endif

/* onvif.h:3711 */
#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (1351)
/* tt:DigitalIdleState */
enum tt__DigitalIdleState {
	tt__DigitalIdleState__closed = 0,
	tt__DigitalIdleState__open = 1
};
#endif

/* onvif.h:3728 */
#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (1353)
/* tt:EFlipMode */
enum tt__EFlipMode {
	tt__EFlipMode__OFF = 0,
	tt__EFlipMode__ON = 1,
	tt__EFlipMode__Extended = 2
};
#endif

/* onvif.h:3746 */
#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (1355)
/* tt:ReverseMode */
enum tt__ReverseMode {
	tt__ReverseMode__OFF = 0,
	tt__ReverseMode__ON = 1,
	tt__ReverseMode__AUTO = 2,
	tt__ReverseMode__Extended = 3
};
#endif

/* onvif.h:3778 */
#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (1359)
/* tt:PTZPresetTourState */
enum tt__PTZPresetTourState {
	tt__PTZPresetTourState__Idle = 0,
	tt__PTZPresetTourState__Touring = 1,
	tt__PTZPresetTourState__Paused = 2,
	tt__PTZPresetTourState__Extended = 3
};
#endif

/* onvif.h:3797 */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (1361)
/* tt:PTZPresetTourDirection */
enum tt__PTZPresetTourDirection {
	tt__PTZPresetTourDirection__Forward = 0,
	tt__PTZPresetTourDirection__Backward = 1,
	tt__PTZPresetTourDirection__Extended = 2
};
#endif

/* onvif.h:3815 */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (1363)
/* tt:PTZPresetTourOperation */
enum tt__PTZPresetTourOperation {
	tt__PTZPresetTourOperation__Start = 0,
	tt__PTZPresetTourOperation__Stop = 1,
	tt__PTZPresetTourOperation__Pause = 2,
	tt__PTZPresetTourOperation__Extended = 3
};
#endif

/* onvif.h:3834 */
#ifndef SOAP_TYPE_tt__MoveAndTrackMethod
#define SOAP_TYPE_tt__MoveAndTrackMethod (1365)
/* tt:MoveAndTrackMethod */
enum tt__MoveAndTrackMethod {
	tt__MoveAndTrackMethod__PresetToken = 0,
	tt__MoveAndTrackMethod__GeoLocation = 1,
	tt__MoveAndTrackMethod__PTZVector = 2,
	tt__MoveAndTrackMethod__ObjectID = 3
};
#endif

/* onvif.h:3853 */
#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (1367)
/* tt:AutoFocusMode */
enum tt__AutoFocusMode {
	tt__AutoFocusMode__AUTO = 0,
	tt__AutoFocusMode__MANUAL = 1
};
#endif

/* onvif.h:3870 */
#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (1369)
/* tt:AFModes */
enum tt__AFModes {
	tt__AFModes__OnceAfterMove = 0
};
#endif

/* onvif.h:3890 */
#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (1371)
/* tt:WideDynamicMode */
enum tt__WideDynamicMode {
	tt__WideDynamicMode__OFF = 0,
	tt__WideDynamicMode__ON = 1
};
#endif

/* onvif.h:3911 */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (1373)
/* tt:BacklightCompensationMode */
enum tt__BacklightCompensationMode {
	tt__BacklightCompensationMode__OFF = 0,
	tt__BacklightCompensationMode__ON = 1
};
#endif

/* onvif.h:3936 */
#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (1375)
/* tt:ExposurePriority */
enum tt__ExposurePriority {
	tt__ExposurePriority__LowNoise = 0,
	tt__ExposurePriority__FrameRate = 1
};
#endif

/* onvif.h:3953 */
#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (1377)
/* tt:ExposureMode */
enum tt__ExposureMode {
	tt__ExposureMode__AUTO = 0,
	tt__ExposureMode__MANUAL = 1
};
#endif

/* onvif.h:3970 */
#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (1379)
/* tt:Enabled */
enum tt__Enabled {
	tt__Enabled__ENABLED = 0,
	tt__Enabled__DISABLED = 1
};
#endif

/* onvif.h:3987 */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (1381)
/* tt:WhiteBalanceMode */
enum tt__WhiteBalanceMode {
	tt__WhiteBalanceMode__AUTO = 0,
	tt__WhiteBalanceMode__MANUAL = 1
};
#endif

/* onvif.h:4004 */
#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (1383)
/* tt:IrCutFilterMode */
enum tt__IrCutFilterMode {
	tt__IrCutFilterMode__ON = 0,
	tt__IrCutFilterMode__OFF = 1,
	tt__IrCutFilterMode__AUTO = 2
};
#endif

/* onvif.h:4022 */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (1385)
/* tt:ImageStabilizationMode */
enum tt__ImageStabilizationMode {
	tt__ImageStabilizationMode__OFF = 0,
	tt__ImageStabilizationMode__ON = 1,
	tt__ImageStabilizationMode__AUTO = 2,
	tt__ImageStabilizationMode__Extended = 3
};
#endif

/* onvif.h:4041 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (1387)
/* tt:IrCutFilterAutoBoundaryType */
enum tt__IrCutFilterAutoBoundaryType {
	tt__IrCutFilterAutoBoundaryType__Common = 0,
	tt__IrCutFilterAutoBoundaryType__ToOn = 1,
	tt__IrCutFilterAutoBoundaryType__ToOff = 2,
	tt__IrCutFilterAutoBoundaryType__Extended = 3
};
#endif

/* onvif.h:4060 */
#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (1389)
/* tt:ToneCompensationMode */
enum tt__ToneCompensationMode {
	tt__ToneCompensationMode__OFF = 0,
	tt__ToneCompensationMode__ON = 1,
	tt__ToneCompensationMode__AUTO = 2
};
#endif

/* onvif.h:4078 */
#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (1391)
/* tt:DefoggingMode */
enum tt__DefoggingMode {
	tt__DefoggingMode__OFF = 0,
	tt__DefoggingMode__ON = 1,
	tt__DefoggingMode__AUTO = 2
};
#endif

/* onvif.h:4096 */
#ifndef SOAP_TYPE_tt__ImageSendingType
#define SOAP_TYPE_tt__ImageSendingType (1393)
/* tt:ImageSendingType */
enum tt__ImageSendingType {
	tt__ImageSendingType__Embedded = 0,
	tt__ImageSendingType__LocalStorage = 1,
	tt__ImageSendingType__RemoteStorage = 2
};
#endif

/* onvif.h:4114 */
#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (1395)
/* tt:PropertyOperation */
enum tt__PropertyOperation {
	tt__PropertyOperation__Initialized = 0,
	tt__PropertyOperation__Deleted = 1,
	tt__PropertyOperation__Changed = 2
};
#endif

/* onvif.h:4132 */
#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (1397)
/* tt:Direction */
enum tt__Direction {
	tt__Direction__Left = 0,
	tt__Direction__Right = 1,
	tt__Direction__Any = 2
};
#endif

/* onvif.h:4154 */
#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (1399)
/* tt:ReceiverMode */
enum tt__ReceiverMode {
	tt__ReceiverMode__AutoConnect = 0,
	tt__ReceiverMode__AlwaysConnect = 1,
	tt__ReceiverMode__NeverConnect = 2,
	tt__ReceiverMode__Unknown = 3
};
#endif

/* onvif.h:4193 */
#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (1401)
/* tt:ReceiverState */
enum tt__ReceiverState {
	tt__ReceiverState__NotConnected = 0,
	tt__ReceiverState__Connecting = 1,
	tt__ReceiverState__Connected = 2,
	tt__ReceiverState__Unknown = 3
};
#endif

/* onvif.h:4252 */
#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (1407)
/* tt:SearchState */
enum tt__SearchState {
	tt__SearchState__Queued = 0,
	tt__SearchState__Searching = 1,
	tt__SearchState__Completed = 2,
	tt__SearchState__Unknown = 3
};
#endif

/* onvif.h:4287 */
#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (1409)
/* tt:RecordingStatus */
enum tt__RecordingStatus {
	tt__RecordingStatus__Initiated = 0,
	tt__RecordingStatus__Recording = 1,
	tt__RecordingStatus__Stopped = 2,
	tt__RecordingStatus__Removing = 3,
	tt__RecordingStatus__Removed = 4,
	tt__RecordingStatus__Unknown = 5
};
#endif

/* onvif.h:4312 */
#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (1411)
/* tt:TrackType */
enum tt__TrackType {
	tt__TrackType__Video = 0,
	tt__TrackType__Audio = 1,
	tt__TrackType__Metadata = 2,
	tt__TrackType__Extended = 3
};
#endif

/* onvif.h:4359 */
#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (1417)
/* tt:ModeOfOperation */
enum tt__ModeOfOperation {
	tt__ModeOfOperation__Idle = 0,
	tt__ModeOfOperation__Active = 1,
	tt__ModeOfOperation__Unknown = 2
};
#endif

/* onvif.h:4386 */
#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (1419)
/* tt:AudioClassType */
enum tt__AudioClassType {
	tt__AudioClassType__gun_USCOREshot = 0,
	tt__AudioClassType__scream = 1,
	tt__AudioClassType__glass_USCOREbreaking = 2,
	tt__AudioClassType__tire_USCOREscreech = 3
};
#endif

/* onvif.h:4405 */
#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (1421)
/* tt:OSDType */
enum tt__OSDType {
	tt__OSDType__Text = 0,
	tt__OSDType__Image = 1,
	tt__OSDType__Extended = 2
};
#endif

/* onvif.h:4443 */
#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (1425)
/* tt:MoveStatus */
enum tt__MoveStatus {
	tt__MoveStatus__IDLE = 0,
	tt__MoveStatus__MOVING = 1,
	tt__MoveStatus__UNKNOWN = 2
};
#endif

/* onvif.h:4461 */
#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (1427)
/* tt:Entity */
enum tt__Entity {
	tt__Entity__Device = 0,
	tt__Entity__VideoSource = 1,
	tt__Entity__AudioSource = 2
};
#endif

/* onvif.h:4579 */
#ifndef SOAP_TYPE_tev__EventBrokerProtocol
#define SOAP_TYPE_tev__EventBrokerProtocol (1435)
/* tev:EventBrokerProtocol */
enum tev__EventBrokerProtocol {
	tev__EventBrokerProtocol__mqtt = 0,
	tev__EventBrokerProtocol__mqtts = 1,
	tev__EventBrokerProtocol__ws = 2,
	tev__EventBrokerProtocol__wss = 3
};
#endif

/* onvif.h:4598 */
#ifndef SOAP_TYPE_tev__ConnectionStatus
#define SOAP_TYPE_tev__ConnectionStatus (1437)
/* tev:ConnectionStatus */
enum tev__ConnectionStatus {
	tev__ConnectionStatus__Offline = 0,
	tev__ConnectionStatus__Connecting = 1,
	tev__ConnectionStatus__Connected = 2
};
#endif

/* onvif.h:4653 */
#ifndef SOAP_TYPE_timg__ImagingPresetType
#define SOAP_TYPE_timg__ImagingPresetType (1439)
/* timg:ImagingPresetType */
enum timg__ImagingPresetType {
	timg__ImagingPresetType__Custom = 0,
	timg__ImagingPresetType__ClearWeather = 1,
	timg__ImagingPresetType__Cloudy = 2,
	timg__ImagingPresetType__Fog = 3,
	timg__ImagingPresetType__Rain = 4,
	timg__ImagingPresetType__Snowing = 5,
	timg__ImagingPresetType__Snow = 6,
	timg__ImagingPresetType__WDR = 7,
	timg__ImagingPresetType__Shade = 8,
	timg__ImagingPresetType__Night = 9,
	timg__ImagingPresetType__Indoor = 10,
	timg__ImagingPresetType__Fluorescent = 11,
	timg__ImagingPresetType__Incandescent = 12,
	timg__ImagingPresetType__Sodium_x0028Natrium_x0029 = 13,
	timg__ImagingPresetType__Sunrise_x0028Horizon_x0029 = 14,
	timg__ImagingPresetType__Sunset_x0028Rear_x0029 = 15,
	timg__ImagingPresetType__ExtremeHot = 16,
	timg__ImagingPresetType__ExtremeCold = 17,
	timg__ImagingPresetType__Underwater = 18,
	timg__ImagingPresetType__CloseUp = 19,
	timg__ImagingPresetType__Motion = 20,
	timg__ImagingPresetType__FlickerFree50 = 21,
	timg__ImagingPresetType__FlickerFree60 = 22
};
#endif

/* onvif.h:4699 */
#ifndef SOAP_TYPE_tr2__ConfigurationEnumeration
#define SOAP_TYPE_tr2__ConfigurationEnumeration (1441)
/* tr2:ConfigurationEnumeration */
enum tr2__ConfigurationEnumeration {
	tr2__ConfigurationEnumeration__All = 0,
	tr2__ConfigurationEnumeration__VideoSource = 1,
	tr2__ConfigurationEnumeration__VideoEncoder = 2,
	tr2__ConfigurationEnumeration__AudioSource = 3,
	tr2__ConfigurationEnumeration__AudioEncoder = 4,
	tr2__ConfigurationEnumeration__AudioOutput = 5,
	tr2__ConfigurationEnumeration__AudioDecoder = 6,
	tr2__ConfigurationEnumeration__Metadata = 7,
	tr2__ConfigurationEnumeration__Analytics = 8,
	tr2__ConfigurationEnumeration__PTZ = 9,
	tr2__ConfigurationEnumeration__Receiver = 10
};
#endif

/* onvif.h:4725 */
#ifndef SOAP_TYPE_tr2__TransportProtocol
#define SOAP_TYPE_tr2__TransportProtocol (1443)
/* tr2:TransportProtocol */
enum tr2__TransportProtocol {
	tr2__TransportProtocol__RtspUnicast = 0,
	tr2__TransportProtocol__RtspMulticast = 1,
	tr2__TransportProtocol__RTSP = 2,
	tr2__TransportProtocol__RtspOverHttp = 3
};
#endif

/* onvif.h:4744 */
#ifndef SOAP_TYPE_tr2__MaskType
#define SOAP_TYPE_tr2__MaskType (1445)
/* tr2:MaskType */
enum tr2__MaskType {
	tr2__MaskType__Color = 0,
	tr2__MaskType__Pixelated = 1,
	tr2__MaskType__Blurred = 2
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct wsa__EndpointReferenceType;	/* wsa.h:99 */
struct wsa__ReferencePropertiesType;	/* wsa.h:102 */
struct wsa__ReferenceParametersType;	/* wsa.h:105 */
struct wsa__ServiceNameType;	/* wsa.h:108 */
struct wsa__Relationship;	/* wsa.h:111 */
struct wsdd__HelloType;	/* wsdd10.h:64 */
struct wsdd__ByeType;	/* wsdd10.h:66 */
struct wsdd__ProbeType;	/* wsdd10.h:68 */
struct wsdd__ProbeMatchesType;	/* wsdd10.h:70 */
struct wsdd__ProbeMatchType;	/* wsdd10.h:72 */
struct wsdd__ResolveType;	/* wsdd10.h:74 */
struct wsdd__ResolveMatchesType;	/* wsdd10.h:76 */
struct wsdd__ResolveMatchType;	/* wsdd10.h:78 */
struct wsdd__SecurityType;	/* wsdd10.h:82 */
struct wsdd__SigType;	/* wsdd10.h:84 */
struct wsdd__ScopesType;	/* wsdd10.h:80 */
struct wsdd__AppSequenceType;	/* wsdd10.h:86 */
struct __wsdd__Hello;	/* wsdx.h:67 */
struct __wsdd__Bye;	/* wsdx.h:76 */
struct __wsdd__Probe;	/* wsdx.h:85 */
struct __wsdd__ProbeMatches;	/* wsdx.h:94 */
struct __wsdd__Resolve;	/* wsdx.h:103 */
struct __wsdd__ResolveMatches;	/* wsdx.h:112 */
struct _xop__Include;	/* xop.h:59 */
struct wsa5__EndpointReferenceType;	/* wsa5.h:65 */
struct wsa5__ReferenceParametersType;	/* wsa5.h:68 */
struct wsa5__MetadataType;	/* wsa5.h:71 */
struct wsa5__ProblemActionType;	/* wsa5.h:86 */
struct wsa5__RelatesToType;	/* wsa5.h:74 */
struct chan__ChannelInstanceType;	/* wsa5.h:260 */
class xsd__anyType;	/* onvif.h:222 */
struct SOAP_ENV__Envelope;	/* onvif.h:229 */
class xsd__base64Binary;	/* onvif.h:232 */
class xsd__hexBinary;	/* onvif.h:240 */
class wsdd10__ByeType_;	/* onvif.h:248 */
class wsdd10__HelloType_;	/* onvif.h:255 */
class wsdd10__ProbeMatchesType_;	/* onvif.h:262 */
class wsdd10__ProbeType_;	/* onvif.h:269 */
class wsdd10__ResolveType_;	/* onvif.h:276 */
class wsa5__EndpointReferenceType__;	/* onvif.h:285 */
class SOAP_ENV__Envelope_;	/* onvif.h:292 */
class SOAP_ENV__Fault_;	/* onvif.h:299 */
class xsd__NCName__;	/* onvif.h:309 */
class xsd__QName_;	/* onvif.h:316 */
class xsd__anySimpleType__;	/* onvif.h:326 */
class xsd__anyURI__;	/* onvif.h:336 */
class xsd__base64Binary__;	/* onvif.h:343 */
class xsd__boolean_;	/* onvif.h:350 */
class xsd__dateTime_;	/* onvif.h:357 */
class xsd__double_;	/* onvif.h:364 */
class xsd__duration__;	/* onvif.h:374 */
class xsd__float_;	/* onvif.h:381 */
class xsd__hexBinary__;	/* onvif.h:388 */
class xsd__int_;	/* onvif.h:395 */
class xsd__integer__;	/* onvif.h:405 */
class xsd__nonNegativeInteger__;	/* onvif.h:415 */
class xsd__string_;	/* onvif.h:422 */
class xsd__token__;	/* onvif.h:432 */
class tds__AutoGeoModes_;	/* onvif.h:2753 */
class tds__StorageType_;	/* onvif.h:2788 */
class tt__Name__;	/* onvif.h:2813 */
class tt__RotateMode_;	/* onvif.h:2843 */
class tt__SceneOrientationMode_;	/* onvif.h:2860 */
class tt__SceneOrientationOption_;	/* onvif.h:2882 */
class tt__ViewModes_;	/* onvif.h:2941 */
class tt__VideoEncoding_;	/* onvif.h:2959 */
class tt__Mpeg4Profile_;	/* onvif.h:2976 */
class tt__H264Profile_;	/* onvif.h:2995 */
class tt__VideoEncodingMimeNames_;	/* onvif.h:3018 */
class tt__VideoEncodingProfiles_;	/* onvif.h:3040 */
class tt__AudioEncoding_;	/* onvif.h:3058 */
class tt__AudioEncodingMimeNames_;	/* onvif.h:3085 */
class tt__MetadataCompressionType_;	/* onvif.h:3103 */
class tt__StreamType_;	/* onvif.h:3120 */
class tt__TransportProtocol_;	/* onvif.h:3143 */
class tt__ScopeDefinition_;	/* onvif.h:3160 */
class tt__DiscoveryMode_;	/* onvif.h:3177 */
class tt__NetworkInterfaceConfigPriority__;	/* onvif.h:3190 */
class tt__Duplex_;	/* onvif.h:3207 */
class tt__IANA_IfTypes__;	/* onvif.h:3223 */
class tt__IPv6DHCPConfiguration_;	/* onvif.h:3242 */
class tt__NetworkProtocolType_;	/* onvif.h:3260 */
class tt__NetworkHostType_;	/* onvif.h:3278 */
class tt__IPv4Address__;	/* onvif.h:3290 */
class tt__IPv6Address__;	/* onvif.h:3302 */
class tt__HwAddress__;	/* onvif.h:3314 */
class tt__IPType_;	/* onvif.h:3331 */
class tt__DNSName__;	/* onvif.h:3343 */
class tt__Domain__;	/* onvif.h:3355 */
class tt__IPAddressFilterType_;	/* onvif.h:3372 */
class tt__DynamicDNSType_;	/* onvif.h:3390 */
class tt__Dot11SSIDType__;	/* onvif.h:3403 */
class tt__Dot11StationMode_;	/* onvif.h:3421 */
class tt__Dot11SecurityMode_;	/* onvif.h:3441 */
class tt__Dot11Cipher_;	/* onvif.h:3460 */
class tt__Dot11PSK__;	/* onvif.h:3473 */
class tt__Dot11PSKPassphrase__;	/* onvif.h:3486 */
class tt__Dot11SignalStrength_;	/* onvif.h:3507 */
class tt__Dot11AuthAndMangementSuite_;	/* onvif.h:3526 */
class tt__CapabilityCategory_;	/* onvif.h:3548 */
class tt__SystemLogType_;	/* onvif.h:3577 */
class tt__FactoryDefaultType_;	/* onvif.h:3606 */
class tt__SetDateTimeType_;	/* onvif.h:3631 */
class tt__UserLevel_;	/* onvif.h:3651 */
class tt__RelayLogicalState_;	/* onvif.h:3668 */
class tt__RelayIdleState_;	/* onvif.h:3685 */
class tt__RelayMode_;	/* onvif.h:3702 */
class tt__DigitalIdleState_;	/* onvif.h:3719 */
class tt__EFlipMode_;	/* onvif.h:3737 */
class tt__ReverseMode_;	/* onvif.h:3756 */
class tt__AuxiliaryData__;	/* onvif.h:3769 */
class tt__PTZPresetTourState_;	/* onvif.h:3788 */
class tt__PTZPresetTourDirection_;	/* onvif.h:3806 */
class tt__PTZPresetTourOperation_;	/* onvif.h:3825 */
class tt__MoveAndTrackMethod_;	/* onvif.h:3844 */
class tt__AutoFocusMode_;	/* onvif.h:3861 */
class tt__AFModes_;	/* onvif.h:3881 */
class tt__WideDynamicMode_;	/* onvif.h:3898 */
class tt__BacklightCompensationMode_;	/* onvif.h:3927 */
class tt__ExposurePriority_;	/* onvif.h:3944 */
class tt__ExposureMode_;	/* onvif.h:3961 */
class tt__Enabled_;	/* onvif.h:3978 */
class tt__WhiteBalanceMode_;	/* onvif.h:3995 */
class tt__IrCutFilterMode_;	/* onvif.h:4013 */
class tt__ImageStabilizationMode_;	/* onvif.h:4032 */
class tt__IrCutFilterAutoBoundaryType_;	/* onvif.h:4051 */
class tt__ToneCompensationMode_;	/* onvif.h:4069 */
class tt__DefoggingMode_;	/* onvif.h:4087 */
class tt__ImageSendingType_;	/* onvif.h:4105 */
class tt__PropertyOperation_;	/* onvif.h:4123 */
class tt__Direction_;	/* onvif.h:4141 */
class tt__ReceiverMode_;	/* onvif.h:4180 */
class tt__ReceiverState_;	/* onvif.h:4219 */
class tt__Description__;	/* onvif.h:4231 */
class tt__XPathExpression__;	/* onvif.h:4243 */
class tt__SearchState_;	/* onvif.h:4278 */
class tt__RecordingStatus_;	/* onvif.h:4303 */
class tt__TrackType_;	/* onvif.h:4326 */
class tt__RecordingJobMode__;	/* onvif.h:4338 */
class tt__RecordingJobState__;	/* onvif.h:4350 */
class tt__ModeOfOperation_;	/* onvif.h:4372 */
class tt__AudioClassType_;	/* onvif.h:4396 */
class tt__OSDType_;	/* onvif.h:4414 */
class tt__ReferenceToken__;	/* onvif.h:4434 */
class tt__MoveStatus_;	/* onvif.h:4452 */
class tt__Entity_;	/* onvif.h:4470 */
class wstop__FullTopicExpression__;	/* onvif.h:4511 */
class wstop__ConcreteTopicExpression__;	/* onvif.h:4529 */
class wstop__SimpleTopicExpression__;	/* onvif.h:4546 */
class tev__EventBrokerProtocol_;	/* onvif.h:4589 */
class tev__ConnectionStatus_;	/* onvif.h:4607 */
class timg__ImagingPresetType_;	/* onvif.h:4682 */
class tr2__ConfigurationEnumeration_;	/* onvif.h:4716 */
class tr2__TransportProtocol_;	/* onvif.h:4735 */
class tr2__MaskType_;	/* onvif.h:4753 */
class tt__ReceiverReference__;	/* onvif.h:4773 */
class tt__RecordingReference__;	/* onvif.h:4785 */
class tt__TrackReference__;	/* onvif.h:4797 */
class tt__JobToken__;	/* onvif.h:4809 */
class tt__RecordingJobReference__;	/* onvif.h:4821 */
class _tds__Service_Capabilities;	/* onvif.h:4968 */
class tds__Service;	/* onvif.h:450 */
class tds__DeviceServiceCapabilities;	/* onvif.h:452 */
class tds__NetworkCapabilities;	/* onvif.h:454 */
class tds__SecurityCapabilities;	/* onvif.h:456 */
class tds__SystemCapabilities;	/* onvif.h:458 */
class tds__MiscCapabilities;	/* onvif.h:460 */
class _tds__UserCredential_Extension;	/* onvif.h:5451 */
class tds__UserCredential;	/* onvif.h:462 */
class _tds__StorageConfigurationData_Extension;	/* onvif.h:5506 */
class tds__StorageConfigurationData;	/* onvif.h:464 */
class _tds__GetServices;	/* onvif.h:468 */
class _tds__GetServicesResponse;	/* onvif.h:470 */
class _tds__GetServiceCapabilities;	/* onvif.h:472 */
class _tds__GetServiceCapabilitiesResponse;	/* onvif.h:474 */
class _tds__GetDeviceInformation;	/* onvif.h:476 */
class _tds__GetDeviceInformationResponse;	/* onvif.h:478 */
class _tds__SetSystemDateAndTime;	/* onvif.h:480 */
class _tds__SetSystemDateAndTimeResponse;	/* onvif.h:482 */
class _tds__GetSystemDateAndTime;	/* onvif.h:484 */
class _tds__GetSystemDateAndTimeResponse;	/* onvif.h:486 */
class _tds__SetSystemFactoryDefault;	/* onvif.h:488 */
class _tds__SetSystemFactoryDefaultResponse;	/* onvif.h:490 */
class _tds__UpgradeSystemFirmware;	/* onvif.h:492 */
class _tds__UpgradeSystemFirmwareResponse;	/* onvif.h:494 */
class _tds__SystemReboot;	/* onvif.h:496 */
class _tds__SystemRebootResponse;	/* onvif.h:498 */
class _tds__RestoreSystem;	/* onvif.h:500 */
class _tds__RestoreSystemResponse;	/* onvif.h:502 */
class _tds__GetSystemBackup;	/* onvif.h:504 */
class _tds__GetSystemBackupResponse;	/* onvif.h:506 */
class _tds__GetSystemSupportInformation;	/* onvif.h:508 */
class _tds__GetSystemSupportInformationResponse;	/* onvif.h:510 */
class _tds__GetSystemLog;	/* onvif.h:512 */
class _tds__GetSystemLogResponse;	/* onvif.h:514 */
class _tds__GetScopes;	/* onvif.h:516 */
class _tds__GetScopesResponse;	/* onvif.h:518 */
class _tds__SetScopes;	/* onvif.h:520 */
class _tds__SetScopesResponse;	/* onvif.h:522 */
class _tds__AddScopes;	/* onvif.h:524 */
class _tds__AddScopesResponse;	/* onvif.h:526 */
class _tds__RemoveScopes;	/* onvif.h:528 */
class _tds__RemoveScopesResponse;	/* onvif.h:530 */
class _tds__GetDiscoveryMode;	/* onvif.h:532 */
class _tds__GetDiscoveryModeResponse;	/* onvif.h:534 */
class _tds__SetDiscoveryMode;	/* onvif.h:536 */
class _tds__SetDiscoveryModeResponse;	/* onvif.h:538 */
class _tds__GetRemoteDiscoveryMode;	/* onvif.h:540 */
class _tds__GetRemoteDiscoveryModeResponse;	/* onvif.h:542 */
class _tds__SetRemoteDiscoveryMode;	/* onvif.h:544 */
class _tds__SetRemoteDiscoveryModeResponse;	/* onvif.h:546 */
class _tds__GetDPAddresses;	/* onvif.h:548 */
class _tds__GetDPAddressesResponse;	/* onvif.h:550 */
class _tds__SetDPAddresses;	/* onvif.h:552 */
class _tds__SetDPAddressesResponse;	/* onvif.h:554 */
class _tds__GetEndpointReference;	/* onvif.h:556 */
class _tds__GetEndpointReferenceResponse;	/* onvif.h:558 */
class _tds__GetRemoteUser;	/* onvif.h:560 */
class _tds__GetRemoteUserResponse;	/* onvif.h:562 */
class _tds__SetRemoteUser;	/* onvif.h:564 */
class _tds__SetRemoteUserResponse;	/* onvif.h:566 */
class _tds__GetUsers;	/* onvif.h:568 */
class _tds__GetUsersResponse;	/* onvif.h:570 */
class _tds__CreateUsers;	/* onvif.h:572 */
class _tds__CreateUsersResponse;	/* onvif.h:574 */
class _tds__DeleteUsers;	/* onvif.h:576 */
class _tds__DeleteUsersResponse;	/* onvif.h:578 */
class _tds__SetUser;	/* onvif.h:580 */
class _tds__SetUserResponse;	/* onvif.h:582 */
class _tds__GetWsdlUrl;	/* onvif.h:584 */
class _tds__GetWsdlUrlResponse;	/* onvif.h:586 */
class _tds__GetPasswordComplexityOptions;	/* onvif.h:588 */
class _tds__GetPasswordComplexityOptionsResponse;	/* onvif.h:590 */
class _tds__GetPasswordComplexityConfiguration;	/* onvif.h:592 */
class _tds__GetPasswordComplexityConfigurationResponse;	/* onvif.h:594 */
class _tds__SetPasswordComplexityConfiguration;	/* onvif.h:596 */
class _tds__SetPasswordComplexityConfigurationResponse;	/* onvif.h:598 */
class _tds__GetPasswordHistoryConfiguration;	/* onvif.h:600 */
class _tds__GetPasswordHistoryConfigurationResponse;	/* onvif.h:602 */
class _tds__SetPasswordHistoryConfiguration;	/* onvif.h:604 */
class _tds__SetPasswordHistoryConfigurationResponse;	/* onvif.h:606 */
class _tds__GetAuthFailureWarningOptions;	/* onvif.h:608 */
class _tds__GetAuthFailureWarningOptionsResponse;	/* onvif.h:610 */
class _tds__GetAuthFailureWarningConfiguration;	/* onvif.h:612 */
class _tds__GetAuthFailureWarningConfigurationResponse;	/* onvif.h:614 */
class _tds__SetAuthFailureWarningConfiguration;	/* onvif.h:616 */
class _tds__SetAuthFailureWarningConfigurationResponse;	/* onvif.h:618 */
class _tds__GetCapabilities;	/* onvif.h:620 */
class _tds__GetCapabilitiesResponse;	/* onvif.h:622 */
class _tds__GetHostname;	/* onvif.h:624 */
class _tds__GetHostnameResponse;	/* onvif.h:626 */
class _tds__SetHostname;	/* onvif.h:628 */
class _tds__SetHostnameResponse;	/* onvif.h:630 */
class _tds__SetHostnameFromDHCP;	/* onvif.h:632 */
class _tds__SetHostnameFromDHCPResponse;	/* onvif.h:634 */
class _tds__GetDNS;	/* onvif.h:636 */
class _tds__GetDNSResponse;	/* onvif.h:638 */
class _tds__SetDNS;	/* onvif.h:640 */
class _tds__SetDNSResponse;	/* onvif.h:642 */
class _tds__GetNTP;	/* onvif.h:644 */
class _tds__GetNTPResponse;	/* onvif.h:646 */
class _tds__SetNTP;	/* onvif.h:648 */
class _tds__SetNTPResponse;	/* onvif.h:650 */
class _tds__GetDynamicDNS;	/* onvif.h:652 */
class _tds__GetDynamicDNSResponse;	/* onvif.h:654 */
class _tds__SetDynamicDNS;	/* onvif.h:656 */
class _tds__SetDynamicDNSResponse;	/* onvif.h:658 */
class _tds__GetNetworkInterfaces;	/* onvif.h:660 */
class _tds__GetNetworkInterfacesResponse;	/* onvif.h:662 */
class _tds__SetNetworkInterfaces;	/* onvif.h:664 */
class _tds__SetNetworkInterfacesResponse;	/* onvif.h:666 */
class _tds__GetNetworkProtocols;	/* onvif.h:668 */
class _tds__GetNetworkProtocolsResponse;	/* onvif.h:670 */
class _tds__SetNetworkProtocols;	/* onvif.h:672 */
class _tds__SetNetworkProtocolsResponse;	/* onvif.h:674 */
class _tds__GetNetworkDefaultGateway;	/* onvif.h:676 */
class _tds__GetNetworkDefaultGatewayResponse;	/* onvif.h:678 */
class _tds__SetNetworkDefaultGateway;	/* onvif.h:680 */
class _tds__SetNetworkDefaultGatewayResponse;	/* onvif.h:682 */
class _tds__GetZeroConfiguration;	/* onvif.h:684 */
class _tds__GetZeroConfigurationResponse;	/* onvif.h:686 */
class _tds__SetZeroConfiguration;	/* onvif.h:688 */
class _tds__SetZeroConfigurationResponse;	/* onvif.h:690 */
class _tds__GetIPAddressFilter;	/* onvif.h:692 */
class _tds__GetIPAddressFilterResponse;	/* onvif.h:694 */
class _tds__SetIPAddressFilter;	/* onvif.h:696 */
class _tds__SetIPAddressFilterResponse;	/* onvif.h:698 */
class _tds__AddIPAddressFilter;	/* onvif.h:700 */
class _tds__AddIPAddressFilterResponse;	/* onvif.h:702 */
class _tds__RemoveIPAddressFilter;	/* onvif.h:704 */
class _tds__RemoveIPAddressFilterResponse;	/* onvif.h:706 */
class _tds__GetAccessPolicy;	/* onvif.h:708 */
class _tds__GetAccessPolicyResponse;	/* onvif.h:710 */
class _tds__SetAccessPolicy;	/* onvif.h:712 */
class _tds__SetAccessPolicyResponse;	/* onvif.h:714 */
class _tds__CreateCertificate;	/* onvif.h:716 */
class _tds__CreateCertificateResponse;	/* onvif.h:718 */
class _tds__GetCertificates;	/* onvif.h:720 */
class _tds__GetCertificatesResponse;	/* onvif.h:722 */
class _tds__GetCertificatesStatus;	/* onvif.h:724 */
class _tds__GetCertificatesStatusResponse;	/* onvif.h:726 */
class _tds__SetCertificatesStatus;	/* onvif.h:728 */
class _tds__SetCertificatesStatusResponse;	/* onvif.h:730 */
class _tds__DeleteCertificates;	/* onvif.h:732 */
class _tds__DeleteCertificatesResponse;	/* onvif.h:734 */
class _tds__GetPkcs10Request;	/* onvif.h:736 */
class _tds__GetPkcs10RequestResponse;	/* onvif.h:738 */
class _tds__LoadCertificates;	/* onvif.h:740 */
class _tds__LoadCertificatesResponse;	/* onvif.h:742 */
class _tds__GetClientCertificateMode;	/* onvif.h:744 */
class _tds__GetClientCertificateModeResponse;	/* onvif.h:746 */
class _tds__SetClientCertificateMode;	/* onvif.h:748 */
class _tds__SetClientCertificateModeResponse;	/* onvif.h:750 */
class _tds__GetCACertificates;	/* onvif.h:752 */
class _tds__GetCACertificatesResponse;	/* onvif.h:754 */
class _tds__LoadCertificateWithPrivateKey;	/* onvif.h:756 */
class _tds__LoadCertificateWithPrivateKeyResponse;	/* onvif.h:758 */
class _tds__GetCertificateInformation;	/* onvif.h:760 */
class _tds__GetCertificateInformationResponse;	/* onvif.h:762 */
class _tds__LoadCACertificates;	/* onvif.h:764 */
class _tds__LoadCACertificatesResponse;	/* onvif.h:766 */
class _tds__CreateDot1XConfiguration;	/* onvif.h:768 */
class _tds__CreateDot1XConfigurationResponse;	/* onvif.h:770 */
class _tds__SetDot1XConfiguration;	/* onvif.h:772 */
class _tds__SetDot1XConfigurationResponse;	/* onvif.h:774 */
class _tds__GetDot1XConfiguration;	/* onvif.h:776 */
class _tds__GetDot1XConfigurationResponse;	/* onvif.h:778 */
class _tds__GetDot1XConfigurations;	/* onvif.h:780 */
class _tds__GetDot1XConfigurationsResponse;	/* onvif.h:782 */
class _tds__DeleteDot1XConfiguration;	/* onvif.h:784 */
class _tds__DeleteDot1XConfigurationResponse;	/* onvif.h:786 */
class _tds__GetRelayOutputs;	/* onvif.h:788 */
class _tds__GetRelayOutputsResponse;	/* onvif.h:790 */
class _tds__SetRelayOutputSettings;	/* onvif.h:792 */
class _tds__SetRelayOutputSettingsResponse;	/* onvif.h:794 */
class _tds__SetRelayOutputState;	/* onvif.h:796 */
class _tds__SetRelayOutputStateResponse;	/* onvif.h:798 */
class _tds__SendAuxiliaryCommand;	/* onvif.h:800 */
class _tds__SendAuxiliaryCommandResponse;	/* onvif.h:802 */
class _tds__GetDot11Capabilities;	/* onvif.h:804 */
class _tds__GetDot11CapabilitiesResponse;	/* onvif.h:806 */
class _tds__GetDot11Status;	/* onvif.h:808 */
class _tds__GetDot11StatusResponse;	/* onvif.h:810 */
class _tds__ScanAvailableDot11Networks;	/* onvif.h:812 */
class _tds__ScanAvailableDot11NetworksResponse;	/* onvif.h:814 */
class _tds__GetSystemUris;	/* onvif.h:816 */
class _tds__GetSystemUrisResponse_Extension;	/* onvif.h:9745 */
class _tds__GetSystemUrisResponse;	/* onvif.h:818 */
class _tds__StartFirmwareUpgrade;	/* onvif.h:820 */
class _tds__StartFirmwareUpgradeResponse;	/* onvif.h:822 */
class _tds__StartSystemRestore;	/* onvif.h:824 */
class _tds__StartSystemRestoreResponse;	/* onvif.h:826 */
class _tds__GetStorageConfigurations;	/* onvif.h:828 */
class _tds__GetStorageConfigurationsResponse;	/* onvif.h:830 */
class _tds__CreateStorageConfiguration;	/* onvif.h:832 */
class _tds__CreateStorageConfigurationResponse;	/* onvif.h:834 */
class _tds__GetStorageConfiguration;	/* onvif.h:836 */
class _tds__GetStorageConfigurationResponse;	/* onvif.h:838 */
class _tds__SetStorageConfiguration;	/* onvif.h:840 */
class _tds__SetStorageConfigurationResponse;	/* onvif.h:842 */
class _tds__DeleteStorageConfiguration;	/* onvif.h:844 */
class _tds__DeleteStorageConfigurationResponse;	/* onvif.h:846 */
class _tds__GetGeoLocation;	/* onvif.h:848 */
class _tds__GetGeoLocationResponse;	/* onvif.h:850 */
class _tds__SetGeoLocation;	/* onvif.h:852 */
class _tds__SetGeoLocationResponse;	/* onvif.h:854 */
class _tds__DeleteGeoLocation;	/* onvif.h:856 */
class _tds__DeleteGeoLocationResponse;	/* onvif.h:858 */
class tt__DeviceEntity;	/* onvif.h:860 */
class tt__IntRectangle;	/* onvif.h:862 */
class tt__IntRectangleRange;	/* onvif.h:864 */
class tt__FloatRange;	/* onvif.h:866 */
class tt__DurationRange;	/* onvif.h:868 */
class tt__IntItems;	/* onvif.h:870 */
class tt__FloatItems;	/* onvif.h:872 */
class tt__AnyHolder;	/* onvif.h:874 */
class tt__VideoSourceExtension;	/* onvif.h:878 */
class tt__VideoSourceExtension2;	/* onvif.h:880 */
class tt__Profile;	/* onvif.h:884 */
class tt__ProfileExtension;	/* onvif.h:886 */
class tt__ProfileExtension2;	/* onvif.h:888 */
class tt__ConfigurationEntity;	/* onvif.h:890 */
class tt__VideoSourceConfigurationExtension;	/* onvif.h:894 */
class tt__VideoSourceConfigurationExtension2;	/* onvif.h:896 */
class tt__Rotate;	/* onvif.h:898 */
class tt__RotateExtension;	/* onvif.h:900 */
class tt__LensProjection;	/* onvif.h:902 */
class tt__LensOffset;	/* onvif.h:904 */
class tt__LensDescription;	/* onvif.h:906 */
class tt__VideoSourceConfigurationOptions;	/* onvif.h:908 */
class tt__VideoSourceConfigurationOptionsExtension;	/* onvif.h:910 */
class tt__VideoSourceConfigurationOptionsExtension2;	/* onvif.h:912 */
class tt__RotateOptions;	/* onvif.h:914 */
class tt__RotateOptionsExtension;	/* onvif.h:916 */
class tt__SceneOrientation;	/* onvif.h:918 */
class tt__VideoResolution;	/* onvif.h:922 */
class tt__VideoRateControl;	/* onvif.h:924 */
class tt__Mpeg4Configuration;	/* onvif.h:926 */
class tt__H264Configuration;	/* onvif.h:928 */
class tt__VideoEncoderConfigurationOptions;	/* onvif.h:930 */
class tt__VideoEncoderOptionsExtension;	/* onvif.h:932 */
class tt__VideoEncoderOptionsExtension2;	/* onvif.h:934 */
class tt__JpegOptions;	/* onvif.h:936 */
class tt__Mpeg4Options;	/* onvif.h:940 */
class tt__H264Options;	/* onvif.h:944 */
class tt__VideoResolution2;	/* onvif.h:950 */
class tt__VideoRateControl2;	/* onvif.h:952 */
class tt__VideoEncoder2ConfigurationOptions;	/* onvif.h:954 */
class tt__AudioSourceConfigurationOptions;	/* onvif.h:958 */
class tt__AudioSourceOptionsExtension;	/* onvif.h:960 */
class tt__AudioEncoderConfigurationOptions;	/* onvif.h:964 */
class tt__AudioEncoderConfigurationOption;	/* onvif.h:966 */
class tt__AudioEncoder2ConfigurationOptions;	/* onvif.h:970 */
class tt__MetadataConfigurationExtension;	/* onvif.h:976 */
class tt__PTZFilter;	/* onvif.h:978 */
class _tt__EventSubscription_SubscriptionPolicy;	/* onvif.h:12004 */
class tt__EventSubscription;	/* onvif.h:980 */
class tt__MetadataConfigurationOptions;	/* onvif.h:982 */
class tt__MetadataConfigurationOptionsExtension;	/* onvif.h:984 */
class tt__MetadataConfigurationOptionsExtension2;	/* onvif.h:986 */
class tt__PTZStatusFilterOptions;	/* onvif.h:988 */
class tt__PTZStatusFilterOptionsExtension;	/* onvif.h:990 */
class tt__VideoOutputExtension;	/* onvif.h:994 */
class tt__VideoOutputConfigurationOptions;	/* onvif.h:998 */
class tt__VideoDecoderConfigurationOptions;	/* onvif.h:1000 */
class tt__H264DecOptions;	/* onvif.h:1002 */
class tt__JpegDecOptions;	/* onvif.h:1004 */
class tt__Mpeg4DecOptions;	/* onvif.h:1006 */
class tt__VideoDecoderConfigurationOptionsExtension;	/* onvif.h:1008 */
class tt__AudioOutputConfigurationOptions;	/* onvif.h:1014 */
class tt__AudioDecoderConfigurationOptions;	/* onvif.h:1018 */
class tt__G711DecOptions;	/* onvif.h:1020 */
class tt__AACDecOptions;	/* onvif.h:1022 */
class tt__G726DecOptions;	/* onvif.h:1024 */
class tt__AudioDecoderConfigurationOptionsExtension;	/* onvif.h:1026 */
class tt__MulticastConfiguration;	/* onvif.h:1028 */
class tt__StreamSetup;	/* onvif.h:1030 */
class tt__Transport;	/* onvif.h:1032 */
class tt__MediaUri;	/* onvif.h:1034 */
class tt__Scope;	/* onvif.h:1036 */
class tt__NetworkInterfaceExtension;	/* onvif.h:1040 */
class tt__Dot3Configuration;	/* onvif.h:1042 */
class tt__NetworkInterfaceExtension2;	/* onvif.h:1044 */
class tt__NetworkInterfaceLink;	/* onvif.h:1046 */
class tt__NetworkInterfaceConnectionSetting;	/* onvif.h:1048 */
class tt__NetworkInterfaceInfo;	/* onvif.h:1050 */
class tt__IPv6NetworkInterface;	/* onvif.h:1052 */
class tt__IPv4NetworkInterface;	/* onvif.h:1054 */
class tt__IPv4Configuration;	/* onvif.h:1056 */
class tt__IPv6Configuration;	/* onvif.h:1058 */
class tt__IPv6ConfigurationExtension;	/* onvif.h:1060 */
class tt__NetworkProtocol;	/* onvif.h:1062 */
class tt__NetworkProtocolExtension;	/* onvif.h:1064 */
class tt__NetworkHost;	/* onvif.h:1066 */
class tt__NetworkHostExtension;	/* onvif.h:1068 */
class tt__IPAddress;	/* onvif.h:1070 */
class tt__PrefixedIPv4Address;	/* onvif.h:1072 */
class tt__PrefixedIPv6Address;	/* onvif.h:1074 */
class tt__HostnameInformation;	/* onvif.h:1076 */
class tt__HostnameInformationExtension;	/* onvif.h:1078 */
class tt__DNSInformation;	/* onvif.h:1080 */
class tt__DNSInformationExtension;	/* onvif.h:1082 */
class tt__NTPInformation;	/* onvif.h:1084 */
class tt__NTPInformationExtension;	/* onvif.h:1086 */
class tt__DynamicDNSInformation;	/* onvif.h:1088 */
class tt__DynamicDNSInformationExtension;	/* onvif.h:1090 */
class tt__NetworkInterfaceSetConfiguration;	/* onvif.h:1092 */
class tt__NetworkInterfaceSetConfigurationExtension;	/* onvif.h:1094 */
class tt__IPv6NetworkInterfaceSetConfiguration;	/* onvif.h:1096 */
class tt__IPv4NetworkInterfaceSetConfiguration;	/* onvif.h:1098 */
class tt__NetworkGateway;	/* onvif.h:1100 */
class tt__NetworkZeroConfiguration;	/* onvif.h:1102 */
class tt__NetworkZeroConfigurationExtension;	/* onvif.h:1104 */
class tt__NetworkZeroConfigurationExtension2;	/* onvif.h:1106 */
class tt__IPAddressFilter;	/* onvif.h:1108 */
class tt__IPAddressFilterExtension;	/* onvif.h:1110 */
class tt__Dot11Configuration;	/* onvif.h:1112 */
class tt__Dot11SecurityConfiguration;	/* onvif.h:1114 */
class tt__Dot11SecurityConfigurationExtension;	/* onvif.h:1116 */
class tt__Dot11PSKSet;	/* onvif.h:1118 */
class tt__Dot11PSKSetExtension;	/* onvif.h:1120 */
class tt__NetworkInterfaceSetConfigurationExtension2;	/* onvif.h:1122 */
class tt__Dot11Capabilities;	/* onvif.h:1124 */
class tt__Dot11Status;	/* onvif.h:1126 */
class tt__Dot11AvailableNetworks;	/* onvif.h:1128 */
class tt__Dot11AvailableNetworksExtension;	/* onvif.h:1130 */
class tt__Capabilities;	/* onvif.h:1132 */
class tt__CapabilitiesExtension;	/* onvif.h:1134 */
class tt__CapabilitiesExtension2;	/* onvif.h:1136 */
class tt__AnalyticsCapabilities;	/* onvif.h:1138 */
class tt__DeviceCapabilities;	/* onvif.h:1140 */
class tt__DeviceCapabilitiesExtension;	/* onvif.h:1142 */
class tt__EventCapabilities;	/* onvif.h:1144 */
class tt__IOCapabilities;	/* onvif.h:1146 */
class tt__IOCapabilitiesExtension;	/* onvif.h:1148 */
class tt__IOCapabilitiesExtension2;	/* onvif.h:1150 */
class tt__MediaCapabilities;	/* onvif.h:1152 */
class tt__MediaCapabilitiesExtension;	/* onvif.h:1154 */
class tt__RealTimeStreamingCapabilities;	/* onvif.h:1156 */
class tt__RealTimeStreamingCapabilitiesExtension;	/* onvif.h:1158 */
class tt__ProfileCapabilities;	/* onvif.h:1160 */
class tt__NetworkCapabilities;	/* onvif.h:1162 */
class tt__NetworkCapabilitiesExtension;	/* onvif.h:1164 */
class tt__NetworkCapabilitiesExtension2;	/* onvif.h:1166 */
class tt__SecurityCapabilities;	/* onvif.h:1168 */
class tt__SecurityCapabilitiesExtension;	/* onvif.h:1170 */
class tt__SecurityCapabilitiesExtension2;	/* onvif.h:1172 */
class tt__SystemCapabilities;	/* onvif.h:1174 */
class tt__SystemCapabilitiesExtension;	/* onvif.h:1176 */
class tt__SystemCapabilitiesExtension2;	/* onvif.h:1178 */
class tt__OnvifVersion;	/* onvif.h:1180 */
class tt__ImagingCapabilities;	/* onvif.h:1182 */
class tt__PTZCapabilities;	/* onvif.h:1184 */
class tt__DeviceIOCapabilities;	/* onvif.h:1186 */
class tt__DisplayCapabilities;	/* onvif.h:1188 */
class tt__RecordingCapabilities;	/* onvif.h:1190 */
class tt__SearchCapabilities;	/* onvif.h:1192 */
class tt__ReplayCapabilities;	/* onvif.h:1194 */
class tt__ReceiverCapabilities;	/* onvif.h:1196 */
class tt__AnalyticsDeviceCapabilities;	/* onvif.h:1198 */
class tt__AnalyticsDeviceExtension;	/* onvif.h:1200 */
class tt__SystemLog;	/* onvif.h:1202 */
class tt__SupportInformation;	/* onvif.h:1204 */
class tt__BinaryData;	/* onvif.h:1206 */
class tt__AttachmentData;	/* onvif.h:1208 */
class tt__BackupFile;	/* onvif.h:1210 */
class tt__SystemLogUriList;	/* onvif.h:1212 */
class tt__SystemLogUri;	/* onvif.h:1214 */
class tt__SystemDateTime;	/* onvif.h:1216 */
class tt__SystemDateTimeExtension;	/* onvif.h:1218 */
class tt__DateTime;	/* onvif.h:1220 */
class tt__Date;	/* onvif.h:1222 */
class tt__Time;	/* onvif.h:1224 */
class tt__TimeZone;	/* onvif.h:1226 */
class tt__RemoteUser;	/* onvif.h:1228 */
class tt__User;	/* onvif.h:1230 */
class tt__UserExtension;	/* onvif.h:1232 */
class tt__CertificateGenerationParameters;	/* onvif.h:1234 */
class tt__CertificateGenerationParametersExtension;	/* onvif.h:1236 */
class tt__Certificate;	/* onvif.h:1238 */
class tt__CertificateStatus;	/* onvif.h:1240 */
class tt__CertificateWithPrivateKey;	/* onvif.h:1242 */
class tt__CertificateInformation;	/* onvif.h:1244 */
class tt__CertificateInformationExtension;	/* onvif.h:1248 */
class tt__Dot1XConfiguration;	/* onvif.h:1250 */
class tt__Dot1XConfigurationExtension;	/* onvif.h:1252 */
class tt__EAPMethodConfiguration;	/* onvif.h:1254 */
class tt__EapMethodExtension;	/* onvif.h:1256 */
class tt__TLSConfiguration;	/* onvif.h:1258 */
class tt__GenericEapPwdConfigurationExtension;	/* onvif.h:1260 */
class tt__RelayOutputSettings;	/* onvif.h:1262 */
class tt__PTZNodeExtension;	/* onvif.h:1270 */
class tt__PTZNodeExtension2;	/* onvif.h:1272 */
class tt__PTZPresetTourSupported;	/* onvif.h:1274 */
class tt__PTZPresetTourSupportedExtension;	/* onvif.h:1276 */
class tt__PTZConfigurationExtension;	/* onvif.h:1280 */
class tt__PTZConfigurationExtension2;	/* onvif.h:1282 */
class tt__PTControlDirection;	/* onvif.h:1284 */
class tt__PTControlDirectionExtension;	/* onvif.h:1286 */
class tt__EFlip;	/* onvif.h:1288 */
class tt__Reverse;	/* onvif.h:1290 */
class tt__PTZConfigurationOptions;	/* onvif.h:1292 */
class tt__PTZConfigurationOptions2;	/* onvif.h:1294 */
class tt__PTControlDirectionOptions;	/* onvif.h:1296 */
class tt__PTControlDirectionOptionsExtension;	/* onvif.h:1298 */
class tt__EFlipOptions;	/* onvif.h:1300 */
class tt__EFlipOptionsExtension;	/* onvif.h:1302 */
class tt__ReverseOptions;	/* onvif.h:1304 */
class tt__ReverseOptionsExtension;	/* onvif.h:1306 */
class tt__PanTiltLimits;	/* onvif.h:1308 */
class tt__ZoomLimits;	/* onvif.h:1310 */
class tt__PTZSpaces;	/* onvif.h:1312 */
class tt__PTZSpacesExtension;	/* onvif.h:1314 */
class tt__Space2DDescription;	/* onvif.h:1316 */
class tt__Space1DDescription;	/* onvif.h:1318 */
class tt__PTZSpeed;	/* onvif.h:1320 */
class tt__PTZPreset;	/* onvif.h:1322 */
class tt__PresetTour;	/* onvif.h:1324 */
class tt__PTZPresetTourExtension;	/* onvif.h:1326 */
class tt__PTZPresetTourSpot;	/* onvif.h:1328 */
class tt__PTZPresetTourSpotExtension;	/* onvif.h:1330 */
union _tt__union_PTZPresetTourPresetDetail;	/* onvif.h:17757 */
class tt__PTZPresetTourPresetDetail;	/* onvif.h:1332 */
class tt__PTZPresetTourTypeExtension;	/* onvif.h:1334 */
class tt__PTZPresetTourStatus;	/* onvif.h:1336 */
class tt__PTZPresetTourStatusExtension;	/* onvif.h:1338 */
class tt__PTZPresetTourStartingCondition;	/* onvif.h:1340 */
class tt__PTZPresetTourStartingConditionExtension;	/* onvif.h:1342 */
class tt__PTZPresetTourOptions;	/* onvif.h:1344 */
class tt__PTZPresetTourSpotOptions;	/* onvif.h:1346 */
class tt__PTZPresetTourPresetDetailOptions;	/* onvif.h:1348 */
class tt__PTZPresetTourPresetDetailOptionsExtension;	/* onvif.h:1350 */
class tt__PTZPresetTourStartingConditionOptions;	/* onvif.h:1352 */
class tt__PTZPresetTourStartingConditionOptionsExtension;	/* onvif.h:1354 */
class tt__ImagingStatus;	/* onvif.h:1356 */
class tt__FocusStatus;	/* onvif.h:1358 */
class tt__FocusConfiguration;	/* onvif.h:1360 */
class tt__ImagingSettings;	/* onvif.h:1362 */
class tt__ImagingSettingsExtension;	/* onvif.h:1364 */
class tt__Exposure;	/* onvif.h:1366 */
class tt__WideDynamicRange;	/* onvif.h:1368 */
class tt__BacklightCompensation;	/* onvif.h:1370 */
class tt__ImagingOptions;	/* onvif.h:1372 */
class tt__WideDynamicRangeOptions;	/* onvif.h:1374 */
class tt__BacklightCompensationOptions;	/* onvif.h:1376 */
class tt__FocusOptions;	/* onvif.h:1378 */
class tt__ExposureOptions;	/* onvif.h:1380 */
class tt__WhiteBalanceOptions;	/* onvif.h:1382 */
class tt__FocusMove;	/* onvif.h:1384 */
class tt__AbsoluteFocus;	/* onvif.h:1386 */
class tt__RelativeFocus;	/* onvif.h:1388 */
class tt__ContinuousFocus;	/* onvif.h:1390 */
class tt__MoveOptions;	/* onvif.h:1392 */
class tt__AbsoluteFocusOptions;	/* onvif.h:1394 */
class tt__RelativeFocusOptions;	/* onvif.h:1396 */
class tt__ContinuousFocusOptions;	/* onvif.h:1398 */
class tt__WhiteBalance;	/* onvif.h:1400 */
class tt__ImagingStatus20;	/* onvif.h:1402 */
class tt__ImagingStatus20Extension;	/* onvif.h:1404 */
class tt__FocusStatus20;	/* onvif.h:1406 */
class tt__FocusStatus20Extension;	/* onvif.h:1408 */
class tt__ImagingSettings20;	/* onvif.h:1410 */
class tt__ImagingSettingsExtension20;	/* onvif.h:1412 */
class tt__ImagingSettingsExtension202;	/* onvif.h:1414 */
class tt__ImagingSettingsExtension203;	/* onvif.h:1416 */
class tt__ImagingSettingsExtension204;	/* onvif.h:1418 */
class tt__ImageStabilization;	/* onvif.h:1420 */
class tt__ImageStabilizationExtension;	/* onvif.h:1422 */
class tt__IrCutFilterAutoAdjustment;	/* onvif.h:1424 */
class tt__IrCutFilterAutoAdjustmentExtension;	/* onvif.h:1426 */
class tt__WideDynamicRange20;	/* onvif.h:1428 */
class tt__BacklightCompensation20;	/* onvif.h:1430 */
class tt__Exposure20;	/* onvif.h:1432 */
class tt__ToneCompensation;	/* onvif.h:1434 */
class tt__ToneCompensationExtension;	/* onvif.h:1436 */
class tt__Defogging;	/* onvif.h:1438 */
class tt__DefoggingExtension;	/* onvif.h:1440 */
class tt__NoiseReduction;	/* onvif.h:1442 */
class tt__ImagingOptions20;	/* onvif.h:1444 */
class tt__ImagingOptions20Extension;	/* onvif.h:1446 */
class tt__ImagingOptions20Extension2;	/* onvif.h:1448 */
class tt__ImagingOptions20Extension3;	/* onvif.h:1450 */
class tt__ImagingOptions20Extension4;	/* onvif.h:1452 */
class tt__ImageStabilizationOptions;	/* onvif.h:1454 */
class tt__ImageStabilizationOptionsExtension;	/* onvif.h:1456 */
class tt__IrCutFilterAutoAdjustmentOptions;	/* onvif.h:1458 */
class tt__IrCutFilterAutoAdjustmentOptionsExtension;	/* onvif.h:1460 */
class tt__WideDynamicRangeOptions20;	/* onvif.h:1462 */
class tt__BacklightCompensationOptions20;	/* onvif.h:1464 */
class tt__ExposureOptions20;	/* onvif.h:1466 */
class tt__MoveOptions20;	/* onvif.h:1468 */
class tt__RelativeFocusOptions20;	/* onvif.h:1470 */
class tt__WhiteBalance20;	/* onvif.h:1472 */
class tt__WhiteBalance20Extension;	/* onvif.h:1474 */
class tt__FocusConfiguration20;	/* onvif.h:1476 */
class tt__FocusConfiguration20Extension;	/* onvif.h:1478 */
class tt__WhiteBalanceOptions20;	/* onvif.h:1480 */
class tt__WhiteBalanceOptions20Extension;	/* onvif.h:1482 */
class tt__FocusOptions20;	/* onvif.h:1484 */
class tt__FocusOptions20Extension;	/* onvif.h:1486 */
class tt__ToneCompensationOptions;	/* onvif.h:1488 */
class tt__DefoggingOptions;	/* onvif.h:1490 */
class tt__NoiseReductionOptions;	/* onvif.h:1492 */
class tt__MessageExtension;	/* onvif.h:1494 */
class _tt__ItemList_SimpleItem;	/* onvif.h:20762 */
class _tt__ItemList_ElementItem;	/* onvif.h:20794 */
class tt__ItemList;	/* onvif.h:1496 */
class tt__ItemListExtension;	/* onvif.h:1498 */
class tt__MessageDescription;	/* onvif.h:1500 */
class tt__MessageDescriptionExtension;	/* onvif.h:1502 */
class _tt__ItemListDescription_SimpleItemDescription;	/* onvif.h:20953 */
class _tt__ItemListDescription_ElementItemDescription;	/* onvif.h:20981 */
class tt__ItemListDescription;	/* onvif.h:1504 */
class tt__ItemListDescriptionExtension;	/* onvif.h:1506 */
class tt__Polyline;	/* onvif.h:1508 */
class tt__AnalyticsEngineConfiguration;	/* onvif.h:1510 */
class tt__AnalyticsEngineConfigurationExtension;	/* onvif.h:1512 */
class tt__RuleEngineConfiguration;	/* onvif.h:1514 */
class tt__RuleEngineConfigurationExtension;	/* onvif.h:1516 */
class tt__Config;	/* onvif.h:1518 */
class _tt__ConfigDescription_Messages;	/* onvif.h:21229 */
class tt__ConfigDescription;	/* onvif.h:1520 */
class tt__ConfigDescriptionExtension;	/* onvif.h:1522 */
class tt__SupportedRules;	/* onvif.h:1524 */
class tt__SupportedRulesExtension;	/* onvif.h:1526 */
class tt__SupportedAnalyticsModules;	/* onvif.h:1528 */
class tt__SupportedAnalyticsModulesExtension;	/* onvif.h:1530 */
class tt__PolylineArray;	/* onvif.h:1532 */
class tt__PolylineArrayExtension;	/* onvif.h:1534 */
class tt__PolylineArrayConfiguration;	/* onvif.h:1536 */
class tt__MotionExpression;	/* onvif.h:1538 */
class tt__MotionExpressionConfiguration;	/* onvif.h:1540 */
class tt__CellLayout;	/* onvif.h:1542 */
class tt__PaneConfiguration;	/* onvif.h:1544 */
class tt__PaneLayout;	/* onvif.h:1546 */
class tt__Layout;	/* onvif.h:1548 */
class tt__LayoutExtension;	/* onvif.h:1550 */
class tt__CodingCapabilities;	/* onvif.h:1552 */
class tt__LayoutOptions;	/* onvif.h:1554 */
class tt__LayoutOptionsExtension;	/* onvif.h:1556 */
class tt__PaneLayoutOptions;	/* onvif.h:1558 */
class tt__PaneOptionExtension;	/* onvif.h:1560 */
class tt__Receiver;	/* onvif.h:1562 */
class tt__ReceiverConfiguration;	/* onvif.h:1564 */
class tt__ReceiverStateInformation;	/* onvif.h:1566 */
class tt__SourceReference;	/* onvif.h:1568 */
class tt__DateTimeRange;	/* onvif.h:1570 */
class tt__RecordingSummary;	/* onvif.h:1572 */
class tt__SearchScope;	/* onvif.h:1574 */
class tt__SearchScopeExtension;	/* onvif.h:1576 */
class tt__PTZPositionFilter;	/* onvif.h:1580 */
class tt__MetadataFilter;	/* onvif.h:1582 */
class tt__FindRecordingResultList;	/* onvif.h:1584 */
class tt__FindEventResultList;	/* onvif.h:1586 */
class tt__FindEventResult;	/* onvif.h:1588 */
class tt__FindPTZPositionResultList;	/* onvif.h:1590 */
class tt__FindPTZPositionResult;	/* onvif.h:1592 */
class tt__FindMetadataResultList;	/* onvif.h:1594 */
class tt__FindMetadataResult;	/* onvif.h:1596 */
class tt__RecordingInformation;	/* onvif.h:1598 */
class tt__RecordingSourceInformation;	/* onvif.h:1600 */
class tt__TrackInformation;	/* onvif.h:1602 */
class tt__MediaAttributes;	/* onvif.h:1604 */
class tt__TrackAttributes;	/* onvif.h:1606 */
class tt__TrackAttributesExtension;	/* onvif.h:1608 */
class tt__VideoAttributes;	/* onvif.h:1610 */
class tt__AudioAttributes;	/* onvif.h:1612 */
class tt__MetadataAttributes;	/* onvif.h:1614 */
class tt__RecordingConfiguration;	/* onvif.h:1616 */
class tt__TrackConfiguration;	/* onvif.h:1618 */
class tt__GetRecordingsResponseItem;	/* onvif.h:1620 */
class tt__GetTracksResponseList;	/* onvif.h:1622 */
class tt__GetTracksResponseItem;	/* onvif.h:1624 */
class tt__RecordingJobConfiguration;	/* onvif.h:1626 */
class tt__RecordingJobConfigurationExtension;	/* onvif.h:1628 */
class tt__RecordingJobSource;	/* onvif.h:1630 */
class tt__RecordingJobSourceExtension;	/* onvif.h:1632 */
class tt__RecordingJobTrack;	/* onvif.h:1634 */
class tt__RecordingJobStateInformation;	/* onvif.h:1636 */
class tt__RecordingJobStateInformationExtension;	/* onvif.h:1638 */
class tt__RecordingJobStateSource;	/* onvif.h:1640 */
class tt__RecordingJobStateTracks;	/* onvif.h:1642 */
class tt__RecordingJobStateTrack;	/* onvif.h:1644 */
class tt__GetRecordingJobsResponseItem;	/* onvif.h:1646 */
class tt__ReplayConfiguration;	/* onvif.h:1648 */
class tt__AnalyticsDeviceEngineConfiguration;	/* onvif.h:1652 */
class tt__AnalyticsDeviceEngineConfigurationExtension;	/* onvif.h:1654 */
class tt__EngineConfiguration;	/* onvif.h:1656 */
class tt__AnalyticsEngineInputInfo;	/* onvif.h:1658 */
class tt__AnalyticsEngineInputInfoExtension;	/* onvif.h:1660 */
class tt__SourceIdentification;	/* onvif.h:1664 */
class tt__SourceIdentificationExtension;	/* onvif.h:1666 */
class tt__MetadataInput;	/* onvif.h:1668 */
class tt__MetadataInputExtension;	/* onvif.h:1670 */
class tt__AnalyticsStateInformation;	/* onvif.h:1674 */
class tt__AnalyticsState;	/* onvif.h:1676 */
class tt__ActionEngineEventPayload;	/* onvif.h:1678 */
class tt__ActionEngineEventPayloadExtension;	/* onvif.h:1680 */
class tt__AudioClassCandidate;	/* onvif.h:1682 */
class tt__AudioClassDescriptor;	/* onvif.h:1684 */
class tt__AudioClassDescriptorExtension;	/* onvif.h:1686 */
class tt__ActiveConnection;	/* onvif.h:1688 */
class tt__ProfileStatus;	/* onvif.h:1690 */
class tt__ProfileStatusExtension;	/* onvif.h:1692 */
class tt__OSDPosConfiguration;	/* onvif.h:1696 */
class tt__OSDPosConfigurationExtension;	/* onvif.h:1698 */
class tt__OSDColor;	/* onvif.h:1700 */
class tt__OSDTextConfiguration;	/* onvif.h:1702 */
class tt__OSDTextConfigurationExtension;	/* onvif.h:1704 */
class tt__OSDImgConfiguration;	/* onvif.h:1706 */
class tt__OSDImgConfigurationExtension;	/* onvif.h:1708 */
class tt__ColorspaceRange;	/* onvif.h:1710 */
class tt__ColorOptions;	/* onvif.h:1712 */
class tt__OSDColorOptions;	/* onvif.h:1714 */
class tt__OSDColorOptionsExtension;	/* onvif.h:1716 */
class tt__OSDTextOptions;	/* onvif.h:1718 */
class tt__OSDTextOptionsExtension;	/* onvif.h:1720 */
class tt__OSDImgOptions;	/* onvif.h:1722 */
class tt__OSDImgOptionsExtension;	/* onvif.h:1724 */
class tt__OSDConfigurationExtension;	/* onvif.h:1728 */
class tt__MaximumNumberOfOSDs;	/* onvif.h:1730 */
class tt__OSDConfigurationOptions;	/* onvif.h:1732 */
class tt__OSDConfigurationOptionsExtension;	/* onvif.h:1734 */
class tt__FileProgress;	/* onvif.h:1736 */
class tt__ArrayOfFileProgress;	/* onvif.h:1738 */
class tt__ArrayOfFileProgressExtension;	/* onvif.h:1740 */
class tt__StorageReferencePath;	/* onvif.h:1742 */
class tt__StorageReferencePathExtension;	/* onvif.h:1744 */
class tt__PolygonOptions;	/* onvif.h:1746 */
class tt__IntRange;	/* onvif.h:1748 */
class tt__Vector2D;	/* onvif.h:1750 */
class tt__Vector1D;	/* onvif.h:1752 */
class tt__PTZVector;	/* onvif.h:1754 */
class tt__PTZStatus;	/* onvif.h:1756 */
class tt__PTZMoveStatus;	/* onvif.h:1758 */
class tt__Vector;	/* onvif.h:1760 */
class tt__Rectangle;	/* onvif.h:1762 */
class tt__Polygon;	/* onvif.h:1764 */
class tt__Color;	/* onvif.h:1766 */
class tt__ColorCovariance;	/* onvif.h:1768 */
class _tt__ColorDescriptor_ColorCluster;	/* onvif.h:25716 */
class tt__ColorDescriptor;	/* onvif.h:1770 */
class tt__Transformation;	/* onvif.h:1772 */
class tt__TransformationExtension;	/* onvif.h:1774 */
class tt__GeoLocation;	/* onvif.h:1776 */
class tt__GeoOrientation;	/* onvif.h:1778 */
class tt__LocalLocation;	/* onvif.h:1780 */
class tt__LocalOrientation;	/* onvif.h:1782 */
class tt__LocationEntity;	/* onvif.h:1784 */
class _tt__StringItems;	/* onvif.h:1786 */
class _tt__Message;	/* onvif.h:1788 */
class wsnt__QueryExpressionType;	/* onvif.h:1790 */
class wsnt__TopicExpressionType;	/* onvif.h:1792 */
class wsnt__FilterType;	/* onvif.h:1794 */
class wsnt__SubscriptionPolicyType;	/* onvif.h:1796 */
class _wsnt__NotificationMessageHolderType_Message;	/* onvif.h:26271 */
class wsnt__NotificationMessageHolderType;	/* onvif.h:1798 */
class _wsnt__NotificationProducerRP;	/* onvif.h:1840 */
class _wsnt__SubscriptionManagerRP;	/* onvif.h:1842 */
class _wsnt__Notify;	/* onvif.h:1844 */
class _wsnt__UseRaw;	/* onvif.h:1846 */
class _wsnt__Subscribe_SubscriptionPolicy;	/* onvif.h:26425 */
class _wsnt__Subscribe;	/* onvif.h:1848 */
class _wsnt__SubscribeResponse;	/* onvif.h:1850 */
class _wsnt__GetCurrentMessage;	/* onvif.h:1852 */
class _wsnt__GetCurrentMessageResponse;	/* onvif.h:1854 */
class _wsnt__GetMessages;	/* onvif.h:1856 */
class _wsnt__GetMessagesResponse;	/* onvif.h:1858 */
class _wsnt__DestroyPullPoint;	/* onvif.h:1860 */
class _wsnt__DestroyPullPointResponse;	/* onvif.h:1862 */
class _wsnt__CreatePullPoint;	/* onvif.h:1864 */
class _wsnt__CreatePullPointResponse;	/* onvif.h:1866 */
class _wsnt__Renew;	/* onvif.h:1868 */
class _wsnt__RenewResponse;	/* onvif.h:1870 */
class _wsnt__Unsubscribe;	/* onvif.h:1872 */
class _wsnt__UnsubscribeResponse;	/* onvif.h:1874 */
class _wsnt__PauseSubscription;	/* onvif.h:1876 */
class _wsnt__PauseSubscriptionResponse;	/* onvif.h:1878 */
class _wsnt__ResumeSubscription;	/* onvif.h:1880 */
class _wsnt__ResumeSubscriptionResponse;	/* onvif.h:1882 */
class _wsrfbf__BaseFaultType_ErrorCode;	/* onvif.h:27006 */
class _wsrfbf__BaseFaultType_Description;	/* onvif.h:27029 */
class _wsrfbf__BaseFaultType_FaultCause;	/* onvif.h:27047 */
class wsrfbf__BaseFaultType;	/* onvif.h:1884 */
class wstop__Documentation;	/* onvif.h:1886 */
class wstop__ExtensibleDocumented;	/* onvif.h:1888 */
class wstop__QueryExpressionType;	/* onvif.h:1890 */
class trt__Capabilities;	/* onvif.h:1898 */
class trt__ProfileCapabilities;	/* onvif.h:1900 */
class trt__StreamingCapabilities;	/* onvif.h:1902 */
class trt__VideoSourceMode;	/* onvif.h:1904 */
class trt__VideoSourceModeExtension;	/* onvif.h:1906 */
class _trt__GetServiceCapabilities;	/* onvif.h:1908 */
class _trt__GetServiceCapabilitiesResponse;	/* onvif.h:1910 */
class _trt__GetVideoSources;	/* onvif.h:1912 */
class _trt__GetVideoSourcesResponse;	/* onvif.h:1914 */
class _trt__GetAudioSources;	/* onvif.h:1916 */
class _trt__GetAudioSourcesResponse;	/* onvif.h:1918 */
class _trt__GetAudioOutputs;	/* onvif.h:1920 */
class _trt__GetAudioOutputsResponse;	/* onvif.h:1922 */
class _trt__CreateProfile;	/* onvif.h:1924 */
class _trt__CreateProfileResponse;	/* onvif.h:1926 */
class _trt__GetProfile;	/* onvif.h:1928 */
class _trt__GetProfileResponse;	/* onvif.h:1930 */
class _trt__GetProfiles;	/* onvif.h:1932 */
class _trt__GetProfilesResponse;	/* onvif.h:1934 */
class _trt__AddVideoEncoderConfiguration;	/* onvif.h:1936 */
class _trt__AddVideoEncoderConfigurationResponse;	/* onvif.h:1938 */
class _trt__RemoveVideoEncoderConfiguration;	/* onvif.h:1940 */
class _trt__RemoveVideoEncoderConfigurationResponse;	/* onvif.h:1942 */
class _trt__AddVideoSourceConfiguration;	/* onvif.h:1944 */
class _trt__AddVideoSourceConfigurationResponse;	/* onvif.h:1946 */
class _trt__RemoveVideoSourceConfiguration;	/* onvif.h:1948 */
class _trt__RemoveVideoSourceConfigurationResponse;	/* onvif.h:1950 */
class _trt__AddAudioEncoderConfiguration;	/* onvif.h:1952 */
class _trt__AddAudioEncoderConfigurationResponse;	/* onvif.h:1954 */
class _trt__RemoveAudioEncoderConfiguration;	/* onvif.h:1956 */
class _trt__RemoveAudioEncoderConfigurationResponse;	/* onvif.h:1958 */
class _trt__AddAudioSourceConfiguration;	/* onvif.h:1960 */
class _trt__AddAudioSourceConfigurationResponse;	/* onvif.h:1962 */
class _trt__RemoveAudioSourceConfiguration;	/* onvif.h:1964 */
class _trt__RemoveAudioSourceConfigurationResponse;	/* onvif.h:1966 */
class _trt__AddPTZConfiguration;	/* onvif.h:1968 */
class _trt__AddPTZConfigurationResponse;	/* onvif.h:1970 */
class _trt__RemovePTZConfiguration;	/* onvif.h:1972 */
class _trt__RemovePTZConfigurationResponse;	/* onvif.h:1974 */
class _trt__AddVideoAnalyticsConfiguration;	/* onvif.h:1976 */
class _trt__AddVideoAnalyticsConfigurationResponse;	/* onvif.h:1978 */
class _trt__RemoveVideoAnalyticsConfiguration;	/* onvif.h:1980 */
class _trt__RemoveVideoAnalyticsConfigurationResponse;	/* onvif.h:1982 */
class _trt__AddMetadataConfiguration;	/* onvif.h:1984 */
class _trt__AddMetadataConfigurationResponse;	/* onvif.h:1986 */
class _trt__RemoveMetadataConfiguration;	/* onvif.h:1988 */
class _trt__RemoveMetadataConfigurationResponse;	/* onvif.h:1990 */
class _trt__AddAudioOutputConfiguration;	/* onvif.h:1992 */
class _trt__AddAudioOutputConfigurationResponse;	/* onvif.h:1994 */
class _trt__RemoveAudioOutputConfiguration;	/* onvif.h:1996 */
class _trt__RemoveAudioOutputConfigurationResponse;	/* onvif.h:1998 */
class _trt__AddAudioDecoderConfiguration;	/* onvif.h:2000 */
class _trt__AddAudioDecoderConfigurationResponse;	/* onvif.h:2002 */
class _trt__RemoveAudioDecoderConfiguration;	/* onvif.h:2004 */
class _trt__RemoveAudioDecoderConfigurationResponse;	/* onvif.h:2006 */
class _trt__DeleteProfile;	/* onvif.h:2008 */
class _trt__DeleteProfileResponse;	/* onvif.h:2010 */
class _trt__GetVideoEncoderConfigurations;	/* onvif.h:2012 */
class _trt__GetVideoEncoderConfigurationsResponse;	/* onvif.h:2014 */
class _trt__GetVideoSourceConfigurations;	/* onvif.h:2016 */
class _trt__GetVideoSourceConfigurationsResponse;	/* onvif.h:2018 */
class _trt__GetAudioEncoderConfigurations;	/* onvif.h:2020 */
class _trt__GetAudioEncoderConfigurationsResponse;	/* onvif.h:2022 */
class _trt__GetAudioSourceConfigurations;	/* onvif.h:2024 */
class _trt__GetAudioSourceConfigurationsResponse;	/* onvif.h:2026 */
class _trt__GetVideoAnalyticsConfigurations;	/* onvif.h:2028 */
class _trt__GetVideoAnalyticsConfigurationsResponse;	/* onvif.h:2030 */
class _trt__GetMetadataConfigurations;	/* onvif.h:2032 */
class _trt__GetMetadataConfigurationsResponse;	/* onvif.h:2034 */
class _trt__GetAudioOutputConfigurations;	/* onvif.h:2036 */
class _trt__GetAudioOutputConfigurationsResponse;	/* onvif.h:2038 */
class _trt__GetAudioDecoderConfigurations;	/* onvif.h:2040 */
class _trt__GetAudioDecoderConfigurationsResponse;	/* onvif.h:2042 */
class _trt__GetVideoSourceConfiguration;	/* onvif.h:2044 */
class _trt__GetVideoSourceConfigurationResponse;	/* onvif.h:2046 */
class _trt__GetVideoEncoderConfiguration;	/* onvif.h:2048 */
class _trt__GetVideoEncoderConfigurationResponse;	/* onvif.h:2050 */
class _trt__GetAudioSourceConfiguration;	/* onvif.h:2052 */
class _trt__GetAudioSourceConfigurationResponse;	/* onvif.h:2054 */
class _trt__GetAudioEncoderConfiguration;	/* onvif.h:2056 */
class _trt__GetAudioEncoderConfigurationResponse;	/* onvif.h:2058 */
class _trt__GetVideoAnalyticsConfiguration;	/* onvif.h:2060 */
class _trt__GetVideoAnalyticsConfigurationResponse;	/* onvif.h:2062 */
class _trt__GetMetadataConfiguration;	/* onvif.h:2064 */
class _trt__GetMetadataConfigurationResponse;	/* onvif.h:2066 */
class _trt__GetAudioOutputConfiguration;	/* onvif.h:2068 */
class _trt__GetAudioOutputConfigurationResponse;	/* onvif.h:2070 */
class _trt__GetAudioDecoderConfiguration;	/* onvif.h:2072 */
class _trt__GetAudioDecoderConfigurationResponse;	/* onvif.h:2074 */
class _trt__GetCompatibleVideoEncoderConfigurations;	/* onvif.h:2076 */
class _trt__GetCompatibleVideoEncoderConfigurationsResponse;	/* onvif.h:2078 */
class _trt__GetCompatibleVideoSourceConfigurations;	/* onvif.h:2080 */
class _trt__GetCompatibleVideoSourceConfigurationsResponse;	/* onvif.h:2082 */
class _trt__GetCompatibleAudioEncoderConfigurations;	/* onvif.h:2084 */
class _trt__GetCompatibleAudioEncoderConfigurationsResponse;	/* onvif.h:2086 */
class _trt__GetCompatibleAudioSourceConfigurations;	/* onvif.h:2088 */
class _trt__GetCompatibleAudioSourceConfigurationsResponse;	/* onvif.h:2090 */
class _trt__GetCompatibleVideoAnalyticsConfigurations;	/* onvif.h:2092 */
class _trt__GetCompatibleVideoAnalyticsConfigurationsResponse;	/* onvif.h:2094 */
class _trt__GetCompatibleMetadataConfigurations;	/* onvif.h:2096 */
class _trt__GetCompatibleMetadataConfigurationsResponse;	/* onvif.h:2098 */
class _trt__GetCompatibleAudioOutputConfigurations;	/* onvif.h:2100 */
class _trt__GetCompatibleAudioOutputConfigurationsResponse;	/* onvif.h:2102 */
class _trt__GetCompatibleAudioDecoderConfigurations;	/* onvif.h:2104 */
class _trt__GetCompatibleAudioDecoderConfigurationsResponse;	/* onvif.h:2106 */
class _trt__SetVideoEncoderConfiguration;	/* onvif.h:2108 */
class _trt__SetVideoEncoderConfigurationResponse;	/* onvif.h:2110 */
class _trt__SetVideoSourceConfiguration;	/* onvif.h:2112 */
class _trt__SetVideoSourceConfigurationResponse;	/* onvif.h:2114 */
class _trt__SetAudioEncoderConfiguration;	/* onvif.h:2116 */
class _trt__SetAudioEncoderConfigurationResponse;	/* onvif.h:2118 */
class _trt__SetAudioSourceConfiguration;	/* onvif.h:2120 */
class _trt__SetAudioSourceConfigurationResponse;	/* onvif.h:2122 */
class _trt__SetVideoAnalyticsConfiguration;	/* onvif.h:2124 */
class _trt__SetVideoAnalyticsConfigurationResponse;	/* onvif.h:2126 */
class _trt__SetMetadataConfiguration;	/* onvif.h:2128 */
class _trt__SetMetadataConfigurationResponse;	/* onvif.h:2130 */
class _trt__SetAudioOutputConfiguration;	/* onvif.h:2132 */
class _trt__SetAudioOutputConfigurationResponse;	/* onvif.h:2134 */
class _trt__SetAudioDecoderConfiguration;	/* onvif.h:2136 */
class _trt__SetAudioDecoderConfigurationResponse;	/* onvif.h:2138 */
class _trt__GetVideoSourceConfigurationOptions;	/* onvif.h:2140 */
class _trt__GetVideoSourceConfigurationOptionsResponse;	/* onvif.h:2142 */
class _trt__GetVideoEncoderConfigurationOptions;	/* onvif.h:2144 */
class _trt__GetVideoEncoderConfigurationOptionsResponse;	/* onvif.h:2146 */
class _trt__GetAudioSourceConfigurationOptions;	/* onvif.h:2148 */
class _trt__GetAudioSourceConfigurationOptionsResponse;	/* onvif.h:2150 */
class _trt__GetAudioEncoderConfigurationOptions;	/* onvif.h:2152 */
class _trt__GetAudioEncoderConfigurationOptionsResponse;	/* onvif.h:2154 */
class _trt__GetMetadataConfigurationOptions;	/* onvif.h:2156 */
class _trt__GetMetadataConfigurationOptionsResponse;	/* onvif.h:2158 */
class _trt__GetAudioOutputConfigurationOptions;	/* onvif.h:2160 */
class _trt__GetAudioOutputConfigurationOptionsResponse;	/* onvif.h:2162 */
class _trt__GetAudioDecoderConfigurationOptions;	/* onvif.h:2164 */
class _trt__GetAudioDecoderConfigurationOptionsResponse;	/* onvif.h:2166 */
class _trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* onvif.h:2168 */
class _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse;	/* onvif.h:2170 */
class _trt__GetStreamUri;	/* onvif.h:2172 */
class _trt__GetStreamUriResponse;	/* onvif.h:2174 */
class _trt__StartMulticastStreaming;	/* onvif.h:2176 */
class _trt__StartMulticastStreamingResponse;	/* onvif.h:2178 */
class _trt__StopMulticastStreaming;	/* onvif.h:2180 */
class _trt__StopMulticastStreamingResponse;	/* onvif.h:2182 */
class _trt__SetSynchronizationPoint;	/* onvif.h:2184 */
class _trt__SetSynchronizationPointResponse;	/* onvif.h:2186 */
class _trt__GetSnapshotUri;	/* onvif.h:2188 */
class _trt__GetSnapshotUriResponse;	/* onvif.h:2190 */
class _trt__GetVideoSourceModes;	/* onvif.h:2192 */
class _trt__GetVideoSourceModesResponse;	/* onvif.h:2194 */
class _trt__SetVideoSourceMode;	/* onvif.h:2196 */
class _trt__SetVideoSourceModeResponse;	/* onvif.h:2198 */
class _trt__GetOSDs;	/* onvif.h:2200 */
class _trt__GetOSDsResponse;	/* onvif.h:2202 */
class _trt__GetOSD;	/* onvif.h:2204 */
class _trt__GetOSDResponse;	/* onvif.h:2206 */
class _trt__SetOSD;	/* onvif.h:2208 */
class _trt__SetOSDResponse;	/* onvif.h:2210 */
class _trt__GetOSDOptions;	/* onvif.h:2212 */
class _trt__GetOSDOptionsResponse;	/* onvif.h:2214 */
class _trt__CreateOSD;	/* onvif.h:2216 */
class _trt__CreateOSDResponse;	/* onvif.h:2218 */
class _trt__DeleteOSD;	/* onvif.h:2220 */
class _trt__DeleteOSDResponse;	/* onvif.h:2222 */
class tev__Capabilities;	/* onvif.h:2224 */
class tev__EventBrokerConfig;	/* onvif.h:2226 */
class _tev__GetServiceCapabilities;	/* onvif.h:2228 */
class _tev__GetServiceCapabilitiesResponse;	/* onvif.h:2230 */
class _tev__CreatePullPointSubscription_SubscriptionPolicy;	/* onvif.h:31809 */
class _tev__CreatePullPointSubscription;	/* onvif.h:2232 */
class _tev__CreatePullPointSubscriptionResponse;	/* onvif.h:2234 */
class _tev__PullMessages;	/* onvif.h:2236 */
class _tev__PullMessagesResponse;	/* onvif.h:2238 */
class _tev__PullMessagesFaultResponse;	/* onvif.h:2240 */
class _tev__Seek;	/* onvif.h:2242 */
class _tev__SeekResponse;	/* onvif.h:2244 */
class _tev__SetSynchronizationPoint;	/* onvif.h:2246 */
class _tev__SetSynchronizationPointResponse;	/* onvif.h:2248 */
class _tev__GetEventProperties;	/* onvif.h:2250 */
class _tev__GetEventPropertiesResponse;	/* onvif.h:2252 */
class _tev__AddEventBroker;	/* onvif.h:2257 */
class _tev__AddEventBrokerResponse;	/* onvif.h:2259 */
class _tev__DeleteEventBroker;	/* onvif.h:2261 */
class _tev__DeleteEventBrokerResponse;	/* onvif.h:2263 */
class _tev__GetEventBrokers;	/* onvif.h:2265 */
class _tev__GetEventBrokersResponse;	/* onvif.h:2267 */
class timg__Capabilities;	/* onvif.h:2273 */
class timg__ImagingPreset;	/* onvif.h:2275 */
class _timg__GetServiceCapabilities;	/* onvif.h:2277 */
class _timg__GetServiceCapabilitiesResponse;	/* onvif.h:2279 */
class _timg__GetImagingSettings;	/* onvif.h:2281 */
class _timg__GetImagingSettingsResponse;	/* onvif.h:2283 */
class _timg__SetImagingSettings;	/* onvif.h:2285 */
class _timg__SetImagingSettingsResponse;	/* onvif.h:2287 */
class _timg__GetOptions;	/* onvif.h:2289 */
class _timg__GetOptionsResponse;	/* onvif.h:2291 */
class _timg__Move;	/* onvif.h:2293 */
class _timg__MoveResponse;	/* onvif.h:2295 */
class _timg__GetMoveOptions;	/* onvif.h:2297 */
class _timg__GetMoveOptionsResponse;	/* onvif.h:2299 */
class _timg__Stop;	/* onvif.h:2301 */
class _timg__StopResponse;	/* onvif.h:2303 */
class _timg__GetStatus;	/* onvif.h:2305 */
class _timg__GetStatusResponse;	/* onvif.h:2307 */
class _timg__GetPresets;	/* onvif.h:2309 */
class _timg__GetPresetsResponse;	/* onvif.h:2311 */
class _timg__GetCurrentPreset;	/* onvif.h:2313 */
class _timg__GetCurrentPresetResponse;	/* onvif.h:2315 */
class _timg__SetCurrentPreset;	/* onvif.h:2317 */
class _timg__SetCurrentPresetResponse;	/* onvif.h:2319 */
class tr2__Capabilities2;	/* onvif.h:2321 */
class tr2__ProfileCapabilities;	/* onvif.h:2323 */
class tr2__StreamingCapabilities;	/* onvif.h:2325 */
class tr2__ConfigurationRef;	/* onvif.h:2327 */
class tr2__ConfigurationSet;	/* onvif.h:2331 */
class tr2__MediaProfile;	/* onvif.h:2333 */
class tr2__GetConfiguration;	/* onvif.h:2335 */
class tr2__SetConfigurationResponse;	/* onvif.h:2337 */
class tr2__EncoderInstance;	/* onvif.h:2339 */
class tr2__EncoderInstanceInfo;	/* onvif.h:2341 */
class tr2__StartStopMulticastStreaming;	/* onvif.h:2343 */
class tr2__VideoSourceMode;	/* onvif.h:2345 */
class tr2__Mask;	/* onvif.h:2347 */
class tr2__MaskOptions;	/* onvif.h:2349 */
class _tr2__GetServiceCapabilities;	/* onvif.h:2351 */
class _tr2__GetServiceCapabilitiesResponse;	/* onvif.h:2353 */
class _tr2__CreateProfile;	/* onvif.h:2355 */
class _tr2__CreateProfileResponse;	/* onvif.h:2357 */
class _tr2__GetProfiles;	/* onvif.h:2359 */
class _tr2__GetProfilesResponse;	/* onvif.h:2361 */
class _tr2__AddConfiguration;	/* onvif.h:2363 */
class _tr2__AddConfigurationResponse;	/* onvif.h:2365 */
class _tr2__RemoveConfiguration;	/* onvif.h:2367 */
class _tr2__RemoveConfigurationResponse;	/* onvif.h:2369 */
class _tr2__DeleteProfile;	/* onvif.h:2371 */
class _tr2__DeleteProfileResponse;	/* onvif.h:2373 */
class _tr2__GetVideoEncoderConfigurationsResponse;	/* onvif.h:2375 */
class _tr2__GetVideoSourceConfigurationsResponse;	/* onvif.h:2377 */
class _tr2__GetAudioEncoderConfigurationsResponse;	/* onvif.h:2379 */
class _tr2__GetAudioSourceConfigurationsResponse;	/* onvif.h:2381 */
class _tr2__GetAnalyticsConfigurationsResponse;	/* onvif.h:2383 */
class _tr2__GetMetadataConfigurationsResponse;	/* onvif.h:2385 */
class _tr2__GetAudioOutputConfigurationsResponse;	/* onvif.h:2387 */
class _tr2__GetAudioDecoderConfigurationsResponse;	/* onvif.h:2389 */
class _tr2__SetVideoEncoderConfiguration;	/* onvif.h:2391 */
class _tr2__SetVideoSourceConfiguration;	/* onvif.h:2393 */
class _tr2__SetAudioEncoderConfiguration;	/* onvif.h:2395 */
class _tr2__SetAudioSourceConfiguration;	/* onvif.h:2397 */
class _tr2__SetMetadataConfiguration;	/* onvif.h:2399 */
class _tr2__SetAudioOutputConfiguration;	/* onvif.h:2401 */
class _tr2__SetAudioDecoderConfiguration;	/* onvif.h:2403 */
class _tr2__GetVideoSourceConfigurationOptionsResponse;	/* onvif.h:2405 */
class _tr2__GetVideoEncoderConfigurationOptionsResponse;	/* onvif.h:2407 */
class _tr2__GetAudioSourceConfigurationOptionsResponse;	/* onvif.h:2409 */
class _tr2__GetAudioEncoderConfigurationOptionsResponse;	/* onvif.h:2411 */
class _tr2__GetMetadataConfigurationOptionsResponse;	/* onvif.h:2413 */
class _tr2__GetAudioOutputConfigurationOptionsResponse;	/* onvif.h:2415 */
class _tr2__GetAudioDecoderConfigurationOptionsResponse;	/* onvif.h:2417 */
class _tr2__GetVideoEncoderInstances;	/* onvif.h:2419 */
class _tr2__GetVideoEncoderInstancesResponse;	/* onvif.h:2421 */
class _tr2__GetStreamUri;	/* onvif.h:2423 */
class _tr2__GetStreamUriResponse;	/* onvif.h:2425 */
class _tr2__SetSynchronizationPoint;	/* onvif.h:2427 */
class _tr2__SetSynchronizationPointResponse;	/* onvif.h:2429 */
class _tr2__GetSnapshotUri;	/* onvif.h:2431 */
class _tr2__GetSnapshotUriResponse;	/* onvif.h:2433 */
class _tr2__GetVideoSourceModes;	/* onvif.h:2435 */
class _tr2__GetVideoSourceModesResponse;	/* onvif.h:2437 */
class _tr2__SetVideoSourceMode;	/* onvif.h:2439 */
class _tr2__SetVideoSourceModeResponse;	/* onvif.h:2441 */
class _tr2__GetOSDs;	/* onvif.h:2443 */
class _tr2__GetOSDsResponse;	/* onvif.h:2445 */
class _tr2__SetOSD;	/* onvif.h:2447 */
class _tr2__GetOSDOptions;	/* onvif.h:2449 */
class _tr2__GetOSDOptionsResponse;	/* onvif.h:2451 */
class _tr2__CreateOSD;	/* onvif.h:2453 */
class _tr2__CreateOSDResponse;	/* onvif.h:2455 */
class _tr2__DeleteOSD;	/* onvif.h:2457 */
class _tr2__GetMasks;	/* onvif.h:2459 */
class _tr2__GetMasksResponse;	/* onvif.h:2461 */
class _tr2__SetMask;	/* onvif.h:2463 */
class _tr2__GetMaskOptions;	/* onvif.h:2465 */
class _tr2__GetMaskOptionsResponse;	/* onvif.h:2467 */
class _tr2__CreateMask;	/* onvif.h:2469 */
class _tr2__CreateMaskResponse;	/* onvif.h:2471 */
class _tr2__DeleteMask;	/* onvif.h:2473 */
class tptz__Capabilities;	/* onvif.h:2475 */
class _tptz__GetServiceCapabilities;	/* onvif.h:2477 */
class _tptz__GetServiceCapabilitiesResponse;	/* onvif.h:2479 */
class _tptz__GetNodes;	/* onvif.h:2481 */
class _tptz__GetNodesResponse;	/* onvif.h:2483 */
class _tptz__GetNode;	/* onvif.h:2485 */
class _tptz__GetNodeResponse;	/* onvif.h:2487 */
class _tptz__GetConfigurations;	/* onvif.h:2489 */
class _tptz__GetConfigurationsResponse;	/* onvif.h:2491 */
class _tptz__GetConfiguration;	/* onvif.h:2493 */
class _tptz__GetConfigurationResponse;	/* onvif.h:2495 */
class _tptz__SetConfiguration;	/* onvif.h:2497 */
struct __tptz__SetConfigurationResponse_sequence;	/* onvif.h:35759 */
class _tptz__SetConfigurationResponse;	/* onvif.h:2499 */
class _tptz__GetConfigurationOptions;	/* onvif.h:2501 */
class _tptz__GetConfigurationOptionsResponse;	/* onvif.h:2503 */
class _tptz__SendAuxiliaryCommand;	/* onvif.h:2505 */
class _tptz__SendAuxiliaryCommandResponse;	/* onvif.h:2507 */
class _tptz__GetPresets;	/* onvif.h:2509 */
class _tptz__GetPresetsResponse;	/* onvif.h:2511 */
class _tptz__SetPreset;	/* onvif.h:2513 */
class _tptz__SetPresetResponse;	/* onvif.h:2515 */
class _tptz__RemovePreset;	/* onvif.h:2517 */
class _tptz__RemovePresetResponse;	/* onvif.h:2519 */
class _tptz__GotoPreset;	/* onvif.h:2521 */
class _tptz__GotoPresetResponse;	/* onvif.h:2523 */
class _tptz__GetStatus;	/* onvif.h:2525 */
class _tptz__GetStatusResponse;	/* onvif.h:2527 */
class _tptz__GotoHomePosition;	/* onvif.h:2529 */
class _tptz__GotoHomePositionResponse;	/* onvif.h:2531 */
class _tptz__SetHomePosition;	/* onvif.h:2533 */
class _tptz__SetHomePositionResponse;	/* onvif.h:2535 */
class _tptz__ContinuousMove;	/* onvif.h:2537 */
class _tptz__ContinuousMoveResponse;	/* onvif.h:2539 */
class _tptz__RelativeMove;	/* onvif.h:2541 */
class _tptz__RelativeMoveResponse;	/* onvif.h:2543 */
class _tptz__AbsoluteMove;	/* onvif.h:2545 */
class _tptz__AbsoluteMoveResponse;	/* onvif.h:2547 */
class _tptz__GeoMove;	/* onvif.h:2549 */
class _tptz__GeoMoveResponse;	/* onvif.h:2551 */
class _tptz__Stop;	/* onvif.h:2553 */
class _tptz__StopResponse;	/* onvif.h:2555 */
class _tptz__GetPresetTours;	/* onvif.h:2557 */
class _tptz__GetPresetToursResponse;	/* onvif.h:2559 */
class _tptz__GetPresetTour;	/* onvif.h:2561 */
class _tptz__GetPresetTourResponse;	/* onvif.h:2563 */
class _tptz__GetPresetTourOptions;	/* onvif.h:2565 */
class _tptz__GetPresetTourOptionsResponse;	/* onvif.h:2567 */
class _tptz__CreatePresetTour;	/* onvif.h:2569 */
class _tptz__CreatePresetTourResponse;	/* onvif.h:2571 */
class _tptz__ModifyPresetTour;	/* onvif.h:2573 */
class _tptz__ModifyPresetTourResponse;	/* onvif.h:2575 */
class _tptz__OperatePresetTour;	/* onvif.h:2577 */
class _tptz__OperatePresetTourResponse;	/* onvif.h:2579 */
class _tptz__RemovePresetTour;	/* onvif.h:2581 */
class _tptz__RemovePresetTourResponse;	/* onvif.h:2583 */
class _tptz__GetCompatibleConfigurations;	/* onvif.h:2585 */
class _tptz__GetCompatibleConfigurationsResponse;	/* onvif.h:2587 */
class _tptz__MoveAndStartTracking;	/* onvif.h:2589 */
class _tptz__MoveAndStartTrackingResponse;	/* onvif.h:2591 */
class tds__StorageConfiguration;	/* onvif.h:466 */
class tt__VideoSource;	/* onvif.h:876 */
class tt__AudioSource;	/* onvif.h:882 */
class tt__VideoSourceConfiguration;	/* onvif.h:892 */
class tt__VideoEncoderConfiguration;	/* onvif.h:920 */
class tt__JpegOptions2;	/* onvif.h:938 */
class tt__Mpeg4Options2;	/* onvif.h:942 */
class tt__H264Options2;	/* onvif.h:946 */
class tt__VideoEncoder2Configuration;	/* onvif.h:948 */
class tt__AudioSourceConfiguration;	/* onvif.h:956 */
class tt__AudioEncoderConfiguration;	/* onvif.h:962 */
class tt__AudioEncoder2Configuration;	/* onvif.h:968 */
class tt__VideoAnalyticsConfiguration;	/* onvif.h:972 */
class tt__MetadataConfiguration;	/* onvif.h:974 */
class tt__VideoOutput;	/* onvif.h:992 */
class tt__VideoOutputConfiguration;	/* onvif.h:996 */
class tt__AudioOutput;	/* onvif.h:1010 */
class tt__AudioOutputConfiguration;	/* onvif.h:1012 */
class tt__AudioDecoderConfiguration;	/* onvif.h:1016 */
class tt__NetworkInterface;	/* onvif.h:1038 */
class tt__CertificateUsage;	/* onvif.h:1246 */
class tt__RelayOutput;	/* onvif.h:1264 */
class tt__DigitalInput;	/* onvif.h:1266 */
class tt__PTZNode;	/* onvif.h:1268 */
class tt__PTZConfiguration;	/* onvif.h:1278 */
class tt__EventFilter;	/* onvif.h:1578 */
class tt__AnalyticsEngine;	/* onvif.h:1650 */
class tt__AnalyticsEngineInput;	/* onvif.h:1662 */
class tt__AnalyticsEngineControl;	/* onvif.h:1672 */
class tt__OSDConfiguration;	/* onvif.h:1726 */
class wsnt__SubscribeCreationFailedFaultType;	/* onvif.h:1800 */
class wsnt__InvalidFilterFaultType;	/* onvif.h:1802 */
class wsnt__TopicExpressionDialectUnknownFaultType;	/* onvif.h:1804 */
class wsnt__InvalidTopicExpressionFaultType;	/* onvif.h:1806 */
class wsnt__TopicNotSupportedFaultType;	/* onvif.h:1808 */
class wsnt__MultipleTopicsSpecifiedFaultType;	/* onvif.h:1810 */
class wsnt__InvalidProducerPropertiesExpressionFaultType;	/* onvif.h:1812 */
class wsnt__InvalidMessageContentExpressionFaultType;	/* onvif.h:1814 */
class wsnt__UnrecognizedPolicyRequestFaultType;	/* onvif.h:1816 */
class wsnt__UnsupportedPolicyRequestFaultType;	/* onvif.h:1818 */
class wsnt__NotifyMessageNotSupportedFaultType;	/* onvif.h:1820 */
class wsnt__UnacceptableInitialTerminationTimeFaultType;	/* onvif.h:1822 */
class wsnt__NoCurrentMessageOnTopicFaultType;	/* onvif.h:1824 */
class wsnt__UnableToGetMessagesFaultType;	/* onvif.h:1826 */
class wsnt__UnableToDestroyPullPointFaultType;	/* onvif.h:1828 */
class wsnt__UnableToCreatePullPointFaultType;	/* onvif.h:1830 */
class wsnt__UnacceptableTerminationTimeFaultType;	/* onvif.h:1832 */
class wsnt__UnableToDestroySubscriptionFaultType;	/* onvif.h:1834 */
class wsnt__PauseFailedFaultType;	/* onvif.h:1836 */
class wsnt__ResumeFailedFaultType;	/* onvif.h:1838 */
class _wstop__TopicNamespaceType_Topic;	/* onvif.h:40856 */
class wstop__TopicNamespaceType;	/* onvif.h:1892 */
class wstop__TopicType;	/* onvif.h:1894 */
class wstop__TopicSetType;	/* onvif.h:1896 */
class wsrfr__ResourceUnknownFaultType;	/* onvif.h:2269 */
class wsrfr__ResourceUnavailableFaultType;	/* onvif.h:2271 */
class tr2__ReceiverConfiguration;	/* onvif.h:2329 */
class tt__OSDReference;	/* onvif.h:1694 */
struct __tdn__Hello;	/* onvif.h:42658 */
struct __tdn__Bye;	/* onvif.h:42725 */
struct __tdn__Probe;	/* onvif.h:42792 */
struct __tds__GetServices;	/* onvif.h:42876 */
struct __tds__GetServiceCapabilities;	/* onvif.h:42945 */
struct __tds__GetDeviceInformation;	/* onvif.h:43013 */
struct __tds__SetSystemDateAndTime;	/* onvif.h:43095 */
struct __tds__GetSystemDateAndTime;	/* onvif.h:43169 */
struct __tds__SetSystemFactoryDefault;	/* onvif.h:43237 */
struct __tds__UpgradeSystemFirmware;	/* onvif.h:43311 */
struct __tds__SystemReboot;	/* onvif.h:43379 */
struct __tds__RestoreSystem;	/* onvif.h:43455 */
struct __tds__GetSystemBackup;	/* onvif.h:43530 */
struct __tds__GetSystemLog;	/* onvif.h:43599 */
struct __tds__GetSystemSupportInformation;	/* onvif.h:43667 */
struct __tds__GetScopes;	/* onvif.h:43750 */
struct __tds__SetScopes;	/* onvif.h:43826 */
struct __tds__AddScopes;	/* onvif.h:43898 */
struct __tds__RemoveScopes;	/* onvif.h:43972 */
struct __tds__GetDiscoveryMode;	/* onvif.h:44044 */
struct __tds__SetDiscoveryMode;	/* onvif.h:44117 */
struct __tds__GetRemoteDiscoveryMode;	/* onvif.h:44191 */
struct __tds__SetRemoteDiscoveryMode;	/* onvif.h:44265 */
struct __tds__GetDPAddresses;	/* onvif.h:44337 */
struct __tds__GetEndpointReference;	/* onvif.h:44411 */
struct __tds__GetRemoteUser;	/* onvif.h:44485 */
struct __tds__SetRemoteUser;	/* onvif.h:44564 */
struct __tds__GetUsers;	/* onvif.h:44636 */
struct __tds__CreateUsers;	/* onvif.h:44716 */
struct __tds__DeleteUsers;	/* onvif.h:44791 */
struct __tds__SetUser;	/* onvif.h:44864 */
struct __tds__GetWsdlUrl;	/* onvif.h:44933 */
struct __tds__GetPasswordComplexityOptions;	/* onvif.h:45002 */
struct __tds__GetPasswordComplexityConfiguration;	/* onvif.h:45070 */
struct __tds__SetPasswordComplexityConfiguration;	/* onvif.h:45138 */
struct __tds__GetPasswordHistoryConfiguration;	/* onvif.h:45206 */
struct __tds__SetPasswordHistoryConfiguration;	/* onvif.h:45274 */
struct __tds__GetAuthFailureWarningOptions;	/* onvif.h:45343 */
struct __tds__GetAuthFailureWarningConfiguration;	/* onvif.h:45412 */
struct __tds__SetAuthFailureWarningConfiguration;	/* onvif.h:45480 */
struct __tds__GetCapabilities;	/* onvif.h:45550 */
struct __tds__SetDPAddresses;	/* onvif.h:45623 */
struct __tds__GetHostname;	/* onvif.h:45694 */
struct __tds__SetHostname;	/* onvif.h:45769 */
struct __tds__SetHostnameFromDHCP;	/* onvif.h:45837 */
struct __tds__GetDNS;	/* onvif.h:45907 */
struct __tds__SetDNS;	/* onvif.h:45977 */
struct __tds__GetNTP;	/* onvif.h:46048 */
struct __tds__SetNTP;	/* onvif.h:46126 */
struct __tds__GetDynamicDNS;	/* onvif.h:46198 */
struct __tds__SetDynamicDNS;	/* onvif.h:46270 */
struct __tds__GetNetworkInterfaces;	/* onvif.h:46342 */
struct __tds__SetNetworkInterfaces;	/* onvif.h:46419 */
struct __tds__GetNetworkProtocols;	/* onvif.h:46490 */
struct __tds__SetNetworkProtocols;	/* onvif.h:46561 */
struct __tds__GetNetworkDefaultGateway;	/* onvif.h:46632 */
struct __tds__SetNetworkDefaultGateway;	/* onvif.h:46702 */
struct __tds__GetZeroConfiguration;	/* onvif.h:46777 */
struct __tds__SetZeroConfiguration;	/* onvif.h:46846 */
struct __tds__GetIPAddressFilter;	/* onvif.h:46918 */
struct __tds__SetIPAddressFilter;	/* onvif.h:46992 */
struct __tds__AddIPAddressFilter;	/* onvif.h:47065 */
struct __tds__RemoveIPAddressFilter;	/* onvif.h:47138 */
struct __tds__GetAccessPolicy;	/* onvif.h:47220 */
struct __tds__SetAccessPolicy;	/* onvif.h:47293 */
struct __tds__CreateCertificate;	/* onvif.h:47360 */
struct __tds__GetCertificates;	/* onvif.h:47427 */
struct __tds__GetCertificatesStatus;	/* onvif.h:47494 */
struct __tds__SetCertificatesStatus;	/* onvif.h:47561 */
struct __tds__DeleteCertificates;	/* onvif.h:47628 */
struct __tds__GetPkcs10Request;	/* onvif.h:47695 */
struct __tds__LoadCertificates;	/* onvif.h:47762 */
struct __tds__GetClientCertificateMode;	/* onvif.h:47829 */
struct __tds__SetClientCertificateMode;	/* onvif.h:47896 */
struct __tds__GetRelayOutputs;	/* onvif.h:47966 */
struct __tds__SetRelayOutputSettings;	/* onvif.h:48036 */
struct __tds__SetRelayOutputState;	/* onvif.h:48106 */
struct __tds__SendAuxiliaryCommand;	/* onvif.h:48205 */
struct __tds__GetCACertificates;	/* onvif.h:48272 */
struct __tds__LoadCertificateWithPrivateKey;	/* onvif.h:48339 */
struct __tds__GetCertificateInformation;	/* onvif.h:48406 */
struct __tds__LoadCACertificates;	/* onvif.h:48473 */
struct __tds__CreateDot1XConfiguration;	/* onvif.h:48540 */
struct __tds__SetDot1XConfiguration;	/* onvif.h:48607 */
struct __tds__GetDot1XConfiguration;	/* onvif.h:48674 */
struct __tds__GetDot1XConfigurations;	/* onvif.h:48741 */
struct __tds__DeleteDot1XConfiguration;	/* onvif.h:48808 */
struct __tds__GetDot11Capabilities;	/* onvif.h:48877 */
struct __tds__GetDot11Status;	/* onvif.h:48947 */
struct __tds__ScanAvailableDot11Networks;	/* onvif.h:49017 */
struct __tds__GetSystemUris;	/* onvif.h:49104 */
struct __tds__StartFirmwareUpgrade;	/* onvif.h:49200 */
struct __tds__StartSystemRestore;	/* onvif.h:49295 */
struct __tds__GetStorageConfigurations;	/* onvif.h:49365 */
struct __tds__CreateStorageConfiguration;	/* onvif.h:49436 */
struct __tds__GetStorageConfiguration;	/* onvif.h:49506 */
struct __tds__SetStorageConfiguration;	/* onvif.h:49575 */
struct __tds__DeleteStorageConfiguration;	/* onvif.h:49645 */
struct __tds__GetGeoLocation;	/* onvif.h:49715 */
struct __tds__SetGeoLocation;	/* onvif.h:49785 */
struct __tds__DeleteGeoLocation;	/* onvif.h:49854 */
struct __tev__PullMessages;	/* onvif.h:49953 */
struct __tev__Seek;	/* onvif.h:50034 */
struct __tev__SetSynchronizationPoint;	/* onvif.h:50117 */
struct __tev__Unsubscribe;	/* onvif.h:50195 */
struct __tev__GetServiceCapabilities;	/* onvif.h:50264 */
struct __tev__CreatePullPointSubscription;	/* onvif.h:50374 */
struct __tev__GetEventProperties;	/* onvif.h:50449 */
struct __tev__AddEventBroker;	/* onvif.h:50520 */
struct __tev__DeleteEventBroker;	/* onvif.h:50589 */
struct __tev__GetEventBrokers;	/* onvif.h:50658 */
struct __tev__Renew;	/* onvif.h:50731 */
struct __tev__Unsubscribe_;	/* onvif.h:50804 */
struct __tev__Subscribe;	/* onvif.h:50907 */
struct __tev__GetCurrentMessage;	/* onvif.h:50992 */
struct __tev__Notify;	/* onvif.h:51055 */
struct __tev__GetMessages;	/* onvif.h:51128 */
struct __tev__DestroyPullPoint;	/* onvif.h:51201 */
struct __tev__Notify_;	/* onvif.h:51264 */
struct __tev__CreatePullPoint;	/* onvif.h:51334 */
struct __tev__Renew_;	/* onvif.h:51407 */
struct __tev__Unsubscribe__;	/* onvif.h:51480 */
struct __tev__PauseSubscription;	/* onvif.h:51553 */
struct __tev__ResumeSubscription;	/* onvif.h:51626 */
struct __timg__GetServiceCapabilities;	/* onvif.h:51711 */
struct __timg__GetImagingSettings;	/* onvif.h:51779 */
struct __timg__SetImagingSettings;	/* onvif.h:51847 */
struct __timg__GetOptions;	/* onvif.h:51925 */
struct __timg__Move;	/* onvif.h:52015 */
struct __timg__Stop;	/* onvif.h:52086 */
struct __timg__GetStatus;	/* onvif.h:52156 */
struct __timg__GetMoveOptions;	/* onvif.h:52224 */
struct __timg__GetPresets;	/* onvif.h:52292 */
struct __timg__GetCurrentPreset;	/* onvif.h:52364 */
struct __timg__SetCurrentPreset;	/* onvif.h:52440 */
struct __tptz__GetServiceCapabilities;	/* onvif.h:52524 */
struct __tptz__GetConfigurations;	/* onvif.h:52620 */
struct __tptz__GetPresets;	/* onvif.h:52690 */
struct __tptz__SetPreset;	/* onvif.h:52775 */
struct __tptz__RemovePreset;	/* onvif.h:52849 */
struct __tptz__GotoPreset;	/* onvif.h:52919 */
struct __tptz__GetStatus;	/* onvif.h:52989 */
struct __tptz__GetConfiguration;	/* onvif.h:53086 */
struct __tptz__GetNodes;	/* onvif.h:53164 */
struct __tptz__GetNode;	/* onvif.h:53234 */
struct __tptz__SetConfiguration;	/* onvif.h:53303 */
struct __tptz__GetConfigurationOptions;	/* onvif.h:53382 */
struct __tptz__GotoHomePosition;	/* onvif.h:53451 */
struct __tptz__SetHomePosition;	/* onvif.h:53524 */
struct __tptz__ContinuousMove;	/* onvif.h:53595 */
struct __tptz__RelativeMove;	/* onvif.h:53671 */
struct __tptz__SendAuxiliaryCommand;	/* onvif.h:53743 */
struct __tptz__AbsoluteMove;	/* onvif.h:53818 */
struct __tptz__GeoMove;	/* onvif.h:53898 */
struct __tptz__Stop;	/* onvif.h:53969 */
struct __tptz__GetPresetTours;	/* onvif.h:54037 */
struct __tptz__GetPresetTour;	/* onvif.h:54105 */
struct __tptz__GetPresetTourOptions;	/* onvif.h:54173 */
struct __tptz__CreatePresetTour;	/* onvif.h:54241 */
struct __tptz__ModifyPresetTour;	/* onvif.h:54309 */
struct __tptz__OperatePresetTour;	/* onvif.h:54377 */
struct __tptz__RemovePresetTour;	/* onvif.h:54445 */
struct __tptz__GetCompatibleConfigurations;	/* onvif.h:54521 */
struct __tptz__MoveAndStartTracking;	/* onvif.h:54600 */
struct __tr2__GetServiceCapabilities;	/* onvif.h:54685 */
struct __tr2__CreateProfile;	/* onvif.h:54759 */
struct __tr2__GetProfiles;	/* onvif.h:54836 */
struct __tr2__AddConfiguration;	/* onvif.h:54912 */
struct __tr2__RemoveConfiguration;	/* onvif.h:54983 */
struct __tr2__DeleteProfile;	/* onvif.h:55052 */
struct __tr2__GetVideoSourceConfigurations;	/* onvif.h:55123 */
struct __tr2__GetVideoEncoderConfigurations;	/* onvif.h:55194 */
struct __tr2__GetAudioSourceConfigurations;	/* onvif.h:55265 */
struct __tr2__GetAudioEncoderConfigurations;	/* onvif.h:55336 */
struct __tr2__GetAnalyticsConfigurations;	/* onvif.h:55407 */
struct __tr2__GetMetadataConfigurations;	/* onvif.h:55478 */
struct __tr2__GetAudioOutputConfigurations;	/* onvif.h:55549 */
struct __tr2__GetAudioDecoderConfigurations;	/* onvif.h:55620 */
struct __tr2__SetVideoSourceConfigurationResponse;	/* onvif.h:55692 */
struct __tr2__SetVideoSourceConfiguration;	/* onvif.h:55692 */
struct __tr2__SetVideoEncoderConfigurationResponse;	/* onvif.h:55767 */
struct __tr2__SetVideoEncoderConfiguration;	/* onvif.h:55767 */
struct __tr2__SetAudioSourceConfigurationResponse;	/* onvif.h:55842 */
struct __tr2__SetAudioSourceConfiguration;	/* onvif.h:55842 */
struct __tr2__SetAudioEncoderConfigurationResponse;	/* onvif.h:55916 */
struct __tr2__SetAudioEncoderConfiguration;	/* onvif.h:55916 */
struct __tr2__SetMetadataConfigurationResponse;	/* onvif.h:55990 */
struct __tr2__SetMetadataConfiguration;	/* onvif.h:55990 */
struct __tr2__SetAudioOutputConfigurationResponse;	/* onvif.h:56058 */
struct __tr2__SetAudioOutputConfiguration;	/* onvif.h:56058 */
struct __tr2__SetAudioDecoderConfigurationResponse;	/* onvif.h:56126 */
struct __tr2__SetAudioDecoderConfiguration;	/* onvif.h:56126 */
struct __tr2__GetVideoSourceConfigurationOptions;	/* onvif.h:56200 */
struct __tr2__GetVideoEncoderConfigurationOptions;	/* onvif.h:56278 */
struct __tr2__GetAudioSourceConfigurationOptions;	/* onvif.h:56352 */
struct __tr2__GetAudioEncoderConfigurationOptions;	/* onvif.h:56422 */
struct __tr2__GetMetadataConfigurationOptions;	/* onvif.h:56491 */
struct __tr2__GetAudioOutputConfigurationOptions;	/* onvif.h:56560 */
struct __tr2__GetAudioDecoderConfigurationOptions;	/* onvif.h:56630 */
struct __tr2__GetVideoEncoderInstances;	/* onvif.h:56701 */
struct __tr2__GetStreamUri;	/* onvif.h:56789 */
struct __tr2__StartMulticastStreamingResponse;	/* onvif.h:56866 */
struct __tr2__StartMulticastStreaming;	/* onvif.h:56866 */
struct __tr2__StopMulticastStreamingResponse;	/* onvif.h:56934 */
struct __tr2__StopMulticastStreaming;	/* onvif.h:56934 */
struct __tr2__SetSynchronizationPoint;	/* onvif.h:57019 */
struct __tr2__GetSnapshotUri;	/* onvif.h:57097 */
struct __tr2__GetVideoSourceModes;	/* onvif.h:57167 */
struct __tr2__SetVideoSourceMode;	/* onvif.h:57238 */
struct __tr2__GetOSDs;	/* onvif.h:57317 */
struct __tr2__GetOSDOptions;	/* onvif.h:57385 */
struct __tr2__SetOSDResponse;	/* onvif.h:57453 */
struct __tr2__SetOSD;	/* onvif.h:57453 */
struct __tr2__CreateOSD;	/* onvif.h:57521 */
struct __tr2__DeleteOSDResponse;	/* onvif.h:57589 */
struct __tr2__DeleteOSD;	/* onvif.h:57589 */
struct __tr2__GetMasks;	/* onvif.h:57668 */
struct __tr2__GetMaskOptions;	/* onvif.h:57736 */
struct __tr2__SetMaskResponse;	/* onvif.h:57804 */
struct __tr2__SetMask;	/* onvif.h:57804 */
struct __tr2__CreateMask;	/* onvif.h:57872 */
struct __tr2__DeleteMaskResponse;	/* onvif.h:57940 */
struct __tr2__DeleteMask;	/* onvif.h:57940 */
struct __trt__GetServiceCapabilities;	/* onvif.h:58025 */
struct __trt__GetVideoSources;	/* onvif.h:58093 */
struct __trt__GetAudioSources;	/* onvif.h:58161 */
struct __trt__GetAudioOutputs;	/* onvif.h:58229 */
struct __trt__CreateProfile;	/* onvif.h:58301 */
struct __trt__GetProfile;	/* onvif.h:58370 */
struct __trt__GetProfiles;	/* onvif.h:58443 */
struct __trt__AddVideoEncoderConfiguration;	/* onvif.h:58518 */
struct __trt__AddVideoSourceConfiguration;	/* onvif.h:58589 */
struct __trt__AddAudioEncoderConfiguration;	/* onvif.h:58664 */
struct __trt__AddAudioSourceConfiguration;	/* onvif.h:58735 */
struct __trt__AddPTZConfiguration;	/* onvif.h:58810 */
struct __trt__AddVideoAnalyticsConfiguration;	/* onvif.h:58888 */
struct __trt__AddMetadataConfiguration;	/* onvif.h:58960 */
struct __trt__AddAudioOutputConfiguration;	/* onvif.h:59030 */
struct __trt__AddAudioDecoderConfiguration;	/* onvif.h:59100 */
struct __trt__RemoveVideoEncoderConfiguration;	/* onvif.h:59171 */
struct __trt__RemoveVideoSourceConfiguration;	/* onvif.h:59244 */
struct __trt__RemoveAudioEncoderConfiguration;	/* onvif.h:59316 */
struct __trt__RemoveAudioSourceConfiguration;	/* onvif.h:59390 */
struct __trt__RemovePTZConfiguration;	/* onvif.h:59461 */
struct __trt__RemoveVideoAnalyticsConfiguration;	/* onvif.h:59532 */
struct __trt__RemoveMetadataConfiguration;	/* onvif.h:59602 */
struct __trt__RemoveAudioOutputConfiguration;	/* onvif.h:59672 */
struct __trt__RemoveAudioDecoderConfiguration;	/* onvif.h:59742 */
struct __trt__DeleteProfile;	/* onvif.h:59811 */
struct __trt__GetVideoSourceConfigurations;	/* onvif.h:59881 */
struct __trt__GetVideoEncoderConfigurations;	/* onvif.h:59952 */
struct __trt__GetAudioSourceConfigurations;	/* onvif.h:60023 */
struct __trt__GetAudioEncoderConfigurations;	/* onvif.h:60093 */
struct __trt__GetVideoAnalyticsConfigurations;	/* onvif.h:60163 */
struct __trt__GetMetadataConfigurations;	/* onvif.h:60232 */
struct __trt__GetAudioOutputConfigurations;	/* onvif.h:60301 */
struct __trt__GetAudioDecoderConfigurations;	/* onvif.h:60372 */
struct __trt__GetVideoSourceConfiguration;	/* onvif.h:60441 */
struct __trt__GetVideoEncoderConfiguration;	/* onvif.h:60510 */
struct __trt__GetAudioSourceConfiguration;	/* onvif.h:60579 */
struct __trt__GetAudioEncoderConfiguration;	/* onvif.h:60648 */
struct __trt__GetVideoAnalyticsConfiguration;	/* onvif.h:60717 */
struct __trt__GetMetadataConfiguration;	/* onvif.h:60786 */
struct __trt__GetAudioOutputConfiguration;	/* onvif.h:60855 */
struct __trt__GetAudioDecoderConfiguration;	/* onvif.h:60924 */
struct __trt__GetCompatibleVideoEncoderConfigurations;	/* onvif.h:60996 */
struct __trt__GetCompatibleVideoSourceConfigurations;	/* onvif.h:61070 */
struct __trt__GetCompatibleAudioEncoderConfigurations;	/* onvif.h:61142 */
struct __trt__GetCompatibleAudioSourceConfigurations;	/* onvif.h:61214 */
struct __trt__GetCompatibleVideoAnalyticsConfigurations;	/* onvif.h:61286 */
struct __trt__GetCompatibleMetadataConfigurations;	/* onvif.h:61358 */
struct __trt__GetCompatibleAudioOutputConfigurations;	/* onvif.h:61429 */
struct __trt__GetCompatibleAudioDecoderConfigurations;	/* onvif.h:61500 */
struct __trt__SetVideoSourceConfiguration;	/* onvif.h:61573 */
struct __trt__SetVideoEncoderConfiguration;	/* onvif.h:61650 */
struct __trt__SetAudioSourceConfiguration;	/* onvif.h:61725 */
struct __trt__SetAudioEncoderConfiguration;	/* onvif.h:61801 */
struct __trt__SetVideoAnalyticsConfiguration;	/* onvif.h:61879 */
struct __trt__SetMetadataConfiguration;	/* onvif.h:61956 */
struct __trt__SetAudioOutputConfiguration;	/* onvif.h:62026 */
struct __trt__SetAudioDecoderConfiguration;	/* onvif.h:62096 */
struct __trt__GetVideoSourceConfigurationOptions;	/* onvif.h:62170 */
struct __trt__GetVideoEncoderConfigurationOptions;	/* onvif.h:62252 */
struct __trt__GetAudioSourceConfigurationOptions;	/* onvif.h:62326 */
struct __trt__GetAudioEncoderConfigurationOptions;	/* onvif.h:62396 */
struct __trt__GetMetadataConfigurationOptions;	/* onvif.h:62465 */
struct __trt__GetAudioOutputConfigurationOptions;	/* onvif.h:62534 */
struct __trt__GetAudioDecoderConfigurationOptions;	/* onvif.h:62604 */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* onvif.h:62674 */
struct __trt__GetStreamUri;	/* onvif.h:62765 */
struct __trt__StartMulticastStreaming;	/* onvif.h:62840 */
struct __trt__StopMulticastStreaming;	/* onvif.h:62908 */
struct __trt__SetSynchronizationPoint;	/* onvif.h:62993 */
struct __trt__GetSnapshotUri;	/* onvif.h:63071 */
struct __trt__GetVideoSourceModes;	/* onvif.h:63141 */
struct __trt__SetVideoSourceMode;	/* onvif.h:63212 */
struct __trt__GetOSDs;	/* onvif.h:63280 */
struct __trt__GetOSD;	/* onvif.h:63348 */
struct __trt__GetOSDOptions;	/* onvif.h:63416 */
struct __trt__SetOSD;	/* onvif.h:63484 */
struct __trt__CreateOSD;	/* onvif.h:63552 */
struct __trt__DeleteOSD;	/* onvif.h:63620 */

/* wsa.h:99 */
#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (7)
/* complex XML schema type 'wsa:EndpointReferenceType': */
struct SOAP_CMAC wsa__EndpointReferenceType {
      public:
        /** Required element 'wsa:Address' of XML schema type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa:ReferenceProperties' of XML schema type 'wsa:ReferencePropertiesType' */
        struct wsa__ReferencePropertiesType *ReferenceProperties;
        /** Optional element 'wsa:ReferenceParameters' of XML schema type 'wsa:ReferenceParametersType' */
        struct wsa__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa:PortType' of XML schema type 'xsd:QName' */
        char **PortType;
        /** Optional element 'wsa:ServiceName' of XML schema type 'wsa:ServiceNameType' */
        struct wsa__ServiceNameType *ServiceName;
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__EndpointReferenceType */
        long soap_type() const { return SOAP_TYPE_wsa__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa__EndpointReferenceType() : Address(), ReferenceProperties(), ReferenceParameters(), PortType(), ServiceName(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:102 */
#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (8)
/* complex XML schema type 'wsa:ReferencePropertiesType': */
struct SOAP_CMAC wsa__ReferencePropertiesType {
      public:
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ReferencePropertiesType */
        long soap_type() const { return SOAP_TYPE_wsa__ReferencePropertiesType; }
        /** Constructor with member initializations */
        wsa__ReferencePropertiesType() : __size(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa__ReferencePropertiesType * SOAP_FMAC2 soap_instantiate_wsa__ReferencePropertiesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:105 */
#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (9)
/* complex XML schema type 'wsa:ReferenceParametersType': */
struct SOAP_CMAC wsa__ReferenceParametersType {
      public:
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ReferenceParametersType */
        long soap_type() const { return SOAP_TYPE_wsa__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa__ReferenceParametersType() : __size(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:108 */
#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (10)
/* simple XML schema type 'wsa:ServiceNameType': */
struct SOAP_CMAC wsa__ServiceNameType {
      public:
        /** Simple content of XML schema type 'xsd:QName' wrapped by this struct */
        char *__item;
        /** Optional attribute 'PortName' of XML schema type 'xsd:string' */
        char *PortName;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ServiceNameType */
        long soap_type() const { return SOAP_TYPE_wsa__ServiceNameType; }
        /** Constructor with member initializations */
        wsa__ServiceNameType() : __item(), PortName(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa__ServiceNameType * SOAP_FMAC2 soap_instantiate_wsa__ServiceNameType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:111 */
#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (11)
/* simple XML schema type 'wsa:Relationship': */
struct SOAP_CMAC wsa__Relationship {
      public:
        /** Simple content of XML schema type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XML schema type 'xsd:QName' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__Relationship */
        long soap_type() const { return SOAP_TYPE_wsa__Relationship; }
        /** Constructor with member initializations */
        wsa__Relationship() : __item(), RelationshipType(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa__Relationship * SOAP_FMAC2 soap_instantiate_wsa__Relationship(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:255 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Optional element 'wsa:MessageID' of XML schema type 'wsa:MessageID' */
        char *wsa__MessageID;
        /** Optional element 'wsa:RelatesTo' of XML schema type 'wsa:RelatesTo' */
        struct wsa__Relationship *wsa__RelatesTo;
        /** Optional element 'wsa:From' of XML schema type 'wsa:From' */
        struct wsa__EndpointReferenceType *wsa__From;
        /** MustUnderstand */
        struct wsa__EndpointReferenceType *wsa__ReplyTo;
        /** MustUnderstand */
        struct wsa__EndpointReferenceType *wsa__FaultTo;
        /** MustUnderstand */
        char *wsa__To;
        /** MustUnderstand */
        char *wsa__Action;
        /** Optional element 'wsdd:AppSequence' of XML schema type 'wsdd:AppSequenceType' */
        struct wsdd__AppSequenceType *wsdd__AppSequence;
        /** Optional element 'wsa5:MessageID' of XML schema type 'wsa5:MessageID' */
        char *wsa5__MessageID;
        /** Optional element 'wsa5:RelatesTo' of XML schema type 'wsa5:RelatesTo' */
        struct wsa5__RelatesToType *wsa5__RelatesTo;
        /** Optional element 'wsa5:From' of XML schema type 'wsa5:From' */
        struct wsa5__EndpointReferenceType *wsa5__From;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__ReplyTo;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__FaultTo;
        /** MustUnderstand */
        char *wsa5__To;
        /** MustUnderstand */
        char *wsa5__Action;
        /** Optional element 'chan:ChannelInstance' of XML schema type 'chan:ChannelInstanceType' */
        struct chan__ChannelInstanceType *chan__ChannelInstance;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() : wsa__MessageID(), wsa__RelatesTo(), wsa__From(), wsa__ReplyTo(), wsa__FaultTo(), wsa__To(), wsa__Action(), wsdd__AppSequence(), wsa5__MessageID(), wsa5__RelatesTo(), wsa5__From(), wsa5__ReplyTo(), wsa5__FaultTo(), wsa5__To(), wsa5__Action(), chan__ChannelInstance() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsdd10.h:64 */
#ifndef SOAP_TYPE_wsdd__HelloType
#define SOAP_TYPE_wsdd__HelloType (34)
/* complex XML schema type 'wsdd:HelloType': */
struct SOAP_CMAC wsdd__HelloType {
      public:
        /** Required element 'wsa:EndpointReference' of XML schema type 'wsa:EndpointReference' */
        struct wsa__EndpointReferenceType wsa__EndpointReference;
        /** Optional element 'wsdd:Types' of XML schema type 'xsd:QName' */
        char *Types;
        /** Optional element 'wsdd:Scopes' of XML schema type 'wsdd:ScopesType' */
        struct wsdd__ScopesType *Scopes;
        /** Optional element 'wsdd:XAddrs' of XML schema type 'wsdd:UriListType' */
        char *XAddrs;
        /** Required element 'wsdd:MetadataVersion' of XML schema type 'xsd:unsignedInt' */
        unsigned int MetadataVersion;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__HelloType */
        long soap_type() const { return SOAP_TYPE_wsdd__HelloType; }
        /** Constructor with member initializations */
        wsdd__HelloType() : wsa__EndpointReference(), Types(), Scopes(), XAddrs(), MetadataVersion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__HelloType * SOAP_FMAC2 soap_instantiate_wsdd__HelloType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:66 */
#ifndef SOAP_TYPE_wsdd__ByeType
#define SOAP_TYPE_wsdd__ByeType (35)
/* complex XML schema type 'wsdd:ByeType': */
struct SOAP_CMAC wsdd__ByeType {
      public:
        /** Required element 'wsa:EndpointReference' of XML schema type 'wsa:EndpointReference' */
        struct wsa__EndpointReferenceType wsa__EndpointReference;
        /** Optional element 'wsdd:Types' of XML schema type 'xsd:QName' */
        char *Types;
        /** Optional element 'wsdd:Scopes' of XML schema type 'wsdd:ScopesType' */
        struct wsdd__ScopesType *Scopes;
        /** Optional element 'wsdd:XAddrs' of XML schema type 'wsdd:UriListType' */
        char *XAddrs;
        /** Optional element 'wsdd:MetadataVersion' of XML schema type 'xsd:unsignedInt' */
        unsigned int *MetadataVersion;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ByeType */
        long soap_type() const { return SOAP_TYPE_wsdd__ByeType; }
        /** Constructor with member initializations */
        wsdd__ByeType() : wsa__EndpointReference(), Types(), Scopes(), XAddrs(), MetadataVersion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ByeType * SOAP_FMAC2 soap_instantiate_wsdd__ByeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:68 */
#ifndef SOAP_TYPE_wsdd__ProbeType
#define SOAP_TYPE_wsdd__ProbeType (36)
/* complex XML schema type 'wsdd:ProbeType': */
struct SOAP_CMAC wsdd__ProbeType {
      public:
        /** Optional element 'wsdd:Types' of XML schema type 'xsd:QName' */
        char *Types;
        /** Optional element 'wsdd:Scopes' of XML schema type 'wsdd:ScopesType' */
        struct wsdd__ScopesType *Scopes;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ProbeType */
        long soap_type() const { return SOAP_TYPE_wsdd__ProbeType; }
        /** Constructor with member initializations */
        wsdd__ProbeType() : Types(), Scopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ProbeType * SOAP_FMAC2 soap_instantiate_wsdd__ProbeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:70 */
#ifndef SOAP_TYPE_wsdd__ProbeMatchesType
#define SOAP_TYPE_wsdd__ProbeMatchesType (37)
/* complex XML schema type 'wsdd:ProbeMatchesType': */
struct SOAP_CMAC wsdd__ProbeMatchesType {
      public:
        /** Sequence of elements 'wsdd:ProbeMatch' of XML schema type 'wsdd:ProbeMatchType' stored in dynamic array ProbeMatch of length __sizeProbeMatch */
        int __sizeProbeMatch;
        struct wsdd__ProbeMatchType *ProbeMatch;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ProbeMatchesType */
        long soap_type() const { return SOAP_TYPE_wsdd__ProbeMatchesType; }
        /** Constructor with member initializations */
        wsdd__ProbeMatchesType() : __sizeProbeMatch(), ProbeMatch() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ProbeMatchesType * SOAP_FMAC2 soap_instantiate_wsdd__ProbeMatchesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:72 */
#ifndef SOAP_TYPE_wsdd__ProbeMatchType
#define SOAP_TYPE_wsdd__ProbeMatchType (38)
/* complex XML schema type 'wsdd:ProbeMatchType': */
struct SOAP_CMAC wsdd__ProbeMatchType {
      public:
        /** Required element 'wsa:EndpointReference' of XML schema type 'wsa:EndpointReference' */
        struct wsa__EndpointReferenceType wsa__EndpointReference;
        /** Optional element 'wsdd:Types' of XML schema type 'xsd:QName' */
        char *Types;
        /** Optional element 'wsdd:Scopes' of XML schema type 'wsdd:ScopesType' */
        struct wsdd__ScopesType *Scopes;
        /** Optional element 'wsdd:XAddrs' of XML schema type 'wsdd:UriListType' */
        char *XAddrs;
        /** Required element 'wsdd:MetadataVersion' of XML schema type 'xsd:unsignedInt' */
        unsigned int MetadataVersion;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ProbeMatchType */
        long soap_type() const { return SOAP_TYPE_wsdd__ProbeMatchType; }
        /** Constructor with member initializations */
        wsdd__ProbeMatchType() : wsa__EndpointReference(), Types(), Scopes(), XAddrs(), MetadataVersion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ProbeMatchType * SOAP_FMAC2 soap_instantiate_wsdd__ProbeMatchType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:74 */
#ifndef SOAP_TYPE_wsdd__ResolveType
#define SOAP_TYPE_wsdd__ResolveType (39)
/* complex XML schema type 'wsdd:ResolveType': */
struct SOAP_CMAC wsdd__ResolveType {
      public:
        /** Required element 'wsa:EndpointReference' of XML schema type 'wsa:EndpointReference' */
        struct wsa__EndpointReferenceType wsa__EndpointReference;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ResolveType */
        long soap_type() const { return SOAP_TYPE_wsdd__ResolveType; }
        /** Constructor with member initializations */
        wsdd__ResolveType() : wsa__EndpointReference() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ResolveType * SOAP_FMAC2 soap_instantiate_wsdd__ResolveType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:76 */
#ifndef SOAP_TYPE_wsdd__ResolveMatchesType
#define SOAP_TYPE_wsdd__ResolveMatchesType (40)
/* complex XML schema type 'wsdd:ResolveMatchesType': */
struct SOAP_CMAC wsdd__ResolveMatchesType {
      public:
        /** Optional element 'wsdd:ResolveMatch' of XML schema type 'wsdd:ResolveMatchType' */
        struct wsdd__ResolveMatchType *ResolveMatch;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ResolveMatchesType */
        long soap_type() const { return SOAP_TYPE_wsdd__ResolveMatchesType; }
        /** Constructor with member initializations */
        wsdd__ResolveMatchesType() : ResolveMatch() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ResolveMatchesType * SOAP_FMAC2 soap_instantiate_wsdd__ResolveMatchesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:78 */
#ifndef SOAP_TYPE_wsdd__ResolveMatchType
#define SOAP_TYPE_wsdd__ResolveMatchType (41)
/* complex XML schema type 'wsdd:ResolveMatchType': */
struct SOAP_CMAC wsdd__ResolveMatchType {
      public:
        /** Required element 'wsa:EndpointReference' of XML schema type 'wsa:EndpointReference' */
        struct wsa__EndpointReferenceType wsa__EndpointReference;
        /** Optional element 'wsdd:Types' of XML schema type 'xsd:QName' */
        char *Types;
        /** Optional element 'wsdd:Scopes' of XML schema type 'wsdd:ScopesType' */
        struct wsdd__ScopesType *Scopes;
        /** Optional element 'wsdd:XAddrs' of XML schema type 'wsdd:UriListType' */
        char *XAddrs;
        /** Required element 'wsdd:MetadataVersion' of XML schema type 'xsd:unsignedInt' */
        unsigned int MetadataVersion;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ResolveMatchType */
        long soap_type() const { return SOAP_TYPE_wsdd__ResolveMatchType; }
        /** Constructor with member initializations */
        wsdd__ResolveMatchType() : wsa__EndpointReference(), Types(), Scopes(), XAddrs(), MetadataVersion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ResolveMatchType * SOAP_FMAC2 soap_instantiate_wsdd__ResolveMatchType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:82 */
#ifndef SOAP_TYPE_wsdd__SecurityType
#define SOAP_TYPE_wsdd__SecurityType (43)
/* complex XML schema type 'wsdd:SecurityType': */
struct SOAP_CMAC wsdd__SecurityType {
      public:
        /** Optional element 'wsdd:Sig' of XML schema type 'wsdd:SigType' */
        struct wsdd__SigType *Sig;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__SecurityType */
        long soap_type() const { return SOAP_TYPE_wsdd__SecurityType; }
        /** Constructor with member initializations */
        wsdd__SecurityType() : Sig() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__SecurityType * SOAP_FMAC2 soap_instantiate_wsdd__SecurityType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:84 */
#ifndef SOAP_TYPE_wsdd__SigType
#define SOAP_TYPE_wsdd__SigType (44)
/* complex XML schema type 'wsdd:SigType': */
struct SOAP_CMAC wsdd__SigType {
      public:
        /** Required attribute 'Scheme' of XML schema type 'xsd:string' */
        char *Scheme;
        /** Optional attribute 'KeyId' of XML schema type 'xsd:string' */
        char *KeyId;
        /** Required attribute 'Refs' of XML schema type 'xsd:string' */
        char *Refs;
        /** Required attribute 'Sig' of XML schema type 'xsd:string' */
        char *Sig;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__SigType */
        long soap_type() const { return SOAP_TYPE_wsdd__SigType; }
        /** Constructor with member initializations */
        wsdd__SigType() : Scheme(), KeyId(), Refs(), Sig() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__SigType * SOAP_FMAC2 soap_instantiate_wsdd__SigType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:80 */
#ifndef SOAP_TYPE_wsdd__ScopesType
#define SOAP_TYPE_wsdd__ScopesType (42)
/* simple XML schema type 'wsdd:ScopesType': */
struct SOAP_CMAC wsdd__ScopesType {
      public:
        /** Simple content of XML schema type 'wsdd:UriListType' wrapped by this struct */
        char *__item;
        /** Optional attribute 'MatchBy' of XML schema type 'xsd:string' */
        char *MatchBy;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__ScopesType */
        long soap_type() const { return SOAP_TYPE_wsdd__ScopesType; }
        /** Constructor with member initializations */
        wsdd__ScopesType() : __item(), MatchBy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__ScopesType * SOAP_FMAC2 soap_instantiate_wsdd__ScopesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdd10.h:86 */
#ifndef SOAP_TYPE_wsdd__AppSequenceType
#define SOAP_TYPE_wsdd__AppSequenceType (45)
/* complex XML schema type 'wsdd:AppSequenceType': */
struct SOAP_CMAC wsdd__AppSequenceType {
      public:
        /** Required attribute 'InstanceId' of XML schema type 'xsd:unsignedInt' */
        unsigned int InstanceId;
        /** Optional attribute 'SequenceId' of XML schema type 'xsd:string' */
        char *SequenceId;
        /** Required attribute 'MessageNumber' of XML schema type 'xsd:unsignedInt' */
        unsigned int MessageNumber;
      public:
        /** Return unique type id SOAP_TYPE_wsdd__AppSequenceType */
        long soap_type() const { return SOAP_TYPE_wsdd__AppSequenceType; }
        /** Constructor with member initializations */
        wsdd__AppSequenceType() : InstanceId(), SequenceId(), MessageNumber() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsdd__AppSequenceType * SOAP_FMAC2 soap_instantiate_wsdd__AppSequenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:67 */
#ifndef SOAP_TYPE___wsdd__Hello
#define SOAP_TYPE___wsdd__Hello (74)
/* Wrapper: */
struct SOAP_CMAC __wsdd__Hello {
      public:
        /** Optional element 'wsdd:Hello' of XML schema type 'wsdd:HelloType' */
        struct wsdd__HelloType *wsdd__Hello;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__Hello */
        long soap_type() const { return SOAP_TYPE___wsdd__Hello; }
        /** Constructor with member initializations */
        __wsdd__Hello() : wsdd__Hello() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__Hello * SOAP_FMAC2 soap_instantiate___wsdd__Hello(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:76 */
#ifndef SOAP_TYPE___wsdd__Bye
#define SOAP_TYPE___wsdd__Bye (77)
/* Wrapper: */
struct SOAP_CMAC __wsdd__Bye {
      public:
        /** Optional element 'wsdd:Bye' of XML schema type 'wsdd:ByeType' */
        struct wsdd__ByeType *wsdd__Bye;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__Bye */
        long soap_type() const { return SOAP_TYPE___wsdd__Bye; }
        /** Constructor with member initializations */
        __wsdd__Bye() : wsdd__Bye() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__Bye * SOAP_FMAC2 soap_instantiate___wsdd__Bye(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:85 */
#ifndef SOAP_TYPE___wsdd__Probe
#define SOAP_TYPE___wsdd__Probe (80)
/* Wrapper: */
struct SOAP_CMAC __wsdd__Probe {
      public:
        /** Optional element 'wsdd:Probe' of XML schema type 'wsdd:ProbeType' */
        struct wsdd__ProbeType *wsdd__Probe;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__Probe */
        long soap_type() const { return SOAP_TYPE___wsdd__Probe; }
        /** Constructor with member initializations */
        __wsdd__Probe() : wsdd__Probe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__Probe * SOAP_FMAC2 soap_instantiate___wsdd__Probe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:94 */
#ifndef SOAP_TYPE___wsdd__ProbeMatches
#define SOAP_TYPE___wsdd__ProbeMatches (83)
/* Wrapper: */
struct SOAP_CMAC __wsdd__ProbeMatches {
      public:
        /** Optional element 'wsdd:ProbeMatches' of XML schema type 'wsdd:ProbeMatchesType' */
        struct wsdd__ProbeMatchesType *wsdd__ProbeMatches;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__ProbeMatches */
        long soap_type() const { return SOAP_TYPE___wsdd__ProbeMatches; }
        /** Constructor with member initializations */
        __wsdd__ProbeMatches() : wsdd__ProbeMatches() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__ProbeMatches * SOAP_FMAC2 soap_instantiate___wsdd__ProbeMatches(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:103 */
#ifndef SOAP_TYPE___wsdd__Resolve
#define SOAP_TYPE___wsdd__Resolve (86)
/* Wrapper: */
struct SOAP_CMAC __wsdd__Resolve {
      public:
        /** Optional element 'wsdd:Resolve' of XML schema type 'wsdd:ResolveType' */
        struct wsdd__ResolveType *wsdd__Resolve;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__Resolve */
        long soap_type() const { return SOAP_TYPE___wsdd__Resolve; }
        /** Constructor with member initializations */
        __wsdd__Resolve() : wsdd__Resolve() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__Resolve * SOAP_FMAC2 soap_instantiate___wsdd__Resolve(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdx.h:112 */
#ifndef SOAP_TYPE___wsdd__ResolveMatches
#define SOAP_TYPE___wsdd__ResolveMatches (89)
/* Wrapper: */
struct SOAP_CMAC __wsdd__ResolveMatches {
      public:
        /** Optional element 'wsdd:ResolveMatches' of XML schema type 'wsdd:ResolveMatchesType' */
        struct wsdd__ResolveMatchesType *wsdd__ResolveMatches;
      public:
        /** Return unique type id SOAP_TYPE___wsdd__ResolveMatches */
        long soap_type() const { return SOAP_TYPE___wsdd__ResolveMatches; }
        /** Constructor with member initializations */
        __wsdd__ResolveMatches() : wsdd__ResolveMatches() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __wsdd__ResolveMatches * SOAP_FMAC2 soap_instantiate___wsdd__ResolveMatches(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xop.h:59 */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (90)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
struct SOAP_CMAC _xop__Include {
      public:
        unsigned char *__ptr;
        int __size;
        /** Optional element 'id' of XML schema type 'xsd:string' */
        char *id;
        /** Optional element 'type' of XML schema type 'xsd:string' */
        char *type;
        /** Optional element 'options' of XML schema type 'xsd:string' */
        char *options;
      public:
        /** Return unique type id SOAP_TYPE__xop__Include */
        long soap_type() const { return SOAP_TYPE__xop__Include; }
        /** Constructor with member initializations */
        _xop__Include() : __ptr(), __size(), id(), type(), options() { }
        /** Friend allocator */
        friend SOAP_FMAC1 _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:65 */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (93)
/* complex XML schema type 'wsa5:EndpointReferenceType': */
struct SOAP_CMAC wsa5__EndpointReferenceType {
      public:
        /** Required element 'wsa5:Address' of XML schema type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa5:ReferenceParameters' of XML schema type 'wsa5:ReferenceParametersType' */
        struct wsa5__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa5:Metadata' of XML schema type 'wsa5:MetadataType' */
        struct wsa5__MetadataType *Metadata;
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
        long soap_type() const { return SOAP_TYPE_wsa5__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa5__EndpointReferenceType() : Address(), ReferenceParameters(), Metadata(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:68 */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (94)
/* complex XML schema type 'wsa5:ReferenceParametersType': */
struct SOAP_CMAC wsa5__ReferenceParametersType {
      public:
        /** Optional element 'chan:ChannelInstance' of XML schema type 'xsd:int' */
        int *chan__ChannelInstance;
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
        long soap_type() const { return SOAP_TYPE_wsa5__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa5__ReferenceParametersType() : chan__ChannelInstance(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:71 */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (95)
/* complex XML schema type 'wsa5:MetadataType': */
struct SOAP_CMAC wsa5__MetadataType {
      public:
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__MetadataType */
        long soap_type() const { return SOAP_TYPE_wsa5__MetadataType; }
        /** Constructor with member initializations */
        wsa5__MetadataType() : __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:86 */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (97)
/* complex XML schema type 'wsa5:ProblemActionType': */
struct SOAP_CMAC wsa5__ProblemActionType {
      public:
        /** Optional element 'wsa5:Action' of XML schema type 'xsd:string' */
        char *Action;
        /** Optional element 'wsa5:SoapAction' of XML schema type 'xsd:string' */
        char *SoapAction;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ProblemActionType */
        long soap_type() const { return SOAP_TYPE_wsa5__ProblemActionType; }
        /** Constructor with member initializations */
        wsa5__ProblemActionType() : Action(), SoapAction(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:74 */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (96)
/* simple XML schema type 'wsa5:RelatesToType': */
struct SOAP_CMAC wsa5__RelatesToType {
      public:
        /** Simple content of XML schema type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XML schema type 'wsa5:RelationshipTypeOpenEnum' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__RelatesToType */
        long soap_type() const { return SOAP_TYPE_wsa5__RelatesToType; }
        /** Constructor with member initializations */
        wsa5__RelatesToType() : __item(), RelationshipType(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:260 */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (121)
/* simple XML schema type 'chan:ChannelInstanceType': */
struct SOAP_CMAC chan__ChannelInstanceType {
      public:
        /** Simple content of XML schema type 'xsd:int' wrapped by this struct */
        int __item;
        /** Optional attribute 'wsa5:IsReferenceParameter' of XML schema type 'wsa5:IsReferenceParameter' */
        enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	/**< initialized with default value = (enum _wsa5__IsReferenceParameter)0 */
      public:
        /** Return unique type id SOAP_TYPE_chan__ChannelInstanceType */
        long soap_type() const { return SOAP_TYPE_chan__ChannelInstanceType; }
        /** Constructor with member initializations */
        chan__ChannelInstanceType() : __item(), wsa5__IsReferenceParameter((enum _wsa5__IsReferenceParameter)0) { }
        /** Friend allocator */
        friend SOAP_FMAC1 chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:284 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (129)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:285 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (131)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:290 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (134)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:222 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (135)
/* Type xsd__anyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with default initializations
        xsd__anyType() : __item(), soap() { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:229 */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (137)
/* complex XML schema type 'SOAP-ENV:Envelope': */
struct SOAP_CMAC SOAP_ENV__Envelope {
      public:
        /** Optional element 'SOAP-ENV:Header' of XML schema type 'SOAP-ENV:Header' */
        struct SOAP_ENV__Header *SOAP_ENV__Header;
        /** Optional element 'SOAP-ENV:Body' of XML schema type 'xsd:anyType' */
        char *SOAP_ENV__Body;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Envelope */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Envelope; }
        /** Constructor with member initializations */
        SOAP_ENV__Envelope() : SOAP_ENV__Header(), SOAP_ENV__Body() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:232 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (139)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:240 */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (140)
/* hexBinary XML schema type: */
class SOAP_CMAC xsd__hexBinary {
      public:
        unsigned char *__ptr;
        int __size;
      public:
        /// Return unique type id SOAP_TYPE_xsd__hexBinary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__hexBinary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__hexBinary, default initialized and not managed by a soap context
        virtual xsd__hexBinary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__hexBinary); }
      public:
        /// Constructor with default initializations
        xsd__hexBinary() : __ptr(), __size() { }
        virtual ~xsd__hexBinary() { }
        /// Friend allocator used by soap_new_xsd__hexBinary(struct soap*, int)
        friend SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:248 */
#ifndef SOAP_TYPE_wsdd10__ByeType_
#define SOAP_TYPE_wsdd10__ByeType_ (141)
/* Type wsdd10__ByeType_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsdd10:ByeType': */
class SOAP_CMAC wsdd10__ByeType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsdd:ByeType' wrapped by this struct
        struct wsdd__ByeType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsdd10__ByeType_
        virtual long soap_type(void) const { return SOAP_TYPE_wsdd10__ByeType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsdd10__ByeType_, default initialized and not managed by a soap context
        virtual wsdd10__ByeType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsdd10__ByeType_); }
      public:
        /// Constructor with default initializations
        wsdd10__ByeType_() : __item() { }
        virtual ~wsdd10__ByeType_() { }
        /// Friend allocator used by soap_new_wsdd10__ByeType_(struct soap*, int)
        friend SOAP_FMAC1 wsdd10__ByeType_ * SOAP_FMAC2 soap_instantiate_wsdd10__ByeType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:255 */
#ifndef SOAP_TYPE_wsdd10__HelloType_
#define SOAP_TYPE_wsdd10__HelloType_ (142)
/* Type wsdd10__HelloType_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsdd10:HelloType': */
class SOAP_CMAC wsdd10__HelloType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsdd:HelloType' wrapped by this struct
        struct wsdd__HelloType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsdd10__HelloType_
        virtual long soap_type(void) const { return SOAP_TYPE_wsdd10__HelloType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsdd10__HelloType_, default initialized and not managed by a soap context
        virtual wsdd10__HelloType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsdd10__HelloType_); }
      public:
        /// Constructor with default initializations
        wsdd10__HelloType_() : __item() { }
        virtual ~wsdd10__HelloType_() { }
        /// Friend allocator used by soap_new_wsdd10__HelloType_(struct soap*, int)
        friend SOAP_FMAC1 wsdd10__HelloType_ * SOAP_FMAC2 soap_instantiate_wsdd10__HelloType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:262 */
#ifndef SOAP_TYPE_wsdd10__ProbeMatchesType_
#define SOAP_TYPE_wsdd10__ProbeMatchesType_ (143)
/* Type wsdd10__ProbeMatchesType_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsdd10:ProbeMatchesType': */
class SOAP_CMAC wsdd10__ProbeMatchesType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsdd:ProbeMatchesType' wrapped by this struct
        struct wsdd__ProbeMatchesType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsdd10__ProbeMatchesType_
        virtual long soap_type(void) const { return SOAP_TYPE_wsdd10__ProbeMatchesType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsdd10__ProbeMatchesType_, default initialized and not managed by a soap context
        virtual wsdd10__ProbeMatchesType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsdd10__ProbeMatchesType_); }
      public:
        /// Constructor with default initializations
        wsdd10__ProbeMatchesType_() : __item() { }
        virtual ~wsdd10__ProbeMatchesType_() { }
        /// Friend allocator used by soap_new_wsdd10__ProbeMatchesType_(struct soap*, int)
        friend SOAP_FMAC1 wsdd10__ProbeMatchesType_ * SOAP_FMAC2 soap_instantiate_wsdd10__ProbeMatchesType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:269 */
#ifndef SOAP_TYPE_wsdd10__ProbeType_
#define SOAP_TYPE_wsdd10__ProbeType_ (144)
/* Type wsdd10__ProbeType_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsdd10:ProbeType': */
class SOAP_CMAC wsdd10__ProbeType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsdd:ProbeType' wrapped by this struct
        struct wsdd__ProbeType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsdd10__ProbeType_
        virtual long soap_type(void) const { return SOAP_TYPE_wsdd10__ProbeType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsdd10__ProbeType_, default initialized and not managed by a soap context
        virtual wsdd10__ProbeType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsdd10__ProbeType_); }
      public:
        /// Constructor with default initializations
        wsdd10__ProbeType_() : __item() { }
        virtual ~wsdd10__ProbeType_() { }
        /// Friend allocator used by soap_new_wsdd10__ProbeType_(struct soap*, int)
        friend SOAP_FMAC1 wsdd10__ProbeType_ * SOAP_FMAC2 soap_instantiate_wsdd10__ProbeType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:276 */
#ifndef SOAP_TYPE_wsdd10__ResolveType_
#define SOAP_TYPE_wsdd10__ResolveType_ (145)
/* Type wsdd10__ResolveType_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsdd10:ResolveType': */
class SOAP_CMAC wsdd10__ResolveType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsdd:ResolveType' wrapped by this struct
        struct wsdd__ResolveType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsdd10__ResolveType_
        virtual long soap_type(void) const { return SOAP_TYPE_wsdd10__ResolveType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsdd10__ResolveType_, default initialized and not managed by a soap context
        virtual wsdd10__ResolveType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsdd10__ResolveType_); }
      public:
        /// Constructor with default initializations
        wsdd10__ResolveType_() : __item() { }
        virtual ~wsdd10__ResolveType_() { }
        /// Friend allocator used by soap_new_wsdd10__ResolveType_(struct soap*, int)
        friend SOAP_FMAC1 wsdd10__ResolveType_ * SOAP_FMAC2 soap_instantiate_wsdd10__ResolveType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:285 */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType__
#define SOAP_TYPE_wsa5__EndpointReferenceType__ (146)
/* Type wsa5__EndpointReferenceType__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'wsa5:EndpointReferenceType': */
class SOAP_CMAC wsa5__EndpointReferenceType__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wsa5:EndpointReferenceType' wrapped by this struct
        struct wsa5__EndpointReferenceType __item;
      public:
        /// Return unique type id SOAP_TYPE_wsa5__EndpointReferenceType__
        virtual long soap_type(void) const { return SOAP_TYPE_wsa5__EndpointReferenceType__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsa5__EndpointReferenceType__, default initialized and not managed by a soap context
        virtual wsa5__EndpointReferenceType__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsa5__EndpointReferenceType__); }
      public:
        /// Constructor with default initializations
        wsa5__EndpointReferenceType__() : __item() { }
        virtual ~wsa5__EndpointReferenceType__() { }
        /// Friend allocator used by soap_new_wsa5__EndpointReferenceType__(struct soap*, int)
        friend SOAP_FMAC1 wsa5__EndpointReferenceType__ * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:292 */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope_
#define SOAP_TYPE_SOAP_ENV__Envelope_ (147)
/* Type SOAP_ENV__Envelope_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'SOAP-ENV:Envelope': */
class SOAP_CMAC SOAP_ENV__Envelope_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'SOAP-ENV:Envelope' wrapped by this struct
        struct SOAP_ENV__Envelope __item;
      public:
        /// Return unique type id SOAP_TYPE_SOAP_ENV__Envelope_
        virtual long soap_type(void) const { return SOAP_TYPE_SOAP_ENV__Envelope_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type SOAP_ENV__Envelope_, default initialized and not managed by a soap context
        virtual SOAP_ENV__Envelope_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(SOAP_ENV__Envelope_); }
      public:
        /// Constructor with default initializations
        SOAP_ENV__Envelope_() : __item() { }
        virtual ~SOAP_ENV__Envelope_() { }
        /// Friend allocator used by soap_new_SOAP_ENV__Envelope_(struct soap*, int)
        friend SOAP_FMAC1 SOAP_ENV__Envelope_ * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:299 */
#ifndef SOAP_TYPE_SOAP_ENV__Fault_
#define SOAP_TYPE_SOAP_ENV__Fault_ (148)
/* Type SOAP_ENV__Fault_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'SOAP-ENV:Fault': */
class SOAP_CMAC SOAP_ENV__Fault_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'SOAP-ENV:Fault' wrapped by this struct
        struct SOAP_ENV__Fault __item;
      public:
        /// Return unique type id SOAP_TYPE_SOAP_ENV__Fault_
        virtual long soap_type(void) const { return SOAP_TYPE_SOAP_ENV__Fault_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type SOAP_ENV__Fault_, default initialized and not managed by a soap context
        virtual SOAP_ENV__Fault_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(SOAP_ENV__Fault_); }
      public:
        /// Constructor with default initializations
        SOAP_ENV__Fault_() : __item() { }
        virtual ~SOAP_ENV__Fault_() { }
        /// Friend allocator used by soap_new_SOAP_ENV__Fault_(struct soap*, int)
        friend SOAP_FMAC1 SOAP_ENV__Fault_ * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:309 */
#ifndef SOAP_TYPE_xsd__NCName__
#define SOAP_TYPE_xsd__NCName__ (150)
/* Type xsd__NCName__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:NCName': */
class SOAP_CMAC xsd__NCName__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:NCName' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__NCName__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__NCName__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__NCName__, default initialized and not managed by a soap context
        virtual xsd__NCName__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__NCName__); }
      public:
        /// Constructor with default initializations
        xsd__NCName__() : __item() { }
        virtual ~xsd__NCName__() { }
        /// Friend allocator used by soap_new_xsd__NCName__(struct soap*, int)
        friend SOAP_FMAC1 xsd__NCName__ * SOAP_FMAC2 soap_instantiate_xsd__NCName__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:316 */
#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (151)
/* Type xsd__QName_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:QName': */
class SOAP_CMAC xsd__QName_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:QName' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__QName_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__QName_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__QName_, default initialized and not managed by a soap context
        virtual xsd__QName_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__QName_); }
      public:
        /// Constructor with default initializations
        xsd__QName_() : __item() { }
        virtual ~xsd__QName_() { }
        /// Friend allocator used by soap_new_xsd__QName_(struct soap*, int)
        friend SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:326 */
#ifndef SOAP_TYPE_xsd__anySimpleType__
#define SOAP_TYPE_xsd__anySimpleType__ (153)
/* Type xsd__anySimpleType__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:anySimpleType': */
class SOAP_CMAC xsd__anySimpleType__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anySimpleType' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anySimpleType__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anySimpleType__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anySimpleType__, default initialized and not managed by a soap context
        virtual xsd__anySimpleType__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anySimpleType__); }
      public:
        /// Constructor with default initializations
        xsd__anySimpleType__() : __item() { }
        virtual ~xsd__anySimpleType__() { }
        /// Friend allocator used by soap_new_xsd__anySimpleType__(struct soap*, int)
        friend SOAP_FMAC1 xsd__anySimpleType__ * SOAP_FMAC2 soap_instantiate_xsd__anySimpleType__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:336 */
#ifndef SOAP_TYPE_xsd__anyURI__
#define SOAP_TYPE_xsd__anyURI__ (155)
/* Type xsd__anyURI__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:anyURI': */
class SOAP_CMAC xsd__anyURI__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anyURI' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyURI__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anyURI__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyURI__, default initialized and not managed by a soap context
        virtual xsd__anyURI__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyURI__); }
      public:
        /// Constructor with default initializations
        xsd__anyURI__() : __item() { }
        virtual ~xsd__anyURI__() { }
        /// Friend allocator used by soap_new_xsd__anyURI__(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyURI__ * SOAP_FMAC2 soap_instantiate_xsd__anyURI__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:343 */
#ifndef SOAP_TYPE_xsd__base64Binary__
#define SOAP_TYPE_xsd__base64Binary__ (156)
/* Type xsd__base64Binary__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:base64Binary': */
class SOAP_CMAC xsd__base64Binary__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:base64Binary' wrapped by this struct
        xsd__base64Binary __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary__, default initialized and not managed by a soap context
        virtual xsd__base64Binary__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary__); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary__() : __item() { }
        virtual ~xsd__base64Binary__() { }
        /// Friend allocator used by soap_new_xsd__base64Binary__(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary__ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:350 */
#ifndef SOAP_TYPE_xsd__boolean_
#define SOAP_TYPE_xsd__boolean_ (157)
/* Type xsd__boolean_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:boolean': */
class SOAP_CMAC xsd__boolean_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:boolean' wrapped by this struct
        bool __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__boolean_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__boolean_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__boolean_, default initialized and not managed by a soap context
        virtual xsd__boolean_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__boolean_); }
      public:
        /// Constructor with default initializations
        xsd__boolean_() : __item() { }
        virtual ~xsd__boolean_() { }
        /// Friend allocator used by soap_new_xsd__boolean_(struct soap*, int)
        friend SOAP_FMAC1 xsd__boolean_ * SOAP_FMAC2 soap_instantiate_xsd__boolean_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:357 */
#ifndef SOAP_TYPE_xsd__dateTime_
#define SOAP_TYPE_xsd__dateTime_ (159)
/* Type xsd__dateTime_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:dateTime': */
class SOAP_CMAC xsd__dateTime_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:dateTime' wrapped by this struct
        time_t __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__dateTime_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__dateTime_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__dateTime_, default initialized and not managed by a soap context
        virtual xsd__dateTime_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__dateTime_); }
      public:
        /// Constructor with default initializations
        xsd__dateTime_() : __item() { }
        virtual ~xsd__dateTime_() { }
        /// Friend allocator used by soap_new_xsd__dateTime_(struct soap*, int)
        friend SOAP_FMAC1 xsd__dateTime_ * SOAP_FMAC2 soap_instantiate_xsd__dateTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:364 */
#ifndef SOAP_TYPE_xsd__double_
#define SOAP_TYPE_xsd__double_ (161)
/* Type xsd__double_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:double': */
class SOAP_CMAC xsd__double_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:double' wrapped by this struct
        double __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__double_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__double_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__double_, default initialized and not managed by a soap context
        virtual xsd__double_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__double_); }
      public:
        /// Constructor with default initializations
        xsd__double_() : __item() { }
        virtual ~xsd__double_() { }
        /// Friend allocator used by soap_new_xsd__double_(struct soap*, int)
        friend SOAP_FMAC1 xsd__double_ * SOAP_FMAC2 soap_instantiate_xsd__double_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:374 */
#ifndef SOAP_TYPE_xsd__duration__
#define SOAP_TYPE_xsd__duration__ (164)
/* Type xsd__duration__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:duration': */
class SOAP_CMAC xsd__duration__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:duration' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__duration__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__duration__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__duration__, default initialized and not managed by a soap context
        virtual xsd__duration__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__duration__); }
      public:
        /// Constructor with default initializations
        xsd__duration__() : __item() { }
        virtual ~xsd__duration__() { }
        /// Friend allocator used by soap_new_xsd__duration__(struct soap*, int)
        friend SOAP_FMAC1 xsd__duration__ * SOAP_FMAC2 soap_instantiate_xsd__duration__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:381 */
#ifndef SOAP_TYPE_xsd__float_
#define SOAP_TYPE_xsd__float_ (165)
/* Type xsd__float_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:float': */
class SOAP_CMAC xsd__float_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:float' wrapped by this struct
        float __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__float_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__float_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__float_, default initialized and not managed by a soap context
        virtual xsd__float_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__float_); }
      public:
        /// Constructor with default initializations
        xsd__float_() : __item() { }
        virtual ~xsd__float_() { }
        /// Friend allocator used by soap_new_xsd__float_(struct soap*, int)
        friend SOAP_FMAC1 xsd__float_ * SOAP_FMAC2 soap_instantiate_xsd__float_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:388 */
#ifndef SOAP_TYPE_xsd__hexBinary__
#define SOAP_TYPE_xsd__hexBinary__ (167)
/* Type xsd__hexBinary__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:hexBinary': */
class SOAP_CMAC xsd__hexBinary__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:hexBinary' wrapped by this struct
        xsd__hexBinary __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__hexBinary__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__hexBinary__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__hexBinary__, default initialized and not managed by a soap context
        virtual xsd__hexBinary__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__hexBinary__); }
      public:
        /// Constructor with default initializations
        xsd__hexBinary__() : __item() { }
        virtual ~xsd__hexBinary__() { }
        /// Friend allocator used by soap_new_xsd__hexBinary__(struct soap*, int)
        friend SOAP_FMAC1 xsd__hexBinary__ * SOAP_FMAC2 soap_instantiate_xsd__hexBinary__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:395 */
#ifndef SOAP_TYPE_xsd__int_
#define SOAP_TYPE_xsd__int_ (168)
/* Type xsd__int_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:int': */
class SOAP_CMAC xsd__int_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:int' wrapped by this struct
        int __item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__int_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__int_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__int_, default initialized and not managed by a soap context
        virtual xsd__int_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__int_); }
      public:
        /// Constructor with default initializations
        xsd__int_() : __item() { }
        virtual ~xsd__int_() { }
        /// Friend allocator used by soap_new_xsd__int_(struct soap*, int)
        friend SOAP_FMAC1 xsd__int_ * SOAP_FMAC2 soap_instantiate_xsd__int_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:405 */
#ifndef SOAP_TYPE_xsd__integer__
#define SOAP_TYPE_xsd__integer__ (170)
/* Type xsd__integer__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:integer': */
class SOAP_CMAC xsd__integer__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:integer' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__integer__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__integer__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__integer__, default initialized and not managed by a soap context
        virtual xsd__integer__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__integer__); }
      public:
        /// Constructor with default initializations
        xsd__integer__() : __item() { }
        virtual ~xsd__integer__() { }
        /// Friend allocator used by soap_new_xsd__integer__(struct soap*, int)
        friend SOAP_FMAC1 xsd__integer__ * SOAP_FMAC2 soap_instantiate_xsd__integer__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:415 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger__
#define SOAP_TYPE_xsd__nonNegativeInteger__ (172)
/* Type xsd__nonNegativeInteger__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:nonNegativeInteger': */
class SOAP_CMAC xsd__nonNegativeInteger__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:nonNegativeInteger' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__nonNegativeInteger__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__nonNegativeInteger__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__nonNegativeInteger__, default initialized and not managed by a soap context
        virtual xsd__nonNegativeInteger__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__nonNegativeInteger__); }
      public:
        /// Constructor with default initializations
        xsd__nonNegativeInteger__() : __item() { }
        virtual ~xsd__nonNegativeInteger__() { }
        /// Friend allocator used by soap_new_xsd__nonNegativeInteger__(struct soap*, int)
        friend SOAP_FMAC1 xsd__nonNegativeInteger__ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:422 */
#ifndef SOAP_TYPE_xsd__string_
#define SOAP_TYPE_xsd__string_ (173)
/* Type xsd__string_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:string': */
class SOAP_CMAC xsd__string_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__string_
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__string_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__string_, default initialized and not managed by a soap context
        virtual xsd__string_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__string_); }
      public:
        /// Constructor with default initializations
        xsd__string_() : __item() { }
        virtual ~xsd__string_() { }
        /// Friend allocator used by soap_new_xsd__string_(struct soap*, int)
        friend SOAP_FMAC1 xsd__string_ * SOAP_FMAC2 soap_instantiate_xsd__string_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:432 */
#ifndef SOAP_TYPE_xsd__token__
#define SOAP_TYPE_xsd__token__ (175)
/* Type xsd__token__ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'xsd:token': */
class SOAP_CMAC xsd__token__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:token' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_xsd__token__
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__token__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__token__, default initialized and not managed by a soap context
        virtual xsd__token__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__token__); }
      public:
        /// Constructor with default initializations
        xsd__token__() : __item() { }
        virtual ~xsd__token__() { }
        /// Friend allocator used by soap_new_xsd__token__(struct soap*, int)
        friend SOAP_FMAC1 xsd__token__ * SOAP_FMAC2 soap_instantiate_xsd__token__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2753 */
#ifndef SOAP_TYPE_tds__AutoGeoModes_
#define SOAP_TYPE_tds__AutoGeoModes_ (1254)
/* simple XML schema type 'tds:AutoGeoModes': */
class SOAP_CMAC tds__AutoGeoModes_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tds:AutoGeoModes' wrapped by this struct
        enum tds__AutoGeoModes __item;
      public:
        /// Return unique type id SOAP_TYPE_tds__AutoGeoModes_
        virtual long soap_type(void) const { return SOAP_TYPE_tds__AutoGeoModes_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__AutoGeoModes_, default initialized and not managed by a soap context
        virtual tds__AutoGeoModes_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__AutoGeoModes_); }
      public:
        /// Constructor with default initializations
        tds__AutoGeoModes_() : __item() { }
        virtual ~tds__AutoGeoModes_() { }
        /// Friend allocator used by soap_new_tds__AutoGeoModes_(struct soap*, int)
        friend SOAP_FMAC1 tds__AutoGeoModes_ * SOAP_FMAC2 soap_instantiate_tds__AutoGeoModes_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2788 */
#ifndef SOAP_TYPE_tds__StorageType_
#define SOAP_TYPE_tds__StorageType_ (1256)
/* simple XML schema type 'tds:StorageType': */
class SOAP_CMAC tds__StorageType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tds:StorageType' wrapped by this struct
        enum tds__StorageType __item;
      public:
        /// Return unique type id SOAP_TYPE_tds__StorageType_
        virtual long soap_type(void) const { return SOAP_TYPE_tds__StorageType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__StorageType_, default initialized and not managed by a soap context
        virtual tds__StorageType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__StorageType_); }
      public:
        /// Constructor with default initializations
        tds__StorageType_() : __item() { }
        virtual ~tds__StorageType_() { }
        /// Friend allocator used by soap_new_tds__StorageType_(struct soap*, int)
        friend SOAP_FMAC1 tds__StorageType_ * SOAP_FMAC2 soap_instantiate_tds__StorageType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2813 */
#ifndef SOAP_TYPE_tt__Name__
#define SOAP_TYPE_tt__Name__ (1258)
/* simple XML schema type 'tt:Name': */
class SOAP_CMAC tt__Name__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Name' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Name__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Name__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Name__, default initialized and not managed by a soap context
        virtual tt__Name__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Name__); }
      public:
        /// Constructor with default initializations
        tt__Name__() : __item() { }
        virtual ~tt__Name__() { }
        /// Friend allocator used by soap_new_tt__Name__(struct soap*, int)
        friend SOAP_FMAC1 tt__Name__ * SOAP_FMAC2 soap_instantiate_tt__Name__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2843 */
#ifndef SOAP_TYPE_tt__RotateMode_
#define SOAP_TYPE_tt__RotateMode_ (1260)
/* simple XML schema type 'tt:RotateMode': */
class SOAP_CMAC tt__RotateMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RotateMode' wrapped by this struct
        enum tt__RotateMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateMode_, default initialized and not managed by a soap context
        virtual tt__RotateMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateMode_); }
      public:
        /// Constructor with default initializations
        tt__RotateMode_() : __item() { }
        virtual ~tt__RotateMode_() { }
        /// Friend allocator used by soap_new_tt__RotateMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateMode_ * SOAP_FMAC2 soap_instantiate_tt__RotateMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2860 */
#ifndef SOAP_TYPE_tt__SceneOrientationMode_
#define SOAP_TYPE_tt__SceneOrientationMode_ (1262)
/* simple XML schema type 'tt:SceneOrientationMode': */
class SOAP_CMAC tt__SceneOrientationMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:SceneOrientationMode' wrapped by this struct
        enum tt__SceneOrientationMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__SceneOrientationMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SceneOrientationMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SceneOrientationMode_, default initialized and not managed by a soap context
        virtual tt__SceneOrientationMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SceneOrientationMode_); }
      public:
        /// Constructor with default initializations
        tt__SceneOrientationMode_() : __item() { }
        virtual ~tt__SceneOrientationMode_() { }
        /// Friend allocator used by soap_new_tt__SceneOrientationMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__SceneOrientationMode_ * SOAP_FMAC2 soap_instantiate_tt__SceneOrientationMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2882 */
#ifndef SOAP_TYPE_tt__SceneOrientationOption_
#define SOAP_TYPE_tt__SceneOrientationOption_ (1264)
/* simple XML schema type 'tt:SceneOrientationOption': */
class SOAP_CMAC tt__SceneOrientationOption_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:SceneOrientationOption' wrapped by this struct
        enum tt__SceneOrientationOption __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__SceneOrientationOption_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SceneOrientationOption_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SceneOrientationOption_, default initialized and not managed by a soap context
        virtual tt__SceneOrientationOption_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SceneOrientationOption_); }
      public:
        /// Constructor with default initializations
        tt__SceneOrientationOption_() : __item() { }
        virtual ~tt__SceneOrientationOption_() { }
        /// Friend allocator used by soap_new_tt__SceneOrientationOption_(struct soap*, int)
        friend SOAP_FMAC1 tt__SceneOrientationOption_ * SOAP_FMAC2 soap_instantiate_tt__SceneOrientationOption_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2941 */
#ifndef SOAP_TYPE_tt__ViewModes_
#define SOAP_TYPE_tt__ViewModes_ (1266)
/* simple XML schema type 'tt:ViewModes': */
class SOAP_CMAC tt__ViewModes_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ViewModes' wrapped by this struct
        enum tt__ViewModes __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ViewModes_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ViewModes_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ViewModes_, default initialized and not managed by a soap context
        virtual tt__ViewModes_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ViewModes_); }
      public:
        /// Constructor with default initializations
        tt__ViewModes_() : __item() { }
        virtual ~tt__ViewModes_() { }
        /// Friend allocator used by soap_new_tt__ViewModes_(struct soap*, int)
        friend SOAP_FMAC1 tt__ViewModes_ * SOAP_FMAC2 soap_instantiate_tt__ViewModes_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2959 */
#ifndef SOAP_TYPE_tt__VideoEncoding_
#define SOAP_TYPE_tt__VideoEncoding_ (1268)
/* simple XML schema type 'tt:VideoEncoding': */
class SOAP_CMAC tt__VideoEncoding_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:VideoEncoding' wrapped by this struct
        enum tt__VideoEncoding __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoding_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoding_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoding_, default initialized and not managed by a soap context
        virtual tt__VideoEncoding_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoding_); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoding_() : __item() { }
        virtual ~tt__VideoEncoding_() { }
        /// Friend allocator used by soap_new_tt__VideoEncoding_(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoding_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncoding_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2976 */
#ifndef SOAP_TYPE_tt__Mpeg4Profile_
#define SOAP_TYPE_tt__Mpeg4Profile_ (1270)
/* simple XML schema type 'tt:Mpeg4Profile': */
class SOAP_CMAC tt__Mpeg4Profile_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Mpeg4Profile' wrapped by this struct
        enum tt__Mpeg4Profile __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Profile_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Profile_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Profile_, default initialized and not managed by a soap context
        virtual tt__Mpeg4Profile_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Profile_); }
      public:
        /// Constructor with default initializations
        tt__Mpeg4Profile_() : __item() { }
        virtual ~tt__Mpeg4Profile_() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Profile_(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Profile_ * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Profile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2995 */
#ifndef SOAP_TYPE_tt__H264Profile_
#define SOAP_TYPE_tt__H264Profile_ (1272)
/* simple XML schema type 'tt:H264Profile': */
class SOAP_CMAC tt__H264Profile_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:H264Profile' wrapped by this struct
        enum tt__H264Profile __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Profile_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Profile_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Profile_, default initialized and not managed by a soap context
        virtual tt__H264Profile_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Profile_); }
      public:
        /// Constructor with default initializations
        tt__H264Profile_() : __item() { }
        virtual ~tt__H264Profile_() { }
        /// Friend allocator used by soap_new_tt__H264Profile_(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Profile_ * SOAP_FMAC2 soap_instantiate_tt__H264Profile_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3018 */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames_
#define SOAP_TYPE_tt__VideoEncodingMimeNames_ (1274)
/* simple XML schema type 'tt:VideoEncodingMimeNames': */
class SOAP_CMAC tt__VideoEncodingMimeNames_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:VideoEncodingMimeNames' wrapped by this struct
        enum tt__VideoEncodingMimeNames __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncodingMimeNames_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncodingMimeNames_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncodingMimeNames_, default initialized and not managed by a soap context
        virtual tt__VideoEncodingMimeNames_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncodingMimeNames_); }
      public:
        /// Constructor with default initializations
        tt__VideoEncodingMimeNames_() : __item() { }
        virtual ~tt__VideoEncodingMimeNames_() { }
        /// Friend allocator used by soap_new_tt__VideoEncodingMimeNames_(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3040 */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles_
#define SOAP_TYPE_tt__VideoEncodingProfiles_ (1276)
/* simple XML schema type 'tt:VideoEncodingProfiles': */
class SOAP_CMAC tt__VideoEncodingProfiles_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:VideoEncodingProfiles' wrapped by this struct
        enum tt__VideoEncodingProfiles __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncodingProfiles_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncodingProfiles_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncodingProfiles_, default initialized and not managed by a soap context
        virtual tt__VideoEncodingProfiles_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncodingProfiles_); }
      public:
        /// Constructor with default initializations
        tt__VideoEncodingProfiles_() : __item() { }
        virtual ~tt__VideoEncodingProfiles_() { }
        /// Friend allocator used by soap_new_tt__VideoEncodingProfiles_(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncodingProfiles_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingProfiles_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3058 */
#ifndef SOAP_TYPE_tt__AudioEncoding_
#define SOAP_TYPE_tt__AudioEncoding_ (1278)
/* simple XML schema type 'tt:AudioEncoding': */
class SOAP_CMAC tt__AudioEncoding_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AudioEncoding' wrapped by this struct
        enum tt__AudioEncoding __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoding_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoding_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoding_, default initialized and not managed by a soap context
        virtual tt__AudioEncoding_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoding_); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoding_() : __item() { }
        virtual ~tt__AudioEncoding_() { }
        /// Friend allocator used by soap_new_tt__AudioEncoding_(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoding_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncoding_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3085 */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames_
#define SOAP_TYPE_tt__AudioEncodingMimeNames_ (1280)
/* simple XML schema type 'tt:AudioEncodingMimeNames': */
class SOAP_CMAC tt__AudioEncodingMimeNames_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AudioEncodingMimeNames' wrapped by this struct
        enum tt__AudioEncodingMimeNames __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncodingMimeNames_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncodingMimeNames_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncodingMimeNames_, default initialized and not managed by a soap context
        virtual tt__AudioEncodingMimeNames_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncodingMimeNames_); }
      public:
        /// Constructor with default initializations
        tt__AudioEncodingMimeNames_() : __item() { }
        virtual ~tt__AudioEncodingMimeNames_() { }
        /// Friend allocator used by soap_new_tt__AudioEncodingMimeNames_(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3103 */
#ifndef SOAP_TYPE_tt__MetadataCompressionType_
#define SOAP_TYPE_tt__MetadataCompressionType_ (1282)
/* simple XML schema type 'tt:MetadataCompressionType': */
class SOAP_CMAC tt__MetadataCompressionType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:MetadataCompressionType' wrapped by this struct
        enum tt__MetadataCompressionType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataCompressionType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataCompressionType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataCompressionType_, default initialized and not managed by a soap context
        virtual tt__MetadataCompressionType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataCompressionType_); }
      public:
        /// Constructor with default initializations
        tt__MetadataCompressionType_() : __item() { }
        virtual ~tt__MetadataCompressionType_() { }
        /// Friend allocator used by soap_new_tt__MetadataCompressionType_(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataCompressionType_ * SOAP_FMAC2 soap_instantiate_tt__MetadataCompressionType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3120 */
#ifndef SOAP_TYPE_tt__StreamType_
#define SOAP_TYPE_tt__StreamType_ (1284)
/* simple XML schema type 'tt:StreamType': */
class SOAP_CMAC tt__StreamType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:StreamType' wrapped by this struct
        enum tt__StreamType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__StreamType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StreamType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StreamType_, default initialized and not managed by a soap context
        virtual tt__StreamType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StreamType_); }
      public:
        /// Constructor with default initializations
        tt__StreamType_() : __item() { }
        virtual ~tt__StreamType_() { }
        /// Friend allocator used by soap_new_tt__StreamType_(struct soap*, int)
        friend SOAP_FMAC1 tt__StreamType_ * SOAP_FMAC2 soap_instantiate_tt__StreamType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3143 */
#ifndef SOAP_TYPE_tt__TransportProtocol_
#define SOAP_TYPE_tt__TransportProtocol_ (1286)
/* simple XML schema type 'tt:TransportProtocol': */
class SOAP_CMAC tt__TransportProtocol_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:TransportProtocol' wrapped by this struct
        enum tt__TransportProtocol __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__TransportProtocol_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TransportProtocol_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TransportProtocol_, default initialized and not managed by a soap context
        virtual tt__TransportProtocol_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TransportProtocol_); }
      public:
        /// Constructor with default initializations
        tt__TransportProtocol_() : __item() { }
        virtual ~tt__TransportProtocol_() { }
        /// Friend allocator used by soap_new_tt__TransportProtocol_(struct soap*, int)
        friend SOAP_FMAC1 tt__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_tt__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3160 */
#ifndef SOAP_TYPE_tt__ScopeDefinition_
#define SOAP_TYPE_tt__ScopeDefinition_ (1288)
/* simple XML schema type 'tt:ScopeDefinition': */
class SOAP_CMAC tt__ScopeDefinition_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ScopeDefinition' wrapped by this struct
        enum tt__ScopeDefinition __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ScopeDefinition_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ScopeDefinition_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ScopeDefinition_, default initialized and not managed by a soap context
        virtual tt__ScopeDefinition_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ScopeDefinition_); }
      public:
        /// Constructor with default initializations
        tt__ScopeDefinition_() : __item() { }
        virtual ~tt__ScopeDefinition_() { }
        /// Friend allocator used by soap_new_tt__ScopeDefinition_(struct soap*, int)
        friend SOAP_FMAC1 tt__ScopeDefinition_ * SOAP_FMAC2 soap_instantiate_tt__ScopeDefinition_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3177 */
#ifndef SOAP_TYPE_tt__DiscoveryMode_
#define SOAP_TYPE_tt__DiscoveryMode_ (1290)
/* simple XML schema type 'tt:DiscoveryMode': */
class SOAP_CMAC tt__DiscoveryMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:DiscoveryMode' wrapped by this struct
        enum tt__DiscoveryMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__DiscoveryMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DiscoveryMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DiscoveryMode_, default initialized and not managed by a soap context
        virtual tt__DiscoveryMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DiscoveryMode_); }
      public:
        /// Constructor with default initializations
        tt__DiscoveryMode_() : __item() { }
        virtual ~tt__DiscoveryMode_() { }
        /// Friend allocator used by soap_new_tt__DiscoveryMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__DiscoveryMode_ * SOAP_FMAC2 soap_instantiate_tt__DiscoveryMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3190 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority__ (1292)
/* simple XML schema type 'tt:NetworkInterfaceConfigPriority': */
class SOAP_CMAC tt__NetworkInterfaceConfigPriority__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:NetworkInterfaceConfigPriority' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceConfigPriority__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceConfigPriority__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceConfigPriority__, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceConfigPriority__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceConfigPriority__); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceConfigPriority__() : __item() { }
        virtual ~tt__NetworkInterfaceConfigPriority__() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceConfigPriority__(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConfigPriority__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3207 */
#ifndef SOAP_TYPE_tt__Duplex_
#define SOAP_TYPE_tt__Duplex_ (1294)
/* simple XML schema type 'tt:Duplex': */
class SOAP_CMAC tt__Duplex_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Duplex' wrapped by this struct
        enum tt__Duplex __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Duplex_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Duplex_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Duplex_, default initialized and not managed by a soap context
        virtual tt__Duplex_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Duplex_); }
      public:
        /// Constructor with default initializations
        tt__Duplex_() : __item() { }
        virtual ~tt__Duplex_() { }
        /// Friend allocator used by soap_new_tt__Duplex_(struct soap*, int)
        friend SOAP_FMAC1 tt__Duplex_ * SOAP_FMAC2 soap_instantiate_tt__Duplex_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3223 */
#ifndef SOAP_TYPE_tt__IANA_IfTypes__
#define SOAP_TYPE_tt__IANA_IfTypes__ (1296)
/* simple XML schema type 'tt:IANA-IfTypes': */
class SOAP_CMAC tt__IANA_IfTypes__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IANA-IfTypes' wrapped by this struct
        int __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IANA_IfTypes__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IANA_IfTypes__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IANA_IfTypes__, default initialized and not managed by a soap context
        virtual tt__IANA_IfTypes__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IANA_IfTypes__); }
      public:
        /// Constructor with default initializations
        tt__IANA_IfTypes__() : __item() { }
        virtual ~tt__IANA_IfTypes__() { }
        /// Friend allocator used by soap_new_tt__IANA_IfTypes__(struct soap*, int)
        friend SOAP_FMAC1 tt__IANA_IfTypes__ * SOAP_FMAC2 soap_instantiate_tt__IANA_IfTypes__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3242 */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_ (1298)
/* simple XML schema type 'tt:IPv6DHCPConfiguration': */
class SOAP_CMAC tt__IPv6DHCPConfiguration_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IPv6DHCPConfiguration' wrapped by this struct
        enum tt__IPv6DHCPConfiguration __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6DHCPConfiguration_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6DHCPConfiguration_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6DHCPConfiguration_, default initialized and not managed by a soap context
        virtual tt__IPv6DHCPConfiguration_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6DHCPConfiguration_); }
      public:
        /// Constructor with default initializations
        tt__IPv6DHCPConfiguration_() : __item() { }
        virtual ~tt__IPv6DHCPConfiguration_() { }
        /// Friend allocator used by soap_new_tt__IPv6DHCPConfiguration_(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6DHCPConfiguration_ * SOAP_FMAC2 soap_instantiate_tt__IPv6DHCPConfiguration_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3260 */
#ifndef SOAP_TYPE_tt__NetworkProtocolType_
#define SOAP_TYPE_tt__NetworkProtocolType_ (1300)
/* simple XML schema type 'tt:NetworkProtocolType': */
class SOAP_CMAC tt__NetworkProtocolType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:NetworkProtocolType' wrapped by this struct
        enum tt__NetworkProtocolType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocolType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocolType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocolType_, default initialized and not managed by a soap context
        virtual tt__NetworkProtocolType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocolType_); }
      public:
        /// Constructor with default initializations
        tt__NetworkProtocolType_() : __item() { }
        virtual ~tt__NetworkProtocolType_() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocolType_(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocolType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3278 */
#ifndef SOAP_TYPE_tt__NetworkHostType_
#define SOAP_TYPE_tt__NetworkHostType_ (1302)
/* simple XML schema type 'tt:NetworkHostType': */
class SOAP_CMAC tt__NetworkHostType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:NetworkHostType' wrapped by this struct
        enum tt__NetworkHostType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHostType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHostType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHostType_, default initialized and not managed by a soap context
        virtual tt__NetworkHostType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHostType_); }
      public:
        /// Constructor with default initializations
        tt__NetworkHostType_() : __item() { }
        virtual ~tt__NetworkHostType_() { }
        /// Friend allocator used by soap_new_tt__NetworkHostType_(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHostType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkHostType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3290 */
#ifndef SOAP_TYPE_tt__IPv4Address__
#define SOAP_TYPE_tt__IPv4Address__ (1304)
/* simple XML schema type 'tt:IPv4Address': */
class SOAP_CMAC tt__IPv4Address__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IPv4Address' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4Address__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4Address__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4Address__, default initialized and not managed by a soap context
        virtual tt__IPv4Address__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4Address__); }
      public:
        /// Constructor with default initializations
        tt__IPv4Address__() : __item() { }
        virtual ~tt__IPv4Address__() { }
        /// Friend allocator used by soap_new_tt__IPv4Address__(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv4Address__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3302 */
#ifndef SOAP_TYPE_tt__IPv6Address__
#define SOAP_TYPE_tt__IPv6Address__ (1306)
/* simple XML schema type 'tt:IPv6Address': */
class SOAP_CMAC tt__IPv6Address__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IPv6Address' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6Address__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6Address__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6Address__, default initialized and not managed by a soap context
        virtual tt__IPv6Address__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6Address__); }
      public:
        /// Constructor with default initializations
        tt__IPv6Address__() : __item() { }
        virtual ~tt__IPv6Address__() { }
        /// Friend allocator used by soap_new_tt__IPv6Address__(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv6Address__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3314 */
#ifndef SOAP_TYPE_tt__HwAddress__
#define SOAP_TYPE_tt__HwAddress__ (1308)
/* simple XML schema type 'tt:HwAddress': */
class SOAP_CMAC tt__HwAddress__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:HwAddress' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__HwAddress__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HwAddress__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HwAddress__, default initialized and not managed by a soap context
        virtual tt__HwAddress__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HwAddress__); }
      public:
        /// Constructor with default initializations
        tt__HwAddress__() : __item() { }
        virtual ~tt__HwAddress__() { }
        /// Friend allocator used by soap_new_tt__HwAddress__(struct soap*, int)
        friend SOAP_FMAC1 tt__HwAddress__ * SOAP_FMAC2 soap_instantiate_tt__HwAddress__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3331 */
#ifndef SOAP_TYPE_tt__IPType_
#define SOAP_TYPE_tt__IPType_ (1310)
/* simple XML schema type 'tt:IPType': */
class SOAP_CMAC tt__IPType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IPType' wrapped by this struct
        enum tt__IPType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPType_, default initialized and not managed by a soap context
        virtual tt__IPType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPType_); }
      public:
        /// Constructor with default initializations
        tt__IPType_() : __item() { }
        virtual ~tt__IPType_() { }
        /// Friend allocator used by soap_new_tt__IPType_(struct soap*, int)
        friend SOAP_FMAC1 tt__IPType_ * SOAP_FMAC2 soap_instantiate_tt__IPType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3343 */
#ifndef SOAP_TYPE_tt__DNSName__
#define SOAP_TYPE_tt__DNSName__ (1312)
/* simple XML schema type 'tt:DNSName': */
class SOAP_CMAC tt__DNSName__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:DNSName' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSName__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSName__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSName__, default initialized and not managed by a soap context
        virtual tt__DNSName__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSName__); }
      public:
        /// Constructor with default initializations
        tt__DNSName__() : __item() { }
        virtual ~tt__DNSName__() { }
        /// Friend allocator used by soap_new_tt__DNSName__(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSName__ * SOAP_FMAC2 soap_instantiate_tt__DNSName__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3355 */
#ifndef SOAP_TYPE_tt__Domain__
#define SOAP_TYPE_tt__Domain__ (1314)
/* simple XML schema type 'tt:Domain': */
class SOAP_CMAC tt__Domain__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Domain' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Domain__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Domain__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Domain__, default initialized and not managed by a soap context
        virtual tt__Domain__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Domain__); }
      public:
        /// Constructor with default initializations
        tt__Domain__() : __item() { }
        virtual ~tt__Domain__() { }
        /// Friend allocator used by soap_new_tt__Domain__(struct soap*, int)
        friend SOAP_FMAC1 tt__Domain__ * SOAP_FMAC2 soap_instantiate_tt__Domain__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3372 */
#ifndef SOAP_TYPE_tt__IPAddressFilterType_
#define SOAP_TYPE_tt__IPAddressFilterType_ (1316)
/* simple XML schema type 'tt:IPAddressFilterType': */
class SOAP_CMAC tt__IPAddressFilterType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IPAddressFilterType' wrapped by this struct
        enum tt__IPAddressFilterType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilterType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilterType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilterType_, default initialized and not managed by a soap context
        virtual tt__IPAddressFilterType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilterType_); }
      public:
        /// Constructor with default initializations
        tt__IPAddressFilterType_() : __item() { }
        virtual ~tt__IPAddressFilterType_() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilterType_(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilterType_ * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3390 */
#ifndef SOAP_TYPE_tt__DynamicDNSType_
#define SOAP_TYPE_tt__DynamicDNSType_ (1318)
/* simple XML schema type 'tt:DynamicDNSType': */
class SOAP_CMAC tt__DynamicDNSType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:DynamicDNSType' wrapped by this struct
        enum tt__DynamicDNSType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSType_, default initialized and not managed by a soap context
        virtual tt__DynamicDNSType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSType_); }
      public:
        /// Constructor with default initializations
        tt__DynamicDNSType_() : __item() { }
        virtual ~tt__DynamicDNSType_() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSType_(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSType_ * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3403 */
#ifndef SOAP_TYPE_tt__Dot11SSIDType__
#define SOAP_TYPE_tt__Dot11SSIDType__ (1320)
/* simple XML schema type 'tt:Dot11SSIDType': */
class SOAP_CMAC tt__Dot11SSIDType__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11SSIDType' wrapped by this struct
        xsd__hexBinary __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SSIDType__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SSIDType__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SSIDType__, default initialized and not managed by a soap context
        virtual tt__Dot11SSIDType__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SSIDType__); }
      public:
        /// Constructor with default initializations
        tt__Dot11SSIDType__() : __item() { }
        virtual ~tt__Dot11SSIDType__() { }
        /// Friend allocator used by soap_new_tt__Dot11SSIDType__(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SSIDType__ * SOAP_FMAC2 soap_instantiate_tt__Dot11SSIDType__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3421 */
#ifndef SOAP_TYPE_tt__Dot11StationMode_
#define SOAP_TYPE_tt__Dot11StationMode_ (1322)
/* simple XML schema type 'tt:Dot11StationMode': */
class SOAP_CMAC tt__Dot11StationMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11StationMode' wrapped by this struct
        enum tt__Dot11StationMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11StationMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11StationMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11StationMode_, default initialized and not managed by a soap context
        virtual tt__Dot11StationMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11StationMode_); }
      public:
        /// Constructor with default initializations
        tt__Dot11StationMode_() : __item() { }
        virtual ~tt__Dot11StationMode_() { }
        /// Friend allocator used by soap_new_tt__Dot11StationMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11StationMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11StationMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3441 */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode_
#define SOAP_TYPE_tt__Dot11SecurityMode_ (1324)
/* simple XML schema type 'tt:Dot11SecurityMode': */
class SOAP_CMAC tt__Dot11SecurityMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11SecurityMode' wrapped by this struct
        enum tt__Dot11SecurityMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityMode_, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityMode_); }
      public:
        /// Constructor with default initializations
        tt__Dot11SecurityMode_() : __item() { }
        virtual ~tt__Dot11SecurityMode_() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3460 */
#ifndef SOAP_TYPE_tt__Dot11Cipher_
#define SOAP_TYPE_tt__Dot11Cipher_ (1326)
/* simple XML schema type 'tt:Dot11Cipher': */
class SOAP_CMAC tt__Dot11Cipher_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11Cipher' wrapped by this struct
        enum tt__Dot11Cipher __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Cipher_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Cipher_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Cipher_, default initialized and not managed by a soap context
        virtual tt__Dot11Cipher_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Cipher_); }
      public:
        /// Constructor with default initializations
        tt__Dot11Cipher_() : __item() { }
        virtual ~tt__Dot11Cipher_() { }
        /// Friend allocator used by soap_new_tt__Dot11Cipher_(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Cipher_ * SOAP_FMAC2 soap_instantiate_tt__Dot11Cipher_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3473 */
#ifndef SOAP_TYPE_tt__Dot11PSK__
#define SOAP_TYPE_tt__Dot11PSK__ (1328)
/* simple XML schema type 'tt:Dot11PSK': */
class SOAP_CMAC tt__Dot11PSK__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11PSK' wrapped by this struct
        xsd__hexBinary __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSK__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSK__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSK__, default initialized and not managed by a soap context
        virtual tt__Dot11PSK__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSK__); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSK__() : __item() { }
        virtual ~tt__Dot11PSK__() { }
        /// Friend allocator used by soap_new_tt__Dot11PSK__(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSK__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSK__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3486 */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase__
#define SOAP_TYPE_tt__Dot11PSKPassphrase__ (1330)
/* simple XML schema type 'tt:Dot11PSKPassphrase': */
class SOAP_CMAC tt__Dot11PSKPassphrase__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11PSKPassphrase' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKPassphrase__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKPassphrase__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKPassphrase__, default initialized and not managed by a soap context
        virtual tt__Dot11PSKPassphrase__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKPassphrase__); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSKPassphrase__() : __item() { }
        virtual ~tt__Dot11PSKPassphrase__() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKPassphrase__(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKPassphrase__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKPassphrase__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3507 */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength_
#define SOAP_TYPE_tt__Dot11SignalStrength_ (1332)
/* simple XML schema type 'tt:Dot11SignalStrength': */
class SOAP_CMAC tt__Dot11SignalStrength_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11SignalStrength' wrapped by this struct
        enum tt__Dot11SignalStrength __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SignalStrength_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SignalStrength_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SignalStrength_, default initialized and not managed by a soap context
        virtual tt__Dot11SignalStrength_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SignalStrength_); }
      public:
        /// Constructor with default initializations
        tt__Dot11SignalStrength_() : __item() { }
        virtual ~tt__Dot11SignalStrength_() { }
        /// Friend allocator used by soap_new_tt__Dot11SignalStrength_(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SignalStrength_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SignalStrength_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3526 */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_ (1334)
/* simple XML schema type 'tt:Dot11AuthAndMangementSuite': */
class SOAP_CMAC tt__Dot11AuthAndMangementSuite_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Dot11AuthAndMangementSuite' wrapped by this struct
        enum tt__Dot11AuthAndMangementSuite __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AuthAndMangementSuite_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AuthAndMangementSuite_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AuthAndMangementSuite_, default initialized and not managed by a soap context
        virtual tt__Dot11AuthAndMangementSuite_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AuthAndMangementSuite_); }
      public:
        /// Constructor with default initializations
        tt__Dot11AuthAndMangementSuite_() : __item() { }
        virtual ~tt__Dot11AuthAndMangementSuite_() { }
        /// Friend allocator used by soap_new_tt__Dot11AuthAndMangementSuite_(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC2 soap_instantiate_tt__Dot11AuthAndMangementSuite_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3548 */
#ifndef SOAP_TYPE_tt__CapabilityCategory_
#define SOAP_TYPE_tt__CapabilityCategory_ (1336)
/* simple XML schema type 'tt:CapabilityCategory': */
class SOAP_CMAC tt__CapabilityCategory_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:CapabilityCategory' wrapped by this struct
        enum tt__CapabilityCategory __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilityCategory_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilityCategory_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilityCategory_, default initialized and not managed by a soap context
        virtual tt__CapabilityCategory_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilityCategory_); }
      public:
        /// Constructor with default initializations
        tt__CapabilityCategory_() : __item() { }
        virtual ~tt__CapabilityCategory_() { }
        /// Friend allocator used by soap_new_tt__CapabilityCategory_(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilityCategory_ * SOAP_FMAC2 soap_instantiate_tt__CapabilityCategory_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3577 */
#ifndef SOAP_TYPE_tt__SystemLogType_
#define SOAP_TYPE_tt__SystemLogType_ (1338)
/* simple XML schema type 'tt:SystemLogType': */
class SOAP_CMAC tt__SystemLogType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:SystemLogType' wrapped by this struct
        enum tt__SystemLogType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogType_, default initialized and not managed by a soap context
        virtual tt__SystemLogType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogType_); }
      public:
        /// Constructor with default initializations
        tt__SystemLogType_() : __item() { }
        virtual ~tt__SystemLogType_() { }
        /// Friend allocator used by soap_new_tt__SystemLogType_(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogType_ * SOAP_FMAC2 soap_instantiate_tt__SystemLogType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3606 */
#ifndef SOAP_TYPE_tt__FactoryDefaultType_
#define SOAP_TYPE_tt__FactoryDefaultType_ (1340)
/* simple XML schema type 'tt:FactoryDefaultType': */
class SOAP_CMAC tt__FactoryDefaultType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:FactoryDefaultType' wrapped by this struct
        enum tt__FactoryDefaultType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__FactoryDefaultType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FactoryDefaultType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FactoryDefaultType_, default initialized and not managed by a soap context
        virtual tt__FactoryDefaultType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FactoryDefaultType_); }
      public:
        /// Constructor with default initializations
        tt__FactoryDefaultType_() : __item() { }
        virtual ~tt__FactoryDefaultType_() { }
        /// Friend allocator used by soap_new_tt__FactoryDefaultType_(struct soap*, int)
        friend SOAP_FMAC1 tt__FactoryDefaultType_ * SOAP_FMAC2 soap_instantiate_tt__FactoryDefaultType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3631 */
#ifndef SOAP_TYPE_tt__SetDateTimeType_
#define SOAP_TYPE_tt__SetDateTimeType_ (1342)
/* simple XML schema type 'tt:SetDateTimeType': */
class SOAP_CMAC tt__SetDateTimeType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:SetDateTimeType' wrapped by this struct
        enum tt__SetDateTimeType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__SetDateTimeType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SetDateTimeType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SetDateTimeType_, default initialized and not managed by a soap context
        virtual tt__SetDateTimeType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SetDateTimeType_); }
      public:
        /// Constructor with default initializations
        tt__SetDateTimeType_() : __item() { }
        virtual ~tt__SetDateTimeType_() { }
        /// Friend allocator used by soap_new_tt__SetDateTimeType_(struct soap*, int)
        friend SOAP_FMAC1 tt__SetDateTimeType_ * SOAP_FMAC2 soap_instantiate_tt__SetDateTimeType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3651 */
#ifndef SOAP_TYPE_tt__UserLevel_
#define SOAP_TYPE_tt__UserLevel_ (1344)
/* simple XML schema type 'tt:UserLevel': */
class SOAP_CMAC tt__UserLevel_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:UserLevel' wrapped by this struct
        enum tt__UserLevel __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__UserLevel_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__UserLevel_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__UserLevel_, default initialized and not managed by a soap context
        virtual tt__UserLevel_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__UserLevel_); }
      public:
        /// Constructor with default initializations
        tt__UserLevel_() : __item() { }
        virtual ~tt__UserLevel_() { }
        /// Friend allocator used by soap_new_tt__UserLevel_(struct soap*, int)
        friend SOAP_FMAC1 tt__UserLevel_ * SOAP_FMAC2 soap_instantiate_tt__UserLevel_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3668 */
#ifndef SOAP_TYPE_tt__RelayLogicalState_
#define SOAP_TYPE_tt__RelayLogicalState_ (1346)
/* simple XML schema type 'tt:RelayLogicalState': */
class SOAP_CMAC tt__RelayLogicalState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RelayLogicalState' wrapped by this struct
        enum tt__RelayLogicalState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayLogicalState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayLogicalState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayLogicalState_, default initialized and not managed by a soap context
        virtual tt__RelayLogicalState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayLogicalState_); }
      public:
        /// Constructor with default initializations
        tt__RelayLogicalState_() : __item() { }
        virtual ~tt__RelayLogicalState_() { }
        /// Friend allocator used by soap_new_tt__RelayLogicalState_(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayLogicalState_ * SOAP_FMAC2 soap_instantiate_tt__RelayLogicalState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3685 */
#ifndef SOAP_TYPE_tt__RelayIdleState_
#define SOAP_TYPE_tt__RelayIdleState_ (1348)
/* simple XML schema type 'tt:RelayIdleState': */
class SOAP_CMAC tt__RelayIdleState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RelayIdleState' wrapped by this struct
        enum tt__RelayIdleState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayIdleState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayIdleState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayIdleState_, default initialized and not managed by a soap context
        virtual tt__RelayIdleState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayIdleState_); }
      public:
        /// Constructor with default initializations
        tt__RelayIdleState_() : __item() { }
        virtual ~tt__RelayIdleState_() { }
        /// Friend allocator used by soap_new_tt__RelayIdleState_(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayIdleState_ * SOAP_FMAC2 soap_instantiate_tt__RelayIdleState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3702 */
#ifndef SOAP_TYPE_tt__RelayMode_
#define SOAP_TYPE_tt__RelayMode_ (1350)
/* simple XML schema type 'tt:RelayMode': */
class SOAP_CMAC tt__RelayMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RelayMode' wrapped by this struct
        enum tt__RelayMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayMode_, default initialized and not managed by a soap context
        virtual tt__RelayMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayMode_); }
      public:
        /// Constructor with default initializations
        tt__RelayMode_() : __item() { }
        virtual ~tt__RelayMode_() { }
        /// Friend allocator used by soap_new_tt__RelayMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayMode_ * SOAP_FMAC2 soap_instantiate_tt__RelayMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3719 */
#ifndef SOAP_TYPE_tt__DigitalIdleState_
#define SOAP_TYPE_tt__DigitalIdleState_ (1352)
/* simple XML schema type 'tt:DigitalIdleState': */
class SOAP_CMAC tt__DigitalIdleState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:DigitalIdleState' wrapped by this struct
        enum tt__DigitalIdleState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__DigitalIdleState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DigitalIdleState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DigitalIdleState_, default initialized and not managed by a soap context
        virtual tt__DigitalIdleState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DigitalIdleState_); }
      public:
        /// Constructor with default initializations
        tt__DigitalIdleState_() : __item() { }
        virtual ~tt__DigitalIdleState_() { }
        /// Friend allocator used by soap_new_tt__DigitalIdleState_(struct soap*, int)
        friend SOAP_FMAC1 tt__DigitalIdleState_ * SOAP_FMAC2 soap_instantiate_tt__DigitalIdleState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3737 */
#ifndef SOAP_TYPE_tt__EFlipMode_
#define SOAP_TYPE_tt__EFlipMode_ (1354)
/* simple XML schema type 'tt:EFlipMode': */
class SOAP_CMAC tt__EFlipMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:EFlipMode' wrapped by this struct
        enum tt__EFlipMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlipMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlipMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlipMode_, default initialized and not managed by a soap context
        virtual tt__EFlipMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlipMode_); }
      public:
        /// Constructor with default initializations
        tt__EFlipMode_() : __item() { }
        virtual ~tt__EFlipMode_() { }
        /// Friend allocator used by soap_new_tt__EFlipMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlipMode_ * SOAP_FMAC2 soap_instantiate_tt__EFlipMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3756 */
#ifndef SOAP_TYPE_tt__ReverseMode_
#define SOAP_TYPE_tt__ReverseMode_ (1356)
/* simple XML schema type 'tt:ReverseMode': */
class SOAP_CMAC tt__ReverseMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReverseMode' wrapped by this struct
        enum tt__ReverseMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReverseMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReverseMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReverseMode_, default initialized and not managed by a soap context
        virtual tt__ReverseMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReverseMode_); }
      public:
        /// Constructor with default initializations
        tt__ReverseMode_() : __item() { }
        virtual ~tt__ReverseMode_() { }
        /// Friend allocator used by soap_new_tt__ReverseMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__ReverseMode_ * SOAP_FMAC2 soap_instantiate_tt__ReverseMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3769 */
#ifndef SOAP_TYPE_tt__AuxiliaryData__
#define SOAP_TYPE_tt__AuxiliaryData__ (1358)
/* simple XML schema type 'tt:AuxiliaryData': */
class SOAP_CMAC tt__AuxiliaryData__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AuxiliaryData' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AuxiliaryData__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AuxiliaryData__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AuxiliaryData__, default initialized and not managed by a soap context
        virtual tt__AuxiliaryData__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AuxiliaryData__); }
      public:
        /// Constructor with default initializations
        tt__AuxiliaryData__() : __item() { }
        virtual ~tt__AuxiliaryData__() { }
        /// Friend allocator used by soap_new_tt__AuxiliaryData__(struct soap*, int)
        friend SOAP_FMAC1 tt__AuxiliaryData__ * SOAP_FMAC2 soap_instantiate_tt__AuxiliaryData__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3788 */
#ifndef SOAP_TYPE_tt__PTZPresetTourState_
#define SOAP_TYPE_tt__PTZPresetTourState_ (1360)
/* simple XML schema type 'tt:PTZPresetTourState': */
class SOAP_CMAC tt__PTZPresetTourState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:PTZPresetTourState' wrapped by this struct
        enum tt__PTZPresetTourState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourState_, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourState_); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourState_() : __item() { }
        virtual ~tt__PTZPresetTourState_() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourState_(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourState_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3806 */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_
#define SOAP_TYPE_tt__PTZPresetTourDirection_ (1362)
/* simple XML schema type 'tt:PTZPresetTourDirection': */
class SOAP_CMAC tt__PTZPresetTourDirection_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:PTZPresetTourDirection' wrapped by this struct
        enum tt__PTZPresetTourDirection __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourDirection_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourDirection_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourDirection_, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourDirection_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourDirection_); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourDirection_() : __item() { }
        virtual ~tt__PTZPresetTourDirection_() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourDirection_(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourDirection_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourDirection_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3825 */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_
#define SOAP_TYPE_tt__PTZPresetTourOperation_ (1364)
/* simple XML schema type 'tt:PTZPresetTourOperation': */
class SOAP_CMAC tt__PTZPresetTourOperation_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:PTZPresetTourOperation' wrapped by this struct
        enum tt__PTZPresetTourOperation __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourOperation_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourOperation_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourOperation_, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourOperation_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourOperation_); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourOperation_() : __item() { }
        virtual ~tt__PTZPresetTourOperation_() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourOperation_(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourOperation_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOperation_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3844 */
#ifndef SOAP_TYPE_tt__MoveAndTrackMethod_
#define SOAP_TYPE_tt__MoveAndTrackMethod_ (1366)
/* simple XML schema type 'tt:MoveAndTrackMethod': */
class SOAP_CMAC tt__MoveAndTrackMethod_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:MoveAndTrackMethod' wrapped by this struct
        enum tt__MoveAndTrackMethod __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveAndTrackMethod_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveAndTrackMethod_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveAndTrackMethod_, default initialized and not managed by a soap context
        virtual tt__MoveAndTrackMethod_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveAndTrackMethod_); }
      public:
        /// Constructor with default initializations
        tt__MoveAndTrackMethod_() : __item() { }
        virtual ~tt__MoveAndTrackMethod_() { }
        /// Friend allocator used by soap_new_tt__MoveAndTrackMethod_(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveAndTrackMethod_ * SOAP_FMAC2 soap_instantiate_tt__MoveAndTrackMethod_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3861 */
#ifndef SOAP_TYPE_tt__AutoFocusMode_
#define SOAP_TYPE_tt__AutoFocusMode_ (1368)
/* simple XML schema type 'tt:AutoFocusMode': */
class SOAP_CMAC tt__AutoFocusMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AutoFocusMode' wrapped by this struct
        enum tt__AutoFocusMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AutoFocusMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AutoFocusMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AutoFocusMode_, default initialized and not managed by a soap context
        virtual tt__AutoFocusMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AutoFocusMode_); }
      public:
        /// Constructor with default initializations
        tt__AutoFocusMode_() : __item() { }
        virtual ~tt__AutoFocusMode_() { }
        /// Friend allocator used by soap_new_tt__AutoFocusMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__AutoFocusMode_ * SOAP_FMAC2 soap_instantiate_tt__AutoFocusMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3881 */
#ifndef SOAP_TYPE_tt__AFModes_
#define SOAP_TYPE_tt__AFModes_ (1370)
/* simple XML schema type 'tt:AFModes': */
class SOAP_CMAC tt__AFModes_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AFModes' wrapped by this struct
        enum tt__AFModes __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AFModes_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AFModes_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AFModes_, default initialized and not managed by a soap context
        virtual tt__AFModes_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AFModes_); }
      public:
        /// Constructor with default initializations
        tt__AFModes_() : __item() { }
        virtual ~tt__AFModes_() { }
        /// Friend allocator used by soap_new_tt__AFModes_(struct soap*, int)
        friend SOAP_FMAC1 tt__AFModes_ * SOAP_FMAC2 soap_instantiate_tt__AFModes_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3898 */
#ifndef SOAP_TYPE_tt__WideDynamicMode_
#define SOAP_TYPE_tt__WideDynamicMode_ (1372)
/* simple XML schema type 'tt:WideDynamicMode': */
class SOAP_CMAC tt__WideDynamicMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:WideDynamicMode' wrapped by this struct
        enum tt__WideDynamicMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicMode_, default initialized and not managed by a soap context
        virtual tt__WideDynamicMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicMode_); }
      public:
        /// Constructor with default initializations
        tt__WideDynamicMode_() : __item() { }
        virtual ~tt__WideDynamicMode_() { }
        /// Friend allocator used by soap_new_tt__WideDynamicMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicMode_ * SOAP_FMAC2 soap_instantiate_tt__WideDynamicMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3927 */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode_
#define SOAP_TYPE_tt__BacklightCompensationMode_ (1374)
/* simple XML schema type 'tt:BacklightCompensationMode': */
class SOAP_CMAC tt__BacklightCompensationMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:BacklightCompensationMode' wrapped by this struct
        enum tt__BacklightCompensationMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensationMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensationMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensationMode_, default initialized and not managed by a soap context
        virtual tt__BacklightCompensationMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensationMode_); }
      public:
        /// Constructor with default initializations
        tt__BacklightCompensationMode_() : __item() { }
        virtual ~tt__BacklightCompensationMode_() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensationMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3944 */
#ifndef SOAP_TYPE_tt__ExposurePriority_
#define SOAP_TYPE_tt__ExposurePriority_ (1376)
/* simple XML schema type 'tt:ExposurePriority': */
class SOAP_CMAC tt__ExposurePriority_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ExposurePriority' wrapped by this struct
        enum tt__ExposurePriority __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposurePriority_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposurePriority_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposurePriority_, default initialized and not managed by a soap context
        virtual tt__ExposurePriority_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposurePriority_); }
      public:
        /// Constructor with default initializations
        tt__ExposurePriority_() : __item() { }
        virtual ~tt__ExposurePriority_() { }
        /// Friend allocator used by soap_new_tt__ExposurePriority_(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposurePriority_ * SOAP_FMAC2 soap_instantiate_tt__ExposurePriority_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3961 */
#ifndef SOAP_TYPE_tt__ExposureMode_
#define SOAP_TYPE_tt__ExposureMode_ (1378)
/* simple XML schema type 'tt:ExposureMode': */
class SOAP_CMAC tt__ExposureMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ExposureMode' wrapped by this struct
        enum tt__ExposureMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposureMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposureMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposureMode_, default initialized and not managed by a soap context
        virtual tt__ExposureMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposureMode_); }
      public:
        /// Constructor with default initializations
        tt__ExposureMode_() : __item() { }
        virtual ~tt__ExposureMode_() { }
        /// Friend allocator used by soap_new_tt__ExposureMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposureMode_ * SOAP_FMAC2 soap_instantiate_tt__ExposureMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3978 */
#ifndef SOAP_TYPE_tt__Enabled_
#define SOAP_TYPE_tt__Enabled_ (1380)
/* simple XML schema type 'tt:Enabled': */
class SOAP_CMAC tt__Enabled_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Enabled' wrapped by this struct
        enum tt__Enabled __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Enabled_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Enabled_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Enabled_, default initialized and not managed by a soap context
        virtual tt__Enabled_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Enabled_); }
      public:
        /// Constructor with default initializations
        tt__Enabled_() : __item() { }
        virtual ~tt__Enabled_() { }
        /// Friend allocator used by soap_new_tt__Enabled_(struct soap*, int)
        friend SOAP_FMAC1 tt__Enabled_ * SOAP_FMAC2 soap_instantiate_tt__Enabled_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:3995 */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode_
#define SOAP_TYPE_tt__WhiteBalanceMode_ (1382)
/* simple XML schema type 'tt:WhiteBalanceMode': */
class SOAP_CMAC tt__WhiteBalanceMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:WhiteBalanceMode' wrapped by this struct
        enum tt__WhiteBalanceMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceMode_, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceMode_); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalanceMode_() : __item() { }
        virtual ~tt__WhiteBalanceMode_() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceMode_ * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4013 */
#ifndef SOAP_TYPE_tt__IrCutFilterMode_
#define SOAP_TYPE_tt__IrCutFilterMode_ (1384)
/* simple XML schema type 'tt:IrCutFilterMode': */
class SOAP_CMAC tt__IrCutFilterMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IrCutFilterMode' wrapped by this struct
        enum tt__IrCutFilterMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterMode_, default initialized and not managed by a soap context
        virtual tt__IrCutFilterMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterMode_); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterMode_() : __item() { }
        virtual ~tt__IrCutFilterMode_() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterMode_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4032 */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode_
#define SOAP_TYPE_tt__ImageStabilizationMode_ (1386)
/* simple XML schema type 'tt:ImageStabilizationMode': */
class SOAP_CMAC tt__ImageStabilizationMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ImageStabilizationMode' wrapped by this struct
        enum tt__ImageStabilizationMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationMode_, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationMode_); }
      public:
        /// Constructor with default initializations
        tt__ImageStabilizationMode_() : __item() { }
        virtual ~tt__ImageStabilizationMode_() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationMode_ * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4051 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_ (1388)
/* simple XML schema type 'tt:IrCutFilterAutoBoundaryType': */
class SOAP_CMAC tt__IrCutFilterAutoBoundaryType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:IrCutFilterAutoBoundaryType' wrapped by this struct
        enum tt__IrCutFilterAutoBoundaryType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoBoundaryType_, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoBoundaryType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoBoundaryType_); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterAutoBoundaryType_() : __item() { }
        virtual ~tt__IrCutFilterAutoBoundaryType_() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoBoundaryType_(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoBoundaryType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4069 */
#ifndef SOAP_TYPE_tt__ToneCompensationMode_
#define SOAP_TYPE_tt__ToneCompensationMode_ (1390)
/* simple XML schema type 'tt:ToneCompensationMode': */
class SOAP_CMAC tt__ToneCompensationMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ToneCompensationMode' wrapped by this struct
        enum tt__ToneCompensationMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensationMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensationMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensationMode_, default initialized and not managed by a soap context
        virtual tt__ToneCompensationMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensationMode_); }
      public:
        /// Constructor with default initializations
        tt__ToneCompensationMode_() : __item() { }
        virtual ~tt__ToneCompensationMode_() { }
        /// Friend allocator used by soap_new_tt__ToneCompensationMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4087 */
#ifndef SOAP_TYPE_tt__DefoggingMode_
#define SOAP_TYPE_tt__DefoggingMode_ (1392)
/* simple XML schema type 'tt:DefoggingMode': */
class SOAP_CMAC tt__DefoggingMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:DefoggingMode' wrapped by this struct
        enum tt__DefoggingMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__DefoggingMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DefoggingMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DefoggingMode_, default initialized and not managed by a soap context
        virtual tt__DefoggingMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DefoggingMode_); }
      public:
        /// Constructor with default initializations
        tt__DefoggingMode_() : __item() { }
        virtual ~tt__DefoggingMode_() { }
        /// Friend allocator used by soap_new_tt__DefoggingMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__DefoggingMode_ * SOAP_FMAC2 soap_instantiate_tt__DefoggingMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4105 */
#ifndef SOAP_TYPE_tt__ImageSendingType_
#define SOAP_TYPE_tt__ImageSendingType_ (1394)
/* simple XML schema type 'tt:ImageSendingType': */
class SOAP_CMAC tt__ImageSendingType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ImageSendingType' wrapped by this struct
        enum tt__ImageSendingType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageSendingType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageSendingType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageSendingType_, default initialized and not managed by a soap context
        virtual tt__ImageSendingType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageSendingType_); }
      public:
        /// Constructor with default initializations
        tt__ImageSendingType_() : __item() { }
        virtual ~tt__ImageSendingType_() { }
        /// Friend allocator used by soap_new_tt__ImageSendingType_(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageSendingType_ * SOAP_FMAC2 soap_instantiate_tt__ImageSendingType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4123 */
#ifndef SOAP_TYPE_tt__PropertyOperation_
#define SOAP_TYPE_tt__PropertyOperation_ (1396)
/* simple XML schema type 'tt:PropertyOperation': */
class SOAP_CMAC tt__PropertyOperation_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:PropertyOperation' wrapped by this struct
        enum tt__PropertyOperation __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__PropertyOperation_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PropertyOperation_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PropertyOperation_, default initialized and not managed by a soap context
        virtual tt__PropertyOperation_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PropertyOperation_); }
      public:
        /// Constructor with default initializations
        tt__PropertyOperation_() : __item() { }
        virtual ~tt__PropertyOperation_() { }
        /// Friend allocator used by soap_new_tt__PropertyOperation_(struct soap*, int)
        friend SOAP_FMAC1 tt__PropertyOperation_ * SOAP_FMAC2 soap_instantiate_tt__PropertyOperation_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4141 */
#ifndef SOAP_TYPE_tt__Direction_
#define SOAP_TYPE_tt__Direction_ (1398)
/* simple XML schema type 'tt:Direction': */
class SOAP_CMAC tt__Direction_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Direction' wrapped by this struct
        enum tt__Direction __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Direction_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Direction_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Direction_, default initialized and not managed by a soap context
        virtual tt__Direction_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Direction_); }
      public:
        /// Constructor with default initializations
        tt__Direction_() : __item() { }
        virtual ~tt__Direction_() { }
        /// Friend allocator used by soap_new_tt__Direction_(struct soap*, int)
        friend SOAP_FMAC1 tt__Direction_ * SOAP_FMAC2 soap_instantiate_tt__Direction_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4180 */
#ifndef SOAP_TYPE_tt__ReceiverMode_
#define SOAP_TYPE_tt__ReceiverMode_ (1400)
/* simple XML schema type 'tt:ReceiverMode': */
class SOAP_CMAC tt__ReceiverMode_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReceiverMode' wrapped by this struct
        enum tt__ReceiverMode __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverMode_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverMode_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverMode_, default initialized and not managed by a soap context
        virtual tt__ReceiverMode_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverMode_); }
      public:
        /// Constructor with default initializations
        tt__ReceiverMode_() : __item() { }
        virtual ~tt__ReceiverMode_() { }
        /// Friend allocator used by soap_new_tt__ReceiverMode_(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverMode_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverMode_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4219 */
#ifndef SOAP_TYPE_tt__ReceiverState_
#define SOAP_TYPE_tt__ReceiverState_ (1402)
/* simple XML schema type 'tt:ReceiverState': */
class SOAP_CMAC tt__ReceiverState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReceiverState' wrapped by this struct
        enum tt__ReceiverState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverState_, default initialized and not managed by a soap context
        virtual tt__ReceiverState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverState_); }
      public:
        /// Constructor with default initializations
        tt__ReceiverState_() : __item() { }
        virtual ~tt__ReceiverState_() { }
        /// Friend allocator used by soap_new_tt__ReceiverState_(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverState_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4231 */
#ifndef SOAP_TYPE_tt__Description__
#define SOAP_TYPE_tt__Description__ (1404)
/* simple XML schema type 'tt:Description': */
class SOAP_CMAC tt__Description__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Description' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Description__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Description__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Description__, default initialized and not managed by a soap context
        virtual tt__Description__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Description__); }
      public:
        /// Constructor with default initializations
        tt__Description__() : __item() { }
        virtual ~tt__Description__() { }
        /// Friend allocator used by soap_new_tt__Description__(struct soap*, int)
        friend SOAP_FMAC1 tt__Description__ * SOAP_FMAC2 soap_instantiate_tt__Description__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4243 */
#ifndef SOAP_TYPE_tt__XPathExpression__
#define SOAP_TYPE_tt__XPathExpression__ (1406)
/* simple XML schema type 'tt:XPathExpression': */
class SOAP_CMAC tt__XPathExpression__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:XPathExpression' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__XPathExpression__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__XPathExpression__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__XPathExpression__, default initialized and not managed by a soap context
        virtual tt__XPathExpression__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__XPathExpression__); }
      public:
        /// Constructor with default initializations
        tt__XPathExpression__() : __item() { }
        virtual ~tt__XPathExpression__() { }
        /// Friend allocator used by soap_new_tt__XPathExpression__(struct soap*, int)
        friend SOAP_FMAC1 tt__XPathExpression__ * SOAP_FMAC2 soap_instantiate_tt__XPathExpression__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4278 */
#ifndef SOAP_TYPE_tt__SearchState_
#define SOAP_TYPE_tt__SearchState_ (1408)
/* simple XML schema type 'tt:SearchState': */
class SOAP_CMAC tt__SearchState_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:SearchState' wrapped by this struct
        enum tt__SearchState __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchState_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchState_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchState_, default initialized and not managed by a soap context
        virtual tt__SearchState_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchState_); }
      public:
        /// Constructor with default initializations
        tt__SearchState_() : __item() { }
        virtual ~tt__SearchState_() { }
        /// Friend allocator used by soap_new_tt__SearchState_(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchState_ * SOAP_FMAC2 soap_instantiate_tt__SearchState_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4303 */
#ifndef SOAP_TYPE_tt__RecordingStatus_
#define SOAP_TYPE_tt__RecordingStatus_ (1410)
/* simple XML schema type 'tt:RecordingStatus': */
class SOAP_CMAC tt__RecordingStatus_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RecordingStatus' wrapped by this struct
        enum tt__RecordingStatus __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingStatus_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingStatus_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingStatus_, default initialized and not managed by a soap context
        virtual tt__RecordingStatus_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingStatus_); }
      public:
        /// Constructor with default initializations
        tt__RecordingStatus_() : __item() { }
        virtual ~tt__RecordingStatus_() { }
        /// Friend allocator used by soap_new_tt__RecordingStatus_(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingStatus_ * SOAP_FMAC2 soap_instantiate_tt__RecordingStatus_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4326 */
#ifndef SOAP_TYPE_tt__TrackType_
#define SOAP_TYPE_tt__TrackType_ (1412)
/* simple XML schema type 'tt:TrackType': */
class SOAP_CMAC tt__TrackType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:TrackType' wrapped by this struct
        enum tt__TrackType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackType_, default initialized and not managed by a soap context
        virtual tt__TrackType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackType_); }
      public:
        /// Constructor with default initializations
        tt__TrackType_() : __item() { }
        virtual ~tt__TrackType_() { }
        /// Friend allocator used by soap_new_tt__TrackType_(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackType_ * SOAP_FMAC2 soap_instantiate_tt__TrackType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4338 */
#ifndef SOAP_TYPE_tt__RecordingJobMode__
#define SOAP_TYPE_tt__RecordingJobMode__ (1414)
/* simple XML schema type 'tt:RecordingJobMode': */
class SOAP_CMAC tt__RecordingJobMode__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RecordingJobMode' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobMode__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobMode__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobMode__, default initialized and not managed by a soap context
        virtual tt__RecordingJobMode__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobMode__); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobMode__() : __item() { }
        virtual ~tt__RecordingJobMode__() { }
        /// Friend allocator used by soap_new_tt__RecordingJobMode__(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobMode__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobMode__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4350 */
#ifndef SOAP_TYPE_tt__RecordingJobState__
#define SOAP_TYPE_tt__RecordingJobState__ (1416)
/* simple XML schema type 'tt:RecordingJobState': */
class SOAP_CMAC tt__RecordingJobState__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RecordingJobState' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobState__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobState__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobState__, default initialized and not managed by a soap context
        virtual tt__RecordingJobState__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobState__); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobState__() : __item() { }
        virtual ~tt__RecordingJobState__() { }
        /// Friend allocator used by soap_new_tt__RecordingJobState__(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobState__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobState__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4372 */
#ifndef SOAP_TYPE_tt__ModeOfOperation_
#define SOAP_TYPE_tt__ModeOfOperation_ (1418)
/* simple XML schema type 'tt:ModeOfOperation': */
class SOAP_CMAC tt__ModeOfOperation_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ModeOfOperation' wrapped by this struct
        enum tt__ModeOfOperation __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ModeOfOperation_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ModeOfOperation_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ModeOfOperation_, default initialized and not managed by a soap context
        virtual tt__ModeOfOperation_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ModeOfOperation_); }
      public:
        /// Constructor with default initializations
        tt__ModeOfOperation_() : __item() { }
        virtual ~tt__ModeOfOperation_() { }
        /// Friend allocator used by soap_new_tt__ModeOfOperation_(struct soap*, int)
        friend SOAP_FMAC1 tt__ModeOfOperation_ * SOAP_FMAC2 soap_instantiate_tt__ModeOfOperation_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4396 */
#ifndef SOAP_TYPE_tt__AudioClassType_
#define SOAP_TYPE_tt__AudioClassType_ (1420)
/* simple XML schema type 'tt:AudioClassType': */
class SOAP_CMAC tt__AudioClassType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:AudioClassType' wrapped by this struct
        enum tt__AudioClassType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassType_, default initialized and not managed by a soap context
        virtual tt__AudioClassType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassType_); }
      public:
        /// Constructor with default initializations
        tt__AudioClassType_() : __item() { }
        virtual ~tt__AudioClassType_() { }
        /// Friend allocator used by soap_new_tt__AudioClassType_(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassType_ * SOAP_FMAC2 soap_instantiate_tt__AudioClassType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4414 */
#ifndef SOAP_TYPE_tt__OSDType_
#define SOAP_TYPE_tt__OSDType_ (1422)
/* simple XML schema type 'tt:OSDType': */
class SOAP_CMAC tt__OSDType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:OSDType' wrapped by this struct
        enum tt__OSDType __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDType_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDType_, default initialized and not managed by a soap context
        virtual tt__OSDType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDType_); }
      public:
        /// Constructor with default initializations
        tt__OSDType_() : __item() { }
        virtual ~tt__OSDType_() { }
        /// Friend allocator used by soap_new_tt__OSDType_(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDType_ * SOAP_FMAC2 soap_instantiate_tt__OSDType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4434 */
#ifndef SOAP_TYPE_tt__ReferenceToken__
#define SOAP_TYPE_tt__ReferenceToken__ (1424)
/* simple XML schema type 'tt:ReferenceToken': */
class SOAP_CMAC tt__ReferenceToken__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReferenceToken' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReferenceToken__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReferenceToken__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReferenceToken__, default initialized and not managed by a soap context
        virtual tt__ReferenceToken__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReferenceToken__); }
      public:
        /// Constructor with default initializations
        tt__ReferenceToken__() : __item() { }
        virtual ~tt__ReferenceToken__() { }
        /// Friend allocator used by soap_new_tt__ReferenceToken__(struct soap*, int)
        friend SOAP_FMAC1 tt__ReferenceToken__ * SOAP_FMAC2 soap_instantiate_tt__ReferenceToken__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4452 */
#ifndef SOAP_TYPE_tt__MoveStatus_
#define SOAP_TYPE_tt__MoveStatus_ (1426)
/* simple XML schema type 'tt:MoveStatus': */
class SOAP_CMAC tt__MoveStatus_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:MoveStatus' wrapped by this struct
        enum tt__MoveStatus __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveStatus_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveStatus_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveStatus_, default initialized and not managed by a soap context
        virtual tt__MoveStatus_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveStatus_); }
      public:
        /// Constructor with default initializations
        tt__MoveStatus_() : __item() { }
        virtual ~tt__MoveStatus_() { }
        /// Friend allocator used by soap_new_tt__MoveStatus_(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveStatus_ * SOAP_FMAC2 soap_instantiate_tt__MoveStatus_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4470 */
#ifndef SOAP_TYPE_tt__Entity_
#define SOAP_TYPE_tt__Entity_ (1428)
/* simple XML schema type 'tt:Entity': */
class SOAP_CMAC tt__Entity_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:Entity' wrapped by this struct
        enum tt__Entity __item;
      public:
        /// Return unique type id SOAP_TYPE_tt__Entity_
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Entity_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Entity_, default initialized and not managed by a soap context
        virtual tt__Entity_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Entity_); }
      public:
        /// Constructor with default initializations
        tt__Entity_() : __item() { }
        virtual ~tt__Entity_() { }
        /// Friend allocator used by soap_new_tt__Entity_(struct soap*, int)
        friend SOAP_FMAC1 tt__Entity_ * SOAP_FMAC2 soap_instantiate_tt__Entity_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4511 */
#ifndef SOAP_TYPE_wstop__FullTopicExpression__
#define SOAP_TYPE_wstop__FullTopicExpression__ (1430)
/* simple XML schema type 'wstop:FullTopicExpression': */
class SOAP_CMAC wstop__FullTopicExpression__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wstop:FullTopicExpression' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_wstop__FullTopicExpression__
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__FullTopicExpression__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__FullTopicExpression__, default initialized and not managed by a soap context
        virtual wstop__FullTopicExpression__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__FullTopicExpression__); }
      public:
        /// Constructor with default initializations
        wstop__FullTopicExpression__() : __item() { }
        virtual ~wstop__FullTopicExpression__() { }
        /// Friend allocator used by soap_new_wstop__FullTopicExpression__(struct soap*, int)
        friend SOAP_FMAC1 wstop__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4529 */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_wstop__ConcreteTopicExpression__ (1432)
/* simple XML schema type 'wstop:ConcreteTopicExpression': */
class SOAP_CMAC wstop__ConcreteTopicExpression__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'wstop:ConcreteTopicExpression' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_wstop__ConcreteTopicExpression__
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__ConcreteTopicExpression__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__ConcreteTopicExpression__, default initialized and not managed by a soap context
        virtual wstop__ConcreteTopicExpression__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__ConcreteTopicExpression__); }
      public:
        /// Constructor with default initializations
        wstop__ConcreteTopicExpression__() : __item() { }
        virtual ~wstop__ConcreteTopicExpression__() { }
        /// Friend allocator used by soap_new_wstop__ConcreteTopicExpression__(struct soap*, int)
        friend SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4546 */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression__
#define SOAP_TYPE_wstop__SimpleTopicExpression__ (1434)
/* simple XML schema type 'wstop:SimpleTopicExpression': */
class SOAP_CMAC wstop__SimpleTopicExpression__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:QName' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_wstop__SimpleTopicExpression__
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__SimpleTopicExpression__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__SimpleTopicExpression__, default initialized and not managed by a soap context
        virtual wstop__SimpleTopicExpression__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__SimpleTopicExpression__); }
      public:
        /// Constructor with default initializations
        wstop__SimpleTopicExpression__() : __item() { }
        virtual ~wstop__SimpleTopicExpression__() { }
        /// Friend allocator used by soap_new_wstop__SimpleTopicExpression__(struct soap*, int)
        friend SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4589 */
#ifndef SOAP_TYPE_tev__EventBrokerProtocol_
#define SOAP_TYPE_tev__EventBrokerProtocol_ (1436)
/* simple XML schema type 'tev:EventBrokerProtocol': */
class SOAP_CMAC tev__EventBrokerProtocol_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tev:EventBrokerProtocol' wrapped by this struct
        enum tev__EventBrokerProtocol __item;
      public:
        /// Return unique type id SOAP_TYPE_tev__EventBrokerProtocol_
        virtual long soap_type(void) const { return SOAP_TYPE_tev__EventBrokerProtocol_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tev__EventBrokerProtocol_, default initialized and not managed by a soap context
        virtual tev__EventBrokerProtocol_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tev__EventBrokerProtocol_); }
      public:
        /// Constructor with default initializations
        tev__EventBrokerProtocol_() : __item() { }
        virtual ~tev__EventBrokerProtocol_() { }
        /// Friend allocator used by soap_new_tev__EventBrokerProtocol_(struct soap*, int)
        friend SOAP_FMAC1 tev__EventBrokerProtocol_ * SOAP_FMAC2 soap_instantiate_tev__EventBrokerProtocol_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4607 */
#ifndef SOAP_TYPE_tev__ConnectionStatus_
#define SOAP_TYPE_tev__ConnectionStatus_ (1438)
/* simple XML schema type 'tev:ConnectionStatus': */
class SOAP_CMAC tev__ConnectionStatus_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tev:ConnectionStatus' wrapped by this struct
        enum tev__ConnectionStatus __item;
      public:
        /// Return unique type id SOAP_TYPE_tev__ConnectionStatus_
        virtual long soap_type(void) const { return SOAP_TYPE_tev__ConnectionStatus_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tev__ConnectionStatus_, default initialized and not managed by a soap context
        virtual tev__ConnectionStatus_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tev__ConnectionStatus_); }
      public:
        /// Constructor with default initializations
        tev__ConnectionStatus_() : __item() { }
        virtual ~tev__ConnectionStatus_() { }
        /// Friend allocator used by soap_new_tev__ConnectionStatus_(struct soap*, int)
        friend SOAP_FMAC1 tev__ConnectionStatus_ * SOAP_FMAC2 soap_instantiate_tev__ConnectionStatus_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4682 */
#ifndef SOAP_TYPE_timg__ImagingPresetType_
#define SOAP_TYPE_timg__ImagingPresetType_ (1440)
/* simple XML schema type 'timg:ImagingPresetType': */
class SOAP_CMAC timg__ImagingPresetType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'timg:ImagingPresetType' wrapped by this struct
        enum timg__ImagingPresetType __item;
      public:
        /// Return unique type id SOAP_TYPE_timg__ImagingPresetType_
        virtual long soap_type(void) const { return SOAP_TYPE_timg__ImagingPresetType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type timg__ImagingPresetType_, default initialized and not managed by a soap context
        virtual timg__ImagingPresetType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(timg__ImagingPresetType_); }
      public:
        /// Constructor with default initializations
        timg__ImagingPresetType_() : __item() { }
        virtual ~timg__ImagingPresetType_() { }
        /// Friend allocator used by soap_new_timg__ImagingPresetType_(struct soap*, int)
        friend SOAP_FMAC1 timg__ImagingPresetType_ * SOAP_FMAC2 soap_instantiate_timg__ImagingPresetType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4716 */
#ifndef SOAP_TYPE_tr2__ConfigurationEnumeration_
#define SOAP_TYPE_tr2__ConfigurationEnumeration_ (1442)
/* simple XML schema type 'tr2:ConfigurationEnumeration': */
class SOAP_CMAC tr2__ConfigurationEnumeration_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tr2:ConfigurationEnumeration' wrapped by this struct
        enum tr2__ConfigurationEnumeration __item;
      public:
        /// Return unique type id SOAP_TYPE_tr2__ConfigurationEnumeration_
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__ConfigurationEnumeration_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__ConfigurationEnumeration_, default initialized and not managed by a soap context
        virtual tr2__ConfigurationEnumeration_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__ConfigurationEnumeration_); }
      public:
        /// Constructor with default initializations
        tr2__ConfigurationEnumeration_() : __item() { }
        virtual ~tr2__ConfigurationEnumeration_() { }
        /// Friend allocator used by soap_new_tr2__ConfigurationEnumeration_(struct soap*, int)
        friend SOAP_FMAC1 tr2__ConfigurationEnumeration_ * SOAP_FMAC2 soap_instantiate_tr2__ConfigurationEnumeration_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4735 */
#ifndef SOAP_TYPE_tr2__TransportProtocol_
#define SOAP_TYPE_tr2__TransportProtocol_ (1444)
/* simple XML schema type 'tr2:TransportProtocol': */
class SOAP_CMAC tr2__TransportProtocol_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tr2:TransportProtocol' wrapped by this struct
        enum tr2__TransportProtocol __item;
      public:
        /// Return unique type id SOAP_TYPE_tr2__TransportProtocol_
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__TransportProtocol_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__TransportProtocol_, default initialized and not managed by a soap context
        virtual tr2__TransportProtocol_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__TransportProtocol_); }
      public:
        /// Constructor with default initializations
        tr2__TransportProtocol_() : __item() { }
        virtual ~tr2__TransportProtocol_() { }
        /// Friend allocator used by soap_new_tr2__TransportProtocol_(struct soap*, int)
        friend SOAP_FMAC1 tr2__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_tr2__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4753 */
#ifndef SOAP_TYPE_tr2__MaskType_
#define SOAP_TYPE_tr2__MaskType_ (1446)
/* simple XML schema type 'tr2:MaskType': */
class SOAP_CMAC tr2__MaskType_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tr2:MaskType' wrapped by this struct
        enum tr2__MaskType __item;
      public:
        /// Return unique type id SOAP_TYPE_tr2__MaskType_
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__MaskType_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__MaskType_, default initialized and not managed by a soap context
        virtual tr2__MaskType_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__MaskType_); }
      public:
        /// Constructor with default initializations
        tr2__MaskType_() : __item() { }
        virtual ~tr2__MaskType_() { }
        /// Friend allocator used by soap_new_tr2__MaskType_(struct soap*, int)
        friend SOAP_FMAC1 tr2__MaskType_ * SOAP_FMAC2 soap_instantiate_tr2__MaskType_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4773 */
#ifndef SOAP_TYPE_tt__ReceiverReference__
#define SOAP_TYPE_tt__ReceiverReference__ (1448)
/* simple XML schema type 'tt:ReceiverReference': */
class SOAP_CMAC tt__ReceiverReference__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReceiverReference' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverReference__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverReference__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverReference__, default initialized and not managed by a soap context
        virtual tt__ReceiverReference__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverReference__); }
      public:
        /// Constructor with default initializations
        tt__ReceiverReference__() : __item() { }
        virtual ~tt__ReceiverReference__() { }
        /// Friend allocator used by soap_new_tt__ReceiverReference__(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverReference__ * SOAP_FMAC2 soap_instantiate_tt__ReceiverReference__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4785 */
#ifndef SOAP_TYPE_tt__RecordingReference__
#define SOAP_TYPE_tt__RecordingReference__ (1450)
/* simple XML schema type 'tt:RecordingReference': */
class SOAP_CMAC tt__RecordingReference__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RecordingReference' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingReference__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingReference__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingReference__, default initialized and not managed by a soap context
        virtual tt__RecordingReference__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingReference__); }
      public:
        /// Constructor with default initializations
        tt__RecordingReference__() : __item() { }
        virtual ~tt__RecordingReference__() { }
        /// Friend allocator used by soap_new_tt__RecordingReference__(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingReference__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4797 */
#ifndef SOAP_TYPE_tt__TrackReference__
#define SOAP_TYPE_tt__TrackReference__ (1452)
/* simple XML schema type 'tt:TrackReference': */
class SOAP_CMAC tt__TrackReference__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:TrackReference' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackReference__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackReference__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackReference__, default initialized and not managed by a soap context
        virtual tt__TrackReference__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackReference__); }
      public:
        /// Constructor with default initializations
        tt__TrackReference__() : __item() { }
        virtual ~tt__TrackReference__() { }
        /// Friend allocator used by soap_new_tt__TrackReference__(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackReference__ * SOAP_FMAC2 soap_instantiate_tt__TrackReference__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4809 */
#ifndef SOAP_TYPE_tt__JobToken__
#define SOAP_TYPE_tt__JobToken__ (1454)
/* simple XML schema type 'tt:JobToken': */
class SOAP_CMAC tt__JobToken__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:JobToken' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__JobToken__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JobToken__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JobToken__, default initialized and not managed by a soap context
        virtual tt__JobToken__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JobToken__); }
      public:
        /// Constructor with default initializations
        tt__JobToken__() : __item() { }
        virtual ~tt__JobToken__() { }
        /// Friend allocator used by soap_new_tt__JobToken__(struct soap*, int)
        friend SOAP_FMAC1 tt__JobToken__ * SOAP_FMAC2 soap_instantiate_tt__JobToken__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4821 */
#ifndef SOAP_TYPE_tt__RecordingJobReference__
#define SOAP_TYPE_tt__RecordingJobReference__ (1456)
/* simple XML schema type 'tt:RecordingJobReference': */
class SOAP_CMAC tt__RecordingJobReference__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:RecordingJobReference' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobReference__
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobReference__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobReference__, default initialized and not managed by a soap context
        virtual tt__RecordingJobReference__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobReference__); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobReference__() : __item() { }
        virtual ~tt__RecordingJobReference__() { }
        /// Friend allocator used by soap_new_tt__RecordingJobReference__(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobReference__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:4968 */
#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (1457)
/* complex XML schema type 'tds:Service-Capabilities': */
class SOAP_CMAC _tds__Service_Capabilities {
      public:
        /// Return unique type id SOAP_TYPE__tds__Service_Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__Service_Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__Service_Capabilities, default initialized and not managed by a soap context
        virtual _tds__Service_Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__Service_Capabilities); }
      public:
        /// Constructor with default initializations
        _tds__Service_Capabilities() { }
        virtual ~_tds__Service_Capabilities() { }
        /// Friend allocator used by soap_new__tds__Service_Capabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__Service_Capabilities * SOAP_FMAC2 soap_instantiate__tds__Service_Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:450 */
#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (177)
/* Type tds__Service is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tds:Service': */
class SOAP_CMAC tds__Service : public xsd__anyType {
      public:
        /// Required element 'tds:Namespace' of XML schema type 'xsd:anyURI'
        char *Namespace;
        /// Required element 'tds:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Optional element 'tds:Capabilities' of XML schema type 'tds:Service-Capabilities'
        _tds__Service_Capabilities *Capabilities;
        /// Required element 'tds:Version' of XML schema type 'tt:OnvifVersion'
        tt__OnvifVersion *Version;
      public:
        /// Return unique type id SOAP_TYPE_tds__Service
        virtual long soap_type(void) const { return SOAP_TYPE_tds__Service; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__Service, default initialized and not managed by a soap context
        virtual tds__Service *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__Service); }
      public:
        /// Constructor with default initializations
        tds__Service() : Namespace(), XAddr(), Capabilities(), Version() { }
        virtual ~tds__Service() { }
        /// Friend allocator used by soap_new_tds__Service(struct soap*, int)
        friend SOAP_FMAC1 tds__Service * SOAP_FMAC2 soap_instantiate_tds__Service(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:452 */
#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (178)
/* Type tds__DeviceServiceCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tds:DeviceServiceCapabilities': */
class SOAP_CMAC tds__DeviceServiceCapabilities : public xsd__anyType {
      public:
        /// Required element 'tds:Network' of XML schema type 'tds:NetworkCapabilities'
        tds__NetworkCapabilities *Network;
        /// Required element 'tds:Security' of XML schema type 'tds:SecurityCapabilities'
        tds__SecurityCapabilities *Security;
        /// Required element 'tds:System' of XML schema type 'tds:SystemCapabilities'
        tds__SystemCapabilities *System;
        /// Optional element 'tds:Misc' of XML schema type 'tds:MiscCapabilities'
        tds__MiscCapabilities *Misc;
      public:
        /// Return unique type id SOAP_TYPE_tds__DeviceServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__DeviceServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__DeviceServiceCapabilities, default initialized and not managed by a soap context
        virtual tds__DeviceServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__DeviceServiceCapabilities); }
      public:
        /// Constructor with default initializations
        tds__DeviceServiceCapabilities() : Network(), Security(), System(), Misc() { }
        virtual ~tds__DeviceServiceCapabilities() { }
        /// Friend allocator used by soap_new_tds__DeviceServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__DeviceServiceCapabilities * SOAP_FMAC2 soap_instantiate_tds__DeviceServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:454 */
#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (179)
/* Type tds__NetworkCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tds:NetworkCapabilities': */
class SOAP_CMAC tds__NetworkCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'IPFilter' of XML schema type 'xsd:boolean'
        bool *IPFilter;
        /// Optional attribute 'ZeroConfiguration' of XML schema type 'xsd:boolean'
        bool *ZeroConfiguration;
        /// Optional attribute 'IPVersion6' of XML schema type 'xsd:boolean'
        bool *IPVersion6;
        /// Optional attribute 'DynDNS' of XML schema type 'xsd:boolean'
        bool *DynDNS;
        /// Optional attribute 'Dot11Configuration' of XML schema type 'xsd:boolean'
        bool *Dot11Configuration;
        /// Optional attribute 'Dot1XConfigurations' of XML schema type 'xsd:int'
        int *Dot1XConfigurations;
        /// Optional attribute 'HostnameFromDHCP' of XML schema type 'xsd:boolean'
        bool *HostnameFromDHCP;
        /// Optional attribute 'NTP' of XML schema type 'xsd:int'
        int *NTP;
        /// Optional attribute 'DHCPv6' of XML schema type 'xsd:boolean'
        bool *DHCPv6;
      public:
        /// Return unique type id SOAP_TYPE_tds__NetworkCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__NetworkCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__NetworkCapabilities, default initialized and not managed by a soap context
        virtual tds__NetworkCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__NetworkCapabilities); }
      public:
        /// Constructor with default initializations
        tds__NetworkCapabilities() : IPFilter(), ZeroConfiguration(), IPVersion6(), DynDNS(), Dot11Configuration(), Dot1XConfigurations(), HostnameFromDHCP(), NTP(), DHCPv6() { }
        virtual ~tds__NetworkCapabilities() { }
        /// Friend allocator used by soap_new_tds__NetworkCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tds__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:456 */
#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (180)
/* Type tds__SecurityCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tds:SecurityCapabilities': */
class SOAP_CMAC tds__SecurityCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'TLS1.0' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e0;
        /// Optional attribute 'TLS1.1' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e1;
        /// Optional attribute 'TLS1.2' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e2;
        /// Optional attribute 'OnboardKeyGeneration' of XML schema type 'xsd:boolean'
        bool *OnboardKeyGeneration;
        /// Optional attribute 'AccessPolicyConfig' of XML schema type 'xsd:boolean'
        bool *AccessPolicyConfig;
        /// Optional attribute 'DefaultAccessPolicy' of XML schema type 'xsd:boolean'
        bool *DefaultAccessPolicy;
        /// Optional attribute 'Dot1X' of XML schema type 'xsd:boolean'
        bool *Dot1X;
        /// Optional attribute 'RemoteUserHandling' of XML schema type 'xsd:boolean'
        bool *RemoteUserHandling;
        /// Optional attribute 'X.509Token' of XML schema type 'xsd:boolean'
        bool *X_x002e509Token;
        /// Optional attribute 'SAMLToken' of XML schema type 'xsd:boolean'
        bool *SAMLToken;
        /// Optional attribute 'KerberosToken' of XML schema type 'xsd:boolean'
        bool *KerberosToken;
        /// Optional attribute 'UsernameToken' of XML schema type 'xsd:boolean'
        bool *UsernameToken;
        /// Optional attribute 'HttpDigest' of XML schema type 'xsd:boolean'
        bool *HttpDigest;
        /// Optional attribute 'RELToken' of XML schema type 'xsd:boolean'
        bool *RELToken;
        /// Optional attribute 'SupportedEAPMethods' of XML schema type 'tt:IntList'
        char *SupportedEAPMethods;
        /// Optional attribute 'MaxUsers' of XML schema type 'xsd:int'
        int *MaxUsers;
        /// Optional attribute 'MaxUserNameLength' of XML schema type 'xsd:int'
        int *MaxUserNameLength;
        /// Optional attribute 'MaxPasswordLength' of XML schema type 'xsd:int'
        int *MaxPasswordLength;
        /// Optional attribute 'SecurityPolicies' of XML schema type 'tt:StringList'
        char *SecurityPolicies;
        /// Optional attribute 'MaxPasswordHistory' of XML schema type 'xsd:int'
        int *MaxPasswordHistory;
      public:
        /// Return unique type id SOAP_TYPE_tds__SecurityCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__SecurityCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__SecurityCapabilities, default initialized and not managed by a soap context
        virtual tds__SecurityCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__SecurityCapabilities); }
      public:
        /// Constructor with default initializations
        tds__SecurityCapabilities() : TLS1_x002e0(), TLS1_x002e1(), TLS1_x002e2(), OnboardKeyGeneration(), AccessPolicyConfig(), DefaultAccessPolicy(), Dot1X(), RemoteUserHandling(), X_x002e509Token(), SAMLToken(), KerberosToken(), UsernameToken(), HttpDigest(), RELToken(), SupportedEAPMethods(), MaxUsers(), MaxUserNameLength(), MaxPasswordLength(), SecurityPolicies(), MaxPasswordHistory() { }
        virtual ~tds__SecurityCapabilities() { }
        /// Friend allocator used by soap_new_tds__SecurityCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tds__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:458 */
#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (181)
/* Type tds__SystemCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tds:SystemCapabilities': */
class SOAP_CMAC tds__SystemCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'DiscoveryResolve' of XML schema type 'xsd:boolean'
        bool *DiscoveryResolve;
        /// Optional attribute 'DiscoveryBye' of XML schema type 'xsd:boolean'
        bool *DiscoveryBye;
        /// Optional attribute 'RemoteDiscovery' of XML schema type 'xsd:boolean'
        bool *RemoteDiscovery;
        /// Optional attribute 'SystemBackup' of XML schema type 'xsd:boolean'
        bool *SystemBackup;
        /// Optional attribute 'SystemLogging' of XML schema type 'xsd:boolean'
        bool *SystemLogging;
        /// Optional attribute 'FirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *FirmwareUpgrade;
        /// Optional attribute 'HttpFirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *HttpFirmwareUpgrade;
        /// Optional attribute 'HttpSystemBackup' of XML schema type 'xsd:boolean'
        bool *HttpSystemBackup;
        /// Optional attribute 'HttpSystemLogging' of XML schema type 'xsd:boolean'
        bool *HttpSystemLogging;
        /// Optional attribute 'HttpSupportInformation' of XML schema type 'xsd:boolean'
        bool *HttpSupportInformation;
        /// Optional attribute 'StorageConfiguration' of XML schema type 'xsd:boolean'
        bool *StorageConfiguration;
        /// Optional attribute 'MaxStorageConfigurations' of XML schema type 'xsd:int'
        int *MaxStorageConfigurations;
        /// Optional attribute 'GeoLocationEntries' of XML schema type 'xsd:int'
        int *GeoLocationEntries;
        /// Optional attribute 'AutoGeo' of XML schema type 'tt:StringAttrList'
        char *AutoGeo;
        /// Optional attribute 'StorageTypesSupported' of XML schema type 'tt:StringAttrList'
        char *StorageTypesSupported;
        /// Optional attribute 'DiscoveryNotSupported' of XML schema type 'xsd:boolean'
        bool *DiscoveryNotSupported;
        /// Optional attribute 'NetworkConfigNotSupported' of XML schema type 'xsd:boolean'
        bool *NetworkConfigNotSupported;
        /// Optional attribute 'UserConfigNotSupported' of XML schema type 'xsd:boolean'
        bool *UserConfigNotSupported;
      public:
        /// Return unique type id SOAP_TYPE_tds__SystemCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__SystemCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__SystemCapabilities, default initialized and not managed by a soap context
        virtual tds__SystemCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__SystemCapabilities); }
      public:
        /// Constructor with default initializations
        tds__SystemCapabilities() : DiscoveryResolve(), DiscoveryBye(), RemoteDiscovery(), SystemBackup(), SystemLogging(), FirmwareUpgrade(), HttpFirmwareUpgrade(), HttpSystemBackup(), HttpSystemLogging(), HttpSupportInformation(), StorageConfiguration(), MaxStorageConfigurations(), GeoLocationEntries(), AutoGeo(), StorageTypesSupported(), DiscoveryNotSupported(), NetworkConfigNotSupported(), UserConfigNotSupported() { }
        virtual ~tds__SystemCapabilities() { }
        /// Friend allocator used by soap_new_tds__SystemCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tds__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:460 */
#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (182)
/* Type tds__MiscCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tds:MiscCapabilities': */
class SOAP_CMAC tds__MiscCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'AuxiliaryCommands' of XML schema type 'tt:StringAttrList'
        char *AuxiliaryCommands;
      public:
        /// Return unique type id SOAP_TYPE_tds__MiscCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__MiscCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__MiscCapabilities, default initialized and not managed by a soap context
        virtual tds__MiscCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__MiscCapabilities); }
      public:
        /// Constructor with default initializations
        tds__MiscCapabilities() : AuxiliaryCommands() { }
        virtual ~tds__MiscCapabilities() { }
        /// Friend allocator used by soap_new_tds__MiscCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__MiscCapabilities * SOAP_FMAC2 soap_instantiate_tds__MiscCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5451 */
#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (1465)
/* complex XML schema type 'tds:UserCredential-Extension': */
class SOAP_CMAC _tds__UserCredential_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__UserCredential_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UserCredential_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UserCredential_Extension, default initialized and not managed by a soap context
        virtual _tds__UserCredential_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UserCredential_Extension); }
      public:
        /// Constructor with default initializations
        _tds__UserCredential_Extension() { }
        virtual ~_tds__UserCredential_Extension() { }
        /// Friend allocator used by soap_new__tds__UserCredential_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__UserCredential_Extension * SOAP_FMAC2 soap_instantiate__tds__UserCredential_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:462 */
#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (183)
/* Type tds__UserCredential is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tds:UserCredential': */
class SOAP_CMAC tds__UserCredential : public xsd__anyType {
      public:
        /// Required element 'tds:UserName' of XML schema type 'xsd:string'
        char *UserName;
        /// Optional element 'tds:Password' of XML schema type 'xsd:string'
        char *Password;
        /// Optional element 'tds:Extension' of XML schema type 'tds:UserCredential-Extension'
        _tds__UserCredential_Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tds__UserCredential
        virtual long soap_type(void) const { return SOAP_TYPE_tds__UserCredential; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__UserCredential, default initialized and not managed by a soap context
        virtual tds__UserCredential *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__UserCredential); }
      public:
        /// Constructor with default initializations
        tds__UserCredential() : UserName(), Password(), Extension() { }
        virtual ~tds__UserCredential() { }
        /// Friend allocator used by soap_new_tds__UserCredential(struct soap*, int)
        friend SOAP_FMAC1 tds__UserCredential * SOAP_FMAC2 soap_instantiate_tds__UserCredential(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:5506 */
#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (1468)
/* complex XML schema type 'tds:StorageConfigurationData-Extension': */
class SOAP_CMAC _tds__StorageConfigurationData_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__StorageConfigurationData_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StorageConfigurationData_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StorageConfigurationData_Extension, default initialized and not managed by a soap context
        virtual _tds__StorageConfigurationData_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StorageConfigurationData_Extension); }
      public:
        /// Constructor with default initializations
        _tds__StorageConfigurationData_Extension() { }
        virtual ~_tds__StorageConfigurationData_Extension() { }
        /// Friend allocator used by soap_new__tds__StorageConfigurationData_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__StorageConfigurationData_Extension * SOAP_FMAC2 soap_instantiate__tds__StorageConfigurationData_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:464 */
#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (184)
/* Type tds__StorageConfigurationData is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tds:StorageConfigurationData': */
class SOAP_CMAC tds__StorageConfigurationData : public xsd__anyType {
      public:
        /// Optional element 'tds:LocalPath' of XML schema type 'xsd:anyURI'
        char *LocalPath;
        /// Optional element 'tds:StorageUri' of XML schema type 'xsd:anyURI'
        char *StorageUri;
        /// Optional element 'tds:User' of XML schema type 'tds:UserCredential'
        tds__UserCredential *User;
        /// Optional element 'tds:Extension' of XML schema type 'tds:StorageConfigurationData-Extension'
        _tds__StorageConfigurationData_Extension *Extension;
        /// Required attribute 'type' of XML schema type 'xsd:string'
        char *type;
      public:
        /// Return unique type id SOAP_TYPE_tds__StorageConfigurationData
        virtual long soap_type(void) const { return SOAP_TYPE_tds__StorageConfigurationData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__StorageConfigurationData, default initialized and not managed by a soap context
        virtual tds__StorageConfigurationData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__StorageConfigurationData); }
      public:
        /// Constructor with default initializations
        tds__StorageConfigurationData() : LocalPath(), StorageUri(), User(), Extension(), type() { }
        virtual ~tds__StorageConfigurationData() { }
        /// Friend allocator used by soap_new_tds__StorageConfigurationData(struct soap*, int)
        friend SOAP_FMAC1 tds__StorageConfigurationData * SOAP_FMAC2 soap_instantiate_tds__StorageConfigurationData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:468 */
#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (186)
/* complex XML schema type 'tds:GetServices': */
class SOAP_CMAC _tds__GetServices {
      public:
        /// Required element 'tds:IncludeCapability' of XML schema type 'xsd:boolean'
        bool IncludeCapability;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServices
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServices, default initialized and not managed by a soap context
        virtual _tds__GetServices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServices); }
      public:
        /// Constructor with default initializations
        _tds__GetServices() : IncludeCapability(), soap() { }
        virtual ~_tds__GetServices() { }
        /// Friend allocator used by soap_new__tds__GetServices(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServices * SOAP_FMAC2 soap_instantiate__tds__GetServices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:470 */
#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (187)
/* complex XML schema type 'tds:GetServicesResponse': */
class SOAP_CMAC _tds__GetServicesResponse {
      public:
        /// Sequence of at least 1 elements 'tds:Service' of XML schema type 'tds:Service' stored in dynamic array Service of length __sizeService
        int __sizeService;
        tds__Service **Service;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServicesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServicesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServicesResponse, default initialized and not managed by a soap context
        virtual _tds__GetServicesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServicesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetServicesResponse() : __sizeService(), Service(), soap() { }
        virtual ~_tds__GetServicesResponse() { }
        /// Friend allocator used by soap_new__tds__GetServicesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServicesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServicesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:472 */
#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (188)
/* complex XML schema type 'tds:GetServiceCapabilities': */
class SOAP_CMAC _tds__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tds__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetServiceCapabilities() : soap() { }
        virtual ~_tds__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tds__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:474 */
#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (189)
/* complex XML schema type 'tds:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tds__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tds:DeviceServiceCapabilities'
        tds__DeviceServiceCapabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tds__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:476 */
#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (190)
/* complex XML schema type 'tds:GetDeviceInformation': */
class SOAP_CMAC _tds__GetDeviceInformation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDeviceInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDeviceInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDeviceInformation, default initialized and not managed by a soap context
        virtual _tds__GetDeviceInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDeviceInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetDeviceInformation() : soap() { }
        virtual ~_tds__GetDeviceInformation() { }
        /// Friend allocator used by soap_new__tds__GetDeviceInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:478 */
#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (191)
/* complex XML schema type 'tds:GetDeviceInformationResponse': */
class SOAP_CMAC _tds__GetDeviceInformationResponse {
      public:
        /// Required element 'tds:Manufacturer' of XML schema type 'xsd:string'
        char *Manufacturer;
        /// Required element 'tds:Model' of XML schema type 'xsd:string'
        char *Model;
        /// Required element 'tds:FirmwareVersion' of XML schema type 'xsd:string'
        char *FirmwareVersion;
        /// Required element 'tds:SerialNumber' of XML schema type 'xsd:string'
        char *SerialNumber;
        /// Required element 'tds:HardwareId' of XML schema type 'xsd:string'
        char *HardwareId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDeviceInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDeviceInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDeviceInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetDeviceInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDeviceInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDeviceInformationResponse() : Manufacturer(), Model(), FirmwareVersion(), SerialNumber(), HardwareId(), soap() { }
        virtual ~_tds__GetDeviceInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetDeviceInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDeviceInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:480 */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (192)
/* complex XML schema type 'tds:SetSystemDateAndTime': */
class SOAP_CMAC _tds__SetSystemDateAndTime {
      public:
        /// Required element 'tds:DateTimeType' of XML schema type 'tt:SetDateTimeType'
        enum tt__SetDateTimeType DateTimeType;
        /// Required element 'tds:DaylightSavings' of XML schema type 'xsd:boolean'
        bool DaylightSavings;
        /// Optional element 'tds:TimeZone' of XML schema type 'tt:TimeZone'
        tt__TimeZone *TimeZone;
        /// Optional element 'tds:UTCDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *UTCDateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemDateAndTime
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemDateAndTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemDateAndTime, default initialized and not managed by a soap context
        virtual _tds__SetSystemDateAndTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemDateAndTime); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemDateAndTime() : DateTimeType(), DaylightSavings(), TimeZone(), UTCDateTime(), soap() { }
        virtual ~_tds__SetSystemDateAndTime() { }
        /// Friend allocator used by soap_new__tds__SetSystemDateAndTime(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:482 */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (193)
/* complex XML schema type 'tds:SetSystemDateAndTimeResponse': */
class SOAP_CMAC _tds__SetSystemDateAndTimeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemDateAndTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemDateAndTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemDateAndTimeResponse, default initialized and not managed by a soap context
        virtual _tds__SetSystemDateAndTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemDateAndTimeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemDateAndTimeResponse() : soap() { }
        virtual ~_tds__SetSystemDateAndTimeResponse() { }
        /// Friend allocator used by soap_new__tds__SetSystemDateAndTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:484 */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (194)
/* complex XML schema type 'tds:GetSystemDateAndTime': */
class SOAP_CMAC _tds__GetSystemDateAndTime {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemDateAndTime
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemDateAndTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemDateAndTime, default initialized and not managed by a soap context
        virtual _tds__GetSystemDateAndTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemDateAndTime); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemDateAndTime() : soap() { }
        virtual ~_tds__GetSystemDateAndTime() { }
        /// Friend allocator used by soap_new__tds__GetSystemDateAndTime(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:486 */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (195)
/* complex XML schema type 'tds:GetSystemDateAndTimeResponse': */
class SOAP_CMAC _tds__GetSystemDateAndTimeResponse {
      public:
        /// Required element 'tds:SystemDateAndTime' of XML schema type 'tt:SystemDateTime'
        tt__SystemDateTime *SystemDateAndTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemDateAndTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemDateAndTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemDateAndTimeResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemDateAndTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemDateAndTimeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemDateAndTimeResponse() : SystemDateAndTime(), soap() { }
        virtual ~_tds__GetSystemDateAndTimeResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemDateAndTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:488 */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (196)
/* complex XML schema type 'tds:SetSystemFactoryDefault': */
class SOAP_CMAC _tds__SetSystemFactoryDefault {
      public:
        /// Required element 'tds:FactoryDefault' of XML schema type 'tt:FactoryDefaultType'
        enum tt__FactoryDefaultType FactoryDefault;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemFactoryDefault
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemFactoryDefault; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemFactoryDefault, default initialized and not managed by a soap context
        virtual _tds__SetSystemFactoryDefault *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemFactoryDefault); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemFactoryDefault() : FactoryDefault(), soap() { }
        virtual ~_tds__SetSystemFactoryDefault() { }
        /// Friend allocator used by soap_new__tds__SetSystemFactoryDefault(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:490 */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (197)
/* complex XML schema type 'tds:SetSystemFactoryDefaultResponse': */
class SOAP_CMAC _tds__SetSystemFactoryDefaultResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemFactoryDefaultResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemFactoryDefaultResponse, default initialized and not managed by a soap context
        virtual _tds__SetSystemFactoryDefaultResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemFactoryDefaultResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemFactoryDefaultResponse() : soap() { }
        virtual ~_tds__SetSystemFactoryDefaultResponse() { }
        /// Friend allocator used by soap_new__tds__SetSystemFactoryDefaultResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefaultResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:492 */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (198)
/* complex XML schema type 'tds:UpgradeSystemFirmware': */
class SOAP_CMAC _tds__UpgradeSystemFirmware {
      public:
        /// Required element 'tds:Firmware' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Firmware;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__UpgradeSystemFirmware
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UpgradeSystemFirmware; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UpgradeSystemFirmware, default initialized and not managed by a soap context
        virtual _tds__UpgradeSystemFirmware *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UpgradeSystemFirmware); }
      public:
        /// Constructor with default initializations
        _tds__UpgradeSystemFirmware() : Firmware(), soap() { }
        virtual ~_tds__UpgradeSystemFirmware() { }
        /// Friend allocator used by soap_new__tds__UpgradeSystemFirmware(struct soap*, int)
        friend SOAP_FMAC1 _tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:494 */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (199)
/* complex XML schema type 'tds:UpgradeSystemFirmwareResponse': */
class SOAP_CMAC _tds__UpgradeSystemFirmwareResponse {
      public:
        /// Optional element 'tds:Message' of XML schema type 'xsd:string'
        char *Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UpgradeSystemFirmwareResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UpgradeSystemFirmwareResponse, default initialized and not managed by a soap context
        virtual _tds__UpgradeSystemFirmwareResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UpgradeSystemFirmwareResponse); }
      public:
        /// Constructor with default initializations
        _tds__UpgradeSystemFirmwareResponse() : Message(), soap() { }
        virtual ~_tds__UpgradeSystemFirmwareResponse() { }
        /// Friend allocator used by soap_new__tds__UpgradeSystemFirmwareResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmwareResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:496 */
#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (200)
/* complex XML schema type 'tds:SystemReboot': */
class SOAP_CMAC _tds__SystemReboot {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SystemReboot
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SystemReboot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SystemReboot, default initialized and not managed by a soap context
        virtual _tds__SystemReboot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SystemReboot); }
      public:
        /// Constructor with default initializations
        _tds__SystemReboot() : soap() { }
        virtual ~_tds__SystemReboot() { }
        /// Friend allocator used by soap_new__tds__SystemReboot(struct soap*, int)
        friend SOAP_FMAC1 _tds__SystemReboot * SOAP_FMAC2 soap_instantiate__tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:498 */
#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (201)
/* complex XML schema type 'tds:SystemRebootResponse': */
class SOAP_CMAC _tds__SystemRebootResponse {
      public:
        /// Required element 'tds:Message' of XML schema type 'xsd:string'
        char *Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SystemRebootResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SystemRebootResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SystemRebootResponse, default initialized and not managed by a soap context
        virtual _tds__SystemRebootResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SystemRebootResponse); }
      public:
        /// Constructor with default initializations
        _tds__SystemRebootResponse() : Message(), soap() { }
        virtual ~_tds__SystemRebootResponse() { }
        /// Friend allocator used by soap_new__tds__SystemRebootResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SystemRebootResponse * SOAP_FMAC2 soap_instantiate__tds__SystemRebootResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:500 */
#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (202)
/* complex XML schema type 'tds:RestoreSystem': */
class SOAP_CMAC _tds__RestoreSystem {
      public:
        /// Sequence of at least 1 elements 'tds:BackupFiles' of XML schema type 'tt:BackupFile' stored in dynamic array BackupFiles of length __sizeBackupFiles
        int __sizeBackupFiles;
        tt__BackupFile **BackupFiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RestoreSystem
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RestoreSystem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RestoreSystem, default initialized and not managed by a soap context
        virtual _tds__RestoreSystem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RestoreSystem); }
      public:
        /// Constructor with default initializations
        _tds__RestoreSystem() : __sizeBackupFiles(), BackupFiles(), soap() { }
        virtual ~_tds__RestoreSystem() { }
        /// Friend allocator used by soap_new__tds__RestoreSystem(struct soap*, int)
        friend SOAP_FMAC1 _tds__RestoreSystem * SOAP_FMAC2 soap_instantiate__tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:502 */
#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (203)
/* complex XML schema type 'tds:RestoreSystemResponse': */
class SOAP_CMAC _tds__RestoreSystemResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RestoreSystemResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RestoreSystemResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RestoreSystemResponse, default initialized and not managed by a soap context
        virtual _tds__RestoreSystemResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RestoreSystemResponse); }
      public:
        /// Constructor with default initializations
        _tds__RestoreSystemResponse() : soap() { }
        virtual ~_tds__RestoreSystemResponse() { }
        /// Friend allocator used by soap_new__tds__RestoreSystemResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RestoreSystemResponse * SOAP_FMAC2 soap_instantiate__tds__RestoreSystemResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:504 */
#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (204)
/* complex XML schema type 'tds:GetSystemBackup': */
class SOAP_CMAC _tds__GetSystemBackup {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemBackup
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemBackup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemBackup, default initialized and not managed by a soap context
        virtual _tds__GetSystemBackup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemBackup); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemBackup() : soap() { }
        virtual ~_tds__GetSystemBackup() { }
        /// Friend allocator used by soap_new__tds__GetSystemBackup(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:506 */
#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (205)
/* complex XML schema type 'tds:GetSystemBackupResponse': */
class SOAP_CMAC _tds__GetSystemBackupResponse {
      public:
        /// Sequence of at least 1 elements 'tds:BackupFiles' of XML schema type 'tt:BackupFile' stored in dynamic array BackupFiles of length __sizeBackupFiles
        int __sizeBackupFiles;
        tt__BackupFile **BackupFiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemBackupResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemBackupResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemBackupResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemBackupResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemBackupResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemBackupResponse() : __sizeBackupFiles(), BackupFiles(), soap() { }
        virtual ~_tds__GetSystemBackupResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemBackupResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemBackupResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackupResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:508 */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (206)
/* complex XML schema type 'tds:GetSystemSupportInformation': */
class SOAP_CMAC _tds__GetSystemSupportInformation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemSupportInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemSupportInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemSupportInformation, default initialized and not managed by a soap context
        virtual _tds__GetSystemSupportInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemSupportInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemSupportInformation() : soap() { }
        virtual ~_tds__GetSystemSupportInformation() { }
        /// Friend allocator used by soap_new__tds__GetSystemSupportInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:510 */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (207)
/* complex XML schema type 'tds:GetSystemSupportInformationResponse': */
class SOAP_CMAC _tds__GetSystemSupportInformationResponse {
      public:
        /// Required element 'tds:SupportInformation' of XML schema type 'tt:SupportInformation'
        tt__SupportInformation *SupportInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemSupportInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemSupportInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemSupportInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemSupportInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemSupportInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemSupportInformationResponse() : SupportInformation(), soap() { }
        virtual ~_tds__GetSystemSupportInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemSupportInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemSupportInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:512 */
#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (208)
/* complex XML schema type 'tds:GetSystemLog': */
class SOAP_CMAC _tds__GetSystemLog {
      public:
        /// Required element 'tds:LogType' of XML schema type 'tt:SystemLogType'
        enum tt__SystemLogType LogType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemLog
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemLog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemLog, default initialized and not managed by a soap context
        virtual _tds__GetSystemLog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemLog); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemLog() : LogType(), soap() { }
        virtual ~_tds__GetSystemLog() { }
        /// Friend allocator used by soap_new__tds__GetSystemLog(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemLog * SOAP_FMAC2 soap_instantiate__tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:514 */
#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (209)
/* complex XML schema type 'tds:GetSystemLogResponse': */
class SOAP_CMAC _tds__GetSystemLogResponse {
      public:
        /// Required element 'tds:SystemLog' of XML schema type 'tt:SystemLog'
        tt__SystemLog *SystemLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemLogResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemLogResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemLogResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemLogResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemLogResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemLogResponse() : SystemLog(), soap() { }
        virtual ~_tds__GetSystemLogResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemLogResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemLogResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemLogResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:516 */
#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (210)
/* complex XML schema type 'tds:GetScopes': */
class SOAP_CMAC _tds__GetScopes {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetScopes, default initialized and not managed by a soap context
        virtual _tds__GetScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetScopes); }
      public:
        /// Constructor with default initializations
        _tds__GetScopes() : soap() { }
        virtual ~_tds__GetScopes() { }
        /// Friend allocator used by soap_new__tds__GetScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetScopes * SOAP_FMAC2 soap_instantiate__tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:518 */
#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (211)
/* complex XML schema type 'tds:GetScopesResponse': */
class SOAP_CMAC _tds__GetScopesResponse {
      public:
        /// Sequence of at least 1 elements 'tds:Scopes' of XML schema type 'tt:Scope' stored in dynamic array Scopes of length __sizeScopes
        int __sizeScopes;
        tt__Scope **Scopes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetScopesResponse, default initialized and not managed by a soap context
        virtual _tds__GetScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetScopesResponse() : __sizeScopes(), Scopes(), soap() { }
        virtual ~_tds__GetScopesResponse() { }
        /// Friend allocator used by soap_new__tds__GetScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__GetScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:520 */
#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (212)
/* complex XML schema type 'tds:SetScopes': */
class SOAP_CMAC _tds__SetScopes {
      public:
        /// Sequence of at least 1 elements 'tds:Scopes' of XML schema type 'xsd:anyURI' stored in dynamic array Scopes of length __sizeScopes
        int __sizeScopes;
        char **Scopes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetScopes, default initialized and not managed by a soap context
        virtual _tds__SetScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetScopes); }
      public:
        /// Constructor with default initializations
        _tds__SetScopes() : __sizeScopes(), Scopes(), soap() { }
        virtual ~_tds__SetScopes() { }
        /// Friend allocator used by soap_new__tds__SetScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetScopes * SOAP_FMAC2 soap_instantiate__tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:522 */
#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (213)
/* complex XML schema type 'tds:SetScopesResponse': */
class SOAP_CMAC _tds__SetScopesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetScopesResponse, default initialized and not managed by a soap context
        virtual _tds__SetScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetScopesResponse() : soap() { }
        virtual ~_tds__SetScopesResponse() { }
        /// Friend allocator used by soap_new__tds__SetScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__SetScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:524 */
#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (214)
/* complex XML schema type 'tds:AddScopes': */
class SOAP_CMAC _tds__AddScopes {
      public:
        /// Sequence of at least 1 elements 'tds:ScopeItem' of XML schema type 'xsd:anyURI' stored in dynamic array ScopeItem of length __sizeScopeItem
        int __sizeScopeItem;
        char **ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddScopes, default initialized and not managed by a soap context
        virtual _tds__AddScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddScopes); }
      public:
        /// Constructor with default initializations
        _tds__AddScopes() : __sizeScopeItem(), ScopeItem(), soap() { }
        virtual ~_tds__AddScopes() { }
        /// Friend allocator used by soap_new__tds__AddScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddScopes * SOAP_FMAC2 soap_instantiate__tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:526 */
#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (215)
/* complex XML schema type 'tds:AddScopesResponse': */
class SOAP_CMAC _tds__AddScopesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddScopesResponse, default initialized and not managed by a soap context
        virtual _tds__AddScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__AddScopesResponse() : soap() { }
        virtual ~_tds__AddScopesResponse() { }
        /// Friend allocator used by soap_new__tds__AddScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddScopesResponse * SOAP_FMAC2 soap_instantiate__tds__AddScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:528 */
#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (216)
/* complex XML schema type 'tds:RemoveScopes': */
class SOAP_CMAC _tds__RemoveScopes {
      public:
        /// Sequence of at least 1 elements 'tds:ScopeItem' of XML schema type 'xsd:anyURI' stored in dynamic array ScopeItem of length __sizeScopeItem
        int __sizeScopeItem;
        char **ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveScopes, default initialized and not managed by a soap context
        virtual _tds__RemoveScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveScopes); }
      public:
        /// Constructor with default initializations
        _tds__RemoveScopes() : __sizeScopeItem(), ScopeItem(), soap() { }
        virtual ~_tds__RemoveScopes() { }
        /// Friend allocator used by soap_new__tds__RemoveScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveScopes * SOAP_FMAC2 soap_instantiate__tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:530 */
#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (217)
/* complex XML schema type 'tds:RemoveScopesResponse': */
class SOAP_CMAC _tds__RemoveScopesResponse {
      public:
        /// Sequence of elements 'tds:ScopeItem' of XML schema type 'xsd:anyURI' stored in dynamic array ScopeItem of length __sizeScopeItem
        int __sizeScopeItem;
        char **ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveScopesResponse, default initialized and not managed by a soap context
        virtual _tds__RemoveScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__RemoveScopesResponse() : __sizeScopeItem(), ScopeItem(), soap() { }
        virtual ~_tds__RemoveScopesResponse() { }
        /// Friend allocator used by soap_new__tds__RemoveScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveScopesResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:532 */
#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (218)
/* complex XML schema type 'tds:GetDiscoveryMode': */
class SOAP_CMAC _tds__GetDiscoveryMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__GetDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__GetDiscoveryMode() : soap() { }
        virtual ~_tds__GetDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__GetDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:534 */
#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (219)
/* complex XML schema type 'tds:GetDiscoveryModeResponse': */
class SOAP_CMAC _tds__GetDiscoveryModeResponse {
      public:
        /// Required element 'tds:DiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode DiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDiscoveryModeResponse() : DiscoveryMode(), soap() { }
        virtual ~_tds__GetDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:536 */
#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (220)
/* complex XML schema type 'tds:SetDiscoveryMode': */
class SOAP_CMAC _tds__SetDiscoveryMode {
      public:
        /// Required element 'tds:DiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode DiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__SetDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__SetDiscoveryMode() : DiscoveryMode(), soap() { }
        virtual ~_tds__SetDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__SetDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:538 */
#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (221)
/* complex XML schema type 'tds:SetDiscoveryModeResponse': */
class SOAP_CMAC _tds__SetDiscoveryModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDiscoveryModeResponse() : soap() { }
        virtual ~_tds__SetDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:540 */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (222)
/* complex XML schema type 'tds:GetRemoteDiscoveryMode': */
class SOAP_CMAC _tds__GetRemoteDiscoveryMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__GetRemoteDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteDiscoveryMode() : soap() { }
        virtual ~_tds__GetRemoteDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__GetRemoteDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:542 */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (223)
/* complex XML schema type 'tds:GetRemoteDiscoveryModeResponse': */
class SOAP_CMAC _tds__GetRemoteDiscoveryModeResponse {
      public:
        /// Required element 'tds:RemoteDiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode RemoteDiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetRemoteDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteDiscoveryModeResponse() : RemoteDiscoveryMode(), soap() { }
        virtual ~_tds__GetRemoteDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetRemoteDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:544 */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (224)
/* complex XML schema type 'tds:SetRemoteDiscoveryMode': */
class SOAP_CMAC _tds__SetRemoteDiscoveryMode {
      public:
        /// Required element 'tds:RemoteDiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode RemoteDiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__SetRemoteDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteDiscoveryMode() : RemoteDiscoveryMode(), soap() { }
        virtual ~_tds__SetRemoteDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__SetRemoteDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:546 */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (225)
/* complex XML schema type 'tds:SetRemoteDiscoveryModeResponse': */
class SOAP_CMAC _tds__SetRemoteDiscoveryModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetRemoteDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteDiscoveryModeResponse() : soap() { }
        virtual ~_tds__SetRemoteDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetRemoteDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:548 */
#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (226)
/* complex XML schema type 'tds:GetDPAddresses': */
class SOAP_CMAC _tds__GetDPAddresses {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDPAddresses
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDPAddresses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDPAddresses, default initialized and not managed by a soap context
        virtual _tds__GetDPAddresses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDPAddresses); }
      public:
        /// Constructor with default initializations
        _tds__GetDPAddresses() : soap() { }
        virtual ~_tds__GetDPAddresses() { }
        /// Friend allocator used by soap_new__tds__GetDPAddresses(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:550 */
#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (227)
/* complex XML schema type 'tds:GetDPAddressesResponse': */
class SOAP_CMAC _tds__GetDPAddressesResponse {
      public:
        /// Sequence of elements 'tds:DPAddress' of XML schema type 'tt:NetworkHost' stored in dynamic array DPAddress of length __sizeDPAddress
        int __sizeDPAddress;
        tt__NetworkHost **DPAddress;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDPAddressesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDPAddressesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDPAddressesResponse, default initialized and not managed by a soap context
        virtual _tds__GetDPAddressesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDPAddressesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDPAddressesResponse() : __sizeDPAddress(), DPAddress(), soap() { }
        virtual ~_tds__GetDPAddressesResponse() { }
        /// Friend allocator used by soap_new__tds__GetDPAddressesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:552 */
#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (228)
/* complex XML schema type 'tds:SetDPAddresses': */
class SOAP_CMAC _tds__SetDPAddresses {
      public:
        /// Sequence of elements 'tds:DPAddress' of XML schema type 'tt:NetworkHost' stored in dynamic array DPAddress of length __sizeDPAddress
        int __sizeDPAddress;
        tt__NetworkHost **DPAddress;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDPAddresses
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDPAddresses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDPAddresses, default initialized and not managed by a soap context
        virtual _tds__SetDPAddresses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDPAddresses); }
      public:
        /// Constructor with default initializations
        _tds__SetDPAddresses() : __sizeDPAddress(), DPAddress(), soap() { }
        virtual ~_tds__SetDPAddresses() { }
        /// Friend allocator used by soap_new__tds__SetDPAddresses(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:554 */
#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (229)
/* complex XML schema type 'tds:SetDPAddressesResponse': */
class SOAP_CMAC _tds__SetDPAddressesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDPAddressesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDPAddressesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDPAddressesResponse, default initialized and not managed by a soap context
        virtual _tds__SetDPAddressesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDPAddressesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDPAddressesResponse() : soap() { }
        virtual ~_tds__SetDPAddressesResponse() { }
        /// Friend allocator used by soap_new__tds__SetDPAddressesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__SetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:556 */
#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (230)
/* complex XML schema type 'tds:GetEndpointReference': */
class SOAP_CMAC _tds__GetEndpointReference {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetEndpointReference
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetEndpointReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetEndpointReference, default initialized and not managed by a soap context
        virtual _tds__GetEndpointReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetEndpointReference); }
      public:
        /// Constructor with default initializations
        _tds__GetEndpointReference() : soap() { }
        virtual ~_tds__GetEndpointReference() { }
        /// Friend allocator used by soap_new__tds__GetEndpointReference(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:558 */
#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (231)
/* complex XML schema type 'tds:GetEndpointReferenceResponse': */
class SOAP_CMAC _tds__GetEndpointReferenceResponse {
      public:
        /// Required element 'tds:GUID' of XML schema type 'xsd:string'
        char *GUID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetEndpointReferenceResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetEndpointReferenceResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetEndpointReferenceResponse, default initialized and not managed by a soap context
        virtual _tds__GetEndpointReferenceResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetEndpointReferenceResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetEndpointReferenceResponse() : GUID(), soap() { }
        virtual ~_tds__GetEndpointReferenceResponse() { }
        /// Friend allocator used by soap_new__tds__GetEndpointReferenceResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetEndpointReferenceResponse * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReferenceResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:560 */
#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (232)
/* complex XML schema type 'tds:GetRemoteUser': */
class SOAP_CMAC _tds__GetRemoteUser {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteUser, default initialized and not managed by a soap context
        virtual _tds__GetRemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteUser); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteUser() : soap() { }
        virtual ~_tds__GetRemoteUser() { }
        /// Friend allocator used by soap_new__tds__GetRemoteUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:562 */
#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (233)
/* complex XML schema type 'tds:GetRemoteUserResponse': */
class SOAP_CMAC _tds__GetRemoteUserResponse {
      public:
        /// Optional element 'tds:RemoteUser' of XML schema type 'tt:RemoteUser'
        tt__RemoteUser *RemoteUser;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteUserResponse, default initialized and not managed by a soap context
        virtual _tds__GetRemoteUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteUserResponse() : RemoteUser(), soap() { }
        virtual ~_tds__GetRemoteUserResponse() { }
        /// Friend allocator used by soap_new__tds__GetRemoteUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:564 */
#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (234)
/* complex XML schema type 'tds:SetRemoteUser': */
class SOAP_CMAC _tds__SetRemoteUser {
      public:
        /// Optional element 'tds:RemoteUser' of XML schema type 'tt:RemoteUser'
        tt__RemoteUser *RemoteUser;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteUser, default initialized and not managed by a soap context
        virtual _tds__SetRemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteUser); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteUser() : RemoteUser(), soap() { }
        virtual ~_tds__SetRemoteUser() { }
        /// Friend allocator used by soap_new__tds__SetRemoteUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:566 */
#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (235)
/* complex XML schema type 'tds:SetRemoteUserResponse': */
class SOAP_CMAC _tds__SetRemoteUserResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteUserResponse, default initialized and not managed by a soap context
        virtual _tds__SetRemoteUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteUserResponse() : soap() { }
        virtual ~_tds__SetRemoteUserResponse() { }
        /// Friend allocator used by soap_new__tds__SetRemoteUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:568 */
#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (236)
/* complex XML schema type 'tds:GetUsers': */
class SOAP_CMAC _tds__GetUsers {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetUsers, default initialized and not managed by a soap context
        virtual _tds__GetUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetUsers); }
      public:
        /// Constructor with default initializations
        _tds__GetUsers() : soap() { }
        virtual ~_tds__GetUsers() { }
        /// Friend allocator used by soap_new__tds__GetUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetUsers * SOAP_FMAC2 soap_instantiate__tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:570 */
#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (237)
/* complex XML schema type 'tds:GetUsersResponse': */
class SOAP_CMAC _tds__GetUsersResponse {
      public:
        /// Sequence of elements 'tds:User' of XML schema type 'tt:User' stored in dynamic array User of length __sizeUser
        int __sizeUser;
        tt__User **User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetUsersResponse, default initialized and not managed by a soap context
        virtual _tds__GetUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetUsersResponse() : __sizeUser(), User(), soap() { }
        virtual ~_tds__GetUsersResponse() { }
        /// Friend allocator used by soap_new__tds__GetUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetUsersResponse * SOAP_FMAC2 soap_instantiate__tds__GetUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:572 */
#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (238)
/* complex XML schema type 'tds:CreateUsers': */
class SOAP_CMAC _tds__CreateUsers {
      public:
        /// Sequence of at least 1 elements 'tds:User' of XML schema type 'tt:User' stored in dynamic array User of length __sizeUser
        int __sizeUser;
        tt__User **User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateUsers, default initialized and not managed by a soap context
        virtual _tds__CreateUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateUsers); }
      public:
        /// Constructor with default initializations
        _tds__CreateUsers() : __sizeUser(), User(), soap() { }
        virtual ~_tds__CreateUsers() { }
        /// Friend allocator used by soap_new__tds__CreateUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateUsers * SOAP_FMAC2 soap_instantiate__tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:574 */
#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (239)
/* complex XML schema type 'tds:CreateUsersResponse': */
class SOAP_CMAC _tds__CreateUsersResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateUsersResponse, default initialized and not managed by a soap context
        virtual _tds__CreateUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateUsersResponse() : soap() { }
        virtual ~_tds__CreateUsersResponse() { }
        /// Friend allocator used by soap_new__tds__CreateUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateUsersResponse * SOAP_FMAC2 soap_instantiate__tds__CreateUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:576 */
#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (240)
/* complex XML schema type 'tds:DeleteUsers': */
class SOAP_CMAC _tds__DeleteUsers {
      public:
        /// Sequence of at least 1 elements 'tds:Username' of XML schema type 'xsd:string' stored in dynamic array Username of length __sizeUsername
        int __sizeUsername;
        char **Username;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteUsers, default initialized and not managed by a soap context
        virtual _tds__DeleteUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteUsers); }
      public:
        /// Constructor with default initializations
        _tds__DeleteUsers() : __sizeUsername(), Username(), soap() { }
        virtual ~_tds__DeleteUsers() { }
        /// Friend allocator used by soap_new__tds__DeleteUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteUsers * SOAP_FMAC2 soap_instantiate__tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:578 */
#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (241)
/* complex XML schema type 'tds:DeleteUsersResponse': */
class SOAP_CMAC _tds__DeleteUsersResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteUsersResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteUsersResponse() : soap() { }
        virtual ~_tds__DeleteUsersResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteUsersResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:580 */
#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (242)
/* complex XML schema type 'tds:SetUser': */
class SOAP_CMAC _tds__SetUser {
      public:
        /// Sequence of at least 1 elements 'tds:User' of XML schema type 'tt:User' stored in dynamic array User of length __sizeUser
        int __sizeUser;
        tt__User **User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetUser, default initialized and not managed by a soap context
        virtual _tds__SetUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetUser); }
      public:
        /// Constructor with default initializations
        _tds__SetUser() : __sizeUser(), User(), soap() { }
        virtual ~_tds__SetUser() { }
        /// Friend allocator used by soap_new__tds__SetUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetUser * SOAP_FMAC2 soap_instantiate__tds__SetUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:582 */
#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (243)
/* complex XML schema type 'tds:SetUserResponse': */
class SOAP_CMAC _tds__SetUserResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetUserResponse, default initialized and not managed by a soap context
        virtual _tds__SetUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetUserResponse() : soap() { }
        virtual ~_tds__SetUserResponse() { }
        /// Friend allocator used by soap_new__tds__SetUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:584 */
#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (244)
/* complex XML schema type 'tds:GetWsdlUrl': */
class SOAP_CMAC _tds__GetWsdlUrl {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetWsdlUrl
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetWsdlUrl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetWsdlUrl, default initialized and not managed by a soap context
        virtual _tds__GetWsdlUrl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetWsdlUrl); }
      public:
        /// Constructor with default initializations
        _tds__GetWsdlUrl() : soap() { }
        virtual ~_tds__GetWsdlUrl() { }
        /// Friend allocator used by soap_new__tds__GetWsdlUrl(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:586 */
#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (245)
/* complex XML schema type 'tds:GetWsdlUrlResponse': */
class SOAP_CMAC _tds__GetWsdlUrlResponse {
      public:
        /// Required element 'tds:WsdlUrl' of XML schema type 'xsd:anyURI'
        char *WsdlUrl;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetWsdlUrlResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetWsdlUrlResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetWsdlUrlResponse, default initialized and not managed by a soap context
        virtual _tds__GetWsdlUrlResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetWsdlUrlResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetWsdlUrlResponse() : WsdlUrl(), soap() { }
        virtual ~_tds__GetWsdlUrlResponse() { }
        /// Friend allocator used by soap_new__tds__GetWsdlUrlResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetWsdlUrlResponse * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrlResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:588 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptions
#define SOAP_TYPE__tds__GetPasswordComplexityOptions (246)
/* complex XML schema type 'tds:GetPasswordComplexityOptions': */
class SOAP_CMAC _tds__GetPasswordComplexityOptions {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityOptions, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityOptions); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityOptions() : soap() { }
        virtual ~_tds__GetPasswordComplexityOptions() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityOptions(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:590 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
#define SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse (247)
/* complex XML schema type 'tds:GetPasswordComplexityOptionsResponse': */
class SOAP_CMAC _tds__GetPasswordComplexityOptionsResponse {
      public:
        /// Optional element 'tds:MinLenRange' of XML schema type 'tt:IntRange'
        tt__IntRange *MinLenRange;
        /// Optional element 'tds:UppercaseRange' of XML schema type 'tt:IntRange'
        tt__IntRange *UppercaseRange;
        /// Optional element 'tds:NumberRange' of XML schema type 'tt:IntRange'
        tt__IntRange *NumberRange;
        /// Optional element 'tds:SpecialCharsRange' of XML schema type 'tt:IntRange'
        tt__IntRange *SpecialCharsRange;
        /// Optional element 'tds:BlockUsernameOccurrenceSupported' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrenceSupported;
        /// Optional element 'tds:PolicyConfigurationLockSupported' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLockSupported;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityOptionsResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityOptionsResponse() : MinLenRange(), UppercaseRange(), NumberRange(), SpecialCharsRange(), BlockUsernameOccurrenceSupported(), PolicyConfigurationLockSupported(), soap() { }
        virtual ~_tds__GetPasswordComplexityOptionsResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:592 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__GetPasswordComplexityConfiguration (248)
/* complex XML schema type 'tds:GetPasswordComplexityConfiguration': */
class SOAP_CMAC _tds__GetPasswordComplexityConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityConfiguration() : soap() { }
        virtual ~_tds__GetPasswordComplexityConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:594 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse (249)
/* complex XML schema type 'tds:GetPasswordComplexityConfigurationResponse': */
class SOAP_CMAC _tds__GetPasswordComplexityConfigurationResponse {
      public:
        /// Optional element 'tds:MinLen' of XML schema type 'xsd:int'
        int *MinLen;
        /// Optional element 'tds:Uppercase' of XML schema type 'xsd:int'
        int *Uppercase;
        /// Optional element 'tds:Number' of XML schema type 'xsd:int'
        int *Number;
        /// Optional element 'tds:SpecialChars' of XML schema type 'xsd:int'
        int *SpecialChars;
        /// Optional element 'tds:BlockUsernameOccurrence' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrence;
        /// Optional element 'tds:PolicyConfigurationLocked' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLocked;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityConfigurationResponse() : MinLen(), Uppercase(), Number(), SpecialChars(), BlockUsernameOccurrence(), PolicyConfigurationLocked(), soap() { }
        virtual ~_tds__GetPasswordComplexityConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:596 */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__SetPasswordComplexityConfiguration (250)
/* complex XML schema type 'tds:SetPasswordComplexityConfiguration': */
class SOAP_CMAC _tds__SetPasswordComplexityConfiguration {
      public:
        /// Optional element 'tds:MinLen' of XML schema type 'xsd:int'
        int *MinLen;
        /// Optional element 'tds:Uppercase' of XML schema type 'xsd:int'
        int *Uppercase;
        /// Optional element 'tds:Number' of XML schema type 'xsd:int'
        int *Number;
        /// Optional element 'tds:SpecialChars' of XML schema type 'xsd:int'
        int *SpecialChars;
        /// Optional element 'tds:BlockUsernameOccurrence' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrence;
        /// Optional element 'tds:PolicyConfigurationLocked' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLocked;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordComplexityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordComplexityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordComplexityConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetPasswordComplexityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordComplexityConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordComplexityConfiguration() : MinLen(), Uppercase(), Number(), SpecialChars(), BlockUsernameOccurrence(), PolicyConfigurationLocked(), soap() { }
        virtual ~_tds__SetPasswordComplexityConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetPasswordComplexityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:598 */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse (251)
/* complex XML schema type 'tds:SetPasswordComplexityConfigurationResponse': */
class SOAP_CMAC _tds__SetPasswordComplexityConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordComplexityConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetPasswordComplexityConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordComplexityConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordComplexityConfigurationResponse() : soap() { }
        virtual ~_tds__SetPasswordComplexityConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetPasswordComplexityConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:600 */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__GetPasswordHistoryConfiguration (252)
/* complex XML schema type 'tds:GetPasswordHistoryConfiguration': */
class SOAP_CMAC _tds__GetPasswordHistoryConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordHistoryConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordHistoryConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordHistoryConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetPasswordHistoryConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordHistoryConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordHistoryConfiguration() : soap() { }
        virtual ~_tds__GetPasswordHistoryConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetPasswordHistoryConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:602 */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse (253)
/* complex XML schema type 'tds:GetPasswordHistoryConfigurationResponse': */
class SOAP_CMAC _tds__GetPasswordHistoryConfigurationResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:Length' of XML schema type 'xsd:int'
        int Length;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordHistoryConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordHistoryConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordHistoryConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordHistoryConfigurationResponse() : Enabled(), Length(), soap() { }
        virtual ~_tds__GetPasswordHistoryConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordHistoryConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:604 */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__SetPasswordHistoryConfiguration (254)
/* complex XML schema type 'tds:SetPasswordHistoryConfiguration': */
class SOAP_CMAC _tds__SetPasswordHistoryConfiguration {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:Length' of XML schema type 'xsd:int'
        int Length;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordHistoryConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordHistoryConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordHistoryConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetPasswordHistoryConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordHistoryConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordHistoryConfiguration() : Enabled(), Length(), soap() { }
        virtual ~_tds__SetPasswordHistoryConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetPasswordHistoryConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:606 */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse (255)
/* complex XML schema type 'tds:SetPasswordHistoryConfigurationResponse': */
class SOAP_CMAC _tds__SetPasswordHistoryConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordHistoryConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetPasswordHistoryConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordHistoryConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordHistoryConfigurationResponse() : soap() { }
        virtual ~_tds__SetPasswordHistoryConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetPasswordHistoryConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:608 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptions
#define SOAP_TYPE__tds__GetAuthFailureWarningOptions (256)
/* complex XML schema type 'tds:GetAuthFailureWarningOptions': */
class SOAP_CMAC _tds__GetAuthFailureWarningOptions {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningOptions, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningOptions); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningOptions() : soap() { }
        virtual ~_tds__GetAuthFailureWarningOptions() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningOptions(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:610 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse (257)
/* complex XML schema type 'tds:GetAuthFailureWarningOptionsResponse': */
class SOAP_CMAC _tds__GetAuthFailureWarningOptionsResponse {
      public:
        /// Required element 'tds:MonitorPeriodRange' of XML schema type 'tt:IntRange'
        tt__IntRange *MonitorPeriodRange;
        /// Required element 'tds:AuthFailureRange' of XML schema type 'tt:IntRange'
        tt__IntRange *AuthFailureRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningOptionsResponse, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningOptionsResponse() : MonitorPeriodRange(), AuthFailureRange(), soap() { }
        virtual ~_tds__GetAuthFailureWarningOptionsResponse() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:612 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__GetAuthFailureWarningConfiguration (258)
/* complex XML schema type 'tds:GetAuthFailureWarningConfiguration': */
class SOAP_CMAC _tds__GetAuthFailureWarningConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningConfiguration() : soap() { }
        virtual ~_tds__GetAuthFailureWarningConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:614 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse (259)
/* complex XML schema type 'tds:GetAuthFailureWarningConfigurationResponse': */
class SOAP_CMAC _tds__GetAuthFailureWarningConfigurationResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:MonitorPeriod' of XML schema type 'xsd:int'
        int MonitorPeriod;
        /// Required element 'tds:MaxAuthFailures' of XML schema type 'xsd:int'
        int MaxAuthFailures;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningConfigurationResponse() : Enabled(), MonitorPeriod(), MaxAuthFailures(), soap() { }
        virtual ~_tds__GetAuthFailureWarningConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:616 */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__SetAuthFailureWarningConfiguration (260)
/* complex XML schema type 'tds:SetAuthFailureWarningConfiguration': */
class SOAP_CMAC _tds__SetAuthFailureWarningConfiguration {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:MonitorPeriod' of XML schema type 'xsd:int'
        int MonitorPeriod;
        /// Required element 'tds:MaxAuthFailures' of XML schema type 'xsd:int'
        int MaxAuthFailures;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAuthFailureWarningConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAuthFailureWarningConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetAuthFailureWarningConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAuthFailureWarningConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetAuthFailureWarningConfiguration() : Enabled(), MonitorPeriod(), MaxAuthFailures(), soap() { }
        virtual ~_tds__SetAuthFailureWarningConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetAuthFailureWarningConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:618 */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse (261)
/* complex XML schema type 'tds:SetAuthFailureWarningConfigurationResponse': */
class SOAP_CMAC _tds__SetAuthFailureWarningConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAuthFailureWarningConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetAuthFailureWarningConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAuthFailureWarningConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetAuthFailureWarningConfigurationResponse() : soap() { }
        virtual ~_tds__SetAuthFailureWarningConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:620 */
#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (262)
/* complex XML schema type 'tds:GetCapabilities': */
class SOAP_CMAC _tds__GetCapabilities {
      public:
        /// Sequence of elements 'tds:Category' of XML schema type 'tt:CapabilityCategory' stored in dynamic array Category of length __sizeCategory
        int __sizeCategory;
        enum tt__CapabilityCategory *Category;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCapabilities, default initialized and not managed by a soap context
        virtual _tds__GetCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCapabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetCapabilities() : __sizeCategory(), Category(), soap() { }
        virtual ~_tds__GetCapabilities() { }
        /// Friend allocator used by soap_new__tds__GetCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:622 */
#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (263)
/* complex XML schema type 'tds:GetCapabilitiesResponse': */
class SOAP_CMAC _tds__GetCapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tt:Capabilities'
        tt__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tds__GetCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:624 */
#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (264)
/* complex XML schema type 'tds:GetHostname': */
class SOAP_CMAC _tds__GetHostname {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetHostname
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetHostname; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetHostname, default initialized and not managed by a soap context
        virtual _tds__GetHostname *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetHostname); }
      public:
        /// Constructor with default initializations
        _tds__GetHostname() : soap() { }
        virtual ~_tds__GetHostname() { }
        /// Friend allocator used by soap_new__tds__GetHostname(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetHostname * SOAP_FMAC2 soap_instantiate__tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:626 */
#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (265)
/* complex XML schema type 'tds:GetHostnameResponse': */
class SOAP_CMAC _tds__GetHostnameResponse {
      public:
        /// Required element 'tds:HostnameInformation' of XML schema type 'tt:HostnameInformation'
        tt__HostnameInformation *HostnameInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetHostnameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetHostnameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetHostnameResponse, default initialized and not managed by a soap context
        virtual _tds__GetHostnameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetHostnameResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetHostnameResponse() : HostnameInformation(), soap() { }
        virtual ~_tds__GetHostnameResponse() { }
        /// Friend allocator used by soap_new__tds__GetHostnameResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__GetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:628 */
#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (266)
/* complex XML schema type 'tds:SetHostname': */
class SOAP_CMAC _tds__SetHostname {
      public:
        /// Required element 'tds:Name' of XML schema type 'xsd:token'
        char *Name;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostname
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostname; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostname, default initialized and not managed by a soap context
        virtual _tds__SetHostname *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostname); }
      public:
        /// Constructor with default initializations
        _tds__SetHostname() : Name(), soap() { }
        virtual ~_tds__SetHostname() { }
        /// Friend allocator used by soap_new__tds__SetHostname(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostname * SOAP_FMAC2 soap_instantiate__tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:630 */
#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (267)
/* complex XML schema type 'tds:SetHostnameResponse': */
class SOAP_CMAC _tds__SetHostnameResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameResponse, default initialized and not managed by a soap context
        virtual _tds__SetHostnameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameResponse() : soap() { }
        virtual ~_tds__SetHostnameResponse() { }
        /// Friend allocator used by soap_new__tds__SetHostnameResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:632 */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (268)
/* complex XML schema type 'tds:SetHostnameFromDHCP': */
class SOAP_CMAC _tds__SetHostnameFromDHCP {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameFromDHCP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameFromDHCP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameFromDHCP, default initialized and not managed by a soap context
        virtual _tds__SetHostnameFromDHCP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameFromDHCP); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameFromDHCP() : FromDHCP(), soap() { }
        virtual ~_tds__SetHostnameFromDHCP() { }
        /// Friend allocator used by soap_new__tds__SetHostnameFromDHCP(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:634 */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (269)
/* complex XML schema type 'tds:SetHostnameFromDHCPResponse': */
class SOAP_CMAC _tds__SetHostnameFromDHCPResponse {
      public:
        /// Required element 'tds:RebootNeeded' of XML schema type 'xsd:boolean'
        bool RebootNeeded;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameFromDHCPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameFromDHCPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameFromDHCPResponse, default initialized and not managed by a soap context
        virtual _tds__SetHostnameFromDHCPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameFromDHCPResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameFromDHCPResponse() : RebootNeeded(), soap() { }
        virtual ~_tds__SetHostnameFromDHCPResponse() { }
        /// Friend allocator used by soap_new__tds__SetHostnameFromDHCPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:636 */
#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (270)
/* complex XML schema type 'tds:GetDNS': */
class SOAP_CMAC _tds__GetDNS {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDNS, default initialized and not managed by a soap context
        virtual _tds__GetDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDNS); }
      public:
        /// Constructor with default initializations
        _tds__GetDNS() : soap() { }
        virtual ~_tds__GetDNS() { }
        /// Friend allocator used by soap_new__tds__GetDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDNS * SOAP_FMAC2 soap_instantiate__tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:638 */
#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (271)
/* complex XML schema type 'tds:GetDNSResponse': */
class SOAP_CMAC _tds__GetDNSResponse {
      public:
        /// Required element 'tds:DNSInformation' of XML schema type 'tt:DNSInformation'
        tt__DNSInformation *DNSInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDNSResponse, default initialized and not managed by a soap context
        virtual _tds__GetDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDNSResponse() : DNSInformation(), soap() { }
        virtual ~_tds__GetDNSResponse() { }
        /// Friend allocator used by soap_new__tds__GetDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:640 */
#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (272)
/* complex XML schema type 'tds:SetDNS': */
class SOAP_CMAC _tds__SetDNS {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Sequence of elements 'tds:SearchDomain' of XML schema type 'xsd:token' stored in dynamic array SearchDomain of length __sizeSearchDomain
        int __sizeSearchDomain;
        char **SearchDomain;
        /// Sequence of elements 'tds:DNSManual' of XML schema type 'tt:IPAddress' stored in dynamic array DNSManual of length __sizeDNSManual
        int __sizeDNSManual;
        tt__IPAddress **DNSManual;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDNS, default initialized and not managed by a soap context
        virtual _tds__SetDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDNS); }
      public:
        /// Constructor with default initializations
        _tds__SetDNS() : FromDHCP(), __sizeSearchDomain(), SearchDomain(), __sizeDNSManual(), DNSManual(), soap() { }
        virtual ~_tds__SetDNS() { }
        /// Friend allocator used by soap_new__tds__SetDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDNS * SOAP_FMAC2 soap_instantiate__tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:642 */
#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (273)
/* complex XML schema type 'tds:SetDNSResponse': */
class SOAP_CMAC _tds__SetDNSResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDNSResponse, default initialized and not managed by a soap context
        virtual _tds__SetDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDNSResponse() : soap() { }
        virtual ~_tds__SetDNSResponse() { }
        /// Friend allocator used by soap_new__tds__SetDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:644 */
#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (274)
/* complex XML schema type 'tds:GetNTP': */
class SOAP_CMAC _tds__GetNTP {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNTP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNTP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNTP, default initialized and not managed by a soap context
        virtual _tds__GetNTP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNTP); }
      public:
        /// Constructor with default initializations
        _tds__GetNTP() : soap() { }
        virtual ~_tds__GetNTP() { }
        /// Friend allocator used by soap_new__tds__GetNTP(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNTP * SOAP_FMAC2 soap_instantiate__tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:646 */
#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (275)
/* complex XML schema type 'tds:GetNTPResponse': */
class SOAP_CMAC _tds__GetNTPResponse {
      public:
        /// Required element 'tds:NTPInformation' of XML schema type 'tt:NTPInformation'
        tt__NTPInformation *NTPInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNTPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNTPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNTPResponse, default initialized and not managed by a soap context
        virtual _tds__GetNTPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNTPResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNTPResponse() : NTPInformation(), soap() { }
        virtual ~_tds__GetNTPResponse() { }
        /// Friend allocator used by soap_new__tds__GetNTPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__GetNTPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:648 */
#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (276)
/* complex XML schema type 'tds:SetNTP': */
class SOAP_CMAC _tds__SetNTP {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Sequence of elements 'tds:NTPManual' of XML schema type 'tt:NetworkHost' stored in dynamic array NTPManual of length __sizeNTPManual
        int __sizeNTPManual;
        tt__NetworkHost **NTPManual;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNTP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNTP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNTP, default initialized and not managed by a soap context
        virtual _tds__SetNTP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNTP); }
      public:
        /// Constructor with default initializations
        _tds__SetNTP() : FromDHCP(), __sizeNTPManual(), NTPManual(), soap() { }
        virtual ~_tds__SetNTP() { }
        /// Friend allocator used by soap_new__tds__SetNTP(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNTP * SOAP_FMAC2 soap_instantiate__tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:650 */
#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (277)
/* complex XML schema type 'tds:SetNTPResponse': */
class SOAP_CMAC _tds__SetNTPResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNTPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNTPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNTPResponse, default initialized and not managed by a soap context
        virtual _tds__SetNTPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNTPResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNTPResponse() : soap() { }
        virtual ~_tds__SetNTPResponse() { }
        /// Friend allocator used by soap_new__tds__SetNTPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__SetNTPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:652 */
#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (278)
/* complex XML schema type 'tds:GetDynamicDNS': */
class SOAP_CMAC _tds__GetDynamicDNS {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDynamicDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDynamicDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDynamicDNS, default initialized and not managed by a soap context
        virtual _tds__GetDynamicDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDynamicDNS); }
      public:
        /// Constructor with default initializations
        _tds__GetDynamicDNS() : soap() { }
        virtual ~_tds__GetDynamicDNS() { }
        /// Friend allocator used by soap_new__tds__GetDynamicDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:654 */
#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (279)
/* complex XML schema type 'tds:GetDynamicDNSResponse': */
class SOAP_CMAC _tds__GetDynamicDNSResponse {
      public:
        /// Required element 'tds:DynamicDNSInformation' of XML schema type 'tt:DynamicDNSInformation'
        tt__DynamicDNSInformation *DynamicDNSInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDynamicDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDynamicDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDynamicDNSResponse, default initialized and not managed by a soap context
        virtual _tds__GetDynamicDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDynamicDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDynamicDNSResponse() : DynamicDNSInformation(), soap() { }
        virtual ~_tds__GetDynamicDNSResponse() { }
        /// Friend allocator used by soap_new__tds__GetDynamicDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:656 */
#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (280)
/* complex XML schema type 'tds:SetDynamicDNS': */
class SOAP_CMAC _tds__SetDynamicDNS {
      public:
        /// Required element 'tds:Type' of XML schema type 'tt:DynamicDNSType'
        enum tt__DynamicDNSType Type;
        /// Optional element 'tds:Name' of XML schema type 'tt:DNSName'
        char *Name;
        /// Optional element 'tds:TTL' of XML schema type 'xsd:duration'
        char *TTL;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDynamicDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDynamicDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDynamicDNS, default initialized and not managed by a soap context
        virtual _tds__SetDynamicDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDynamicDNS); }
      public:
        /// Constructor with default initializations
        _tds__SetDynamicDNS() : Type(), Name(), TTL(), soap() { }
        virtual ~_tds__SetDynamicDNS() { }
        /// Friend allocator used by soap_new__tds__SetDynamicDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:658 */
#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (281)
/* complex XML schema type 'tds:SetDynamicDNSResponse': */
class SOAP_CMAC _tds__SetDynamicDNSResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDynamicDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDynamicDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDynamicDNSResponse, default initialized and not managed by a soap context
        virtual _tds__SetDynamicDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDynamicDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDynamicDNSResponse() : soap() { }
        virtual ~_tds__SetDynamicDNSResponse() { }
        /// Friend allocator used by soap_new__tds__SetDynamicDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:660 */
#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (282)
/* complex XML schema type 'tds:GetNetworkInterfaces': */
class SOAP_CMAC _tds__GetNetworkInterfaces {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkInterfaces
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkInterfaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkInterfaces, default initialized and not managed by a soap context
        virtual _tds__GetNetworkInterfaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkInterfaces); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkInterfaces() : soap() { }
        virtual ~_tds__GetNetworkInterfaces() { }
        /// Friend allocator used by soap_new__tds__GetNetworkInterfaces(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:662 */
#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (283)
/* complex XML schema type 'tds:GetNetworkInterfacesResponse': */
class SOAP_CMAC _tds__GetNetworkInterfacesResponse {
      public:
        /// Sequence of at least 1 elements 'tds:NetworkInterfaces' of XML schema type 'tt:NetworkInterface' stored in dynamic array NetworkInterfaces of length __sizeNetworkInterfaces
        int __sizeNetworkInterfaces;
        tt__NetworkInterface **NetworkInterfaces;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkInterfacesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkInterfacesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkInterfacesResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkInterfacesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkInterfacesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkInterfacesResponse() : __sizeNetworkInterfaces(), NetworkInterfaces(), soap() { }
        virtual ~_tds__GetNetworkInterfacesResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkInterfacesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:664 */
#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (284)
/* complex XML schema type 'tds:SetNetworkInterfaces': */
class SOAP_CMAC _tds__SetNetworkInterfaces {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        char *InterfaceToken;
        /// Required element 'tds:NetworkInterface' of XML schema type 'tt:NetworkInterfaceSetConfiguration'
        tt__NetworkInterfaceSetConfiguration *NetworkInterface;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkInterfaces
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkInterfaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkInterfaces, default initialized and not managed by a soap context
        virtual _tds__SetNetworkInterfaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkInterfaces); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkInterfaces() : InterfaceToken(), NetworkInterface(), soap() { }
        virtual ~_tds__SetNetworkInterfaces() { }
        /// Friend allocator used by soap_new__tds__SetNetworkInterfaces(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:666 */
#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (285)
/* complex XML schema type 'tds:SetNetworkInterfacesResponse': */
class SOAP_CMAC _tds__SetNetworkInterfacesResponse {
      public:
        /// Required element 'tds:RebootNeeded' of XML schema type 'xsd:boolean'
        bool RebootNeeded;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkInterfacesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkInterfacesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkInterfacesResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkInterfacesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkInterfacesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkInterfacesResponse() : RebootNeeded(), soap() { }
        virtual ~_tds__SetNetworkInterfacesResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkInterfacesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:668 */
#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (286)
/* complex XML schema type 'tds:GetNetworkProtocols': */
class SOAP_CMAC _tds__GetNetworkProtocols {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkProtocols
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkProtocols; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkProtocols, default initialized and not managed by a soap context
        virtual _tds__GetNetworkProtocols *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkProtocols); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkProtocols() : soap() { }
        virtual ~_tds__GetNetworkProtocols() { }
        /// Friend allocator used by soap_new__tds__GetNetworkProtocols(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:670 */
#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (287)
/* complex XML schema type 'tds:GetNetworkProtocolsResponse': */
class SOAP_CMAC _tds__GetNetworkProtocolsResponse {
      public:
        /// Sequence of elements 'tds:NetworkProtocols' of XML schema type 'tt:NetworkProtocol' stored in dynamic array NetworkProtocols of length __sizeNetworkProtocols
        int __sizeNetworkProtocols;
        tt__NetworkProtocol **NetworkProtocols;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkProtocolsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkProtocolsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkProtocolsResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkProtocolsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkProtocolsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkProtocolsResponse() : __sizeNetworkProtocols(), NetworkProtocols(), soap() { }
        virtual ~_tds__GetNetworkProtocolsResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkProtocolsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:672 */
#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (288)
/* complex XML schema type 'tds:SetNetworkProtocols': */
class SOAP_CMAC _tds__SetNetworkProtocols {
      public:
        /// Sequence of at least 1 elements 'tds:NetworkProtocols' of XML schema type 'tt:NetworkProtocol' stored in dynamic array NetworkProtocols of length __sizeNetworkProtocols
        int __sizeNetworkProtocols;
        tt__NetworkProtocol **NetworkProtocols;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkProtocols
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkProtocols; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkProtocols, default initialized and not managed by a soap context
        virtual _tds__SetNetworkProtocols *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkProtocols); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkProtocols() : __sizeNetworkProtocols(), NetworkProtocols(), soap() { }
        virtual ~_tds__SetNetworkProtocols() { }
        /// Friend allocator used by soap_new__tds__SetNetworkProtocols(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:674 */
#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (289)
/* complex XML schema type 'tds:SetNetworkProtocolsResponse': */
class SOAP_CMAC _tds__SetNetworkProtocolsResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkProtocolsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkProtocolsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkProtocolsResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkProtocolsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkProtocolsResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkProtocolsResponse() : soap() { }
        virtual ~_tds__SetNetworkProtocolsResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkProtocolsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:676 */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (290)
/* complex XML schema type 'tds:GetNetworkDefaultGateway': */
class SOAP_CMAC _tds__GetNetworkDefaultGateway {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkDefaultGateway
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkDefaultGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkDefaultGateway, default initialized and not managed by a soap context
        virtual _tds__GetNetworkDefaultGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkDefaultGateway); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkDefaultGateway() : soap() { }
        virtual ~_tds__GetNetworkDefaultGateway() { }
        /// Friend allocator used by soap_new__tds__GetNetworkDefaultGateway(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:678 */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (291)
/* complex XML schema type 'tds:GetNetworkDefaultGatewayResponse': */
class SOAP_CMAC _tds__GetNetworkDefaultGatewayResponse {
      public:
        /// Required element 'tds:NetworkGateway' of XML schema type 'tt:NetworkGateway'
        tt__NetworkGateway *NetworkGateway;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkDefaultGatewayResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkDefaultGatewayResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkDefaultGatewayResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkDefaultGatewayResponse() : NetworkGateway(), soap() { }
        virtual ~_tds__GetNetworkDefaultGatewayResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkDefaultGatewayResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:680 */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (292)
/* complex XML schema type 'tds:SetNetworkDefaultGateway': */
class SOAP_CMAC _tds__SetNetworkDefaultGateway {
      public:
        /// Sequence of elements 'tds:IPv4Address' of XML schema type 'tt:IPv4Address' stored in dynamic array IPv4Address of length __sizeIPv4Address
        int __sizeIPv4Address;
        char **IPv4Address;
        /// Sequence of elements 'tds:IPv6Address' of XML schema type 'tt:IPv6Address' stored in dynamic array IPv6Address of length __sizeIPv6Address
        int __sizeIPv6Address;
        char **IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkDefaultGateway
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkDefaultGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkDefaultGateway, default initialized and not managed by a soap context
        virtual _tds__SetNetworkDefaultGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkDefaultGateway); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkDefaultGateway() : __sizeIPv4Address(), IPv4Address(), __sizeIPv6Address(), IPv6Address(), soap() { }
        virtual ~_tds__SetNetworkDefaultGateway() { }
        /// Friend allocator used by soap_new__tds__SetNetworkDefaultGateway(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:682 */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (293)
/* complex XML schema type 'tds:SetNetworkDefaultGatewayResponse': */
class SOAP_CMAC _tds__SetNetworkDefaultGatewayResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkDefaultGatewayResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkDefaultGatewayResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkDefaultGatewayResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkDefaultGatewayResponse() : soap() { }
        virtual ~_tds__SetNetworkDefaultGatewayResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkDefaultGatewayResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:684 */
#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (294)
/* complex XML schema type 'tds:GetZeroConfiguration': */
class SOAP_CMAC _tds__GetZeroConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetZeroConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetZeroConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetZeroConfiguration() : soap() { }
        virtual ~_tds__GetZeroConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:686 */
#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (295)
/* complex XML schema type 'tds:GetZeroConfigurationResponse': */
class SOAP_CMAC _tds__GetZeroConfigurationResponse {
      public:
        /// Required element 'tds:ZeroConfiguration' of XML schema type 'tt:NetworkZeroConfiguration'
        tt__NetworkZeroConfiguration *ZeroConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetZeroConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetZeroConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetZeroConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetZeroConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetZeroConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetZeroConfigurationResponse() : ZeroConfiguration(), soap() { }
        virtual ~_tds__GetZeroConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetZeroConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:688 */
#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (296)
/* complex XML schema type 'tds:SetZeroConfiguration': */
class SOAP_CMAC _tds__SetZeroConfiguration {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        char *InterfaceToken;
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetZeroConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetZeroConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetZeroConfiguration() : InterfaceToken(), Enabled(), soap() { }
        virtual ~_tds__SetZeroConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:690 */
#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (297)
/* complex XML schema type 'tds:SetZeroConfigurationResponse': */
class SOAP_CMAC _tds__SetZeroConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetZeroConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetZeroConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetZeroConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetZeroConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetZeroConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetZeroConfigurationResponse() : soap() { }
        virtual ~_tds__SetZeroConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetZeroConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:692 */
#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (298)
/* complex XML schema type 'tds:GetIPAddressFilter': */
class SOAP_CMAC _tds__GetIPAddressFilter {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__GetIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__GetIPAddressFilter() : soap() { }
        virtual ~_tds__GetIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__GetIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:694 */
#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (299)
/* complex XML schema type 'tds:GetIPAddressFilterResponse': */
class SOAP_CMAC _tds__GetIPAddressFilterResponse {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__GetIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetIPAddressFilterResponse() : IPAddressFilter(), soap() { }
        virtual ~_tds__GetIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__GetIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:696 */
#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (300)
/* complex XML schema type 'tds:SetIPAddressFilter': */
class SOAP_CMAC _tds__SetIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__SetIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__SetIPAddressFilter() : IPAddressFilter(), soap() { }
        virtual ~_tds__SetIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__SetIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:698 */
#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (301)
/* complex XML schema type 'tds:SetIPAddressFilterResponse': */
class SOAP_CMAC _tds__SetIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__SetIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetIPAddressFilterResponse() : soap() { }
        virtual ~_tds__SetIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__SetIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:700 */
#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (302)
/* complex XML schema type 'tds:AddIPAddressFilter': */
class SOAP_CMAC _tds__AddIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__AddIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__AddIPAddressFilter() : IPAddressFilter(), soap() { }
        virtual ~_tds__AddIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__AddIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:702 */
#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (303)
/* complex XML schema type 'tds:AddIPAddressFilterResponse': */
class SOAP_CMAC _tds__AddIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__AddIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__AddIPAddressFilterResponse() : soap() { }
        virtual ~_tds__AddIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__AddIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:704 */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (304)
/* complex XML schema type 'tds:RemoveIPAddressFilter': */
class SOAP_CMAC _tds__RemoveIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__RemoveIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__RemoveIPAddressFilter() : IPAddressFilter(), soap() { }
        virtual ~_tds__RemoveIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__RemoveIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:706 */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (305)
/* complex XML schema type 'tds:RemoveIPAddressFilterResponse': */
class SOAP_CMAC _tds__RemoveIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__RemoveIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__RemoveIPAddressFilterResponse() : soap() { }
        virtual ~_tds__RemoveIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__RemoveIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:708 */
#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (306)
/* complex XML schema type 'tds:GetAccessPolicy': */
class SOAP_CMAC _tds__GetAccessPolicy {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAccessPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAccessPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAccessPolicy, default initialized and not managed by a soap context
        virtual _tds__GetAccessPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAccessPolicy); }
      public:
        /// Constructor with default initializations
        _tds__GetAccessPolicy() : soap() { }
        virtual ~_tds__GetAccessPolicy() { }
        /// Friend allocator used by soap_new__tds__GetAccessPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:710 */
#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (307)
/* complex XML schema type 'tds:GetAccessPolicyResponse': */
class SOAP_CMAC _tds__GetAccessPolicyResponse {
      public:
        /// Required element 'tds:PolicyFile' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PolicyFile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAccessPolicyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAccessPolicyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAccessPolicyResponse, default initialized and not managed by a soap context
        virtual _tds__GetAccessPolicyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAccessPolicyResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAccessPolicyResponse() : PolicyFile(), soap() { }
        virtual ~_tds__GetAccessPolicyResponse() { }
        /// Friend allocator used by soap_new__tds__GetAccessPolicyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:712 */
#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (308)
/* complex XML schema type 'tds:SetAccessPolicy': */
class SOAP_CMAC _tds__SetAccessPolicy {
      public:
        /// Required element 'tds:PolicyFile' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PolicyFile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAccessPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAccessPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAccessPolicy, default initialized and not managed by a soap context
        virtual _tds__SetAccessPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAccessPolicy); }
      public:
        /// Constructor with default initializations
        _tds__SetAccessPolicy() : PolicyFile(), soap() { }
        virtual ~_tds__SetAccessPolicy() { }
        /// Friend allocator used by soap_new__tds__SetAccessPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:714 */
#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (309)
/* complex XML schema type 'tds:SetAccessPolicyResponse': */
class SOAP_CMAC _tds__SetAccessPolicyResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAccessPolicyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAccessPolicyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAccessPolicyResponse, default initialized and not managed by a soap context
        virtual _tds__SetAccessPolicyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAccessPolicyResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetAccessPolicyResponse() : soap() { }
        virtual ~_tds__SetAccessPolicyResponse() { }
        /// Friend allocator used by soap_new__tds__SetAccessPolicyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:716 */
#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (310)
/* complex XML schema type 'tds:CreateCertificate': */
class SOAP_CMAC _tds__CreateCertificate {
      public:
        /// Optional element 'tds:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Optional element 'tds:Subject' of XML schema type 'xsd:string'
        char *Subject;
        /// Optional element 'tds:ValidNotBefore' of XML schema type 'xsd:dateTime'
        time_t *ValidNotBefore;
        /// Optional element 'tds:ValidNotAfter' of XML schema type 'xsd:dateTime'
        time_t *ValidNotAfter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateCertificate
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateCertificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateCertificate, default initialized and not managed by a soap context
        virtual _tds__CreateCertificate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateCertificate); }
      public:
        /// Constructor with default initializations
        _tds__CreateCertificate() : CertificateID(), Subject(), ValidNotBefore(), ValidNotAfter(), soap() { }
        virtual ~_tds__CreateCertificate() { }
        /// Friend allocator used by soap_new__tds__CreateCertificate(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateCertificate * SOAP_FMAC2 soap_instantiate__tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:718 */
#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (311)
/* complex XML schema type 'tds:CreateCertificateResponse': */
class SOAP_CMAC _tds__CreateCertificateResponse {
      public:
        /// Required element 'tds:NvtCertificate' of XML schema type 'tt:Certificate'
        tt__Certificate *NvtCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateCertificateResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateCertificateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateCertificateResponse, default initialized and not managed by a soap context
        virtual _tds__CreateCertificateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateCertificateResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateCertificateResponse() : NvtCertificate(), soap() { }
        virtual ~_tds__CreateCertificateResponse() { }
        /// Friend allocator used by soap_new__tds__CreateCertificateResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateCertificateResponse * SOAP_FMAC2 soap_instantiate__tds__CreateCertificateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:720 */
#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (312)
/* complex XML schema type 'tds:GetCertificates': */
class SOAP_CMAC _tds__GetCertificates {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificates, default initialized and not managed by a soap context
        virtual _tds__GetCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificates); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificates() : soap() { }
        virtual ~_tds__GetCertificates() { }
        /// Friend allocator used by soap_new__tds__GetCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificates * SOAP_FMAC2 soap_instantiate__tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:722 */
#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (313)
/* complex XML schema type 'tds:GetCertificatesResponse': */
class SOAP_CMAC _tds__GetCertificatesResponse {
      public:
        /// Sequence of elements 'tds:NvtCertificate' of XML schema type 'tt:Certificate' stored in dynamic array NvtCertificate of length __sizeNvtCertificate
        int __sizeNvtCertificate;
        tt__Certificate **NvtCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesResponse() : __sizeNvtCertificate(), NvtCertificate(), soap() { }
        virtual ~_tds__GetCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:724 */
#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (314)
/* complex XML schema type 'tds:GetCertificatesStatus': */
class SOAP_CMAC _tds__GetCertificatesStatus {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesStatus
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesStatus, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesStatus); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesStatus() : soap() { }
        virtual ~_tds__GetCertificatesStatus() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesStatus(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:726 */
#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (315)
/* complex XML schema type 'tds:GetCertificatesStatusResponse': */
class SOAP_CMAC _tds__GetCertificatesStatusResponse {
      public:
        /// Sequence of elements 'tds:CertificateStatus' of XML schema type 'tt:CertificateStatus' stored in dynamic array CertificateStatus of length __sizeCertificateStatus
        int __sizeCertificateStatus;
        tt__CertificateStatus **CertificateStatus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesStatusResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesStatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesStatusResponse() : __sizeCertificateStatus(), CertificateStatus(), soap() { }
        virtual ~_tds__GetCertificatesStatusResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:728 */
#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (316)
/* complex XML schema type 'tds:SetCertificatesStatus': */
class SOAP_CMAC _tds__SetCertificatesStatus {
      public:
        /// Sequence of elements 'tds:CertificateStatus' of XML schema type 'tt:CertificateStatus' stored in dynamic array CertificateStatus of length __sizeCertificateStatus
        int __sizeCertificateStatus;
        tt__CertificateStatus **CertificateStatus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetCertificatesStatus
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetCertificatesStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetCertificatesStatus, default initialized and not managed by a soap context
        virtual _tds__SetCertificatesStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetCertificatesStatus); }
      public:
        /// Constructor with default initializations
        _tds__SetCertificatesStatus() : __sizeCertificateStatus(), CertificateStatus(), soap() { }
        virtual ~_tds__SetCertificatesStatus() { }
        /// Friend allocator used by soap_new__tds__SetCertificatesStatus(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:730 */
#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (317)
/* complex XML schema type 'tds:SetCertificatesStatusResponse': */
class SOAP_CMAC _tds__SetCertificatesStatusResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetCertificatesStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetCertificatesStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetCertificatesStatusResponse, default initialized and not managed by a soap context
        virtual _tds__SetCertificatesStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetCertificatesStatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetCertificatesStatusResponse() : soap() { }
        virtual ~_tds__SetCertificatesStatusResponse() { }
        /// Friend allocator used by soap_new__tds__SetCertificatesStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:732 */
#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (318)
/* complex XML schema type 'tds:DeleteCertificates': */
class SOAP_CMAC _tds__DeleteCertificates {
      public:
        /// Sequence of at least 1 elements 'tds:CertificateID' of XML schema type 'xsd:token' stored in dynamic array CertificateID of length __sizeCertificateID
        int __sizeCertificateID;
        char **CertificateID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteCertificates, default initialized and not managed by a soap context
        virtual _tds__DeleteCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteCertificates); }
      public:
        /// Constructor with default initializations
        _tds__DeleteCertificates() : __sizeCertificateID(), CertificateID(), soap() { }
        virtual ~_tds__DeleteCertificates() { }
        /// Friend allocator used by soap_new__tds__DeleteCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:734 */
#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (319)
/* complex XML schema type 'tds:DeleteCertificatesResponse': */
class SOAP_CMAC _tds__DeleteCertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteCertificatesResponse() : soap() { }
        virtual ~_tds__DeleteCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:736 */
#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (320)
/* complex XML schema type 'tds:GetPkcs10Request': */
class SOAP_CMAC _tds__GetPkcs10Request {
      public:
        /// Required element 'tds:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Optional element 'tds:Subject' of XML schema type 'xsd:string'
        char *Subject;
        /// Optional element 'tds:Attributes' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Attributes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPkcs10Request
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPkcs10Request; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPkcs10Request, default initialized and not managed by a soap context
        virtual _tds__GetPkcs10Request *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPkcs10Request); }
      public:
        /// Constructor with default initializations
        _tds__GetPkcs10Request() : CertificateID(), Subject(), Attributes(), soap() { }
        virtual ~_tds__GetPkcs10Request() { }
        /// Friend allocator used by soap_new__tds__GetPkcs10Request(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:738 */
#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (321)
/* complex XML schema type 'tds:GetPkcs10RequestResponse': */
class SOAP_CMAC _tds__GetPkcs10RequestResponse {
      public:
        /// Required element 'tds:Pkcs10Request' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Pkcs10Request;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPkcs10RequestResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPkcs10RequestResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPkcs10RequestResponse, default initialized and not managed by a soap context
        virtual _tds__GetPkcs10RequestResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPkcs10RequestResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPkcs10RequestResponse() : Pkcs10Request(), soap() { }
        virtual ~_tds__GetPkcs10RequestResponse() { }
        /// Friend allocator used by soap_new__tds__GetPkcs10RequestResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPkcs10RequestResponse * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10RequestResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:740 */
#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (322)
/* complex XML schema type 'tds:LoadCertificates': */
class SOAP_CMAC _tds__LoadCertificates {
      public:
        /// Sequence of at least 1 elements 'tds:NVTCertificate' of XML schema type 'tt:Certificate' stored in dynamic array NVTCertificate of length __sizeNVTCertificate
        int __sizeNVTCertificate;
        tt__Certificate **NVTCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificates, default initialized and not managed by a soap context
        virtual _tds__LoadCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificates); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificates() : __sizeNVTCertificate(), NVTCertificate(), soap() { }
        virtual ~_tds__LoadCertificates() { }
        /// Friend allocator used by soap_new__tds__LoadCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:742 */
#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (323)
/* complex XML schema type 'tds:LoadCertificatesResponse': */
class SOAP_CMAC _tds__LoadCertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificatesResponse() : soap() { }
        virtual ~_tds__LoadCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:744 */
#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (324)
/* complex XML schema type 'tds:GetClientCertificateMode': */
class SOAP_CMAC _tds__GetClientCertificateMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetClientCertificateMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetClientCertificateMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetClientCertificateMode, default initialized and not managed by a soap context
        virtual _tds__GetClientCertificateMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetClientCertificateMode); }
      public:
        /// Constructor with default initializations
        _tds__GetClientCertificateMode() : soap() { }
        virtual ~_tds__GetClientCertificateMode() { }
        /// Friend allocator used by soap_new__tds__GetClientCertificateMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:746 */
#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (325)
/* complex XML schema type 'tds:GetClientCertificateModeResponse': */
class SOAP_CMAC _tds__GetClientCertificateModeResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetClientCertificateModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetClientCertificateModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetClientCertificateModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetClientCertificateModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetClientCertificateModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetClientCertificateModeResponse() : Enabled(), soap() { }
        virtual ~_tds__GetClientCertificateModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetClientCertificateModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:748 */
#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (326)
/* complex XML schema type 'tds:SetClientCertificateMode': */
class SOAP_CMAC _tds__SetClientCertificateMode {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetClientCertificateMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetClientCertificateMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetClientCertificateMode, default initialized and not managed by a soap context
        virtual _tds__SetClientCertificateMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetClientCertificateMode); }
      public:
        /// Constructor with default initializations
        _tds__SetClientCertificateMode() : Enabled(), soap() { }
        virtual ~_tds__SetClientCertificateMode() { }
        /// Friend allocator used by soap_new__tds__SetClientCertificateMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:750 */
#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (327)
/* complex XML schema type 'tds:SetClientCertificateModeResponse': */
class SOAP_CMAC _tds__SetClientCertificateModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetClientCertificateModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetClientCertificateModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetClientCertificateModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetClientCertificateModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetClientCertificateModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetClientCertificateModeResponse() : soap() { }
        virtual ~_tds__SetClientCertificateModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetClientCertificateModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:752 */
#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (328)
/* complex XML schema type 'tds:GetCACertificates': */
class SOAP_CMAC _tds__GetCACertificates {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCACertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCACertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCACertificates, default initialized and not managed by a soap context
        virtual _tds__GetCACertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCACertificates); }
      public:
        /// Constructor with default initializations
        _tds__GetCACertificates() : soap() { }
        virtual ~_tds__GetCACertificates() { }
        /// Friend allocator used by soap_new__tds__GetCACertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCACertificates * SOAP_FMAC2 soap_instantiate__tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:754 */
#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (329)
/* complex XML schema type 'tds:GetCACertificatesResponse': */
class SOAP_CMAC _tds__GetCACertificatesResponse {
      public:
        /// Sequence of elements 'tds:CACertificate' of XML schema type 'tt:Certificate' stored in dynamic array CACertificate of length __sizeCACertificate
        int __sizeCACertificate;
        tt__Certificate **CACertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCACertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCACertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCACertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCACertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCACertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCACertificatesResponse() : __sizeCACertificate(), CACertificate(), soap() { }
        virtual ~_tds__GetCACertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCACertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:756 */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (330)
/* complex XML schema type 'tds:LoadCertificateWithPrivateKey': */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKey {
      public:
        /// Sequence of at least 1 elements 'tds:CertificateWithPrivateKey' of XML schema type 'tt:CertificateWithPrivateKey' stored in dynamic array CertificateWithPrivateKey of length __sizeCertificateWithPrivateKey
        int __sizeCertificateWithPrivateKey;
        tt__CertificateWithPrivateKey **CertificateWithPrivateKey;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKey
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificateWithPrivateKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificateWithPrivateKey, default initialized and not managed by a soap context
        virtual _tds__LoadCertificateWithPrivateKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificateWithPrivateKey); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificateWithPrivateKey() : __sizeCertificateWithPrivateKey(), CertificateWithPrivateKey(), soap() { }
        virtual ~_tds__LoadCertificateWithPrivateKey() { }
        /// Friend allocator used by soap_new__tds__LoadCertificateWithPrivateKey(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:758 */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (331)
/* complex XML schema type 'tds:LoadCertificateWithPrivateKeyResponse': */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKeyResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificateWithPrivateKeyResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCertificateWithPrivateKeyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificateWithPrivateKeyResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificateWithPrivateKeyResponse() : soap() { }
        virtual ~_tds__LoadCertificateWithPrivateKeyResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:760 */
#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (332)
/* complex XML schema type 'tds:GetCertificateInformation': */
class SOAP_CMAC _tds__GetCertificateInformation {
      public:
        /// Required element 'tds:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificateInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificateInformation, default initialized and not managed by a soap context
        virtual _tds__GetCertificateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificateInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificateInformation() : CertificateID(), soap() { }
        virtual ~_tds__GetCertificateInformation() { }
        /// Friend allocator used by soap_new__tds__GetCertificateInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:762 */
#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (333)
/* complex XML schema type 'tds:GetCertificateInformationResponse': */
class SOAP_CMAC _tds__GetCertificateInformationResponse {
      public:
        /// Required element 'tds:CertificateInformation' of XML schema type 'tt:CertificateInformation'
        tt__CertificateInformation *CertificateInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificateInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificateInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificateInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificateInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificateInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificateInformationResponse() : CertificateInformation(), soap() { }
        virtual ~_tds__GetCertificateInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificateInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificateInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:764 */
#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (334)
/* complex XML schema type 'tds:LoadCACertificates': */
class SOAP_CMAC _tds__LoadCACertificates {
      public:
        /// Sequence of at least 1 elements 'tds:CACertificate' of XML schema type 'tt:Certificate' stored in dynamic array CACertificate of length __sizeCACertificate
        int __sizeCACertificate;
        tt__Certificate **CACertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCACertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCACertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCACertificates, default initialized and not managed by a soap context
        virtual _tds__LoadCACertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCACertificates); }
      public:
        /// Constructor with default initializations
        _tds__LoadCACertificates() : __sizeCACertificate(), CACertificate(), soap() { }
        virtual ~_tds__LoadCACertificates() { }
        /// Friend allocator used by soap_new__tds__LoadCACertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:766 */
#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (335)
/* complex XML schema type 'tds:LoadCACertificatesResponse': */
class SOAP_CMAC _tds__LoadCACertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCACertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCACertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCACertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCACertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCACertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCACertificatesResponse() : soap() { }
        virtual ~_tds__LoadCACertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCACertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:768 */
#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (336)
/* complex XML schema type 'tds:CreateDot1XConfiguration': */
class SOAP_CMAC _tds__CreateDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__CreateDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__CreateDot1XConfiguration() : Dot1XConfiguration(), soap() { }
        virtual ~_tds__CreateDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__CreateDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:770 */
#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (337)
/* complex XML schema type 'tds:CreateDot1XConfigurationResponse': */
class SOAP_CMAC _tds__CreateDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__CreateDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateDot1XConfigurationResponse() : soap() { }
        virtual ~_tds__CreateDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__CreateDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:772 */
#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (338)
/* complex XML schema type 'tds:SetDot1XConfiguration': */
class SOAP_CMAC _tds__SetDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetDot1XConfiguration() : Dot1XConfiguration(), soap() { }
        virtual ~_tds__SetDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:774 */
#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (339)
/* complex XML schema type 'tds:SetDot1XConfigurationResponse': */
class SOAP_CMAC _tds__SetDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDot1XConfigurationResponse() : soap() { }
        virtual ~_tds__SetDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:776 */
#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (340)
/* complex XML schema type 'tds:GetDot1XConfiguration': */
class SOAP_CMAC _tds__GetDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *Dot1XConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfiguration() : Dot1XConfigurationToken(), soap() { }
        virtual ~_tds__GetDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:778 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (341)
/* complex XML schema type 'tds:GetDot1XConfigurationResponse': */
class SOAP_CMAC _tds__GetDot1XConfigurationResponse {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurationResponse() : Dot1XConfiguration(), soap() { }
        virtual ~_tds__GetDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:780 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (342)
/* complex XML schema type 'tds:GetDot1XConfigurations': */
class SOAP_CMAC _tds__GetDot1XConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurations, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurations); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurations() : soap() { }
        virtual ~_tds__GetDot1XConfigurations() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:782 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (343)
/* complex XML schema type 'tds:GetDot1XConfigurationsResponse': */
class SOAP_CMAC _tds__GetDot1XConfigurationsResponse {
      public:
        /// Sequence of elements 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration' stored in dynamic array Dot1XConfiguration of length __sizeDot1XConfiguration
        int __sizeDot1XConfiguration;
        tt__Dot1XConfiguration **Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurationsResponse() : __sizeDot1XConfiguration(), Dot1XConfiguration(), soap() { }
        virtual ~_tds__GetDot1XConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:784 */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (344)
/* complex XML schema type 'tds:DeleteDot1XConfiguration': */
class SOAP_CMAC _tds__DeleteDot1XConfiguration {
      public:
        /// Sequence of elements 'tds:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken' stored in dynamic array Dot1XConfigurationToken of length __sizeDot1XConfigurationToken
        int __sizeDot1XConfigurationToken;
        char **Dot1XConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__DeleteDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__DeleteDot1XConfiguration() : __sizeDot1XConfigurationToken(), Dot1XConfigurationToken(), soap() { }
        virtual ~_tds__DeleteDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__DeleteDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:786 */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (345)
/* complex XML schema type 'tds:DeleteDot1XConfigurationResponse': */
class SOAP_CMAC _tds__DeleteDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteDot1XConfigurationResponse() : soap() { }
        virtual ~_tds__DeleteDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:788 */
#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (346)
/* complex XML schema type 'tds:GetRelayOutputs': */
class SOAP_CMAC _tds__GetRelayOutputs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRelayOutputs
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRelayOutputs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRelayOutputs, default initialized and not managed by a soap context
        virtual _tds__GetRelayOutputs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRelayOutputs); }
      public:
        /// Constructor with default initializations
        _tds__GetRelayOutputs() : soap() { }
        virtual ~_tds__GetRelayOutputs() { }
        /// Friend allocator used by soap_new__tds__GetRelayOutputs(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:790 */
#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (347)
/* complex XML schema type 'tds:GetRelayOutputsResponse': */
class SOAP_CMAC _tds__GetRelayOutputsResponse {
      public:
        /// Sequence of elements 'tds:RelayOutputs' of XML schema type 'tt:RelayOutput' stored in dynamic array RelayOutputs of length __sizeRelayOutputs
        int __sizeRelayOutputs;
        tt__RelayOutput **RelayOutputs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRelayOutputsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRelayOutputsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRelayOutputsResponse, default initialized and not managed by a soap context
        virtual _tds__GetRelayOutputsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRelayOutputsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRelayOutputsResponse() : __sizeRelayOutputs(), RelayOutputs(), soap() { }
        virtual ~_tds__GetRelayOutputsResponse() { }
        /// Friend allocator used by soap_new__tds__GetRelayOutputsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRelayOutputsResponse * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:792 */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (348)
/* complex XML schema type 'tds:SetRelayOutputSettings': */
class SOAP_CMAC _tds__SetRelayOutputSettings {
      public:
        /// Required element 'tds:RelayOutputToken' of XML schema type 'tt:ReferenceToken'
        char *RelayOutputToken;
        /// Required element 'tds:Properties' of XML schema type 'tt:RelayOutputSettings'
        tt__RelayOutputSettings *Properties;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputSettings
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputSettings, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputSettings); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputSettings() : RelayOutputToken(), Properties(), soap() { }
        virtual ~_tds__SetRelayOutputSettings() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputSettings(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:794 */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (349)
/* complex XML schema type 'tds:SetRelayOutputSettingsResponse': */
class SOAP_CMAC _tds__SetRelayOutputSettingsResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputSettingsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputSettingsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputSettingsResponse, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputSettingsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputSettingsResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputSettingsResponse() : soap() { }
        virtual ~_tds__SetRelayOutputSettingsResponse() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputSettingsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettingsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:796 */
#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (350)
/* complex XML schema type 'tds:SetRelayOutputState': */
class SOAP_CMAC _tds__SetRelayOutputState {
      public:
        /// Required element 'tds:RelayOutputToken' of XML schema type 'tt:ReferenceToken'
        char *RelayOutputToken;
        /// Required element 'tds:LogicalState' of XML schema type 'tt:RelayLogicalState'
        enum tt__RelayLogicalState LogicalState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputState
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputState, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputState); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputState() : RelayOutputToken(), LogicalState(), soap() { }
        virtual ~_tds__SetRelayOutputState() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputState(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:798 */
#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (351)
/* complex XML schema type 'tds:SetRelayOutputStateResponse': */
class SOAP_CMAC _tds__SetRelayOutputStateResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputStateResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputStateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputStateResponse, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputStateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputStateResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputStateResponse() : soap() { }
        virtual ~_tds__SetRelayOutputStateResponse() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputStateResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputStateResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputStateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:800 */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (352)
/* complex XML schema type 'tds:SendAuxiliaryCommand': */
class SOAP_CMAC _tds__SendAuxiliaryCommand {
      public:
        /// Required element 'tds:AuxiliaryCommand' of XML schema type 'tt:AuxiliaryData'
        char *AuxiliaryCommand;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SendAuxiliaryCommand
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SendAuxiliaryCommand; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SendAuxiliaryCommand, default initialized and not managed by a soap context
        virtual _tds__SendAuxiliaryCommand *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SendAuxiliaryCommand); }
      public:
        /// Constructor with default initializations
        _tds__SendAuxiliaryCommand() : AuxiliaryCommand(), soap() { }
        virtual ~_tds__SendAuxiliaryCommand() { }
        /// Friend allocator used by soap_new__tds__SendAuxiliaryCommand(struct soap*, int)
        friend SOAP_FMAC1 _tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:802 */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (353)
/* complex XML schema type 'tds:SendAuxiliaryCommandResponse': */
class SOAP_CMAC _tds__SendAuxiliaryCommandResponse {
      public:
        /// Optional element 'tds:AuxiliaryCommandResponse' of XML schema type 'tt:AuxiliaryData'
        char *AuxiliaryCommandResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SendAuxiliaryCommandResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SendAuxiliaryCommandResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SendAuxiliaryCommandResponse, default initialized and not managed by a soap context
        virtual _tds__SendAuxiliaryCommandResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SendAuxiliaryCommandResponse); }
      public:
        /// Constructor with default initializations
        _tds__SendAuxiliaryCommandResponse() : AuxiliaryCommandResponse(), soap() { }
        virtual ~_tds__SendAuxiliaryCommandResponse() { }
        /// Friend allocator used by soap_new__tds__SendAuxiliaryCommandResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:804 */
#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (354)
/* complex XML schema type 'tds:GetDot11Capabilities': */
class SOAP_CMAC _tds__GetDot11Capabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11Capabilities, default initialized and not managed by a soap context
        virtual _tds__GetDot11Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11Capabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11Capabilities() : soap() { }
        virtual ~_tds__GetDot11Capabilities() { }
        /// Friend allocator used by soap_new__tds__GetDot11Capabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate__tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:806 */
#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (355)
/* complex XML schema type 'tds:GetDot11CapabilitiesResponse': */
class SOAP_CMAC _tds__GetDot11CapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tt:Dot11Capabilities'
        tt__Dot11Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11CapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11CapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11CapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot11CapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11CapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11CapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tds__GetDot11CapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot11CapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11CapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:808 */
#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (356)
/* complex XML schema type 'tds:GetDot11Status': */
class SOAP_CMAC _tds__GetDot11Status {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        char *InterfaceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11Status
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11Status; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11Status, default initialized and not managed by a soap context
        virtual _tds__GetDot11Status *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11Status); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11Status() : InterfaceToken(), soap() { }
        virtual ~_tds__GetDot11Status() { }
        /// Friend allocator used by soap_new__tds__GetDot11Status(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11Status * SOAP_FMAC2 soap_instantiate__tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:810 */
#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (357)
/* complex XML schema type 'tds:GetDot11StatusResponse': */
class SOAP_CMAC _tds__GetDot11StatusResponse {
      public:
        /// Required element 'tds:Status' of XML schema type 'tt:Dot11Status'
        tt__Dot11Status *Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11StatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11StatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11StatusResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot11StatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11StatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11StatusResponse() : Status(), soap() { }
        virtual ~_tds__GetDot11StatusResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot11StatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11StatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11StatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:812 */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (358)
/* complex XML schema type 'tds:ScanAvailableDot11Networks': */
class SOAP_CMAC _tds__ScanAvailableDot11Networks {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        char *InterfaceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__ScanAvailableDot11Networks
        virtual long soap_type(void) const { return SOAP_TYPE__tds__ScanAvailableDot11Networks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__ScanAvailableDot11Networks, default initialized and not managed by a soap context
        virtual _tds__ScanAvailableDot11Networks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__ScanAvailableDot11Networks); }
      public:
        /// Constructor with default initializations
        _tds__ScanAvailableDot11Networks() : InterfaceToken(), soap() { }
        virtual ~_tds__ScanAvailableDot11Networks() { }
        /// Friend allocator used by soap_new__tds__ScanAvailableDot11Networks(struct soap*, int)
        friend SOAP_FMAC1 _tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:814 */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (359)
/* complex XML schema type 'tds:ScanAvailableDot11NetworksResponse': */
class SOAP_CMAC _tds__ScanAvailableDot11NetworksResponse {
      public:
        /// Sequence of elements 'tds:Networks' of XML schema type 'tt:Dot11AvailableNetworks' stored in dynamic array Networks of length __sizeNetworks
        int __sizeNetworks;
        tt__Dot11AvailableNetworks **Networks;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__ScanAvailableDot11NetworksResponse, default initialized and not managed by a soap context
        virtual _tds__ScanAvailableDot11NetworksResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__ScanAvailableDot11NetworksResponse); }
      public:
        /// Constructor with default initializations
        _tds__ScanAvailableDot11NetworksResponse() : __sizeNetworks(), Networks(), soap() { }
        virtual ~_tds__ScanAvailableDot11NetworksResponse() { }
        /// Friend allocator used by soap_new__tds__ScanAvailableDot11NetworksResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11NetworksResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:816 */
#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (360)
/* complex XML schema type 'tds:GetSystemUris': */
class SOAP_CMAC _tds__GetSystemUris {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUris
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUris; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUris, default initialized and not managed by a soap context
        virtual _tds__GetSystemUris *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUris); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUris() : soap() { }
        virtual ~_tds__GetSystemUris() { }
        /// Friend allocator used by soap_new__tds__GetSystemUris(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUris * SOAP_FMAC2 soap_instantiate__tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:9745 */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (1530)
/* complex XML schema type 'tds:GetSystemUrisResponse-Extension': */
class SOAP_CMAC _tds__GetSystemUrisResponse_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUrisResponse_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUrisResponse_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUrisResponse_Extension, default initialized and not managed by a soap context
        virtual _tds__GetSystemUrisResponse_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUrisResponse_Extension); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUrisResponse_Extension() { }
        virtual ~_tds__GetSystemUrisResponse_Extension() { }
        /// Friend allocator used by soap_new__tds__GetSystemUrisResponse_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:818 */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (361)
/* complex XML schema type 'tds:GetSystemUrisResponse': */
class SOAP_CMAC _tds__GetSystemUrisResponse {
      public:
        /// Optional element 'tds:SystemLogUris' of XML schema type 'tt:SystemLogUriList'
        tt__SystemLogUriList *SystemLogUris;
        /// Optional element 'tds:SupportInfoUri' of XML schema type 'xsd:anyURI'
        char *SupportInfoUri;
        /// Optional element 'tds:SystemBackupUri' of XML schema type 'xsd:anyURI'
        char *SystemBackupUri;
        /// Optional element 'tds:Extension' of XML schema type 'tds:GetSystemUrisResponse-Extension'
        _tds__GetSystemUrisResponse_Extension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUrisResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUrisResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUrisResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemUrisResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUrisResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUrisResponse() : SystemLogUris(), SupportInfoUri(), SystemBackupUri(), Extension(), soap() { }
        virtual ~_tds__GetSystemUrisResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemUrisResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUrisResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:820 */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (362)
/* complex XML schema type 'tds:StartFirmwareUpgrade': */
class SOAP_CMAC _tds__StartFirmwareUpgrade {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartFirmwareUpgrade
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartFirmwareUpgrade; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartFirmwareUpgrade, default initialized and not managed by a soap context
        virtual _tds__StartFirmwareUpgrade *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartFirmwareUpgrade); }
      public:
        /// Constructor with default initializations
        _tds__StartFirmwareUpgrade() : soap() { }
        virtual ~_tds__StartFirmwareUpgrade() { }
        /// Friend allocator used by soap_new__tds__StartFirmwareUpgrade(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:822 */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (363)
/* complex XML schema type 'tds:StartFirmwareUpgradeResponse': */
class SOAP_CMAC _tds__StartFirmwareUpgradeResponse {
      public:
        /// Required element 'tds:UploadUri' of XML schema type 'xsd:anyURI'
        char *UploadUri;
        /// Required element 'tds:UploadDelay' of XML schema type 'xsd:duration'
        char *UploadDelay;
        /// Required element 'tds:ExpectedDownTime' of XML schema type 'xsd:duration'
        char *ExpectedDownTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartFirmwareUpgradeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartFirmwareUpgradeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartFirmwareUpgradeResponse, default initialized and not managed by a soap context
        virtual _tds__StartFirmwareUpgradeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartFirmwareUpgradeResponse); }
      public:
        /// Constructor with default initializations
        _tds__StartFirmwareUpgradeResponse() : UploadUri(), UploadDelay(), ExpectedDownTime(), soap() { }
        virtual ~_tds__StartFirmwareUpgradeResponse() { }
        /// Friend allocator used by soap_new__tds__StartFirmwareUpgradeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgradeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:824 */
#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (364)
/* complex XML schema type 'tds:StartSystemRestore': */
class SOAP_CMAC _tds__StartSystemRestore {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartSystemRestore
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartSystemRestore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartSystemRestore, default initialized and not managed by a soap context
        virtual _tds__StartSystemRestore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartSystemRestore); }
      public:
        /// Constructor with default initializations
        _tds__StartSystemRestore() : soap() { }
        virtual ~_tds__StartSystemRestore() { }
        /// Friend allocator used by soap_new__tds__StartSystemRestore(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:826 */
#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (365)
/* complex XML schema type 'tds:StartSystemRestoreResponse': */
class SOAP_CMAC _tds__StartSystemRestoreResponse {
      public:
        /// Required element 'tds:UploadUri' of XML schema type 'xsd:anyURI'
        char *UploadUri;
        /// Required element 'tds:ExpectedDownTime' of XML schema type 'xsd:duration'
        char *ExpectedDownTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartSystemRestoreResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartSystemRestoreResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartSystemRestoreResponse, default initialized and not managed by a soap context
        virtual _tds__StartSystemRestoreResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartSystemRestoreResponse); }
      public:
        /// Constructor with default initializations
        _tds__StartSystemRestoreResponse() : UploadUri(), ExpectedDownTime(), soap() { }
        virtual ~_tds__StartSystemRestoreResponse() { }
        /// Friend allocator used by soap_new__tds__StartSystemRestoreResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartSystemRestoreResponse * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestoreResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:828 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (366)
/* complex XML schema type 'tds:GetStorageConfigurations': */
class SOAP_CMAC _tds__GetStorageConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurations, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurations); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurations() : soap() { }
        virtual ~_tds__GetStorageConfigurations() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:830 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (367)
/* complex XML schema type 'tds:GetStorageConfigurationsResponse': */
class SOAP_CMAC _tds__GetStorageConfigurationsResponse {
      public:
        /// Sequence of elements 'tds:StorageConfigurations' of XML schema type 'tds:StorageConfiguration' stored in dynamic array StorageConfigurations of length __sizeStorageConfigurations
        int __sizeStorageConfigurations;
        tds__StorageConfiguration **StorageConfigurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurationsResponse() : __sizeStorageConfigurations(), StorageConfigurations(), soap() { }
        virtual ~_tds__GetStorageConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:832 */
#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (368)
/* complex XML schema type 'tds:CreateStorageConfiguration': */
class SOAP_CMAC _tds__CreateStorageConfiguration {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfigurationData'
        tds__StorageConfigurationData *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__CreateStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__CreateStorageConfiguration() : StorageConfiguration(), soap() { }
        virtual ~_tds__CreateStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__CreateStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:834 */
#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (369)
/* complex XML schema type 'tds:CreateStorageConfigurationResponse': */
class SOAP_CMAC _tds__CreateStorageConfigurationResponse {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__CreateStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateStorageConfigurationResponse() : Token(), soap() { }
        virtual ~_tds__CreateStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__CreateStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:836 */
#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (370)
/* complex XML schema type 'tds:GetStorageConfiguration': */
class SOAP_CMAC _tds__GetStorageConfiguration {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfiguration() : Token(), soap() { }
        virtual ~_tds__GetStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:838 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (371)
/* complex XML schema type 'tds:GetStorageConfigurationResponse': */
class SOAP_CMAC _tds__GetStorageConfigurationResponse {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfiguration'
        tds__StorageConfiguration *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurationResponse() : StorageConfiguration(), soap() { }
        virtual ~_tds__GetStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:840 */
#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (372)
/* complex XML schema type 'tds:SetStorageConfiguration': */
class SOAP_CMAC _tds__SetStorageConfiguration {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfiguration'
        tds__StorageConfiguration *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetStorageConfiguration() : StorageConfiguration(), soap() { }
        virtual ~_tds__SetStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:842 */
#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (373)
/* complex XML schema type 'tds:SetStorageConfigurationResponse': */
class SOAP_CMAC _tds__SetStorageConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetStorageConfigurationResponse() : soap() { }
        virtual ~_tds__SetStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:844 */
#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (374)
/* complex XML schema type 'tds:DeleteStorageConfiguration': */
class SOAP_CMAC _tds__DeleteStorageConfiguration {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__DeleteStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__DeleteStorageConfiguration() : Token(), soap() { }
        virtual ~_tds__DeleteStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__DeleteStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:846 */
#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (375)
/* complex XML schema type 'tds:DeleteStorageConfigurationResponse': */
class SOAP_CMAC _tds__DeleteStorageConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteStorageConfigurationResponse() : soap() { }
        virtual ~_tds__DeleteStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:848 */
#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (376)
/* complex XML schema type 'tds:GetGeoLocation': */
class SOAP_CMAC _tds__GetGeoLocation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetGeoLocation, default initialized and not managed by a soap context
        virtual _tds__GetGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__GetGeoLocation() : soap() { }
        virtual ~_tds__GetGeoLocation() { }
        /// Friend allocator used by soap_new__tds__GetGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:850 */
#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (377)
/* complex XML schema type 'tds:GetGeoLocationResponse': */
class SOAP_CMAC _tds__GetGeoLocationResponse {
      public:
        /// Sequence of elements 'tds:Location' of XML schema type 'tt:LocationEntity' stored in dynamic array Location of length __sizeLocation
        int __sizeLocation;
        tt__LocationEntity **Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__GetGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetGeoLocationResponse() : __sizeLocation(), Location(), soap() { }
        virtual ~_tds__GetGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__GetGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:852 */
#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (378)
/* complex XML schema type 'tds:SetGeoLocation': */
class SOAP_CMAC _tds__SetGeoLocation {
      public:
        /// Sequence of at least 1 elements 'tds:Location' of XML schema type 'tt:LocationEntity' stored in dynamic array Location of length __sizeLocation
        int __sizeLocation;
        tt__LocationEntity **Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetGeoLocation, default initialized and not managed by a soap context
        virtual _tds__SetGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__SetGeoLocation() : __sizeLocation(), Location(), soap() { }
        virtual ~_tds__SetGeoLocation() { }
        /// Friend allocator used by soap_new__tds__SetGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:854 */
#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (379)
/* complex XML schema type 'tds:SetGeoLocationResponse': */
class SOAP_CMAC _tds__SetGeoLocationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__SetGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetGeoLocationResponse() : soap() { }
        virtual ~_tds__SetGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__SetGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:856 */
#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (380)
/* complex XML schema type 'tds:DeleteGeoLocation': */
class SOAP_CMAC _tds__DeleteGeoLocation {
      public:
        /// Sequence of at least 1 elements 'tds:Location' of XML schema type 'tt:LocationEntity' stored in dynamic array Location of length __sizeLocation
        int __sizeLocation;
        tt__LocationEntity **Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteGeoLocation, default initialized and not managed by a soap context
        virtual _tds__DeleteGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__DeleteGeoLocation() : __sizeLocation(), Location(), soap() { }
        virtual ~_tds__DeleteGeoLocation() { }
        /// Friend allocator used by soap_new__tds__DeleteGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:858 */
#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (381)
/* complex XML schema type 'tds:DeleteGeoLocationResponse': */
class SOAP_CMAC _tds__DeleteGeoLocationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteGeoLocationResponse() : soap() { }
        virtual ~_tds__DeleteGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:860 */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (382)
/* simple XML schema type 'tt:DeviceEntity': */
class SOAP_CMAC tt__DeviceEntity : public xsd__anyType {
      public:
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceEntity, default initialized and not managed by a soap context
        virtual tt__DeviceEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceEntity); }
      public:
        /// Constructor with default initializations
        tt__DeviceEntity() : token() { }
        virtual ~tt__DeviceEntity() { }
        /// Friend allocator used by soap_new_tt__DeviceEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:862 */
#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (383)
/* simple XML schema type 'tt:IntRectangle': */
class SOAP_CMAC tt__IntRectangle : public xsd__anyType {
      public:
        /// Required attribute 'x' of XML schema type 'xsd:int'
        int x;
        /// Required attribute 'y' of XML schema type 'xsd:int'
        int y;
        /// Required attribute 'width' of XML schema type 'xsd:int'
        int width;
        /// Required attribute 'height' of XML schema type 'xsd:int'
        int height;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRectangle
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRectangle, default initialized and not managed by a soap context
        virtual tt__IntRectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRectangle); }
      public:
        /// Constructor with default initializations
        tt__IntRectangle() : x(), y(), width(), height() { }
        virtual ~tt__IntRectangle() { }
        /// Friend allocator used by soap_new_tt__IntRectangle(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRectangle * SOAP_FMAC2 soap_instantiate_tt__IntRectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:864 */
#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (384)
/* complex XML schema type 'tt:IntRectangleRange': */
class SOAP_CMAC tt__IntRectangleRange : public xsd__anyType {
      public:
        /// Required element 'tt:XRange' of XML schema type 'tt:IntRange'
        tt__IntRange *XRange;
        /// Required element 'tt:YRange' of XML schema type 'tt:IntRange'
        tt__IntRange *YRange;
        /// Required element 'tt:WidthRange' of XML schema type 'tt:IntRange'
        tt__IntRange *WidthRange;
        /// Required element 'tt:HeightRange' of XML schema type 'tt:IntRange'
        tt__IntRange *HeightRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRectangleRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRectangleRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRectangleRange, default initialized and not managed by a soap context
        virtual tt__IntRectangleRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRectangleRange); }
      public:
        /// Constructor with default initializations
        tt__IntRectangleRange() : XRange(), YRange(), WidthRange(), HeightRange() { }
        virtual ~tt__IntRectangleRange() { }
        /// Friend allocator used by soap_new_tt__IntRectangleRange(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRectangleRange * SOAP_FMAC2 soap_instantiate_tt__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:866 */
#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (385)
/* complex XML schema type 'tt:FloatRange': */
class SOAP_CMAC tt__FloatRange : public xsd__anyType {
      public:
        /// Required element 'tt:Min' of XML schema type 'xsd:float'
        float Min;
        /// Required element 'tt:Max' of XML schema type 'xsd:float'
        float Max;
      public:
        /// Return unique type id SOAP_TYPE_tt__FloatRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FloatRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FloatRange, default initialized and not managed by a soap context
        virtual tt__FloatRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FloatRange); }
      public:
        /// Constructor with default initializations
        tt__FloatRange() : Min(), Max() { }
        virtual ~tt__FloatRange() { }
        /// Friend allocator used by soap_new_tt__FloatRange(struct soap*, int)
        friend SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:868 */
#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (386)
/* complex XML schema type 'tt:DurationRange': */
class SOAP_CMAC tt__DurationRange : public xsd__anyType {
      public:
        /// Required element 'tt:Min' of XML schema type 'xsd:duration'
        char *Min;
        /// Required element 'tt:Max' of XML schema type 'xsd:duration'
        char *Max;
      public:
        /// Return unique type id SOAP_TYPE_tt__DurationRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DurationRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DurationRange, default initialized and not managed by a soap context
        virtual tt__DurationRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DurationRange); }
      public:
        /// Constructor with default initializations
        tt__DurationRange() : Min(), Max() { }
        virtual ~tt__DurationRange() { }
        /// Friend allocator used by soap_new_tt__DurationRange(struct soap*, int)
        friend SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:870 */
#ifndef SOAP_TYPE_tt__IntItems
#define SOAP_TYPE_tt__IntItems (387)
/* complex XML schema type 'tt:IntItems': */
class SOAP_CMAC tt__IntItems : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Items' of XML schema type 'xsd:int' stored in dynamic array Items of length __sizeItems
        int __sizeItems;
        int *Items;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntItems
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntItems; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntItems, default initialized and not managed by a soap context
        virtual tt__IntItems *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntItems); }
      public:
        /// Constructor with default initializations
        tt__IntItems() : __sizeItems(), Items() { }
        virtual ~tt__IntItems() { }
        /// Friend allocator used by soap_new_tt__IntItems(struct soap*, int)
        friend SOAP_FMAC1 tt__IntItems * SOAP_FMAC2 soap_instantiate_tt__IntItems(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:872 */
#ifndef SOAP_TYPE_tt__FloatItems
#define SOAP_TYPE_tt__FloatItems (388)
/* Type tt__FloatItems is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FloatItems': */
class SOAP_CMAC tt__FloatItems : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Items' of XML schema type 'xsd:float' stored in dynamic array Items of length __sizeItems
        int __sizeItems;
        float *Items;
      public:
        /// Return unique type id SOAP_TYPE_tt__FloatItems
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FloatItems; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FloatItems, default initialized and not managed by a soap context
        virtual tt__FloatItems *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FloatItems); }
      public:
        /// Constructor with default initializations
        tt__FloatItems() : __sizeItems(), Items() { }
        virtual ~tt__FloatItems() { }
        /// Friend allocator used by soap_new_tt__FloatItems(struct soap*, int)
        friend SOAP_FMAC1 tt__FloatItems * SOAP_FMAC2 soap_instantiate_tt__FloatItems(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:874 */
#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (389)
/* Type tt__AnyHolder is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:AnyHolder': */
class SOAP_CMAC tt__AnyHolder : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AnyHolder
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnyHolder; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnyHolder, default initialized and not managed by a soap context
        virtual tt__AnyHolder *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnyHolder); }
      public:
        /// Constructor with default initializations
        tt__AnyHolder() { }
        virtual ~tt__AnyHolder() { }
        /// Friend allocator used by soap_new_tt__AnyHolder(struct soap*, int)
        friend SOAP_FMAC1 tt__AnyHolder * SOAP_FMAC2 soap_instantiate_tt__AnyHolder(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:878 */
#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (391)
/* complex XML schema type 'tt:VideoSourceExtension': */
class SOAP_CMAC tt__VideoSourceExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:Imaging' of XML schema type 'tt:ImagingSettings20'
        tt__ImagingSettings20 *Imaging;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceExtension2'
        tt__VideoSourceExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceExtension() : Imaging(), Extension() { }
        virtual ~tt__VideoSourceExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:880 */
#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (392)
/* simple XML schema type 'tt:VideoSourceExtension2': */
class SOAP_CMAC tt__VideoSourceExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceExtension2); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceExtension2() { }
        virtual ~tt__VideoSourceExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:884 */
#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (394)
/* complex XML schema type 'tt:Profile': */
class SOAP_CMAC tt__Profile : public xsd__anyType {
      public:
        /// Required element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Optional element 'tt:VideoSourceConfiguration' of XML schema type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *VideoSourceConfiguration;
        /// Optional element 'tt:AudioSourceConfiguration' of XML schema type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *AudioSourceConfiguration;
        /// Optional element 'tt:VideoEncoderConfiguration' of XML schema type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *VideoEncoderConfiguration;
        /// Optional element 'tt:AudioEncoderConfiguration' of XML schema type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *AudioEncoderConfiguration;
        /// Optional element 'tt:VideoAnalyticsConfiguration' of XML schema type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;
        /// Optional element 'tt:PTZConfiguration' of XML schema type 'tt:PTZConfiguration'
        tt__PTZConfiguration *PTZConfiguration;
        /// Optional element 'tt:MetadataConfiguration' of XML schema type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *MetadataConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ProfileExtension'
        tt__ProfileExtension *Extension;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
        /// Optional attribute 'fixed' of XML schema type 'xsd:boolean'
        bool *fixed;
      public:
        /// Return unique type id SOAP_TYPE_tt__Profile
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Profile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Profile, default initialized and not managed by a soap context
        virtual tt__Profile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Profile); }
      public:
        /// Constructor with default initializations
        tt__Profile() : Name(), VideoSourceConfiguration(), AudioSourceConfiguration(), VideoEncoderConfiguration(), AudioEncoderConfiguration(), VideoAnalyticsConfiguration(), PTZConfiguration(), MetadataConfiguration(), Extension(), token(), fixed() { }
        virtual ~tt__Profile() { }
        /// Friend allocator used by soap_new_tt__Profile(struct soap*, int)
        friend SOAP_FMAC1 tt__Profile * SOAP_FMAC2 soap_instantiate_tt__Profile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:886 */
#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (395)
/* complex XML schema type 'tt:ProfileExtension': */
class SOAP_CMAC tt__ProfileExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:AudioOutputConfiguration' of XML schema type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *AudioOutputConfiguration;
        /// Optional element 'tt:AudioDecoderConfiguration' of XML schema type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *AudioDecoderConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ProfileExtension2'
        tt__ProfileExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileExtension, default initialized and not managed by a soap context
        virtual tt__ProfileExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileExtension); }
      public:
        /// Constructor with default initializations
        tt__ProfileExtension() : AudioOutputConfiguration(), AudioDecoderConfiguration(), Extension() { }
        virtual ~tt__ProfileExtension() { }
        /// Friend allocator used by soap_new_tt__ProfileExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:888 */
#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (396)
/* simple XML schema type 'tt:ProfileExtension2': */
class SOAP_CMAC tt__ProfileExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileExtension2, default initialized and not managed by a soap context
        virtual tt__ProfileExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileExtension2); }
      public:
        /// Constructor with default initializations
        tt__ProfileExtension2() { }
        virtual ~tt__ProfileExtension2() { }
        /// Friend allocator used by soap_new_tt__ProfileExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:890 */
#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (397)
/* complex XML schema type 'tt:ConfigurationEntity': */
class SOAP_CMAC tt__ConfigurationEntity : public xsd__anyType {
      public:
        /// Required element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Required element 'tt:UseCount' of XML schema type 'xsd:int'
        int UseCount;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigurationEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigurationEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigurationEntity, default initialized and not managed by a soap context
        virtual tt__ConfigurationEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigurationEntity); }
      public:
        /// Constructor with default initializations
        tt__ConfigurationEntity() : Name(), UseCount(), token() { }
        virtual ~tt__ConfigurationEntity() { }
        /// Friend allocator used by soap_new_tt__ConfigurationEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:894 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (399)
/* complex XML schema type 'tt:VideoSourceConfigurationExtension': */
class SOAP_CMAC tt__VideoSourceConfigurationExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:Rotate' of XML schema type 'tt:Rotate'
        tt__Rotate *Rotate;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceConfigurationExtension2'
        tt__VideoSourceConfigurationExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfigurationExtension() : Rotate(), Extension() { }
        virtual ~tt__VideoSourceConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:896 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (400)
/* complex XML schema type 'tt:VideoSourceConfigurationExtension2': */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2 : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:LensDescription' of XML schema type 'tt:LensDescription' stored in dynamic array LensDescription of length __sizeLensDescription
        int __sizeLensDescription;
        tt__LensDescription **LensDescription;
        /// Optional element 'tt:SceneOrientation' of XML schema type 'tt:SceneOrientation'
        tt__SceneOrientation *SceneOrientation;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfigurationExtension2() : __sizeLensDescription(), LensDescription(), SceneOrientation() { }
        virtual ~tt__VideoSourceConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:898 */
#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (401)
/* complex XML schema type 'tt:Rotate': */
class SOAP_CMAC tt__Rotate : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:RotateMode'
        enum tt__RotateMode Mode;
        /// Optional element 'tt:Degree' of XML schema type 'xsd:int'
        int *Degree;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RotateExtension'
        tt__RotateExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Rotate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Rotate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Rotate, default initialized and not managed by a soap context
        virtual tt__Rotate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Rotate); }
      public:
        /// Constructor with default initializations
        tt__Rotate() : Mode(), Degree(), Extension() { }
        virtual ~tt__Rotate() { }
        /// Friend allocator used by soap_new_tt__Rotate(struct soap*, int)
        friend SOAP_FMAC1 tt__Rotate * SOAP_FMAC2 soap_instantiate_tt__Rotate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:900 */
#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (402)
/* simple XML schema type 'tt:RotateExtension': */
class SOAP_CMAC tt__RotateExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateExtension, default initialized and not managed by a soap context
        virtual tt__RotateExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateExtension); }
      public:
        /// Constructor with default initializations
        tt__RotateExtension() { }
        virtual ~tt__RotateExtension() { }
        /// Friend allocator used by soap_new_tt__RotateExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateExtension * SOAP_FMAC2 soap_instantiate_tt__RotateExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:902 */
#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (403)
/* complex XML schema type 'tt:LensProjection': */
class SOAP_CMAC tt__LensProjection : public xsd__anyType {
      public:
        /// Required element 'tt:Angle' of XML schema type 'xsd:float'
        float Angle;
        /// Required element 'tt:Radius' of XML schema type 'xsd:float'
        float Radius;
        /// Optional element 'tt:Transmittance' of XML schema type 'xsd:float'
        float *Transmittance;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensProjection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensProjection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensProjection, default initialized and not managed by a soap context
        virtual tt__LensProjection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensProjection); }
      public:
        /// Constructor with default initializations
        tt__LensProjection() : Angle(), Radius(), Transmittance() { }
        virtual ~tt__LensProjection() { }
        /// Friend allocator used by soap_new_tt__LensProjection(struct soap*, int)
        friend SOAP_FMAC1 tt__LensProjection * SOAP_FMAC2 soap_instantiate_tt__LensProjection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:904 */
#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (404)
/* simple XML schema type 'tt:LensOffset': */
class SOAP_CMAC tt__LensOffset : public xsd__anyType {
      public:
        /// Optional attribute 'x' of XML schema type 'xsd:float'
        float *x;
        /// Optional attribute 'y' of XML schema type 'xsd:float'
        float *y;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensOffset
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensOffset, default initialized and not managed by a soap context
        virtual tt__LensOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensOffset); }
      public:
        /// Constructor with default initializations
        tt__LensOffset() : x(), y() { }
        virtual ~tt__LensOffset() { }
        /// Friend allocator used by soap_new_tt__LensOffset(struct soap*, int)
        friend SOAP_FMAC1 tt__LensOffset * SOAP_FMAC2 soap_instantiate_tt__LensOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:906 */
#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (405)
/* complex XML schema type 'tt:LensDescription': */
class SOAP_CMAC tt__LensDescription : public xsd__anyType {
      public:
        /// Required element 'tt:Offset' of XML schema type 'tt:LensOffset'
        tt__LensOffset *Offset;
        /// Sequence of at least 1 elements 'tt:Projection' of XML schema type 'tt:LensProjection' stored in dynamic array Projection of length __sizeProjection
        int __sizeProjection;
        tt__LensProjection **Projection;
        /// Required element 'tt:XFactor' of XML schema type 'xsd:float'
        float XFactor;
        /// Optional attribute 'FocalLength' of XML schema type 'xsd:float'
        float *FocalLength;
      public:
        /// Return unique type id SOAP_TYPE_tt__LensDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LensDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LensDescription, default initialized and not managed by a soap context
        virtual tt__LensDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LensDescription); }
      public:
        /// Constructor with default initializations
        tt__LensDescription() : Offset(), __sizeProjection(), Projection(), XFactor(), FocalLength() { }
        virtual ~tt__LensDescription() { }
        /// Friend allocator used by soap_new_tt__LensDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__LensDescription * SOAP_FMAC2 soap_instantiate_tt__LensDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:908 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (406)
/* complex XML schema type 'tt:VideoSourceConfigurationOptions': */
class SOAP_CMAC tt__VideoSourceConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:BoundsRange' of XML schema type 'tt:IntRectangleRange'
        tt__IntRectangleRange *BoundsRange;
        /// Sequence of at least 1 elements 'tt:VideoSourceTokensAvailable' of XML schema type 'tt:ReferenceToken' stored in dynamic array VideoSourceTokensAvailable of length __sizeVideoSourceTokensAvailable
        int __sizeVideoSourceTokensAvailable;
        char **VideoSourceTokensAvailable;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceConfigurationOptionsExtension'
        tt__VideoSourceConfigurationOptionsExtension *Extension;
        /// Optional attribute 'MaximumNumberOfProfiles' of XML schema type 'xsd:int'
        int *MaximumNumberOfProfiles;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfigurationOptions() : BoundsRange(), __sizeVideoSourceTokensAvailable(), VideoSourceTokensAvailable(), Extension(), MaximumNumberOfProfiles() { }
        virtual ~tt__VideoSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:910 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (407)
/* complex XML schema type 'tt:VideoSourceConfigurationOptionsExtension': */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:Rotate' of XML schema type 'tt:RotateOptions'
        tt__RotateOptions *Rotate;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceConfigurationOptionsExtension2'
        tt__VideoSourceConfigurationOptionsExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfigurationOptionsExtension() : Rotate(), Extension() { }
        virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:912 */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (408)
/* complex XML schema type 'tt:VideoSourceConfigurationOptionsExtension2': */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2 : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:SceneOrientationMode' of XML schema type 'tt:SceneOrientationMode' stored in dynamic array SceneOrientationMode of length __sizeSceneOrientationMode
        int __sizeSceneOrientationMode;
        enum tt__SceneOrientationMode *SceneOrientationMode;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfigurationOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfigurationOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfigurationOptionsExtension2); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfigurationOptionsExtension2() : __sizeSceneOrientationMode(), SceneOrientationMode() { }
        virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:914 */
#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (409)
/* complex XML schema type 'tt:RotateOptions': */
class SOAP_CMAC tt__RotateOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:RotateMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__RotateMode *Mode;
        /// Optional element 'tt:DegreeList' of XML schema type 'tt:IntItems'
        tt__IntItems *DegreeList;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RotateOptionsExtension'
        tt__RotateOptionsExtension *Extension;
        /// Optional attribute 'Reboot' of XML schema type 'xsd:boolean'
        bool *Reboot;
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateOptions, default initialized and not managed by a soap context
        virtual tt__RotateOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateOptions); }
      public:
        /// Constructor with default initializations
        tt__RotateOptions() : __sizeMode(), Mode(), DegreeList(), Extension(), Reboot() { }
        virtual ~tt__RotateOptions() { }
        /// Friend allocator used by soap_new_tt__RotateOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateOptions * SOAP_FMAC2 soap_instantiate_tt__RotateOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:916 */
#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (410)
/* simple XML schema type 'tt:RotateOptionsExtension': */
class SOAP_CMAC tt__RotateOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RotateOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RotateOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RotateOptionsExtension, default initialized and not managed by a soap context
        virtual tt__RotateOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RotateOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__RotateOptionsExtension() { }
        virtual ~tt__RotateOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__RotateOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:918 */
#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (411)
/* complex XML schema type 'tt:SceneOrientation': */
class SOAP_CMAC tt__SceneOrientation : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:SceneOrientationMode'
        enum tt__SceneOrientationMode Mode;
        /// Optional element 'tt:Orientation' of XML schema type 'xsd:string'
        char *Orientation;
      public:
        /// Return unique type id SOAP_TYPE_tt__SceneOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SceneOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SceneOrientation, default initialized and not managed by a soap context
        virtual tt__SceneOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SceneOrientation); }
      public:
        /// Constructor with default initializations
        tt__SceneOrientation() : Mode(), Orientation() { }
        virtual ~tt__SceneOrientation() { }
        /// Friend allocator used by soap_new_tt__SceneOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__SceneOrientation * SOAP_FMAC2 soap_instantiate_tt__SceneOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:922 */
#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (413)
/* complex XML schema type 'tt:VideoResolution': */
class SOAP_CMAC tt__VideoResolution : public xsd__anyType {
      public:
        /// Required element 'tt:Width' of XML schema type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XML schema type 'xsd:int'
        int Height;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoResolution
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoResolution; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoResolution, default initialized and not managed by a soap context
        virtual tt__VideoResolution *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoResolution); }
      public:
        /// Constructor with default initializations
        tt__VideoResolution() : Width(), Height() { }
        virtual ~tt__VideoResolution() { }
        /// Friend allocator used by soap_new_tt__VideoResolution(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoResolution * SOAP_FMAC2 soap_instantiate_tt__VideoResolution(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:924 */
#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (414)
/* complex XML schema type 'tt:VideoRateControl': */
class SOAP_CMAC tt__VideoRateControl : public xsd__anyType {
      public:
        /// Required element 'tt:FrameRateLimit' of XML schema type 'xsd:int'
        int FrameRateLimit;
        /// Required element 'tt:EncodingInterval' of XML schema type 'xsd:int'
        int EncodingInterval;
        /// Required element 'tt:BitrateLimit' of XML schema type 'xsd:int'
        int BitrateLimit;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoRateControl
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoRateControl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoRateControl, default initialized and not managed by a soap context
        virtual tt__VideoRateControl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoRateControl); }
      public:
        /// Constructor with default initializations
        tt__VideoRateControl() : FrameRateLimit(), EncodingInterval(), BitrateLimit() { }
        virtual ~tt__VideoRateControl() { }
        /// Friend allocator used by soap_new_tt__VideoRateControl(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoRateControl * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:926 */
#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (415)
/* complex XML schema type 'tt:Mpeg4Configuration': */
class SOAP_CMAC tt__Mpeg4Configuration : public xsd__anyType {
      public:
        /// Required element 'tt:GovLength' of XML schema type 'xsd:int'
        int GovLength;
        /// Required element 'tt:Mpeg4Profile' of XML schema type 'tt:Mpeg4Profile'
        enum tt__Mpeg4Profile Mpeg4Profile;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Configuration, default initialized and not managed by a soap context
        virtual tt__Mpeg4Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Configuration); }
      public:
        /// Constructor with default initializations
        tt__Mpeg4Configuration() : GovLength(), Mpeg4Profile() { }
        virtual ~tt__Mpeg4Configuration() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:928 */
#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (416)
/* complex XML schema type 'tt:H264Configuration': */
class SOAP_CMAC tt__H264Configuration : public xsd__anyType {
      public:
        /// Required element 'tt:GovLength' of XML schema type 'xsd:int'
        int GovLength;
        /// Required element 'tt:H264Profile' of XML schema type 'tt:H264Profile'
        enum tt__H264Profile H264Profile;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Configuration, default initialized and not managed by a soap context
        virtual tt__H264Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Configuration); }
      public:
        /// Constructor with default initializations
        tt__H264Configuration() : GovLength(), H264Profile() { }
        virtual ~tt__H264Configuration() { }
        /// Friend allocator used by soap_new_tt__H264Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Configuration * SOAP_FMAC2 soap_instantiate_tt__H264Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:930 */
#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (417)
/* complex XML schema type 'tt:VideoEncoderConfigurationOptions': */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:QualityRange' of XML schema type 'tt:IntRange'
        tt__IntRange *QualityRange;
        /// Optional element 'tt:JPEG' of XML schema type 'tt:JpegOptions'
        tt__JpegOptions *JPEG;
        /// Optional element 'tt:MPEG4' of XML schema type 'tt:Mpeg4Options'
        tt__Mpeg4Options *MPEG4;
        /// Optional element 'tt:H264' of XML schema type 'tt:H264Options'
        tt__H264Options *H264;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoEncoderOptionsExtension'
        tt__VideoEncoderOptionsExtension *Extension;
        /// Optional attribute 'GuaranteedFrameRateSupported' of XML schema type 'xsd:boolean'
        bool *GuaranteedFrameRateSupported;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoderConfigurationOptions() : QualityRange(), JPEG(), MPEG4(), H264(), Extension(), GuaranteedFrameRateSupported() { }
        virtual ~tt__VideoEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:932 */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (418)
/* complex XML schema type 'tt:VideoEncoderOptionsExtension': */
class SOAP_CMAC tt__VideoEncoderOptionsExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:JPEG' of XML schema type 'tt:JpegOptions2'
        tt__JpegOptions2 *JPEG;
        /// Optional element 'tt:MPEG4' of XML schema type 'tt:Mpeg4Options2'
        tt__Mpeg4Options2 *MPEG4;
        /// Optional element 'tt:H264' of XML schema type 'tt:H264Options2'
        tt__H264Options2 *H264;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoEncoderOptionsExtension2'
        tt__VideoEncoderOptionsExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoEncoderOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoderOptionsExtension() : JPEG(), MPEG4(), H264(), Extension() { }
        virtual ~tt__VideoEncoderOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:934 */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (419)
/* simple XML schema type 'tt:VideoEncoderOptionsExtension2': */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__VideoEncoderOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderOptionsExtension2); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoderOptionsExtension2() { }
        virtual ~tt__VideoEncoderOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:936 */
#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (420)
/* complex XML schema type 'tt:JpegOptions': */
class SOAP_CMAC tt__JpegOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Required element 'tt:FrameRateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XML schema type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegOptions, default initialized and not managed by a soap context
        virtual tt__JpegOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegOptions); }
      public:
        /// Constructor with default initializations
        tt__JpegOptions() : __sizeResolutionsAvailable(), ResolutionsAvailable(), FrameRateRange(), EncodingIntervalRange() { }
        virtual ~tt__JpegOptions() { }
        /// Friend allocator used by soap_new_tt__JpegOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegOptions * SOAP_FMAC2 soap_instantiate_tt__JpegOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:940 */
#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (422)
/* complex XML schema type 'tt:Mpeg4Options': */
class SOAP_CMAC tt__Mpeg4Options : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Required element 'tt:GovLengthRange' of XML schema type 'tt:IntRange'
        tt__IntRange *GovLengthRange;
        /// Required element 'tt:FrameRateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XML schema type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
        /// Sequence of at least 1 elements 'tt:Mpeg4ProfilesSupported' of XML schema type 'tt:Mpeg4Profile' stored in dynamic array Mpeg4ProfilesSupported of length __sizeMpeg4ProfilesSupported
        int __sizeMpeg4ProfilesSupported;
        enum tt__Mpeg4Profile *Mpeg4ProfilesSupported;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Options
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Options; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Options, default initialized and not managed by a soap context
        virtual tt__Mpeg4Options *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Options); }
      public:
        /// Constructor with default initializations
        tt__Mpeg4Options() : __sizeResolutionsAvailable(), ResolutionsAvailable(), GovLengthRange(), FrameRateRange(), EncodingIntervalRange(), __sizeMpeg4ProfilesSupported(), Mpeg4ProfilesSupported() { }
        virtual ~tt__Mpeg4Options() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Options(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Options * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:944 */
#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (424)
/* complex XML schema type 'tt:H264Options': */
class SOAP_CMAC tt__H264Options : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Required element 'tt:GovLengthRange' of XML schema type 'tt:IntRange'
        tt__IntRange *GovLengthRange;
        /// Required element 'tt:FrameRateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *FrameRateRange;
        /// Required element 'tt:EncodingIntervalRange' of XML schema type 'tt:IntRange'
        tt__IntRange *EncodingIntervalRange;
        /// Sequence of at least 1 elements 'tt:H264ProfilesSupported' of XML schema type 'tt:H264Profile' stored in dynamic array H264ProfilesSupported of length __sizeH264ProfilesSupported
        int __sizeH264ProfilesSupported;
        enum tt__H264Profile *H264ProfilesSupported;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Options
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Options; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Options, default initialized and not managed by a soap context
        virtual tt__H264Options *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Options); }
      public:
        /// Constructor with default initializations
        tt__H264Options() : __sizeResolutionsAvailable(), ResolutionsAvailable(), GovLengthRange(), FrameRateRange(), EncodingIntervalRange(), __sizeH264ProfilesSupported(), H264ProfilesSupported() { }
        virtual ~tt__H264Options() { }
        /// Friend allocator used by soap_new_tt__H264Options(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Options * SOAP_FMAC2 soap_instantiate_tt__H264Options(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:950 */
#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (427)
/* complex XML schema type 'tt:VideoResolution2': */
class SOAP_CMAC tt__VideoResolution2 : public xsd__anyType {
      public:
        /// Required element 'tt:Width' of XML schema type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XML schema type 'xsd:int'
        int Height;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoResolution2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoResolution2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoResolution2, default initialized and not managed by a soap context
        virtual tt__VideoResolution2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoResolution2); }
      public:
        /// Constructor with default initializations
        tt__VideoResolution2() : Width(), Height() { }
        virtual ~tt__VideoResolution2() { }
        /// Friend allocator used by soap_new_tt__VideoResolution2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoResolution2 * SOAP_FMAC2 soap_instantiate_tt__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:952 */
#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (428)
/* complex XML schema type 'tt:VideoRateControl2': */
class SOAP_CMAC tt__VideoRateControl2 : public xsd__anyType {
      public:
        /// Required element 'tt:FrameRateLimit' of XML schema type 'xsd:float'
        float FrameRateLimit;
        /// Required element 'tt:BitrateLimit' of XML schema type 'xsd:int'
        int BitrateLimit;
        /// Optional attribute 'ConstantBitRate' of XML schema type 'xsd:boolean'
        bool *ConstantBitRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoRateControl2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoRateControl2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoRateControl2, default initialized and not managed by a soap context
        virtual tt__VideoRateControl2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoRateControl2); }
      public:
        /// Constructor with default initializations
        tt__VideoRateControl2() : FrameRateLimit(), BitrateLimit(), ConstantBitRate() { }
        virtual ~tt__VideoRateControl2() { }
        /// Friend allocator used by soap_new_tt__VideoRateControl2(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoRateControl2 * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:954 */
#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (429)
/* complex XML schema type 'tt:VideoEncoder2ConfigurationOptions': */
class SOAP_CMAC tt__VideoEncoder2ConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tt:QualityRange' of XML schema type 'tt:FloatRange'
        tt__FloatRange *QualityRange;
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution2' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution2 **ResolutionsAvailable;
        /// Required element 'tt:BitrateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *BitrateRange;
        /// Optional attribute 'GovLengthRange' of XML schema type 'tt:IntList'
        char *GovLengthRange;
        /// Optional attribute 'FrameRatesSupported' of XML schema type 'tt:FloatList'
        char *FrameRatesSupported;
        /// Optional attribute 'ProfilesSupported' of XML schema type 'tt:StringAttrList'
        char *ProfilesSupported;
        /// Optional attribute 'ConstantBitRateSupported' of XML schema type 'xsd:boolean'
        bool *ConstantBitRateSupported;
        /// Optional attribute 'GuaranteedFrameRateSupported' of XML schema type 'xsd:boolean'
        bool *GuaranteedFrameRateSupported;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoder2ConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoEncoder2ConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoder2ConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoder2ConfigurationOptions() : Encoding(), QualityRange(), __sizeResolutionsAvailable(), ResolutionsAvailable(), BitrateRange(), GovLengthRange(), FrameRatesSupported(), ProfilesSupported(), ConstantBitRateSupported(), GuaranteedFrameRateSupported() { }
        virtual ~tt__VideoEncoder2ConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoEncoder2ConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:958 */
#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (431)
/* complex XML schema type 'tt:AudioSourceConfigurationOptions': */
class SOAP_CMAC tt__AudioSourceConfigurationOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:InputTokensAvailable' of XML schema type 'tt:ReferenceToken' stored in dynamic array InputTokensAvailable of length __sizeInputTokensAvailable
        int __sizeInputTokensAvailable;
        char **InputTokensAvailable;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AudioSourceOptionsExtension'
        tt__AudioSourceOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__AudioSourceConfigurationOptions() : __sizeInputTokensAvailable(), InputTokensAvailable(), Extension() { }
        virtual ~tt__AudioSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:960 */
#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (432)
/* simple XML schema type 'tt:AudioSourceOptionsExtension': */
class SOAP_CMAC tt__AudioSourceOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceOptionsExtension, default initialized and not managed by a soap context
        virtual tt__AudioSourceOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__AudioSourceOptionsExtension() { }
        virtual ~tt__AudioSourceOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__AudioSourceOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:964 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (434)
/* complex XML schema type 'tt:AudioEncoderConfigurationOptions': */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Options' of XML schema type 'tt:AudioEncoderConfigurationOption' stored in dynamic array Options of length __sizeOptions
        int __sizeOptions;
        tt__AudioEncoderConfigurationOption **Options;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoderConfigurationOptions() : __sizeOptions(), Options() { }
        virtual ~tt__AudioEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:966 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (435)
/* complex XML schema type 'tt:AudioEncoderConfigurationOption': */
class SOAP_CMAC tt__AudioEncoderConfigurationOption : public xsd__anyType {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'tt:AudioEncoding'
        enum tt__AudioEncoding Encoding;
        /// Required element 'tt:BitrateList' of XML schema type 'tt:IntItems'
        tt__IntItems *BitrateList;
        /// Required element 'tt:SampleRateList' of XML schema type 'tt:IntItems'
        tt__IntItems *SampleRateList;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOption
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfigurationOption; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfigurationOption, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfigurationOption *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfigurationOption); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoderConfigurationOption() : Encoding(), BitrateList(), SampleRateList() { }
        virtual ~tt__AudioEncoderConfigurationOption() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfigurationOption(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:970 */
#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (437)
/* complex XML schema type 'tt:AudioEncoder2ConfigurationOptions': */
class SOAP_CMAC tt__AudioEncoder2ConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tt:BitrateList' of XML schema type 'tt:IntItems'
        tt__IntItems *BitrateList;
        /// Required element 'tt:SampleRateList' of XML schema type 'tt:IntItems'
        tt__IntItems *SampleRateList;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoder2ConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioEncoder2ConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoder2ConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoder2ConfigurationOptions() : Encoding(), BitrateList(), SampleRateList() { }
        virtual ~tt__AudioEncoder2ConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioEncoder2ConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:976 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (440)
/* simple XML schema type 'tt:MetadataConfigurationExtension': */
class SOAP_CMAC tt__MetadataConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__MetadataConfigurationExtension() { }
        virtual ~tt__MetadataConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:978 */
#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (441)
/* complex XML schema type 'tt:PTZFilter': */
class SOAP_CMAC tt__PTZFilter : public xsd__anyType {
      public:
        /// Required element 'tt:Status' of XML schema type 'xsd:boolean'
        bool Status;
        /// Required element 'tt:Position' of XML schema type 'xsd:boolean'
        bool Position;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZFilter, default initialized and not managed by a soap context
        virtual tt__PTZFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZFilter); }
      public:
        /// Constructor with default initializations
        tt__PTZFilter() : Status(), Position() { }
        virtual ~tt__PTZFilter() { }
        /// Friend allocator used by soap_new_tt__PTZFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZFilter * SOAP_FMAC2 soap_instantiate_tt__PTZFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12004 */
#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1587)
/* complex XML schema type 'tt:EventSubscription-SubscriptionPolicy': */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy {
      public:
        /// Return unique type id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__EventSubscription_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _tt__EventSubscription_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__EventSubscription_SubscriptionPolicy); }
      public:
        /// Constructor with default initializations
        _tt__EventSubscription_SubscriptionPolicy() { }
        virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__tt__EventSubscription_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:980 */
#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (442)
/* complex XML schema type 'tt:EventSubscription': */
class SOAP_CMAC tt__EventSubscription : public xsd__anyType {
      public:
        /// Optional element 'tt:Filter' of XML schema type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'tt:SubscriptionPolicy' of XML schema type 'tt:EventSubscription-SubscriptionPolicy'
        _tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventSubscription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventSubscription, default initialized and not managed by a soap context
        virtual tt__EventSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventSubscription); }
      public:
        /// Constructor with default initializations
        tt__EventSubscription() : Filter(), SubscriptionPolicy() { }
        virtual ~tt__EventSubscription() { }
        /// Friend allocator used by soap_new_tt__EventSubscription(struct soap*, int)
        friend SOAP_FMAC1 tt__EventSubscription * SOAP_FMAC2 soap_instantiate_tt__EventSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:982 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (443)
/* complex XML schema type 'tt:MetadataConfigurationOptions': */
class SOAP_CMAC tt__MetadataConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:PTZStatusFilterOptions' of XML schema type 'tt:PTZStatusFilterOptions'
        tt__PTZStatusFilterOptions *PTZStatusFilterOptions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MetadataConfigurationOptionsExtension'
        tt__MetadataConfigurationOptionsExtension *Extension;
        /// Optional attribute 'GeoLocation' of XML schema type 'xsd:boolean'
        bool *GeoLocation;
        /// Optional attribute 'MaxContentFilterSize' of XML schema type 'xsd:int'
        int *MaxContentFilterSize;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__MetadataConfigurationOptions() : PTZStatusFilterOptions(), Extension(), GeoLocation(), MaxContentFilterSize() { }
        virtual ~tt__MetadataConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:984 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (444)
/* complex XML schema type 'tt:MetadataConfigurationOptionsExtension': */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:CompressionType' of XML schema type 'xsd:string' stored in dynamic array CompressionType of length __sizeCompressionType
        int __sizeCompressionType;
        char **CompressionType;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MetadataConfigurationOptionsExtension2'
        tt__MetadataConfigurationOptionsExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__MetadataConfigurationOptionsExtension() : __sizeCompressionType(), CompressionType(), Extension() { }
        virtual ~tt__MetadataConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:986 */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (445)
/* simple XML schema type 'tt:MetadataConfigurationOptionsExtension2': */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfigurationOptionsExtension2, default initialized and not managed by a soap context
        virtual tt__MetadataConfigurationOptionsExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfigurationOptionsExtension2); }
      public:
        /// Constructor with default initializations
        tt__MetadataConfigurationOptionsExtension2() { }
        virtual ~tt__MetadataConfigurationOptionsExtension2() { }
        /// Friend allocator used by soap_new_tt__MetadataConfigurationOptionsExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:988 */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (446)
/* complex XML schema type 'tt:PTZStatusFilterOptions': */
class SOAP_CMAC tt__PTZStatusFilterOptions : public xsd__anyType {
      public:
        /// Required element 'tt:PanTiltStatusSupported' of XML schema type 'xsd:boolean'
        bool PanTiltStatusSupported;
        /// Required element 'tt:ZoomStatusSupported' of XML schema type 'xsd:boolean'
        bool ZoomStatusSupported;
        /// Optional element 'tt:PanTiltPositionSupported' of XML schema type 'xsd:boolean'
        bool *PanTiltPositionSupported;
        /// Optional element 'tt:ZoomPositionSupported' of XML schema type 'xsd:boolean'
        bool *ZoomPositionSupported;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZStatusFilterOptionsExtension'
        tt__PTZStatusFilterOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatusFilterOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatusFilterOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatusFilterOptions, default initialized and not managed by a soap context
        virtual tt__PTZStatusFilterOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatusFilterOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZStatusFilterOptions() : PanTiltStatusSupported(), ZoomStatusSupported(), PanTiltPositionSupported(), ZoomPositionSupported(), Extension() { }
        virtual ~tt__PTZStatusFilterOptions() { }
        /// Friend allocator used by soap_new_tt__PTZStatusFilterOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:990 */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (447)
/* simple XML schema type 'tt:PTZStatusFilterOptionsExtension': */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatusFilterOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatusFilterOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZStatusFilterOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatusFilterOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZStatusFilterOptionsExtension() { }
        virtual ~tt__PTZStatusFilterOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZStatusFilterOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:994 */
#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (449)
/* Type tt__VideoOutputExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:VideoOutputExtension': */
class SOAP_CMAC tt__VideoOutputExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputExtension, default initialized and not managed by a soap context
        virtual tt__VideoOutputExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoOutputExtension() { }
        virtual ~tt__VideoOutputExtension() { }
        /// Friend allocator used by soap_new_tt__VideoOutputExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputExtension * SOAP_FMAC2 soap_instantiate_tt__VideoOutputExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:998 */
#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (451)
/* Type tt__VideoOutputConfigurationOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:VideoOutputConfigurationOptions': */
class SOAP_CMAC tt__VideoOutputConfigurationOptions : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__VideoOutputConfigurationOptions() { }
        virtual ~tt__VideoOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1000 */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (452)
/* Type tt__VideoDecoderConfigurationOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:VideoDecoderConfigurationOptions': */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:JpegDecOptions' of XML schema type 'tt:JpegDecOptions'
        tt__JpegDecOptions *JpegDecOptions;
        /// Optional element 'tt:H264DecOptions' of XML schema type 'tt:H264DecOptions'
        tt__H264DecOptions *H264DecOptions;
        /// Optional element 'tt:Mpeg4DecOptions' of XML schema type 'tt:Mpeg4DecOptions'
        tt__Mpeg4DecOptions *Mpeg4DecOptions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoDecoderConfigurationOptionsExtension'
        tt__VideoDecoderConfigurationOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__VideoDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoDecoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__VideoDecoderConfigurationOptions() : JpegDecOptions(), H264DecOptions(), Mpeg4DecOptions(), Extension() { }
        virtual ~tt__VideoDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__VideoDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1002 */
#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (453)
/* Type tt__H264DecOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:H264DecOptions': */
class SOAP_CMAC tt__H264DecOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Sequence of at least 1 elements 'tt:SupportedH264Profiles' of XML schema type 'tt:H264Profile' stored in dynamic array SupportedH264Profiles of length __sizeSupportedH264Profiles
        int __sizeSupportedH264Profiles;
        enum tt__H264Profile *SupportedH264Profiles;
        /// Required element 'tt:SupportedInputBitrate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264DecOptions, default initialized and not managed by a soap context
        virtual tt__H264DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264DecOptions); }
      public:
        /// Constructor with default initializations
        tt__H264DecOptions() : __sizeResolutionsAvailable(), ResolutionsAvailable(), __sizeSupportedH264Profiles(), SupportedH264Profiles(), SupportedInputBitrate(), SupportedFrameRate() { }
        virtual ~tt__H264DecOptions() { }
        /// Friend allocator used by soap_new_tt__H264DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__H264DecOptions * SOAP_FMAC2 soap_instantiate_tt__H264DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1004 */
#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (454)
/* Type tt__JpegDecOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:JpegDecOptions': */
class SOAP_CMAC tt__JpegDecOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Required element 'tt:SupportedInputBitrate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegDecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegDecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegDecOptions, default initialized and not managed by a soap context
        virtual tt__JpegDecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegDecOptions); }
      public:
        /// Constructor with default initializations
        tt__JpegDecOptions() : __sizeResolutionsAvailable(), ResolutionsAvailable(), SupportedInputBitrate(), SupportedFrameRate() { }
        virtual ~tt__JpegDecOptions() { }
        /// Friend allocator used by soap_new_tt__JpegDecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegDecOptions * SOAP_FMAC2 soap_instantiate_tt__JpegDecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1006 */
#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (455)
/* Type tt__Mpeg4DecOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Mpeg4DecOptions': */
class SOAP_CMAC tt__Mpeg4DecOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ResolutionsAvailable' of XML schema type 'tt:VideoResolution' stored in dynamic array ResolutionsAvailable of length __sizeResolutionsAvailable
        int __sizeResolutionsAvailable;
        tt__VideoResolution **ResolutionsAvailable;
        /// Sequence of at least 1 elements 'tt:SupportedMpeg4Profiles' of XML schema type 'tt:Mpeg4Profile' stored in dynamic array SupportedMpeg4Profiles of length __sizeSupportedMpeg4Profiles
        int __sizeSupportedMpeg4Profiles;
        enum tt__Mpeg4Profile *SupportedMpeg4Profiles;
        /// Required element 'tt:SupportedInputBitrate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedInputBitrate;
        /// Required element 'tt:SupportedFrameRate' of XML schema type 'tt:IntRange'
        tt__IntRange *SupportedFrameRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4DecOptions, default initialized and not managed by a soap context
        virtual tt__Mpeg4DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4DecOptions); }
      public:
        /// Constructor with default initializations
        tt__Mpeg4DecOptions() : __sizeResolutionsAvailable(), ResolutionsAvailable(), __sizeSupportedMpeg4Profiles(), SupportedMpeg4Profiles(), SupportedInputBitrate(), SupportedFrameRate() { }
        virtual ~tt__Mpeg4DecOptions() { }
        /// Friend allocator used by soap_new_tt__Mpeg4DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4DecOptions * SOAP_FMAC2 soap_instantiate_tt__Mpeg4DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1008 */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (456)
/* Type tt__VideoDecoderConfigurationOptionsExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:VideoDecoderConfigurationOptionsExtension': */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoDecoderConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__VideoDecoderConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoDecoderConfigurationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__VideoDecoderConfigurationOptionsExtension() { }
        virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1014 */
#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (459)
/* complex XML schema type 'tt:AudioOutputConfigurationOptions': */
class SOAP_CMAC tt__AudioOutputConfigurationOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:OutputTokensAvailable' of XML schema type 'tt:ReferenceToken' stored in dynamic array OutputTokensAvailable of length __sizeOutputTokensAvailable
        int __sizeOutputTokensAvailable;
        char **OutputTokensAvailable;
        /// Sequence of elements 'tt:SendPrimacyOptions' of XML schema type 'xsd:anyURI' stored in dynamic array SendPrimacyOptions of length __sizeSendPrimacyOptions
        int __sizeSendPrimacyOptions;
        char **SendPrimacyOptions;
        /// Required element 'tt:OutputLevelRange' of XML schema type 'tt:IntRange'
        tt__IntRange *OutputLevelRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutputConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__AudioOutputConfigurationOptions() : __sizeOutputTokensAvailable(), OutputTokensAvailable(), __sizeSendPrimacyOptions(), SendPrimacyOptions(), OutputLevelRange() { }
        virtual ~tt__AudioOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1018 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (461)
/* complex XML schema type 'tt:AudioDecoderConfigurationOptions': */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:AACDecOptions' of XML schema type 'tt:AACDecOptions'
        tt__AACDecOptions *AACDecOptions;
        /// Optional element 'tt:G711DecOptions' of XML schema type 'tt:G711DecOptions'
        tt__G711DecOptions *G711DecOptions;
        /// Optional element 'tt:G726DecOptions' of XML schema type 'tt:G726DecOptions'
        tt__G726DecOptions *G726DecOptions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AudioDecoderConfigurationOptionsExtension'
        tt__AudioDecoderConfigurationOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__AudioDecoderConfigurationOptions() : AACDecOptions(), G711DecOptions(), G726DecOptions(), Extension() { }
        virtual ~tt__AudioDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1020 */
#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (462)
/* complex XML schema type 'tt:G711DecOptions': */
class SOAP_CMAC tt__G711DecOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Bitrate' of XML schema type 'tt:IntItems'
        tt__IntItems *Bitrate;
        /// Required element 'tt:SampleRateRange' of XML schema type 'tt:IntItems'
        tt__IntItems *SampleRateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__G711DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__G711DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__G711DecOptions, default initialized and not managed by a soap context
        virtual tt__G711DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__G711DecOptions); }
      public:
        /// Constructor with default initializations
        tt__G711DecOptions() : Bitrate(), SampleRateRange() { }
        virtual ~tt__G711DecOptions() { }
        /// Friend allocator used by soap_new_tt__G711DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__G711DecOptions * SOAP_FMAC2 soap_instantiate_tt__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1022 */
#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (463)
/* complex XML schema type 'tt:AACDecOptions': */
class SOAP_CMAC tt__AACDecOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Bitrate' of XML schema type 'tt:IntItems'
        tt__IntItems *Bitrate;
        /// Required element 'tt:SampleRateRange' of XML schema type 'tt:IntItems'
        tt__IntItems *SampleRateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__AACDecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AACDecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AACDecOptions, default initialized and not managed by a soap context
        virtual tt__AACDecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AACDecOptions); }
      public:
        /// Constructor with default initializations
        tt__AACDecOptions() : Bitrate(), SampleRateRange() { }
        virtual ~tt__AACDecOptions() { }
        /// Friend allocator used by soap_new_tt__AACDecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AACDecOptions * SOAP_FMAC2 soap_instantiate_tt__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1024 */
#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (464)
/* complex XML schema type 'tt:G726DecOptions': */
class SOAP_CMAC tt__G726DecOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Bitrate' of XML schema type 'tt:IntItems'
        tt__IntItems *Bitrate;
        /// Required element 'tt:SampleRateRange' of XML schema type 'tt:IntItems'
        tt__IntItems *SampleRateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__G726DecOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__G726DecOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__G726DecOptions, default initialized and not managed by a soap context
        virtual tt__G726DecOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__G726DecOptions); }
      public:
        /// Constructor with default initializations
        tt__G726DecOptions() : Bitrate(), SampleRateRange() { }
        virtual ~tt__G726DecOptions() { }
        /// Friend allocator used by soap_new_tt__G726DecOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__G726DecOptions * SOAP_FMAC2 soap_instantiate_tt__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1026 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (465)
/* simple XML schema type 'tt:AudioDecoderConfigurationOptionsExtension': */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfigurationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__AudioDecoderConfigurationOptionsExtension() { }
        virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1028 */
#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (466)
/* complex XML schema type 'tt:MulticastConfiguration': */
class SOAP_CMAC tt__MulticastConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Address' of XML schema type 'tt:IPAddress'
        tt__IPAddress *Address;
        /// Required element 'tt:Port' of XML schema type 'xsd:int'
        int Port;
        /// Required element 'tt:TTL' of XML schema type 'xsd:int'
        int TTL;
        /// Required element 'tt:AutoStart' of XML schema type 'xsd:boolean'
        bool AutoStart;
      public:
        /// Return unique type id SOAP_TYPE_tt__MulticastConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MulticastConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MulticastConfiguration, default initialized and not managed by a soap context
        virtual tt__MulticastConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MulticastConfiguration); }
      public:
        /// Constructor with default initializations
        tt__MulticastConfiguration() : Address(), Port(), TTL(), AutoStart() { }
        virtual ~tt__MulticastConfiguration() { }
        /// Friend allocator used by soap_new_tt__MulticastConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_tt__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1030 */
#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (467)
/* complex XML schema type 'tt:StreamSetup': */
class SOAP_CMAC tt__StreamSetup : public xsd__anyType {
      public:
        /// Required element 'tt:Stream' of XML schema type 'tt:StreamType'
        enum tt__StreamType Stream;
        /// Required element 'tt:Transport' of XML schema type 'tt:Transport'
        tt__Transport *Transport;
      public:
        /// Return unique type id SOAP_TYPE_tt__StreamSetup
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StreamSetup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StreamSetup, default initialized and not managed by a soap context
        virtual tt__StreamSetup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StreamSetup); }
      public:
        /// Constructor with default initializations
        tt__StreamSetup() : Stream(), Transport() { }
        virtual ~tt__StreamSetup() { }
        /// Friend allocator used by soap_new_tt__StreamSetup(struct soap*, int)
        friend SOAP_FMAC1 tt__StreamSetup * SOAP_FMAC2 soap_instantiate_tt__StreamSetup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1032 */
#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (468)
/* Type tt__Transport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Transport': */
class SOAP_CMAC tt__Transport : public xsd__anyType {
      public:
        /// Required element 'tt:Protocol' of XML schema type 'tt:TransportProtocol'
        enum tt__TransportProtocol Protocol;
        /// Optional element 'tt:Tunnel' of XML schema type 'tt:Transport'
        tt__Transport *Tunnel;
      public:
        /// Return unique type id SOAP_TYPE_tt__Transport
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Transport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Transport, default initialized and not managed by a soap context
        virtual tt__Transport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Transport); }
      public:
        /// Constructor with default initializations
        tt__Transport() : Protocol(), Tunnel() { }
        virtual ~tt__Transport() { }
        /// Friend allocator used by soap_new_tt__Transport(struct soap*, int)
        friend SOAP_FMAC1 tt__Transport * SOAP_FMAC2 soap_instantiate_tt__Transport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1034 */
#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (469)
/* complex XML schema type 'tt:MediaUri': */
class SOAP_CMAC tt__MediaUri : public xsd__anyType {
      public:
        /// Required element 'tt:Uri' of XML schema type 'xsd:anyURI'
        char *Uri;
        /// Required element 'tt:InvalidAfterConnect' of XML schema type 'xsd:boolean'
        bool InvalidAfterConnect;
        /// Required element 'tt:InvalidAfterReboot' of XML schema type 'xsd:boolean'
        bool InvalidAfterReboot;
        /// Required element 'tt:Timeout' of XML schema type 'xsd:duration'
        char *Timeout;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaUri
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaUri, default initialized and not managed by a soap context
        virtual tt__MediaUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaUri); }
      public:
        /// Constructor with default initializations
        tt__MediaUri() : Uri(), InvalidAfterConnect(), InvalidAfterReboot(), Timeout() { }
        virtual ~tt__MediaUri() { }
        /// Friend allocator used by soap_new_tt__MediaUri(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaUri * SOAP_FMAC2 soap_instantiate_tt__MediaUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1036 */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (470)
/* Type tt__Scope is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Scope': */
class SOAP_CMAC tt__Scope : public xsd__anyType {
      public:
        /// Required element 'tt:ScopeDef' of XML schema type 'tt:ScopeDefinition'
        enum tt__ScopeDefinition ScopeDef;
        /// Required element 'tt:ScopeItem' of XML schema type 'xsd:anyURI'
        char *ScopeItem;
      public:
        /// Return unique type id SOAP_TYPE_tt__Scope
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Scope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Scope, default initialized and not managed by a soap context
        virtual tt__Scope *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Scope); }
      public:
        /// Constructor with default initializations
        tt__Scope() : ScopeDef(), ScopeItem() { }
        virtual ~tt__Scope() { }
        /// Friend allocator used by soap_new_tt__Scope(struct soap*, int)
        friend SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1040 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (472)
/* Type tt__NetworkInterfaceExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceExtension': */
class SOAP_CMAC tt__NetworkInterfaceExtension : public xsd__anyType {
      public:
        /// Required element 'tt:InterfaceType' of XML schema type 'tt:IANA-IfTypes'
        int InterfaceType;
        /// Sequence of elements 'tt:Dot3' of XML schema type 'tt:Dot3Configuration' stored in dynamic array Dot3 of length __sizeDot3
        int __sizeDot3;
        tt__Dot3Configuration **Dot3;
        /// Sequence of elements 'tt:Dot11' of XML schema type 'tt:Dot11Configuration' stored in dynamic array Dot11 of length __sizeDot11
        int __sizeDot11;
        tt__Dot11Configuration **Dot11;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceExtension2'
        tt__NetworkInterfaceExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceExtension() : InterfaceType(), __sizeDot3(), Dot3(), __sizeDot11(), Dot11(), Extension() { }
        virtual ~tt__NetworkInterfaceExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1042 */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (473)
/* Type tt__Dot3Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:Dot3Configuration': */
class SOAP_CMAC tt__Dot3Configuration : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot3Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot3Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot3Configuration, default initialized and not managed by a soap context
        virtual tt__Dot3Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot3Configuration); }
      public:
        /// Constructor with default initializations
        tt__Dot3Configuration() { }
        virtual ~tt__Dot3Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot3Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1044 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (474)
/* Type tt__NetworkInterfaceExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkInterfaceExtension2': */
class SOAP_CMAC tt__NetworkInterfaceExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceExtension2() { }
        virtual ~tt__NetworkInterfaceExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1046 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (475)
/* Type tt__NetworkInterfaceLink is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceLink': */
class SOAP_CMAC tt__NetworkInterfaceLink : public xsd__anyType {
      public:
        /// Required element 'tt:AdminSettings' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *AdminSettings;
        /// Required element 'tt:OperSettings' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *OperSettings;
        /// Required element 'tt:InterfaceType' of XML schema type 'tt:IANA-IfTypes'
        int InterfaceType;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceLink
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceLink; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceLink, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceLink *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceLink); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceLink() : AdminSettings(), OperSettings(), InterfaceType() { }
        virtual ~tt__NetworkInterfaceLink() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceLink(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1048 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (476)
/* Type tt__NetworkInterfaceConnectionSetting is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceConnectionSetting': */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting : public xsd__anyType {
      public:
        /// Required element 'tt:AutoNegotiation' of XML schema type 'xsd:boolean'
        bool AutoNegotiation;
        /// Required element 'tt:Speed' of XML schema type 'xsd:int'
        int Speed;
        /// Required element 'tt:Duplex' of XML schema type 'tt:Duplex'
        enum tt__Duplex Duplex;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceConnectionSetting; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceConnectionSetting, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceConnectionSetting *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceConnectionSetting); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceConnectionSetting() : AutoNegotiation(), Speed(), Duplex() { }
        virtual ~tt__NetworkInterfaceConnectionSetting() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceConnectionSetting(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1050 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (477)
/* Type tt__NetworkInterfaceInfo is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceInfo': */
class SOAP_CMAC tt__NetworkInterfaceInfo : public xsd__anyType {
      public:
        /// Optional element 'tt:Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required element 'tt:HwAddress' of XML schema type 'tt:HwAddress'
        char *HwAddress;
        /// Optional element 'tt:MTU' of XML schema type 'xsd:int'
        int *MTU;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceInfo, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceInfo); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceInfo() : Name(), HwAddress(), MTU() { }
        virtual ~tt__NetworkInterfaceInfo() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceInfo(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1052 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (478)
/* Type tt__IPv6NetworkInterface is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv6NetworkInterface': */
class SOAP_CMAC tt__IPv6NetworkInterface : public xsd__anyType {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Config' of XML schema type 'tt:IPv6Configuration'
        tt__IPv6Configuration *Config;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__IPv6NetworkInterface() : Enabled(), Config() { }
        virtual ~tt__IPv6NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1054 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (479)
/* Type tt__IPv4NetworkInterface is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv4NetworkInterface': */
class SOAP_CMAC tt__IPv4NetworkInterface : public xsd__anyType {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tt:Config' of XML schema type 'tt:IPv4Configuration'
        tt__IPv4Configuration *Config;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__IPv4NetworkInterface() : Enabled(), Config() { }
        virtual ~tt__IPv4NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1056 */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (480)
/* Type tt__IPv4Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv4Configuration': */
class SOAP_CMAC tt__IPv4Configuration : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Manual' of XML schema type 'tt:PrefixedIPv4Address' stored in dynamic array Manual of length __sizeManual
        int __sizeManual;
        tt__PrefixedIPv4Address **Manual;
        /// Optional element 'tt:LinkLocal' of XML schema type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *LinkLocal;
        /// Optional element 'tt:FromDHCP' of XML schema type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *FromDHCP;
        /// Required element 'tt:DHCP' of XML schema type 'xsd:boolean'
        bool DHCP;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4Configuration, default initialized and not managed by a soap context
        virtual tt__IPv4Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4Configuration); }
      public:
        /// Constructor with default initializations
        tt__IPv4Configuration() : __sizeManual(), Manual(), LinkLocal(), FromDHCP(), DHCP() { }
        virtual ~tt__IPv4Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv4Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1058 */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (481)
/* Type tt__IPv6Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv6Configuration': */
class SOAP_CMAC tt__IPv6Configuration : public xsd__anyType {
      public:
        /// Optional element 'tt:AcceptRouterAdvert' of XML schema type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Required element 'tt:DHCP' of XML schema type 'tt:IPv6DHCPConfiguration'
        enum tt__IPv6DHCPConfiguration DHCP;
        /// Sequence of elements 'tt:Manual' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array Manual of length __sizeManual
        int __sizeManual;
        tt__PrefixedIPv6Address **Manual;
        /// Sequence of elements 'tt:LinkLocal' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array LinkLocal of length __sizeLinkLocal
        int __sizeLinkLocal;
        tt__PrefixedIPv6Address **LinkLocal;
        /// Sequence of elements 'tt:FromDHCP' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array FromDHCP of length __sizeFromDHCP
        int __sizeFromDHCP;
        tt__PrefixedIPv6Address **FromDHCP;
        /// Sequence of elements 'tt:FromRA' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array FromRA of length __sizeFromRA
        int __sizeFromRA;
        tt__PrefixedIPv6Address **FromRA;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IPv6ConfigurationExtension'
        tt__IPv6ConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6Configuration, default initialized and not managed by a soap context
        virtual tt__IPv6Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6Configuration); }
      public:
        /// Constructor with default initializations
        tt__IPv6Configuration() : AcceptRouterAdvert(), DHCP(), __sizeManual(), Manual(), __sizeLinkLocal(), LinkLocal(), __sizeFromDHCP(), FromDHCP(), __sizeFromRA(), FromRA(), Extension() { }
        virtual ~tt__IPv6Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv6Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1060 */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (482)
/* Type tt__IPv6ConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:IPv6ConfigurationExtension': */
class SOAP_CMAC tt__IPv6ConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6ConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6ConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6ConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__IPv6ConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6ConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__IPv6ConfigurationExtension() { }
        virtual ~tt__IPv6ConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__IPv6ConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1062 */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (483)
/* Type tt__NetworkProtocol is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkProtocol': */
class SOAP_CMAC tt__NetworkProtocol : public xsd__anyType {
      public:
        /// Required element 'tt:Name' of XML schema type 'tt:NetworkProtocolType'
        enum tt__NetworkProtocolType Name;
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Sequence of at least 1 elements 'tt:Port' of XML schema type 'xsd:int' stored in dynamic array Port of length __sizePort
        int __sizePort;
        int *Port;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkProtocolExtension'
        tt__NetworkProtocolExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocol
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocol; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocol, default initialized and not managed by a soap context
        virtual tt__NetworkProtocol *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocol); }
      public:
        /// Constructor with default initializations
        tt__NetworkProtocol() : Name(), Enabled(), __sizePort(), Port(), Extension() { }
        virtual ~tt__NetworkProtocol() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocol(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1064 */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (484)
/* Type tt__NetworkProtocolExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkProtocolExtension': */
class SOAP_CMAC tt__NetworkProtocolExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocolExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocolExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocolExtension, default initialized and not managed by a soap context
        virtual tt__NetworkProtocolExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocolExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkProtocolExtension() { }
        virtual ~tt__NetworkProtocolExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocolExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1066 */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (485)
/* Type tt__NetworkHost is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkHost': */
class SOAP_CMAC tt__NetworkHost : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:NetworkHostType'
        enum tt__NetworkHostType Type;
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:IPv4Address'
        char *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:IPv6Address'
        char *IPv6Address;
        /// Optional element 'tt:DNSname' of XML schema type 'tt:DNSName'
        char *DNSname;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkHostExtension'
        tt__NetworkHostExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHost
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHost, default initialized and not managed by a soap context
        virtual tt__NetworkHost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHost); }
      public:
        /// Constructor with default initializations
        tt__NetworkHost() : Type(), IPv4Address(), IPv6Address(), DNSname(), Extension() { }
        virtual ~tt__NetworkHost() { }
        /// Friend allocator used by soap_new_tt__NetworkHost(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1068 */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (486)
/* Type tt__NetworkHostExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkHostExtension': */
class SOAP_CMAC tt__NetworkHostExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHostExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHostExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHostExtension, default initialized and not managed by a soap context
        virtual tt__NetworkHostExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHostExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkHostExtension() { }
        virtual ~tt__NetworkHostExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkHostExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1070 */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (487)
/* complex XML schema type 'tt:IPAddress': */
class SOAP_CMAC tt__IPAddress : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:IPType'
        enum tt__IPType Type;
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:IPv4Address'
        char *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:IPv6Address'
        char *IPv6Address;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddress, default initialized and not managed by a soap context
        virtual tt__IPAddress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddress); }
      public:
        /// Constructor with default initializations
        tt__IPAddress() : Type(), IPv4Address(), IPv6Address() { }
        virtual ~tt__IPAddress() { }
        /// Friend allocator used by soap_new_tt__IPAddress(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1072 */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (488)
/* Type tt__PrefixedIPv4Address is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PrefixedIPv4Address': */
class SOAP_CMAC tt__PrefixedIPv4Address : public xsd__anyType {
      public:
        /// Required element 'tt:Address' of XML schema type 'tt:IPv4Address'
        char *Address;
        /// Required element 'tt:PrefixLength' of XML schema type 'xsd:int'
        int PrefixLength;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv4Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv4Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv4Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv4Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv4Address); }
      public:
        /// Constructor with default initializations
        tt__PrefixedIPv4Address() : Address(), PrefixLength() { }
        virtual ~tt__PrefixedIPv4Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv4Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1074 */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (489)
/* Type tt__PrefixedIPv6Address is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PrefixedIPv6Address': */
class SOAP_CMAC tt__PrefixedIPv6Address : public xsd__anyType {
      public:
        /// Required element 'tt:Address' of XML schema type 'tt:IPv6Address'
        char *Address;
        /// Required element 'tt:PrefixLength' of XML schema type 'xsd:int'
        int PrefixLength;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv6Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv6Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv6Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv6Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv6Address); }
      public:
        /// Constructor with default initializations
        tt__PrefixedIPv6Address() : Address(), PrefixLength() { }
        virtual ~tt__PrefixedIPv6Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv6Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1076 */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (490)
/* Type tt__HostnameInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:HostnameInformation': */
class SOAP_CMAC tt__HostnameInformation : public xsd__anyType {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:Name' of XML schema type 'xsd:token'
        char *Name;
        /// Optional element 'tt:Extension' of XML schema type 'tt:HostnameInformationExtension'
        tt__HostnameInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformation, default initialized and not managed by a soap context
        virtual tt__HostnameInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformation); }
      public:
        /// Constructor with default initializations
        tt__HostnameInformation() : FromDHCP(), Name(), Extension() { }
        virtual ~tt__HostnameInformation() { }
        /// Friend allocator used by soap_new_tt__HostnameInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1078 */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (491)
/* Type tt__HostnameInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:HostnameInformationExtension': */
class SOAP_CMAC tt__HostnameInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformationExtension, default initialized and not managed by a soap context
        virtual tt__HostnameInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__HostnameInformationExtension() { }
        virtual ~tt__HostnameInformationExtension() { }
        /// Friend allocator used by soap_new_tt__HostnameInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1080 */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (492)
/* Type tt__DNSInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DNSInformation': */
class SOAP_CMAC tt__DNSInformation : public xsd__anyType {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Sequence of elements 'tt:SearchDomain' of XML schema type 'xsd:token' stored in dynamic array SearchDomain of length __sizeSearchDomain
        int __sizeSearchDomain;
        char **SearchDomain;
        /// Sequence of elements 'tt:DNSFromDHCP' of XML schema type 'tt:IPAddress' stored in dynamic array DNSFromDHCP of length __sizeDNSFromDHCP
        int __sizeDNSFromDHCP;
        tt__IPAddress **DNSFromDHCP;
        /// Sequence of elements 'tt:DNSManual' of XML schema type 'tt:IPAddress' stored in dynamic array DNSManual of length __sizeDNSManual
        int __sizeDNSManual;
        tt__IPAddress **DNSManual;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DNSInformationExtension'
        tt__DNSInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformation, default initialized and not managed by a soap context
        virtual tt__DNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformation); }
      public:
        /// Constructor with default initializations
        tt__DNSInformation() : FromDHCP(), __sizeSearchDomain(), SearchDomain(), __sizeDNSFromDHCP(), DNSFromDHCP(), __sizeDNSManual(), DNSManual(), Extension() { }
        virtual ~tt__DNSInformation() { }
        /// Friend allocator used by soap_new_tt__DNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1082 */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (493)
/* Type tt__DNSInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:DNSInformationExtension': */
class SOAP_CMAC tt__DNSInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__DNSInformationExtension() { }
        virtual ~tt__DNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1084 */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (494)
/* Type tt__NTPInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NTPInformation': */
class SOAP_CMAC tt__NTPInformation : public xsd__anyType {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Sequence of elements 'tt:NTPFromDHCP' of XML schema type 'tt:NetworkHost' stored in dynamic array NTPFromDHCP of length __sizeNTPFromDHCP
        int __sizeNTPFromDHCP;
        tt__NetworkHost **NTPFromDHCP;
        /// Sequence of elements 'tt:NTPManual' of XML schema type 'tt:NetworkHost' stored in dynamic array NTPManual of length __sizeNTPManual
        int __sizeNTPManual;
        tt__NetworkHost **NTPManual;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NTPInformationExtension'
        tt__NTPInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformation, default initialized and not managed by a soap context
        virtual tt__NTPInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformation); }
      public:
        /// Constructor with default initializations
        tt__NTPInformation() : FromDHCP(), __sizeNTPFromDHCP(), NTPFromDHCP(), __sizeNTPManual(), NTPManual(), Extension() { }
        virtual ~tt__NTPInformation() { }
        /// Friend allocator used by soap_new_tt__NTPInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1086 */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (495)
/* Type tt__NTPInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NTPInformationExtension': */
class SOAP_CMAC tt__NTPInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformationExtension, default initialized and not managed by a soap context
        virtual tt__NTPInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__NTPInformationExtension() { }
        virtual ~tt__NTPInformationExtension() { }
        /// Friend allocator used by soap_new_tt__NTPInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1088 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (496)
/* Type tt__DynamicDNSInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DynamicDNSInformation': */
class SOAP_CMAC tt__DynamicDNSInformation : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:DynamicDNSType'
        enum tt__DynamicDNSType Type;
        /// Optional element 'tt:Name' of XML schema type 'tt:DNSName'
        char *Name;
        /// Optional element 'tt:TTL' of XML schema type 'xsd:duration'
        char *TTL;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DynamicDNSInformationExtension'
        tt__DynamicDNSInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformation, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformation); }
      public:
        /// Constructor with default initializations
        tt__DynamicDNSInformation() : Type(), Name(), TTL(), Extension() { }
        virtual ~tt__DynamicDNSInformation() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1090 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (497)
/* Type tt__DynamicDNSInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:DynamicDNSInformationExtension': */
class SOAP_CMAC tt__DynamicDNSInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__DynamicDNSInformationExtension() { }
        virtual ~tt__DynamicDNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1092 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (498)
/* Type tt__NetworkInterfaceSetConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:Link' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *Link;
        /// Optional element 'tt:MTU' of XML schema type 'xsd:int'
        int *MTU;
        /// Optional element 'tt:IPv4' of XML schema type 'tt:IPv4NetworkInterfaceSetConfiguration'
        tt__IPv4NetworkInterfaceSetConfiguration *IPv4;
        /// Optional element 'tt:IPv6' of XML schema type 'tt:IPv6NetworkInterfaceSetConfiguration'
        tt__IPv6NetworkInterfaceSetConfiguration *IPv6;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceSetConfigurationExtension'
        tt__NetworkInterfaceSetConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfiguration() : Enabled(), Link(), MTU(), IPv4(), IPv6(), Extension() { }
        virtual ~tt__NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1094 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (499)
/* Type tt__NetworkInterfaceSetConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterfaceSetConfigurationExtension': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Dot3' of XML schema type 'tt:Dot3Configuration' stored in dynamic array Dot3 of length __sizeDot3
        int __sizeDot3;
        tt__Dot3Configuration **Dot3;
        /// Sequence of elements 'tt:Dot11' of XML schema type 'tt:Dot11Configuration' stored in dynamic array Dot11 of length __sizeDot11
        int __sizeDot11;
        tt__Dot11Configuration **Dot11;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceSetConfigurationExtension2'
        tt__NetworkInterfaceSetConfigurationExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfigurationExtension() : __sizeDot3(), Dot3(), __sizeDot11(), Dot11(), Extension() { }
        virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1096 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (500)
/* Type tt__IPv6NetworkInterfaceSetConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv6NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:AcceptRouterAdvert' of XML schema type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Sequence of elements 'tt:Manual' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array Manual of length __sizeManual
        int __sizeManual;
        tt__PrefixedIPv6Address **Manual;
        /// Optional element 'tt:DHCP' of XML schema type 'tt:IPv6DHCPConfiguration'
        enum tt__IPv6DHCPConfiguration *DHCP;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__IPv6NetworkInterfaceSetConfiguration() : Enabled(), AcceptRouterAdvert(), __sizeManual(), Manual(), DHCP() { }
        virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1098 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (501)
/* Type tt__IPv4NetworkInterfaceSetConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPv4NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Sequence of elements 'tt:Manual' of XML schema type 'tt:PrefixedIPv4Address' stored in dynamic array Manual of length __sizeManual
        int __sizeManual;
        tt__PrefixedIPv4Address **Manual;
        /// Optional element 'tt:DHCP' of XML schema type 'xsd:boolean'
        bool *DHCP;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__IPv4NetworkInterfaceSetConfiguration() : Enabled(), __sizeManual(), Manual(), DHCP() { }
        virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1100 */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (502)
/* Type tt__NetworkGateway is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkGateway': */
class SOAP_CMAC tt__NetworkGateway : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:IPv4Address' of XML schema type 'tt:IPv4Address' stored in dynamic array IPv4Address of length __sizeIPv4Address
        int __sizeIPv4Address;
        char **IPv4Address;
        /// Sequence of elements 'tt:IPv6Address' of XML schema type 'tt:IPv6Address' stored in dynamic array IPv6Address of length __sizeIPv6Address
        int __sizeIPv6Address;
        char **IPv6Address;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkGateway
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkGateway, default initialized and not managed by a soap context
        virtual tt__NetworkGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkGateway); }
      public:
        /// Constructor with default initializations
        tt__NetworkGateway() : __sizeIPv4Address(), IPv4Address(), __sizeIPv6Address(), IPv6Address() { }
        virtual ~tt__NetworkGateway() { }
        /// Friend allocator used by soap_new_tt__NetworkGateway(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1102 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (503)
/* Type tt__NetworkZeroConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkZeroConfiguration': */
class SOAP_CMAC tt__NetworkZeroConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        char *InterfaceToken;
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Sequence of elements 'tt:Addresses' of XML schema type 'tt:IPv4Address' stored in dynamic array Addresses of length __sizeAddresses
        int __sizeAddresses;
        char **Addresses;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkZeroConfigurationExtension'
        tt__NetworkZeroConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfiguration); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfiguration() : InterfaceToken(), Enabled(), __sizeAddresses(), Addresses(), Extension() { }
        virtual ~tt__NetworkZeroConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1104 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (504)
/* Type tt__NetworkZeroConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkZeroConfigurationExtension': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Additional' of XML schema type 'tt:NetworkZeroConfiguration' stored in dynamic array Additional of length __sizeAdditional
        int __sizeAdditional;
        tt__NetworkZeroConfiguration **Additional;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkZeroConfigurationExtension2'
        tt__NetworkZeroConfigurationExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfigurationExtension() : __sizeAdditional(), Additional(), Extension() { }
        virtual ~tt__NetworkZeroConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1106 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (505)
/* Type tt__NetworkZeroConfigurationExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkZeroConfigurationExtension2': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfigurationExtension2() { }
        virtual ~tt__NetworkZeroConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1108 */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (506)
/* Type tt__IPAddressFilter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IPAddressFilter': */
class SOAP_CMAC tt__IPAddressFilter : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:IPAddressFilterType'
        enum tt__IPAddressFilterType Type;
        /// Sequence of elements 'tt:IPv4Address' of XML schema type 'tt:PrefixedIPv4Address' stored in dynamic array IPv4Address of length __sizeIPv4Address
        int __sizeIPv4Address;
        tt__PrefixedIPv4Address **IPv4Address;
        /// Sequence of elements 'tt:IPv6Address' of XML schema type 'tt:PrefixedIPv6Address' stored in dynamic array IPv6Address of length __sizeIPv6Address
        int __sizeIPv6Address;
        tt__PrefixedIPv6Address **IPv6Address;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IPAddressFilterExtension'
        tt__IPAddressFilterExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilter, default initialized and not managed by a soap context
        virtual tt__IPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilter); }
      public:
        /// Constructor with default initializations
        tt__IPAddressFilter() : Type(), __sizeIPv4Address(), IPv4Address(), __sizeIPv6Address(), IPv6Address(), Extension() { }
        virtual ~tt__IPAddressFilter() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1110 */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (507)
/* Type tt__IPAddressFilterExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:IPAddressFilterExtension': */
class SOAP_CMAC tt__IPAddressFilterExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilterExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilterExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilterExtension, default initialized and not managed by a soap context
        virtual tt__IPAddressFilterExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilterExtension); }
      public:
        /// Constructor with default initializations
        tt__IPAddressFilterExtension() { }
        virtual ~tt__IPAddressFilterExtension() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilterExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1112 */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (508)
/* Type tt__Dot11Configuration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11Configuration': */
class SOAP_CMAC tt__Dot11Configuration : public xsd__anyType {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Required element 'tt:Mode' of XML schema type 'tt:Dot11StationMode'
        enum tt__Dot11StationMode Mode;
        /// Required element 'tt:Alias' of XML schema type 'tt:Name'
        char *Alias;
        /// Required element 'tt:Priority' of XML schema type 'tt:NetworkInterfaceConfigPriority'
        char *Priority;
        /// Required element 'tt:Security' of XML schema type 'tt:Dot11SecurityConfiguration'
        tt__Dot11SecurityConfiguration *Security;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Configuration, default initialized and not managed by a soap context
        virtual tt__Dot11Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Configuration); }
      public:
        /// Constructor with default initializations
        tt__Dot11Configuration() : SSID(), Mode(), Alias(), Priority(), Security() { }
        virtual ~tt__Dot11Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot11Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1114 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (509)
/* Type tt__Dot11SecurityConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11SecurityConfiguration': */
class SOAP_CMAC tt__Dot11SecurityConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:Dot11SecurityMode'
        enum tt__Dot11SecurityMode Mode;
        /// Optional element 'tt:Algorithm' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *Algorithm;
        /// Optional element 'tt:PSK' of XML schema type 'tt:Dot11PSKSet'
        tt__Dot11PSKSet *PSK;
        /// Optional element 'tt:Dot1X' of XML schema type 'tt:ReferenceToken'
        char *Dot1X;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11SecurityConfigurationExtension'
        tt__Dot11SecurityConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfiguration); }
      public:
        /// Constructor with default initializations
        tt__Dot11SecurityConfiguration() : Mode(), Algorithm(), PSK(), Dot1X(), Extension() { }
        virtual ~tt__Dot11SecurityConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1116 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (510)
/* Type tt__Dot11SecurityConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:Dot11SecurityConfigurationExtension': */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11SecurityConfigurationExtension() { }
        virtual ~tt__Dot11SecurityConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1118 */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (511)
/* Type tt__Dot11PSKSet is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11PSKSet': */
class SOAP_CMAC tt__Dot11PSKSet : public xsd__anyType {
      public:
        /// Optional element 'tt:Key' of XML schema type 'tt:Dot11PSK'
        xsd__hexBinary *Key;
        /// Optional element 'tt:Passphrase' of XML schema type 'tt:Dot11PSKPassphrase'
        char *Passphrase;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11PSKSetExtension'
        tt__Dot11PSKSetExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSet
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSet, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSet); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSKSet() : Key(), Passphrase(), Extension() { }
        virtual ~tt__Dot11PSKSet() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSet(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1120 */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (512)
/* Type tt__Dot11PSKSetExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:Dot11PSKSetExtension': */
class SOAP_CMAC tt__Dot11PSKSetExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSetExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSetExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSetExtension, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSetExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSetExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSKSetExtension() { }
        virtual ~tt__Dot11PSKSetExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSetExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1122 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (513)
/* Type tt__NetworkInterfaceSetConfigurationExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkInterfaceSetConfigurationExtension2': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfigurationExtension2() { }
        virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1124 */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (514)
/* Type tt__Dot11Capabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11Capabilities': */
class SOAP_CMAC tt__Dot11Capabilities : public xsd__anyType {
      public:
        /// Required element 'tt:TKIP' of XML schema type 'xsd:boolean'
        bool TKIP;
        /// Required element 'tt:ScanAvailableNetworks' of XML schema type 'xsd:boolean'
        bool ScanAvailableNetworks;
        /// Required element 'tt:MultipleConfiguration' of XML schema type 'xsd:boolean'
        bool MultipleConfiguration;
        /// Required element 'tt:AdHocStationMode' of XML schema type 'xsd:boolean'
        bool AdHocStationMode;
        /// Required element 'tt:WEP' of XML schema type 'xsd:boolean'
        bool WEP;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Capabilities, default initialized and not managed by a soap context
        virtual tt__Dot11Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Capabilities); }
      public:
        /// Constructor with default initializations
        tt__Dot11Capabilities() : TKIP(), ScanAvailableNetworks(), MultipleConfiguration(), AdHocStationMode(), WEP() { }
        virtual ~tt__Dot11Capabilities() { }
        /// Friend allocator used by soap_new_tt__Dot11Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1126 */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (515)
/* Type tt__Dot11Status is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11Status': */
class SOAP_CMAC tt__Dot11Status : public xsd__anyType {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XML schema type 'xsd:string'
        char *BSSID;
        /// Optional element 'tt:PairCipher' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *PairCipher;
        /// Optional element 'tt:GroupCipher' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *GroupCipher;
        /// Optional element 'tt:SignalStrength' of XML schema type 'tt:Dot11SignalStrength'
        enum tt__Dot11SignalStrength *SignalStrength;
        /// Required element 'tt:ActiveConfigAlias' of XML schema type 'tt:ReferenceToken'
        char *ActiveConfigAlias;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Status
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Status; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Status, default initialized and not managed by a soap context
        virtual tt__Dot11Status *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Status); }
      public:
        /// Constructor with default initializations
        tt__Dot11Status() : SSID(), BSSID(), PairCipher(), GroupCipher(), SignalStrength(), ActiveConfigAlias() { }
        virtual ~tt__Dot11Status() { }
        /// Friend allocator used by soap_new_tt__Dot11Status(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1128 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (516)
/* Type tt__Dot11AvailableNetworks is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot11AvailableNetworks': */
class SOAP_CMAC tt__Dot11AvailableNetworks : public xsd__anyType {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XML schema type 'xsd:string'
        char *BSSID;
        /// Sequence of elements 'tt:AuthAndMangementSuite' of XML schema type 'tt:Dot11AuthAndMangementSuite' stored in dynamic array AuthAndMangementSuite of length __sizeAuthAndMangementSuite
        int __sizeAuthAndMangementSuite;
        enum tt__Dot11AuthAndMangementSuite *AuthAndMangementSuite;
        /// Sequence of elements 'tt:PairCipher' of XML schema type 'tt:Dot11Cipher' stored in dynamic array PairCipher of length __sizePairCipher
        int __sizePairCipher;
        enum tt__Dot11Cipher *PairCipher;
        /// Sequence of elements 'tt:GroupCipher' of XML schema type 'tt:Dot11Cipher' stored in dynamic array GroupCipher of length __sizeGroupCipher
        int __sizeGroupCipher;
        enum tt__Dot11Cipher *GroupCipher;
        /// Optional element 'tt:SignalStrength' of XML schema type 'tt:Dot11SignalStrength'
        enum tt__Dot11SignalStrength *SignalStrength;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11AvailableNetworksExtension'
        tt__Dot11AvailableNetworksExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworks
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworks, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworks); }
      public:
        /// Constructor with default initializations
        tt__Dot11AvailableNetworks() : SSID(), BSSID(), __sizeAuthAndMangementSuite(), AuthAndMangementSuite(), __sizePairCipher(), PairCipher(), __sizeGroupCipher(), GroupCipher(), SignalStrength(), Extension() { }
        virtual ~tt__Dot11AvailableNetworks() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworks(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1130 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (517)
/* Type tt__Dot11AvailableNetworksExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:Dot11AvailableNetworksExtension': */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworksExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworksExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworksExtension, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworksExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworksExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11AvailableNetworksExtension() { }
        virtual ~tt__Dot11AvailableNetworksExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworksExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1132 */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (518)
/* Type tt__Capabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Capabilities': */
class SOAP_CMAC tt__Capabilities : public xsd__anyType {
      public:
        /// Optional element 'tt:Analytics' of XML schema type 'tt:AnalyticsCapabilities'
        tt__AnalyticsCapabilities *Analytics;
        /// Optional element 'tt:Device' of XML schema type 'tt:DeviceCapabilities'
        tt__DeviceCapabilities *Device;
        /// Optional element 'tt:Events' of XML schema type 'tt:EventCapabilities'
        tt__EventCapabilities *Events;
        /// Optional element 'tt:Imaging' of XML schema type 'tt:ImagingCapabilities'
        tt__ImagingCapabilities *Imaging;
        /// Optional element 'tt:Media' of XML schema type 'tt:MediaCapabilities'
        tt__MediaCapabilities *Media;
        /// Optional element 'tt:PTZ' of XML schema type 'tt:PTZCapabilities'
        tt__PTZCapabilities *PTZ;
        /// Optional element 'tt:Extension' of XML schema type 'tt:CapabilitiesExtension'
        tt__CapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Capabilities, default initialized and not managed by a soap context
        virtual tt__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Capabilities); }
      public:
        /// Constructor with default initializations
        tt__Capabilities() : Analytics(), Device(), Events(), Imaging(), Media(), PTZ(), Extension() { }
        virtual ~tt__Capabilities() { }
        /// Friend allocator used by soap_new_tt__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1134 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (519)
/* Type tt__CapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CapabilitiesExtension': */
class SOAP_CMAC tt__CapabilitiesExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:DeviceIO' of XML schema type 'tt:DeviceIOCapabilities'
        tt__DeviceIOCapabilities *DeviceIO;
        /// Optional element 'tt:Display' of XML schema type 'tt:DisplayCapabilities'
        tt__DisplayCapabilities *Display;
        /// Optional element 'tt:Recording' of XML schema type 'tt:RecordingCapabilities'
        tt__RecordingCapabilities *Recording;
        /// Optional element 'tt:Search' of XML schema type 'tt:SearchCapabilities'
        tt__SearchCapabilities *Search;
        /// Optional element 'tt:Replay' of XML schema type 'tt:ReplayCapabilities'
        tt__ReplayCapabilities *Replay;
        /// Optional element 'tt:Receiver' of XML schema type 'tt:ReceiverCapabilities'
        tt__ReceiverCapabilities *Receiver;
        /// Optional element 'tt:AnalyticsDevice' of XML schema type 'tt:AnalyticsDeviceCapabilities'
        tt__AnalyticsDeviceCapabilities *AnalyticsDevice;
        /// Optional element 'tt:Extensions' of XML schema type 'tt:CapabilitiesExtension2'
        tt__CapabilitiesExtension2 *Extensions;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__CapabilitiesExtension() : DeviceIO(), Display(), Recording(), Search(), Replay(), Receiver(), AnalyticsDevice(), Extensions() { }
        virtual ~tt__CapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1136 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (520)
/* Type tt__CapabilitiesExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:CapabilitiesExtension2': */
class SOAP_CMAC tt__CapabilitiesExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__CapabilitiesExtension2() { }
        virtual ~tt__CapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1138 */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (521)
/* Type tt__AnalyticsCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsCapabilities': */
class SOAP_CMAC tt__AnalyticsCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:RuleSupport' of XML schema type 'xsd:boolean'
        bool RuleSupport;
        /// Required element 'tt:AnalyticsModuleSupport' of XML schema type 'xsd:boolean'
        bool AnalyticsModuleSupport;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsCapabilities); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsCapabilities() : XAddr(), RuleSupport(), AnalyticsModuleSupport() { }
        virtual ~tt__AnalyticsCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1140 */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (522)
/* Type tt__DeviceCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DeviceCapabilities': */
class SOAP_CMAC tt__DeviceCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Optional element 'tt:Network' of XML schema type 'tt:NetworkCapabilities'
        tt__NetworkCapabilities *Network;
        /// Optional element 'tt:System' of XML schema type 'tt:SystemCapabilities'
        tt__SystemCapabilities *System;
        /// Optional element 'tt:IO' of XML schema type 'tt:IOCapabilities'
        tt__IOCapabilities *IO;
        /// Optional element 'tt:Security' of XML schema type 'tt:SecurityCapabilities'
        tt__SecurityCapabilities *Security;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DeviceCapabilitiesExtension'
        tt__DeviceCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DeviceCapabilities() : XAddr(), Network(), System(), IO(), Security(), Extension() { }
        virtual ~tt__DeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1142 */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (523)
/* Type tt__DeviceCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:DeviceCapabilitiesExtension': */
class SOAP_CMAC tt__DeviceCapabilitiesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__DeviceCapabilitiesExtension() { }
        virtual ~tt__DeviceCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1144 */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (524)
/* Type tt__EventCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:EventCapabilities': */
class SOAP_CMAC tt__EventCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:WSSubscriptionPolicySupport' of XML schema type 'xsd:boolean'
        bool WSSubscriptionPolicySupport;
        /// Required element 'tt:WSPullPointSupport' of XML schema type 'xsd:boolean'
        bool WSPullPointSupport;
        /// Required element 'tt:WSPausableSubscriptionManagerInterfaceSupport' of XML schema type 'xsd:boolean'
        bool WSPausableSubscriptionManagerInterfaceSupport;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventCapabilities, default initialized and not managed by a soap context
        virtual tt__EventCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventCapabilities); }
      public:
        /// Constructor with default initializations
        tt__EventCapabilities() : XAddr(), WSSubscriptionPolicySupport(), WSPullPointSupport(), WSPausableSubscriptionManagerInterfaceSupport() { }
        virtual ~tt__EventCapabilities() { }
        /// Friend allocator used by soap_new_tt__EventCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1146 */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (525)
/* Type tt__IOCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IOCapabilities': */
class SOAP_CMAC tt__IOCapabilities : public xsd__anyType {
      public:
        /// Optional element 'tt:InputConnectors' of XML schema type 'xsd:int'
        int *InputConnectors;
        /// Optional element 'tt:RelayOutputs' of XML schema type 'xsd:int'
        int *RelayOutputs;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IOCapabilitiesExtension'
        tt__IOCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilities, default initialized and not managed by a soap context
        virtual tt__IOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilities); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilities() : InputConnectors(), RelayOutputs(), Extension() { }
        virtual ~tt__IOCapabilities() { }
        /// Friend allocator used by soap_new_tt__IOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1148 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (526)
/* Type tt__IOCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:IOCapabilitiesExtension': */
class SOAP_CMAC tt__IOCapabilitiesExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:Auxiliary' of XML schema type 'xsd:boolean'
        bool *Auxiliary;
        /// Sequence of elements 'tt:AuxiliaryCommands' of XML schema type 'tt:AuxiliaryData' stored in dynamic array AuxiliaryCommands of length __sizeAuxiliaryCommands
        int __sizeAuxiliaryCommands;
        char **AuxiliaryCommands;
        /// Required element 'tt:Extension' of XML schema type 'tt:IOCapabilitiesExtension2'
        tt__IOCapabilitiesExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilitiesExtension() : Auxiliary(), __sizeAuxiliaryCommands(), AuxiliaryCommands(), Extension() { }
        virtual ~tt__IOCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1150 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (527)
/* Type tt__IOCapabilitiesExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:IOCapabilitiesExtension2': */
class SOAP_CMAC tt__IOCapabilitiesExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilitiesExtension2() { }
        virtual ~tt__IOCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1152 */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (528)
/* Type tt__MediaCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MediaCapabilities': */
class SOAP_CMAC tt__MediaCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:StreamingCapabilities' of XML schema type 'tt:RealTimeStreamingCapabilities'
        tt__RealTimeStreamingCapabilities *StreamingCapabilities;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MediaCapabilitiesExtension'
        tt__MediaCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilities, default initialized and not managed by a soap context
        virtual tt__MediaCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilities); }
      public:
        /// Constructor with default initializations
        tt__MediaCapabilities() : XAddr(), StreamingCapabilities(), Extension() { }
        virtual ~tt__MediaCapabilities() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1154 */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (529)
/* Type tt__MediaCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MediaCapabilitiesExtension': */
class SOAP_CMAC tt__MediaCapabilitiesExtension : public xsd__anyType {
      public:
        /// Required element 'tt:ProfileCapabilities' of XML schema type 'tt:ProfileCapabilities'
        tt__ProfileCapabilities *ProfileCapabilities;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__MediaCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__MediaCapabilitiesExtension() : ProfileCapabilities() { }
        virtual ~tt__MediaCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1156 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (530)
/* Type tt__RealTimeStreamingCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RealTimeStreamingCapabilities': */
class SOAP_CMAC tt__RealTimeStreamingCapabilities : public xsd__anyType {
      public:
        /// Optional element 'tt:RTPMulticast' of XML schema type 'xsd:boolean'
        bool *RTPMulticast;
        /// Optional element 'tt:RTP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORETCP;
        /// Optional element 'tt:RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RealTimeStreamingCapabilitiesExtension'
        tt__RealTimeStreamingCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilities, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__RealTimeStreamingCapabilities() : RTPMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), Extension() { }
        virtual ~tt__RealTimeStreamingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1158 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (531)
/* Type tt__RealTimeStreamingCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:RealTimeStreamingCapabilitiesExtension': */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__RealTimeStreamingCapabilitiesExtension() { }
        virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1160 */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (532)
/* Type tt__ProfileCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ProfileCapabilities': */
class SOAP_CMAC tt__ProfileCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:MaximumNumberOfProfiles' of XML schema type 'xsd:int'
        int MaximumNumberOfProfiles;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileCapabilities, default initialized and not managed by a soap context
        virtual tt__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ProfileCapabilities() : MaximumNumberOfProfiles() { }
        virtual ~tt__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_tt__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1162 */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (533)
/* Type tt__NetworkCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkCapabilities': */
class SOAP_CMAC tt__NetworkCapabilities : public xsd__anyType {
      public:
        /// Optional element 'tt:IPFilter' of XML schema type 'xsd:boolean'
        bool *IPFilter;
        /// Optional element 'tt:ZeroConfiguration' of XML schema type 'xsd:boolean'
        bool *ZeroConfiguration;
        /// Optional element 'tt:IPVersion6' of XML schema type 'xsd:boolean'
        bool *IPVersion6;
        /// Optional element 'tt:DynDNS' of XML schema type 'xsd:boolean'
        bool *DynDNS;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkCapabilitiesExtension'
        tt__NetworkCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilities, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilities); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilities() : IPFilter(), ZeroConfiguration(), IPVersion6(), DynDNS(), Extension() { }
        virtual ~tt__NetworkCapabilities() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1164 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (534)
/* Type tt__NetworkCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkCapabilitiesExtension': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:Dot11Configuration' of XML schema type 'xsd:boolean'
        bool *Dot11Configuration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkCapabilitiesExtension2'
        tt__NetworkCapabilitiesExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilitiesExtension() : Dot11Configuration(), Extension() { }
        virtual ~tt__NetworkCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1166 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (535)
/* Type tt__NetworkCapabilitiesExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:NetworkCapabilitiesExtension2': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilitiesExtension2() { }
        virtual ~tt__NetworkCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1168 */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (536)
/* Type tt__SecurityCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SecurityCapabilities': */
class SOAP_CMAC tt__SecurityCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:TLS1.1' of XML schema type 'xsd:boolean'
        bool TLS1_x002e1;
        /// Required element 'tt:TLS1.2' of XML schema type 'xsd:boolean'
        bool TLS1_x002e2;
        /// Required element 'tt:OnboardKeyGeneration' of XML schema type 'xsd:boolean'
        bool OnboardKeyGeneration;
        /// Required element 'tt:AccessPolicyConfig' of XML schema type 'xsd:boolean'
        bool AccessPolicyConfig;
        /// Required element 'tt:X.509Token' of XML schema type 'xsd:boolean'
        bool X_x002e509Token;
        /// Required element 'tt:SAMLToken' of XML schema type 'xsd:boolean'
        bool SAMLToken;
        /// Required element 'tt:KerberosToken' of XML schema type 'xsd:boolean'
        bool KerberosToken;
        /// Required element 'tt:RELToken' of XML schema type 'xsd:boolean'
        bool RELToken;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SecurityCapabilitiesExtension'
        tt__SecurityCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilities, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilities() : TLS1_x002e1(), TLS1_x002e2(), OnboardKeyGeneration(), AccessPolicyConfig(), X_x002e509Token(), SAMLToken(), KerberosToken(), RELToken(), Extension() { }
        virtual ~tt__SecurityCapabilities() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1170 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (537)
/* Type tt__SecurityCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SecurityCapabilitiesExtension': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension : public xsd__anyType {
      public:
        /// Required element 'tt:TLS1.0' of XML schema type 'xsd:boolean'
        bool TLS1_x002e0;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SecurityCapabilitiesExtension2'
        tt__SecurityCapabilitiesExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilitiesExtension() : TLS1_x002e0(), Extension() { }
        virtual ~tt__SecurityCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1172 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (538)
/* Type tt__SecurityCapabilitiesExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SecurityCapabilitiesExtension2': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2 : public xsd__anyType {
      public:
        /// Required element 'tt:Dot1X' of XML schema type 'xsd:boolean'
        bool Dot1X;
        /// Sequence of elements 'tt:SupportedEAPMethod' of XML schema type 'xsd:int' stored in dynamic array SupportedEAPMethod of length __sizeSupportedEAPMethod
        int __sizeSupportedEAPMethod;
        int *SupportedEAPMethod;
        /// Required element 'tt:RemoteUserHandling' of XML schema type 'xsd:boolean'
        bool RemoteUserHandling;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilitiesExtension2() : Dot1X(), __sizeSupportedEAPMethod(), SupportedEAPMethod(), RemoteUserHandling() { }
        virtual ~tt__SecurityCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1174 */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (539)
/* Type tt__SystemCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemCapabilities': */
class SOAP_CMAC tt__SystemCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:DiscoveryResolve' of XML schema type 'xsd:boolean'
        bool DiscoveryResolve;
        /// Required element 'tt:DiscoveryBye' of XML schema type 'xsd:boolean'
        bool DiscoveryBye;
        /// Required element 'tt:RemoteDiscovery' of XML schema type 'xsd:boolean'
        bool RemoteDiscovery;
        /// Required element 'tt:SystemBackup' of XML schema type 'xsd:boolean'
        bool SystemBackup;
        /// Required element 'tt:SystemLogging' of XML schema type 'xsd:boolean'
        bool SystemLogging;
        /// Required element 'tt:FirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool FirmwareUpgrade;
        /// Sequence of at least 1 elements 'tt:SupportedVersions' of XML schema type 'tt:OnvifVersion' stored in dynamic array SupportedVersions of length __sizeSupportedVersions
        int __sizeSupportedVersions;
        tt__OnvifVersion **SupportedVersions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemCapabilitiesExtension'
        tt__SystemCapabilitiesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilities, default initialized and not managed by a soap context
        virtual tt__SystemCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilities() : DiscoveryResolve(), DiscoveryBye(), RemoteDiscovery(), SystemBackup(), SystemLogging(), FirmwareUpgrade(), __sizeSupportedVersions(), SupportedVersions(), Extension() { }
        virtual ~tt__SystemCapabilities() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1176 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (540)
/* Type tt__SystemCapabilitiesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemCapabilitiesExtension': */
class SOAP_CMAC tt__SystemCapabilitiesExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:HttpFirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *HttpFirmwareUpgrade;
        /// Optional element 'tt:HttpSystemBackup' of XML schema type 'xsd:boolean'
        bool *HttpSystemBackup;
        /// Optional element 'tt:HttpSystemLogging' of XML schema type 'xsd:boolean'
        bool *HttpSystemLogging;
        /// Optional element 'tt:HttpSupportInformation' of XML schema type 'xsd:boolean'
        bool *HttpSupportInformation;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemCapabilitiesExtension2'
        tt__SystemCapabilitiesExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilitiesExtension() : HttpFirmwareUpgrade(), HttpSystemBackup(), HttpSystemLogging(), HttpSupportInformation(), Extension() { }
        virtual ~tt__SystemCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1178 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (541)
/* Type tt__SystemCapabilitiesExtension2 is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SystemCapabilitiesExtension2': */
class SOAP_CMAC tt__SystemCapabilitiesExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilitiesExtension2() { }
        virtual ~tt__SystemCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1180 */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (542)
/* Type tt__OnvifVersion is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:OnvifVersion': */
class SOAP_CMAC tt__OnvifVersion : public xsd__anyType {
      public:
        /// Required element 'tt:Major' of XML schema type 'xsd:int'
        int Major;
        /// Required element 'tt:Minor' of XML schema type 'xsd:int'
        int Minor;
      public:
        /// Return unique type id SOAP_TYPE_tt__OnvifVersion
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OnvifVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OnvifVersion, default initialized and not managed by a soap context
        virtual tt__OnvifVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OnvifVersion); }
      public:
        /// Constructor with default initializations
        tt__OnvifVersion() : Major(), Minor() { }
        virtual ~tt__OnvifVersion() { }
        /// Friend allocator used by soap_new_tt__OnvifVersion(struct soap*, int)
        friend SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1182 */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (543)
/* Type tt__ImagingCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ImagingCapabilities': */
class SOAP_CMAC tt__ImagingCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingCapabilities, default initialized and not managed by a soap context
        virtual tt__ImagingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ImagingCapabilities() : XAddr() { }
        virtual ~tt__ImagingCapabilities() { }
        /// Friend allocator used by soap_new_tt__ImagingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1184 */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (544)
/* Type tt__PTZCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PTZCapabilities': */
class SOAP_CMAC tt__PTZCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZCapabilities, default initialized and not managed by a soap context
        virtual tt__PTZCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZCapabilities); }
      public:
        /// Constructor with default initializations
        tt__PTZCapabilities() : XAddr() { }
        virtual ~tt__PTZCapabilities() { }
        /// Friend allocator used by soap_new_tt__PTZCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1186 */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (545)
/* Type tt__DeviceIOCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DeviceIOCapabilities': */
class SOAP_CMAC tt__DeviceIOCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:VideoSources' of XML schema type 'xsd:int'
        int VideoSources;
        /// Required element 'tt:VideoOutputs' of XML schema type 'xsd:int'
        int VideoOutputs;
        /// Required element 'tt:AudioSources' of XML schema type 'xsd:int'
        int AudioSources;
        /// Required element 'tt:AudioOutputs' of XML schema type 'xsd:int'
        int AudioOutputs;
        /// Required element 'tt:RelayOutputs' of XML schema type 'xsd:int'
        int RelayOutputs;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceIOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceIOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceIOCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceIOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceIOCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DeviceIOCapabilities() : XAddr(), VideoSources(), VideoOutputs(), AudioSources(), AudioOutputs(), RelayOutputs() { }
        virtual ~tt__DeviceIOCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceIOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1188 */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (546)
/* Type tt__DisplayCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DisplayCapabilities': */
class SOAP_CMAC tt__DisplayCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:FixedLayout' of XML schema type 'xsd:boolean'
        bool FixedLayout;
      public:
        /// Return unique type id SOAP_TYPE_tt__DisplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DisplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DisplayCapabilities, default initialized and not managed by a soap context
        virtual tt__DisplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DisplayCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DisplayCapabilities() : XAddr(), FixedLayout() { }
        virtual ~tt__DisplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__DisplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1190 */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (547)
/* Type tt__RecordingCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingCapabilities': */
class SOAP_CMAC tt__RecordingCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:ReceiverSource' of XML schema type 'xsd:boolean'
        bool ReceiverSource;
        /// Required element 'tt:MediaProfileSource' of XML schema type 'xsd:boolean'
        bool MediaProfileSource;
        /// Required element 'tt:DynamicRecordings' of XML schema type 'xsd:boolean'
        bool DynamicRecordings;
        /// Required element 'tt:DynamicTracks' of XML schema type 'xsd:boolean'
        bool DynamicTracks;
        /// Required element 'tt:MaxStringLength' of XML schema type 'xsd:int'
        int MaxStringLength;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingCapabilities, default initialized and not managed by a soap context
        virtual tt__RecordingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__RecordingCapabilities() : XAddr(), ReceiverSource(), MediaProfileSource(), DynamicRecordings(), DynamicTracks(), MaxStringLength() { }
        virtual ~tt__RecordingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RecordingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1192 */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (548)
/* Type tt__SearchCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SearchCapabilities': */
class SOAP_CMAC tt__SearchCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:MetadataSearch' of XML schema type 'xsd:boolean'
        bool MetadataSearch;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchCapabilities, default initialized and not managed by a soap context
        virtual tt__SearchCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SearchCapabilities() : XAddr(), MetadataSearch() { }
        virtual ~tt__SearchCapabilities() { }
        /// Friend allocator used by soap_new_tt__SearchCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1194 */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (549)
/* Type tt__ReplayCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ReplayCapabilities': */
class SOAP_CMAC tt__ReplayCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReplayCapabilities, default initialized and not managed by a soap context
        virtual tt__ReplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReplayCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ReplayCapabilities() : XAddr() { }
        virtual ~tt__ReplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1196 */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (550)
/* Type tt__ReceiverCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ReceiverCapabilities': */
class SOAP_CMAC tt__ReceiverCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Required element 'tt:RTP_Multicast' of XML schema type 'xsd:boolean'
        bool RTP_USCOREMulticast;
        /// Required element 'tt:RTP_TCP' of XML schema type 'xsd:boolean'
        bool RTP_USCORETCP;
        /// Required element 'tt:RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool RTP_USCORERTSP_USCORETCP;
        /// Required element 'tt:SupportedReceivers' of XML schema type 'xsd:int'
        int SupportedReceivers;
        /// Required element 'tt:MaximumRTSPURILength' of XML schema type 'xsd:int'
        int MaximumRTSPURILength;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverCapabilities, default initialized and not managed by a soap context
        virtual tt__ReceiverCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ReceiverCapabilities() : XAddr(), RTP_USCOREMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), SupportedReceivers(), MaximumRTSPURILength() { }
        virtual ~tt__ReceiverCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReceiverCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1198 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (551)
/* Type tt__AnalyticsDeviceCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsDeviceCapabilities': */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities : public xsd__anyType {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        char *XAddr;
        /// Optional element 'tt:RuleSupport' of XML schema type 'xsd:boolean'
        bool *RuleSupport;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AnalyticsDeviceExtension'
        tt__AnalyticsDeviceExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceCapabilities); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceCapabilities() : XAddr(), RuleSupport(), Extension() { }
        virtual ~tt__AnalyticsDeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1200 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (552)
/* Type tt__AnalyticsDeviceExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:AnalyticsDeviceExtension': */
class SOAP_CMAC tt__AnalyticsDeviceExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceExtension); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceExtension() { }
        virtual ~tt__AnalyticsDeviceExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1202 */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (553)
/* Type tt__SystemLog is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemLog': */
class SOAP_CMAC tt__SystemLog : public xsd__anyType {
      public:
        /// Optional element 'tt:Binary' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XML schema type 'xsd:string'
        char *String;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLog
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLog, default initialized and not managed by a soap context
        virtual tt__SystemLog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLog); }
      public:
        /// Constructor with default initializations
        tt__SystemLog() : Binary(), String() { }
        virtual ~tt__SystemLog() { }
        /// Friend allocator used by soap_new_tt__SystemLog(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1204 */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (554)
/* Type tt__SupportInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SupportInformation': */
class SOAP_CMAC tt__SupportInformation : public xsd__anyType {
      public:
        /// Optional element 'tt:Binary' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XML schema type 'xsd:string'
        char *String;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportInformation, default initialized and not managed by a soap context
        virtual tt__SupportInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportInformation); }
      public:
        /// Constructor with default initializations
        tt__SupportInformation() : Binary(), String() { }
        virtual ~tt__SupportInformation() { }
        /// Friend allocator used by soap_new_tt__SupportInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1206 */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (555)
/* Type tt__BinaryData is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:BinaryData': */
class SOAP_CMAC tt__BinaryData : public xsd__anyType {
      public:
        /// Required element 'tt:Data' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary Data;
        /// Optional attribute 'xmime:contentType' of XML schema type 'xsd:string'
        char *xmime__contentType;
      public:
        /// Return unique type id SOAP_TYPE_tt__BinaryData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BinaryData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BinaryData, default initialized and not managed by a soap context
        virtual tt__BinaryData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BinaryData); }
      public:
        /// Constructor with default initializations
        tt__BinaryData() : Data(), xmime__contentType() { }
        virtual ~tt__BinaryData() { }
        /// Friend allocator used by soap_new_tt__BinaryData(struct soap*, int)
        friend SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1208 */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (556)
/* Type tt__AttachmentData is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AttachmentData': */
class SOAP_CMAC tt__AttachmentData : public xsd__anyType {
      public:
        /// Required element 'xop:Include' of XML schema type 'xop:Include'
        struct _xop__Include xop__Include;
        /// Optional attribute 'xmime:contentType' of XML schema type 'xsd:string'
        char *xmime__contentType;
      public:
        /// Return unique type id SOAP_TYPE_tt__AttachmentData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AttachmentData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AttachmentData, default initialized and not managed by a soap context
        virtual tt__AttachmentData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AttachmentData); }
      public:
        /// Constructor with default initializations
        tt__AttachmentData() : xop__Include(), xmime__contentType() { }
        virtual ~tt__AttachmentData() { }
        /// Friend allocator used by soap_new_tt__AttachmentData(struct soap*, int)
        friend SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1210 */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (557)
/* Type tt__BackupFile is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:BackupFile': */
class SOAP_CMAC tt__BackupFile : public xsd__anyType {
      public:
        /// Required element 'tt:Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required element 'tt:Data' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Data;
      public:
        /// Return unique type id SOAP_TYPE_tt__BackupFile
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BackupFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BackupFile, default initialized and not managed by a soap context
        virtual tt__BackupFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BackupFile); }
      public:
        /// Constructor with default initializations
        tt__BackupFile() : Name(), Data() { }
        virtual ~tt__BackupFile() { }
        /// Friend allocator used by soap_new_tt__BackupFile(struct soap*, int)
        friend SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1212 */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (558)
/* Type tt__SystemLogUriList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemLogUriList': */
class SOAP_CMAC tt__SystemLogUriList : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:SystemLog' of XML schema type 'tt:SystemLogUri' stored in dynamic array SystemLog of length __sizeSystemLog
        int __sizeSystemLog;
        tt__SystemLogUri **SystemLog;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUriList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUriList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUriList, default initialized and not managed by a soap context
        virtual tt__SystemLogUriList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUriList); }
      public:
        /// Constructor with default initializations
        tt__SystemLogUriList() : __sizeSystemLog(), SystemLog() { }
        virtual ~tt__SystemLogUriList() { }
        /// Friend allocator used by soap_new_tt__SystemLogUriList(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1214 */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (559)
/* Type tt__SystemLogUri is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemLogUri': */
class SOAP_CMAC tt__SystemLogUri : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:SystemLogType'
        enum tt__SystemLogType Type;
        /// Required element 'tt:Uri' of XML schema type 'xsd:anyURI'
        char *Uri;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUri
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUri, default initialized and not managed by a soap context
        virtual tt__SystemLogUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUri); }
      public:
        /// Constructor with default initializations
        tt__SystemLogUri() : Type(), Uri() { }
        virtual ~tt__SystemLogUri() { }
        /// Friend allocator used by soap_new_tt__SystemLogUri(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1216 */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (560)
/* Type tt__SystemDateTime is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SystemDateTime': */
class SOAP_CMAC tt__SystemDateTime : public xsd__anyType {
      public:
        /// Required element 'tt:DateTimeType' of XML schema type 'tt:SetDateTimeType'
        enum tt__SetDateTimeType DateTimeType;
        /// Required element 'tt:DaylightSavings' of XML schema type 'xsd:boolean'
        bool DaylightSavings;
        /// Optional element 'tt:TimeZone' of XML schema type 'tt:TimeZone'
        tt__TimeZone *TimeZone;
        /// Optional element 'tt:UTCDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *UTCDateTime;
        /// Optional element 'tt:LocalDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *LocalDateTime;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemDateTimeExtension'
        tt__SystemDateTimeExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTime, default initialized and not managed by a soap context
        virtual tt__SystemDateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTime); }
      public:
        /// Constructor with default initializations
        tt__SystemDateTime() : DateTimeType(), DaylightSavings(), TimeZone(), UTCDateTime(), LocalDateTime(), Extension() { }
        virtual ~tt__SystemDateTime() { }
        /// Friend allocator used by soap_new_tt__SystemDateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1218 */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (561)
/* Type tt__SystemDateTimeExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SystemDateTimeExtension': */
class SOAP_CMAC tt__SystemDateTimeExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTimeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTimeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTimeExtension, default initialized and not managed by a soap context
        virtual tt__SystemDateTimeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTimeExtension); }
      public:
        /// Constructor with default initializations
        tt__SystemDateTimeExtension() { }
        virtual ~tt__SystemDateTimeExtension() { }
        /// Friend allocator used by soap_new_tt__SystemDateTimeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1220 */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (562)
/* Type tt__DateTime is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DateTime': */
class SOAP_CMAC tt__DateTime : public xsd__anyType {
      public:
        /// Required element 'tt:Time' of XML schema type 'tt:Time'
        tt__Time *Time;
        /// Required element 'tt:Date' of XML schema type 'tt:Date'
        tt__Date *Date;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTime, default initialized and not managed by a soap context
        virtual tt__DateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTime); }
      public:
        /// Constructor with default initializations
        tt__DateTime() : Time(), Date() { }
        virtual ~tt__DateTime() { }
        /// Friend allocator used by soap_new_tt__DateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1222 */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (563)
/* Type tt__Date is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Date': */
class SOAP_CMAC tt__Date : public xsd__anyType {
      public:
        /// Required element 'tt:Year' of XML schema type 'xsd:int'
        int Year;
        /// Required element 'tt:Month' of XML schema type 'xsd:int'
        int Month;
        /// Required element 'tt:Day' of XML schema type 'xsd:int'
        int Day;
      public:
        /// Return unique type id SOAP_TYPE_tt__Date
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Date; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Date, default initialized and not managed by a soap context
        virtual tt__Date *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Date); }
      public:
        /// Constructor with default initializations
        tt__Date() : Year(), Month(), Day() { }
        virtual ~tt__Date() { }
        /// Friend allocator used by soap_new_tt__Date(struct soap*, int)
        friend SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1224 */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (564)
/* Type tt__Time is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Time': */
class SOAP_CMAC tt__Time : public xsd__anyType {
      public:
        /// Required element 'tt:Hour' of XML schema type 'xsd:int'
        int Hour;
        /// Required element 'tt:Minute' of XML schema type 'xsd:int'
        int Minute;
        /// Required element 'tt:Second' of XML schema type 'xsd:int'
        int Second;
      public:
        /// Return unique type id SOAP_TYPE_tt__Time
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Time; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Time, default initialized and not managed by a soap context
        virtual tt__Time *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Time); }
      public:
        /// Constructor with default initializations
        tt__Time() : Hour(), Minute(), Second() { }
        virtual ~tt__Time() { }
        /// Friend allocator used by soap_new_tt__Time(struct soap*, int)
        friend SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1226 */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (565)
/* Type tt__TimeZone is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:TimeZone': */
class SOAP_CMAC tt__TimeZone : public xsd__anyType {
      public:
        /// Required element 'tt:TZ' of XML schema type 'xsd:token'
        char *TZ;
      public:
        /// Return unique type id SOAP_TYPE_tt__TimeZone
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TimeZone; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TimeZone, default initialized and not managed by a soap context
        virtual tt__TimeZone *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TimeZone); }
      public:
        /// Constructor with default initializations
        tt__TimeZone() : TZ() { }
        virtual ~tt__TimeZone() { }
        /// Friend allocator used by soap_new_tt__TimeZone(struct soap*, int)
        friend SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1228 */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (566)
/* Type tt__RemoteUser is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RemoteUser': */
class SOAP_CMAC tt__RemoteUser : public xsd__anyType {
      public:
        /// Required element 'tt:Username' of XML schema type 'xsd:string'
        char *Username;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        char *Password;
        /// Required element 'tt:UseDerivedPassword' of XML schema type 'xsd:boolean'
        bool UseDerivedPassword;
      public:
        /// Return unique type id SOAP_TYPE_tt__RemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RemoteUser, default initialized and not managed by a soap context
        virtual tt__RemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RemoteUser); }
      public:
        /// Constructor with default initializations
        tt__RemoteUser() : Username(), Password(), UseDerivedPassword() { }
        virtual ~tt__RemoteUser() { }
        /// Friend allocator used by soap_new_tt__RemoteUser(struct soap*, int)
        friend SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1230 */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (567)
/* Type tt__User is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:User': */
class SOAP_CMAC tt__User : public xsd__anyType {
      public:
        /// Required element 'tt:Username' of XML schema type 'xsd:string'
        char *Username;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        char *Password;
        /// Required element 'tt:UserLevel' of XML schema type 'tt:UserLevel'
        enum tt__UserLevel UserLevel;
        /// Optional element 'tt:Extension' of XML schema type 'tt:UserExtension'
        tt__UserExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__User
        virtual long soap_type(void) const { return SOAP_TYPE_tt__User; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__User, default initialized and not managed by a soap context
        virtual tt__User *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__User); }
      public:
        /// Constructor with default initializations
        tt__User() : Username(), Password(), UserLevel(), Extension() { }
        virtual ~tt__User() { }
        /// Friend allocator used by soap_new_tt__User(struct soap*, int)
        friend SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1232 */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (568)
/* Type tt__UserExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:UserExtension': */
class SOAP_CMAC tt__UserExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__UserExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__UserExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__UserExtension, default initialized and not managed by a soap context
        virtual tt__UserExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__UserExtension); }
      public:
        /// Constructor with default initializations
        tt__UserExtension() { }
        virtual ~tt__UserExtension() { }
        /// Friend allocator used by soap_new_tt__UserExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1234 */
#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (569)
/* Type tt__CertificateGenerationParameters is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CertificateGenerationParameters': */
class SOAP_CMAC tt__CertificateGenerationParameters : public xsd__anyType {
      public:
        /// Optional element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Optional element 'tt:Subject' of XML schema type 'xsd:string'
        char *Subject;
        /// Optional element 'tt:ValidNotBefore' of XML schema type 'xsd:token'
        char *ValidNotBefore;
        /// Optional element 'tt:ValidNotAfter' of XML schema type 'xsd:token'
        char *ValidNotAfter;
        /// Optional element 'tt:Extension' of XML schema type 'tt:CertificateGenerationParametersExtension'
        tt__CertificateGenerationParametersExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateGenerationParameters
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateGenerationParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateGenerationParameters, default initialized and not managed by a soap context
        virtual tt__CertificateGenerationParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateGenerationParameters); }
      public:
        /// Constructor with default initializations
        tt__CertificateGenerationParameters() : CertificateID(), Subject(), ValidNotBefore(), ValidNotAfter(), Extension() { }
        virtual ~tt__CertificateGenerationParameters() { }
        /// Friend allocator used by soap_new_tt__CertificateGenerationParameters(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateGenerationParameters * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1236 */
#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (570)
/* Type tt__CertificateGenerationParametersExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:CertificateGenerationParametersExtension': */
class SOAP_CMAC tt__CertificateGenerationParametersExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateGenerationParametersExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateGenerationParametersExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateGenerationParametersExtension, default initialized and not managed by a soap context
        virtual tt__CertificateGenerationParametersExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateGenerationParametersExtension); }
      public:
        /// Constructor with default initializations
        tt__CertificateGenerationParametersExtension() { }
        virtual ~tt__CertificateGenerationParametersExtension() { }
        /// Friend allocator used by soap_new_tt__CertificateGenerationParametersExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateGenerationParametersExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParametersExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1238 */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (571)
/* Type tt__Certificate is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Certificate': */
class SOAP_CMAC tt__Certificate : public xsd__anyType {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Required element 'tt:Certificate' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Certificate;
      public:
        /// Return unique type id SOAP_TYPE_tt__Certificate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Certificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Certificate, default initialized and not managed by a soap context
        virtual tt__Certificate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Certificate); }
      public:
        /// Constructor with default initializations
        tt__Certificate() : CertificateID(), Certificate() { }
        virtual ~tt__Certificate() { }
        /// Friend allocator used by soap_new_tt__Certificate(struct soap*, int)
        friend SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1240 */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (572)
/* Type tt__CertificateStatus is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CertificateStatus': */
class SOAP_CMAC tt__CertificateStatus : public xsd__anyType {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Required element 'tt:Status' of XML schema type 'xsd:boolean'
        bool Status;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateStatus, default initialized and not managed by a soap context
        virtual tt__CertificateStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateStatus); }
      public:
        /// Constructor with default initializations
        tt__CertificateStatus() : CertificateID(), Status() { }
        virtual ~tt__CertificateStatus() { }
        /// Friend allocator used by soap_new_tt__CertificateStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1242 */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (573)
/* Type tt__CertificateWithPrivateKey is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CertificateWithPrivateKey': */
class SOAP_CMAC tt__CertificateWithPrivateKey : public xsd__anyType {
      public:
        /// Optional element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Required element 'tt:Certificate' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Certificate;
        /// Required element 'tt:PrivateKey' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PrivateKey;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateWithPrivateKey
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateWithPrivateKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateWithPrivateKey, default initialized and not managed by a soap context
        virtual tt__CertificateWithPrivateKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateWithPrivateKey); }
      public:
        /// Constructor with default initializations
        tt__CertificateWithPrivateKey() : CertificateID(), Certificate(), PrivateKey() { }
        virtual ~tt__CertificateWithPrivateKey() { }
        /// Friend allocator used by soap_new_tt__CertificateWithPrivateKey(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1244 */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (574)
/* Type tt__CertificateInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CertificateInformation': */
class SOAP_CMAC tt__CertificateInformation : public xsd__anyType {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Optional element 'tt:IssuerDN' of XML schema type 'xsd:string'
        char *IssuerDN;
        /// Optional element 'tt:SubjectDN' of XML schema type 'xsd:string'
        char *SubjectDN;
        /// Optional element 'tt:KeyUsage' of XML schema type 'tt:CertificateUsage'
        tt__CertificateUsage *KeyUsage;
        /// Optional element 'tt:ExtendedKeyUsage' of XML schema type 'tt:CertificateUsage'
        tt__CertificateUsage *ExtendedKeyUsage;
        /// Optional element 'tt:KeyLength' of XML schema type 'xsd:int'
        int *KeyLength;
        /// Optional element 'tt:Version' of XML schema type 'xsd:string'
        char *Version;
        /// Optional element 'tt:SerialNum' of XML schema type 'xsd:string'
        char *SerialNum;
        /// Optional element 'tt:SignatureAlgorithm' of XML schema type 'xsd:string'
        char *SignatureAlgorithm;
        /// Optional element 'tt:Validity' of XML schema type 'tt:DateTimeRange'
        tt__DateTimeRange *Validity;
        /// Optional element 'tt:Extension' of XML schema type 'tt:CertificateInformationExtension'
        tt__CertificateInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformation, default initialized and not managed by a soap context
        virtual tt__CertificateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformation); }
      public:
        /// Constructor with default initializations
        tt__CertificateInformation() : CertificateID(), IssuerDN(), SubjectDN(), KeyUsage(), ExtendedKeyUsage(), KeyLength(), Version(), SerialNum(), SignatureAlgorithm(), Validity(), Extension() { }
        virtual ~tt__CertificateInformation() { }
        /// Friend allocator used by soap_new_tt__CertificateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1248 */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (576)
/* Type tt__CertificateInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:CertificateInformationExtension': */
class SOAP_CMAC tt__CertificateInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformationExtension, default initialized and not managed by a soap context
        virtual tt__CertificateInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__CertificateInformationExtension() { }
        virtual ~tt__CertificateInformationExtension() { }
        /// Friend allocator used by soap_new_tt__CertificateInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1250 */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (577)
/* Type tt__Dot1XConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Dot1XConfiguration': */
class SOAP_CMAC tt__Dot1XConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *Dot1XConfigurationToken;
        /// Required element 'tt:Identity' of XML schema type 'xsd:string'
        char *Identity;
        /// Optional element 'tt:AnonymousID' of XML schema type 'xsd:string'
        char *AnonymousID;
        /// Required element 'tt:EAPMethod' of XML schema type 'xsd:int'
        int EAPMethod;
        /// Sequence of elements 'tt:CACertificateID' of XML schema type 'xsd:token' stored in dynamic array CACertificateID of length __sizeCACertificateID
        int __sizeCACertificateID;
        char **CACertificateID;
        /// Optional element 'tt:EAPMethodConfiguration' of XML schema type 'tt:EAPMethodConfiguration'
        tt__EAPMethodConfiguration *EAPMethodConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot1XConfigurationExtension'
        tt__Dot1XConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfiguration); }
      public:
        /// Constructor with default initializations
        tt__Dot1XConfiguration() : Dot1XConfigurationToken(), Identity(), AnonymousID(), EAPMethod(), __sizeCACertificateID(), CACertificateID(), EAPMethodConfiguration(), Extension() { }
        virtual ~tt__Dot1XConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1252 */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (578)
/* Type tt__Dot1XConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:Dot1XConfigurationExtension': */
class SOAP_CMAC tt__Dot1XConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot1XConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot1XConfigurationExtension() { }
        virtual ~tt__Dot1XConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1254 */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (579)
/* Type tt__EAPMethodConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:EAPMethodConfiguration': */
class SOAP_CMAC tt__EAPMethodConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tt:TLSConfiguration' of XML schema type 'tt:TLSConfiguration'
        tt__TLSConfiguration *TLSConfiguration;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        char *Password;
        /// Optional element 'tt:Extension' of XML schema type 'tt:EapMethodExtension'
        tt__EapMethodExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__EAPMethodConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EAPMethodConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EAPMethodConfiguration, default initialized and not managed by a soap context
        virtual tt__EAPMethodConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EAPMethodConfiguration); }
      public:
        /// Constructor with default initializations
        tt__EAPMethodConfiguration() : TLSConfiguration(), Password(), Extension() { }
        virtual ~tt__EAPMethodConfiguration() { }
        /// Friend allocator used by soap_new_tt__EAPMethodConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1256 */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (580)
/* Type tt__EapMethodExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:EapMethodExtension': */
class SOAP_CMAC tt__EapMethodExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__EapMethodExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EapMethodExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EapMethodExtension, default initialized and not managed by a soap context
        virtual tt__EapMethodExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EapMethodExtension); }
      public:
        /// Constructor with default initializations
        tt__EapMethodExtension() { }
        virtual ~tt__EapMethodExtension() { }
        /// Friend allocator used by soap_new_tt__EapMethodExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1258 */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (581)
/* Type tt__TLSConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:TLSConfiguration': */
class SOAP_CMAC tt__TLSConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
      public:
        /// Return unique type id SOAP_TYPE_tt__TLSConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TLSConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TLSConfiguration, default initialized and not managed by a soap context
        virtual tt__TLSConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TLSConfiguration); }
      public:
        /// Constructor with default initializations
        tt__TLSConfiguration() : CertificateID() { }
        virtual ~tt__TLSConfiguration() { }
        /// Friend allocator used by soap_new_tt__TLSConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1260 */
#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (582)
/* Type tt__GenericEapPwdConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:GenericEapPwdConfigurationExtension': */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GenericEapPwdConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GenericEapPwdConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__GenericEapPwdConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GenericEapPwdConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__GenericEapPwdConfigurationExtension() { }
        virtual ~tt__GenericEapPwdConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__GenericEapPwdConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__GenericEapPwdConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1262 */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (583)
/* Type tt__RelayOutputSettings is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RelayOutputSettings': */
class SOAP_CMAC tt__RelayOutputSettings : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:RelayMode'
        enum tt__RelayMode Mode;
        /// Required element 'tt:DelayTime' of XML schema type 'xsd:duration'
        char *DelayTime;
        /// Required element 'tt:IdleState' of XML schema type 'tt:RelayIdleState'
        enum tt__RelayIdleState IdleState;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutputSettings
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutputSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutputSettings, default initialized and not managed by a soap context
        virtual tt__RelayOutputSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutputSettings); }
      public:
        /// Constructor with default initializations
        tt__RelayOutputSettings() : Mode(), DelayTime(), IdleState() { }
        virtual ~tt__RelayOutputSettings() { }
        /// Friend allocator used by soap_new_tt__RelayOutputSettings(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1270 */
#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (587)
/* complex XML schema type 'tt:PTZNodeExtension': */
class SOAP_CMAC tt__PTZNodeExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:SupportedPresetTour' of XML schema type 'tt:PTZPresetTourSupported'
        tt__PTZPresetTourSupported *SupportedPresetTour;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZNodeExtension2'
        tt__PTZNodeExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNodeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNodeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNodeExtension, default initialized and not managed by a soap context
        virtual tt__PTZNodeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNodeExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZNodeExtension() : SupportedPresetTour(), Extension() { }
        virtual ~tt__PTZNodeExtension() { }
        /// Friend allocator used by soap_new_tt__PTZNodeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1272 */
#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (588)
/* simple XML schema type 'tt:PTZNodeExtension2': */
class SOAP_CMAC tt__PTZNodeExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNodeExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNodeExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNodeExtension2, default initialized and not managed by a soap context
        virtual tt__PTZNodeExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNodeExtension2); }
      public:
        /// Constructor with default initializations
        tt__PTZNodeExtension2() { }
        virtual ~tt__PTZNodeExtension2() { }
        /// Friend allocator used by soap_new_tt__PTZNodeExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1274 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (589)
/* complex XML schema type 'tt:PTZPresetTourSupported': */
class SOAP_CMAC tt__PTZPresetTourSupported : public xsd__anyType {
      public:
        /// Required element 'tt:MaximumNumberOfPresetTours' of XML schema type 'xsd:int'
        int MaximumNumberOfPresetTours;
        /// Sequence of elements 'tt:PTZPresetTourOperation' of XML schema type 'tt:PTZPresetTourOperation' stored in dynamic array PTZPresetTourOperation of length __sizePTZPresetTourOperation
        int __sizePTZPresetTourOperation;
        enum tt__PTZPresetTourOperation *PTZPresetTourOperation;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourSupportedExtension'
        tt__PTZPresetTourSupportedExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSupported
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSupported; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSupported, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSupported *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSupported); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourSupported() : MaximumNumberOfPresetTours(), __sizePTZPresetTourOperation(), PTZPresetTourOperation(), Extension() { }
        virtual ~tt__PTZPresetTourSupported() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSupported(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1276 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (590)
/* simple XML schema type 'tt:PTZPresetTourSupportedExtension': */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSupportedExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSupportedExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSupportedExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSupportedExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSupportedExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourSupportedExtension() { }
        virtual ~tt__PTZPresetTourSupportedExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSupportedExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1280 */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (592)
/* complex XML schema type 'tt:PTZConfigurationExtension': */
class SOAP_CMAC tt__PTZConfigurationExtension : public xsd__anyType {
      public:
        /// Optional element 'tt:PTControlDirection' of XML schema type 'tt:PTControlDirection'
        tt__PTControlDirection *PTControlDirection;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZConfigurationExtension2'
        tt__PTZConfigurationExtension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZConfigurationExtension() : PTControlDirection(), Extension() { }
        virtual ~tt__PTZConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1282 */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (593)
/* simple XML schema type 'tt:PTZConfigurationExtension2': */
class SOAP_CMAC tt__PTZConfigurationExtension2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__PTZConfigurationExtension2() { }
        virtual ~tt__PTZConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1284 */
#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (594)
/* complex XML schema type 'tt:PTControlDirection': */
class SOAP_CMAC tt__PTControlDirection : public xsd__anyType {
      public:
        /// Optional element 'tt:EFlip' of XML schema type 'tt:EFlip'
        tt__EFlip *EFlip;
        /// Optional element 'tt:Reverse' of XML schema type 'tt:Reverse'
        tt__Reverse *Reverse;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTControlDirectionExtension'
        tt__PTControlDirectionExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirection, default initialized and not managed by a soap context
        virtual tt__PTControlDirection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirection); }
      public:
        /// Constructor with default initializations
        tt__PTControlDirection() : EFlip(), Reverse(), Extension() { }
        virtual ~tt__PTControlDirection() { }
        /// Friend allocator used by soap_new_tt__PTControlDirection(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1286 */
#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (595)
/* simple XML schema type 'tt:PTControlDirectionExtension': */
class SOAP_CMAC tt__PTControlDirectionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionExtension, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionExtension); }
      public:
        /// Constructor with default initializations
        tt__PTControlDirectionExtension() { }
        virtual ~tt__PTControlDirectionExtension() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1288 */
#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (596)
/* complex XML schema type 'tt:EFlip': */
class SOAP_CMAC tt__EFlip : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:EFlipMode'
        enum tt__EFlipMode Mode;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlip
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlip; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlip, default initialized and not managed by a soap context
        virtual tt__EFlip *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlip); }
      public:
        /// Constructor with default initializations
        tt__EFlip() : Mode() { }
        virtual ~tt__EFlip() { }
        /// Friend allocator used by soap_new_tt__EFlip(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1290 */
#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (597)
/* complex XML schema type 'tt:Reverse': */
class SOAP_CMAC tt__Reverse : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:ReverseMode'
        enum tt__ReverseMode Mode;
      public:
        /// Return unique type id SOAP_TYPE_tt__Reverse
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Reverse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Reverse, default initialized and not managed by a soap context
        virtual tt__Reverse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Reverse); }
      public:
        /// Constructor with default initializations
        tt__Reverse() : Mode() { }
        virtual ~tt__Reverse() { }
        /// Friend allocator used by soap_new_tt__Reverse(struct soap*, int)
        friend SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1292 */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (598)
/* complex XML schema type 'tt:PTZConfigurationOptions': */
class SOAP_CMAC tt__PTZConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Spaces' of XML schema type 'tt:PTZSpaces'
        tt__PTZSpaces *Spaces;
        /// Required element 'tt:PTZTimeout' of XML schema type 'tt:DurationRange'
        tt__DurationRange *PTZTimeout;
        /// Optional element 'tt:PTControlDirection' of XML schema type 'tt:PTControlDirectionOptions'
        tt__PTControlDirectionOptions *PTControlDirection;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZConfigurationOptions2'
        tt__PTZConfigurationOptions2 *Extension;
        /// Optional attribute 'PTZRamps' of XML schema type 'tt:IntList'
        char *PTZRamps;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZConfigurationOptions() : Spaces(), PTZTimeout(), PTControlDirection(), Extension(), PTZRamps() { }
        virtual ~tt__PTZConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1294 */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (599)
/* simple XML schema type 'tt:PTZConfigurationOptions2': */
class SOAP_CMAC tt__PTZConfigurationOptions2 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfigurationOptions2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfigurationOptions2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfigurationOptions2, default initialized and not managed by a soap context
        virtual tt__PTZConfigurationOptions2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfigurationOptions2); }
      public:
        /// Constructor with default initializations
        tt__PTZConfigurationOptions2() { }
        virtual ~tt__PTZConfigurationOptions2() { }
        /// Friend allocator used by soap_new_tt__PTZConfigurationOptions2(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1296 */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (600)
/* complex XML schema type 'tt:PTControlDirectionOptions': */
class SOAP_CMAC tt__PTControlDirectionOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:EFlip' of XML schema type 'tt:EFlipOptions'
        tt__EFlipOptions *EFlip;
        /// Optional element 'tt:Reverse' of XML schema type 'tt:ReverseOptions'
        tt__ReverseOptions *Reverse;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTControlDirectionOptionsExtension'
        tt__PTControlDirectionOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionOptions, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionOptions); }
      public:
        /// Constructor with default initializations
        tt__PTControlDirectionOptions() : EFlip(), Reverse(), Extension() { }
        virtual ~tt__PTControlDirectionOptions() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1298 */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (601)
/* simple XML schema type 'tt:PTControlDirectionOptionsExtension': */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTControlDirectionOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTControlDirectionOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTControlDirectionOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTControlDirectionOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTControlDirectionOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__PTControlDirectionOptionsExtension() { }
        virtual ~tt__PTControlDirectionOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTControlDirectionOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1300 */
#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (602)
/* complex XML schema type 'tt:EFlipOptions': */
class SOAP_CMAC tt__EFlipOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Mode' of XML schema type 'tt:EFlipMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__EFlipMode *Mode;
        /// Optional element 'tt:Extension' of XML schema type 'tt:EFlipOptionsExtension'
        tt__EFlipOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlipOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlipOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlipOptions, default initialized and not managed by a soap context
        virtual tt__EFlipOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlipOptions); }
      public:
        /// Constructor with default initializations
        tt__EFlipOptions() : __sizeMode(), Mode(), Extension() { }
        virtual ~tt__EFlipOptions() { }
        /// Friend allocator used by soap_new_tt__EFlipOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1302 */
#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (603)
/* simple XML schema type 'tt:EFlipOptionsExtension': */
class SOAP_CMAC tt__EFlipOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__EFlipOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EFlipOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EFlipOptionsExtension, default initialized and not managed by a soap context
        virtual tt__EFlipOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EFlipOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__EFlipOptionsExtension() { }
        virtual ~tt__EFlipOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__EFlipOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1304 */
#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (604)
/* complex XML schema type 'tt:ReverseOptions': */
class SOAP_CMAC tt__ReverseOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Mode' of XML schema type 'tt:ReverseMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__ReverseMode *Mode;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ReverseOptionsExtension'
        tt__ReverseOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReverseOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReverseOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReverseOptions, default initialized and not managed by a soap context
        virtual tt__ReverseOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReverseOptions); }
      public:
        /// Constructor with default initializations
        tt__ReverseOptions() : __sizeMode(), Mode(), Extension() { }
        virtual ~tt__ReverseOptions() { }
        /// Friend allocator used by soap_new_tt__ReverseOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1306 */
#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (605)
/* simple XML schema type 'tt:ReverseOptionsExtension': */
class SOAP_CMAC tt__ReverseOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ReverseOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReverseOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReverseOptionsExtension, default initialized and not managed by a soap context
        virtual tt__ReverseOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReverseOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__ReverseOptionsExtension() { }
        virtual ~tt__ReverseOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__ReverseOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1308 */
#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (606)
/* complex XML schema type 'tt:PanTiltLimits': */
class SOAP_CMAC tt__PanTiltLimits : public xsd__anyType {
      public:
        /// Required element 'tt:Range' of XML schema type 'tt:Space2DDescription'
        tt__Space2DDescription *Range;
      public:
        /// Return unique type id SOAP_TYPE_tt__PanTiltLimits
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PanTiltLimits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PanTiltLimits, default initialized and not managed by a soap context
        virtual tt__PanTiltLimits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PanTiltLimits); }
      public:
        /// Constructor with default initializations
        tt__PanTiltLimits() : Range() { }
        virtual ~tt__PanTiltLimits() { }
        /// Friend allocator used by soap_new_tt__PanTiltLimits(struct soap*, int)
        friend SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1310 */
#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (607)
/* complex XML schema type 'tt:ZoomLimits': */
class SOAP_CMAC tt__ZoomLimits : public xsd__anyType {
      public:
        /// Required element 'tt:Range' of XML schema type 'tt:Space1DDescription'
        tt__Space1DDescription *Range;
      public:
        /// Return unique type id SOAP_TYPE_tt__ZoomLimits
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ZoomLimits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ZoomLimits, default initialized and not managed by a soap context
        virtual tt__ZoomLimits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ZoomLimits); }
      public:
        /// Constructor with default initializations
        tt__ZoomLimits() : Range() { }
        virtual ~tt__ZoomLimits() { }
        /// Friend allocator used by soap_new_tt__ZoomLimits(struct soap*, int)
        friend SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1312 */
#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (608)
/* complex XML schema type 'tt:PTZSpaces': */
class SOAP_CMAC tt__PTZSpaces : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:AbsolutePanTiltPositionSpace' of XML schema type 'tt:Space2DDescription' stored in dynamic array AbsolutePanTiltPositionSpace of length __sizeAbsolutePanTiltPositionSpace
        int __sizeAbsolutePanTiltPositionSpace;
        tt__Space2DDescription **AbsolutePanTiltPositionSpace;
        /// Sequence of elements 'tt:AbsoluteZoomPositionSpace' of XML schema type 'tt:Space1DDescription' stored in dynamic array AbsoluteZoomPositionSpace of length __sizeAbsoluteZoomPositionSpace
        int __sizeAbsoluteZoomPositionSpace;
        tt__Space1DDescription **AbsoluteZoomPositionSpace;
        /// Sequence of elements 'tt:RelativePanTiltTranslationSpace' of XML schema type 'tt:Space2DDescription' stored in dynamic array RelativePanTiltTranslationSpace of length __sizeRelativePanTiltTranslationSpace
        int __sizeRelativePanTiltTranslationSpace;
        tt__Space2DDescription **RelativePanTiltTranslationSpace;
        /// Sequence of elements 'tt:RelativeZoomTranslationSpace' of XML schema type 'tt:Space1DDescription' stored in dynamic array RelativeZoomTranslationSpace of length __sizeRelativeZoomTranslationSpace
        int __sizeRelativeZoomTranslationSpace;
        tt__Space1DDescription **RelativeZoomTranslationSpace;
        /// Sequence of elements 'tt:ContinuousPanTiltVelocitySpace' of XML schema type 'tt:Space2DDescription' stored in dynamic array ContinuousPanTiltVelocitySpace of length __sizeContinuousPanTiltVelocitySpace
        int __sizeContinuousPanTiltVelocitySpace;
        tt__Space2DDescription **ContinuousPanTiltVelocitySpace;
        /// Sequence of elements 'tt:ContinuousZoomVelocitySpace' of XML schema type 'tt:Space1DDescription' stored in dynamic array ContinuousZoomVelocitySpace of length __sizeContinuousZoomVelocitySpace
        int __sizeContinuousZoomVelocitySpace;
        tt__Space1DDescription **ContinuousZoomVelocitySpace;
        /// Sequence of elements 'tt:PanTiltSpeedSpace' of XML schema type 'tt:Space1DDescription' stored in dynamic array PanTiltSpeedSpace of length __sizePanTiltSpeedSpace
        int __sizePanTiltSpeedSpace;
        tt__Space1DDescription **PanTiltSpeedSpace;
        /// Sequence of elements 'tt:ZoomSpeedSpace' of XML schema type 'tt:Space1DDescription' stored in dynamic array ZoomSpeedSpace of length __sizeZoomSpeedSpace
        int __sizeZoomSpeedSpace;
        tt__Space1DDescription **ZoomSpeedSpace;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZSpacesExtension'
        tt__PTZSpacesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpaces
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpaces, default initialized and not managed by a soap context
        virtual tt__PTZSpaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpaces); }
      public:
        /// Constructor with default initializations
        tt__PTZSpaces() : __sizeAbsolutePanTiltPositionSpace(), AbsolutePanTiltPositionSpace(), __sizeAbsoluteZoomPositionSpace(), AbsoluteZoomPositionSpace(), __sizeRelativePanTiltTranslationSpace(), RelativePanTiltTranslationSpace(), __sizeRelativeZoomTranslationSpace(), RelativeZoomTranslationSpace(), __sizeContinuousPanTiltVelocitySpace(), ContinuousPanTiltVelocitySpace(), __sizeContinuousZoomVelocitySpace(), ContinuousZoomVelocitySpace(), __sizePanTiltSpeedSpace(), PanTiltSpeedSpace(), __sizeZoomSpeedSpace(), ZoomSpeedSpace(), Extension() { }
        virtual ~tt__PTZSpaces() { }
        /// Friend allocator used by soap_new_tt__PTZSpaces(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1314 */
#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (609)
/* simple XML schema type 'tt:PTZSpacesExtension': */
class SOAP_CMAC tt__PTZSpacesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpacesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpacesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpacesExtension, default initialized and not managed by a soap context
        virtual tt__PTZSpacesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpacesExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZSpacesExtension() { }
        virtual ~tt__PTZSpacesExtension() { }
        /// Friend allocator used by soap_new_tt__PTZSpacesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1316 */
#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (610)
/* complex XML schema type 'tt:Space2DDescription': */
class SOAP_CMAC tt__Space2DDescription : public xsd__anyType {
      public:
        /// Required element 'tt:URI' of XML schema type 'xsd:anyURI'
        char *URI;
        /// Required element 'tt:XRange' of XML schema type 'tt:FloatRange'
        tt__FloatRange *XRange;
        /// Required element 'tt:YRange' of XML schema type 'tt:FloatRange'
        tt__FloatRange *YRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__Space2DDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Space2DDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Space2DDescription, default initialized and not managed by a soap context
        virtual tt__Space2DDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Space2DDescription); }
      public:
        /// Constructor with default initializations
        tt__Space2DDescription() : URI(), XRange(), YRange() { }
        virtual ~tt__Space2DDescription() { }
        /// Friend allocator used by soap_new_tt__Space2DDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1318 */
#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (611)
/* complex XML schema type 'tt:Space1DDescription': */
class SOAP_CMAC tt__Space1DDescription : public xsd__anyType {
      public:
        /// Required element 'tt:URI' of XML schema type 'xsd:anyURI'
        char *URI;
        /// Required element 'tt:XRange' of XML schema type 'tt:FloatRange'
        tt__FloatRange *XRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__Space1DDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Space1DDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Space1DDescription, default initialized and not managed by a soap context
        virtual tt__Space1DDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Space1DDescription); }
      public:
        /// Constructor with default initializations
        tt__Space1DDescription() : URI(), XRange() { }
        virtual ~tt__Space1DDescription() { }
        /// Friend allocator used by soap_new_tt__Space1DDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1320 */
#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (612)
/* complex XML schema type 'tt:PTZSpeed': */
class SOAP_CMAC tt__PTZSpeed : public xsd__anyType {
      public:
        /// Optional element 'tt:PanTilt' of XML schema type 'tt:Vector2D'
        tt__Vector2D *PanTilt;
        /// Optional element 'tt:Zoom' of XML schema type 'tt:Vector1D'
        tt__Vector1D *Zoom;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZSpeed
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZSpeed; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZSpeed, default initialized and not managed by a soap context
        virtual tt__PTZSpeed *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZSpeed); }
      public:
        /// Constructor with default initializations
        tt__PTZSpeed() : PanTilt(), Zoom() { }
        virtual ~tt__PTZSpeed() { }
        /// Friend allocator used by soap_new_tt__PTZSpeed(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1322 */
#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (613)
/* complex XML schema type 'tt:PTZPreset': */
class SOAP_CMAC tt__PTZPreset : public xsd__anyType {
      public:
        /// Optional element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Optional element 'tt:PTZPosition' of XML schema type 'tt:PTZVector'
        tt__PTZVector *PTZPosition;
        /// Optional attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPreset
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPreset, default initialized and not managed by a soap context
        virtual tt__PTZPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPreset); }
      public:
        /// Constructor with default initializations
        tt__PTZPreset() : Name(), PTZPosition(), token() { }
        virtual ~tt__PTZPreset() { }
        /// Friend allocator used by soap_new_tt__PTZPreset(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1324 */
#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (614)
/* complex XML schema type 'tt:PresetTour': */
class SOAP_CMAC tt__PresetTour : public xsd__anyType {
      public:
        /// Optional element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Required element 'tt:Status' of XML schema type 'tt:PTZPresetTourStatus'
        tt__PTZPresetTourStatus *Status;
        /// Required element 'tt:AutoStart' of XML schema type 'xsd:boolean'
        bool AutoStart;
        /// Required element 'tt:StartingCondition' of XML schema type 'tt:PTZPresetTourStartingCondition'
        tt__PTZPresetTourStartingCondition *StartingCondition;
        /// Sequence of elements 'tt:TourSpot' of XML schema type 'tt:PTZPresetTourSpot' stored in dynamic array TourSpot of length __sizeTourSpot
        int __sizeTourSpot;
        tt__PTZPresetTourSpot **TourSpot;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourExtension'
        tt__PTZPresetTourExtension *Extension;
        /// Optional attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tt__PresetTour
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PresetTour, default initialized and not managed by a soap context
        virtual tt__PresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PresetTour); }
      public:
        /// Constructor with default initializations
        tt__PresetTour() : Name(), Status(), AutoStart(), StartingCondition(), __sizeTourSpot(), TourSpot(), Extension(), token() { }
        virtual ~tt__PresetTour() { }
        /// Friend allocator used by soap_new_tt__PresetTour(struct soap*, int)
        friend SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1326 */
#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (615)
/* simple XML schema type 'tt:PTZPresetTourExtension': */
class SOAP_CMAC tt__PTZPresetTourExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourExtension() { }
        virtual ~tt__PTZPresetTourExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1328 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (616)
/* complex XML schema type 'tt:PTZPresetTourSpot': */
class SOAP_CMAC tt__PTZPresetTourSpot : public xsd__anyType {
      public:
        /// Required element 'tt:PresetDetail' of XML schema type 'tt:PTZPresetTourPresetDetail'
        tt__PTZPresetTourPresetDetail *PresetDetail;
        /// Optional element 'tt:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Optional element 'tt:StayTime' of XML schema type 'xsd:duration'
        char *StayTime;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourSpotExtension'
        tt__PTZPresetTourSpotExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpot
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpot, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpot); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourSpot() : PresetDetail(), Speed(), StayTime(), Extension() { }
        virtual ~tt__PTZPresetTourSpot() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpot(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1330 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (617)
/* simple XML schema type 'tt:PTZPresetTourSpotExtension': */
class SOAP_CMAC tt__PTZPresetTourSpotExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpotExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpotExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpotExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpotExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpotExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourSpotExtension() { }
        virtual ~tt__PTZPresetTourSpotExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpotExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17757 */
#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1724)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _tt__union_PTZPresetTourPresetDetail
{
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)	/**< union variant selector value for member PresetToken */
        char *PresetToken;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)	/**< union variant selector value for member Home */
        bool Home;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)	/**< union variant selector value for member PTZPosition */
        tt__PTZVector *PTZPosition;
        #define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)	/**< union variant selector value for member TypeExtension */
        tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

/* onvif.h:1332 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (618)
/* complex XML schema type 'tt:PTZPresetTourPresetDetail': */
class SOAP_CMAC tt__PTZPresetTourPresetDetail : public xsd__anyType {
      public:
        /// Union with union _tt__union_PTZPresetTourPresetDetail variant selector __union_PTZPresetTourPresetDetail set to one of: SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension
        int __union_PTZPresetTourPresetDetail;
        union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetail
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetail; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetail, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetail *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetail); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourPresetDetail() : __union_PTZPresetTourPresetDetail() { }
        virtual ~tt__PTZPresetTourPresetDetail() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetail(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1334 */
#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (619)
/* simple XML schema type 'tt:PTZPresetTourTypeExtension': */
class SOAP_CMAC tt__PTZPresetTourTypeExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourTypeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourTypeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourTypeExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourTypeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourTypeExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourTypeExtension() { }
        virtual ~tt__PTZPresetTourTypeExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourTypeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1336 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (620)
/* complex XML schema type 'tt:PTZPresetTourStatus': */
class SOAP_CMAC tt__PTZPresetTourStatus : public xsd__anyType {
      public:
        /// Required element 'tt:State' of XML schema type 'tt:PTZPresetTourState'
        enum tt__PTZPresetTourState State;
        /// Optional element 'tt:CurrentTourSpot' of XML schema type 'tt:PTZPresetTourSpot'
        tt__PTZPresetTourSpot *CurrentTourSpot;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourStatusExtension'
        tt__PTZPresetTourStatusExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStatus, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStatus); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStatus() : State(), CurrentTourSpot(), Extension() { }
        virtual ~tt__PTZPresetTourStatus() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1338 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (621)
/* simple XML schema type 'tt:PTZPresetTourStatusExtension': */
class SOAP_CMAC tt__PTZPresetTourStatusExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStatusExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStatusExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStatusExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStatusExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStatusExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStatusExtension() { }
        virtual ~tt__PTZPresetTourStatusExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStatusExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1340 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (622)
/* complex XML schema type 'tt:PTZPresetTourStartingCondition': */
class SOAP_CMAC tt__PTZPresetTourStartingCondition : public xsd__anyType {
      public:
        /// Optional element 'tt:RecurringTime' of XML schema type 'xsd:int'
        int *RecurringTime;
        /// Optional element 'tt:RecurringDuration' of XML schema type 'xsd:duration'
        char *RecurringDuration;
        /// Optional element 'tt:Direction' of XML schema type 'tt:PTZPresetTourDirection'
        enum tt__PTZPresetTourDirection *Direction;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourStartingConditionExtension'
        tt__PTZPresetTourStartingConditionExtension *Extension;
        /// Optional attribute 'RandomPresetOrder' of XML schema type 'xsd:boolean'
        bool *RandomPresetOrder;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingCondition
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingCondition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingCondition, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingCondition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingCondition); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStartingCondition() : RecurringTime(), RecurringDuration(), Direction(), Extension(), RandomPresetOrder() { }
        virtual ~tt__PTZPresetTourStartingCondition() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingCondition(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1342 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (623)
/* simple XML schema type 'tt:PTZPresetTourStartingConditionExtension': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStartingConditionExtension() { }
        virtual ~tt__PTZPresetTourStartingConditionExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1344 */
#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (624)
/* complex XML schema type 'tt:PTZPresetTourOptions': */
class SOAP_CMAC tt__PTZPresetTourOptions : public xsd__anyType {
      public:
        /// Required element 'tt:AutoStart' of XML schema type 'xsd:boolean'
        bool AutoStart;
        /// Required element 'tt:StartingCondition' of XML schema type 'tt:PTZPresetTourStartingConditionOptions'
        tt__PTZPresetTourStartingConditionOptions *StartingCondition;
        /// Required element 'tt:TourSpot' of XML schema type 'tt:PTZPresetTourSpotOptions'
        tt__PTZPresetTourSpotOptions *TourSpot;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourOptions() : AutoStart(), StartingCondition(), TourSpot() { }
        virtual ~tt__PTZPresetTourOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1346 */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (625)
/* complex XML schema type 'tt:PTZPresetTourSpotOptions': */
class SOAP_CMAC tt__PTZPresetTourSpotOptions : public xsd__anyType {
      public:
        /// Required element 'tt:PresetDetail' of XML schema type 'tt:PTZPresetTourPresetDetailOptions'
        tt__PTZPresetTourPresetDetailOptions *PresetDetail;
        /// Required element 'tt:StayTime' of XML schema type 'tt:DurationRange'
        tt__DurationRange *StayTime;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourSpotOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourSpotOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourSpotOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourSpotOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourSpotOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourSpotOptions() : PresetDetail(), StayTime() { }
        virtual ~tt__PTZPresetTourSpotOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourSpotOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1348 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (626)
/* complex XML schema type 'tt:PTZPresetTourPresetDetailOptions': */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:PresetToken' of XML schema type 'tt:ReferenceToken' stored in dynamic array PresetToken of length __sizePresetToken
        int __sizePresetToken;
        char **PresetToken;
        /// Optional element 'tt:Home' of XML schema type 'xsd:boolean'
        bool *Home;
        /// Optional element 'tt:PanTiltPositionSpace' of XML schema type 'tt:Space2DDescription'
        tt__Space2DDescription *PanTiltPositionSpace;
        /// Optional element 'tt:ZoomPositionSpace' of XML schema type 'tt:Space1DDescription'
        tt__Space1DDescription *ZoomPositionSpace;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourPresetDetailOptionsExtension'
        tt__PTZPresetTourPresetDetailOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetailOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetailOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetailOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourPresetDetailOptions() : __sizePresetToken(), PresetToken(), Home(), PanTiltPositionSpace(), ZoomPositionSpace(), Extension() { }
        virtual ~tt__PTZPresetTourPresetDetailOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1350 */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (627)
/* simple XML schema type 'tt:PTZPresetTourPresetDetailOptionsExtension': */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourPresetDetailOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourPresetDetailOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourPresetDetailOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourPresetDetailOptionsExtension() { }
        virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1352 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (628)
/* complex XML schema type 'tt:PTZPresetTourStartingConditionOptions': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:RecurringTime' of XML schema type 'tt:IntRange'
        tt__IntRange *RecurringTime;
        /// Optional element 'tt:RecurringDuration' of XML schema type 'tt:DurationRange'
        tt__DurationRange *RecurringDuration;
        /// Sequence of elements 'tt:Direction' of XML schema type 'tt:PTZPresetTourDirection' stored in dynamic array Direction of length __sizeDirection
        int __sizeDirection;
        enum tt__PTZPresetTourDirection *Direction;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZPresetTourStartingConditionOptionsExtension'
        tt__PTZPresetTourStartingConditionOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionOptions, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionOptions); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStartingConditionOptions() : RecurringTime(), RecurringDuration(), __sizeDirection(), Direction(), Extension() { }
        virtual ~tt__PTZPresetTourStartingConditionOptions() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1354 */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (629)
/* simple XML schema type 'tt:PTZPresetTourStartingConditionOptionsExtension': */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPresetTourStartingConditionOptionsExtension, default initialized and not managed by a soap context
        virtual tt__PTZPresetTourStartingConditionOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPresetTourStartingConditionOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__PTZPresetTourStartingConditionOptionsExtension() { }
        virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1356 */
#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (630)
/* Type tt__ImagingStatus is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ImagingStatus': */
class SOAP_CMAC tt__ImagingStatus : public xsd__anyType {
      public:
        /// Required element 'tt:FocusStatus' of XML schema type 'tt:FocusStatus'
        tt__FocusStatus *FocusStatus;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus, default initialized and not managed by a soap context
        virtual tt__ImagingStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus); }
      public:
        /// Constructor with default initializations
        tt__ImagingStatus() : FocusStatus() { }
        virtual ~tt__ImagingStatus() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1358 */
#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (631)
/* Type tt__FocusStatus is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FocusStatus': */
class SOAP_CMAC tt__FocusStatus : public xsd__anyType {
      public:
        /// Required element 'tt:Position' of XML schema type 'xsd:float'
        float Position;
        /// Required element 'tt:MoveStatus' of XML schema type 'tt:MoveStatus'
        enum tt__MoveStatus MoveStatus;
        /// Required element 'tt:Error' of XML schema type 'xsd:string'
        char *Error;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus, default initialized and not managed by a soap context
        virtual tt__FocusStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus); }
      public:
        /// Constructor with default initializations
        tt__FocusStatus() : Position(), MoveStatus(), Error() { }
        virtual ~tt__FocusStatus() { }
        /// Friend allocator used by soap_new_tt__FocusStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus * SOAP_FMAC2 soap_instantiate_tt__FocusStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1360 */
#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (632)
/* complex XML schema type 'tt:FocusConfiguration': */
class SOAP_CMAC tt__FocusConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:AutoFocusMode' of XML schema type 'tt:AutoFocusMode'
        enum tt__AutoFocusMode AutoFocusMode;
        /// Required element 'tt:DefaultSpeed' of XML schema type 'xsd:float'
        float DefaultSpeed;
        /// Required element 'tt:NearLimit' of XML schema type 'xsd:float'
        float NearLimit;
        /// Required element 'tt:FarLimit' of XML schema type 'xsd:float'
        float FarLimit;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration); }
      public:
        /// Constructor with default initializations
        tt__FocusConfiguration() : AutoFocusMode(), DefaultSpeed(), NearLimit(), FarLimit() { }
        virtual ~tt__FocusConfiguration() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1362 */
#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (633)
/* complex XML schema type 'tt:ImagingSettings': */
class SOAP_CMAC tt__ImagingSettings : public xsd__anyType {
      public:
        /// Optional element 'tt:BacklightCompensation' of XML schema type 'tt:BacklightCompensation'
        tt__BacklightCompensation *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XML schema type 'xsd:float'
        float *Brightness;
        /// Optional element 'tt:ColorSaturation' of XML schema type 'xsd:float'
        float *ColorSaturation;
        /// Optional element 'tt:Contrast' of XML schema type 'xsd:float'
        float *Contrast;
        /// Optional element 'tt:Exposure' of XML schema type 'tt:Exposure'
        tt__Exposure *Exposure;
        /// Optional element 'tt:Focus' of XML schema type 'tt:FocusConfiguration'
        tt__FocusConfiguration *Focus;
        /// Optional element 'tt:IrCutFilter' of XML schema type 'tt:IrCutFilterMode'
        enum tt__IrCutFilterMode *IrCutFilter;
        /// Optional element 'tt:Sharpness' of XML schema type 'xsd:float'
        float *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XML schema type 'tt:WideDynamicRange'
        tt__WideDynamicRange *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XML schema type 'tt:WhiteBalance'
        tt__WhiteBalance *WhiteBalance;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingSettingsExtension'
        tt__ImagingSettingsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettings
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettings, default initialized and not managed by a soap context
        virtual tt__ImagingSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettings); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettings() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilter(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension() { }
        virtual ~tt__ImagingSettings() { }
        /// Friend allocator used by soap_new_tt__ImagingSettings(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettings * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1364 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (634)
/* simple XML schema type 'tt:ImagingSettingsExtension': */
class SOAP_CMAC tt__ImagingSettingsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettingsExtension() { }
        virtual ~tt__ImagingSettingsExtension() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1366 */
#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (635)
/* complex XML schema type 'tt:Exposure': */
class SOAP_CMAC tt__Exposure : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:ExposureMode'
        enum tt__ExposureMode Mode;
        /// Required element 'tt:Priority' of XML schema type 'tt:ExposurePriority'
        enum tt__ExposurePriority Priority;
        /// Required element 'tt:Window' of XML schema type 'tt:Rectangle'
        tt__Rectangle *Window;
        /// Required element 'tt:MinExposureTime' of XML schema type 'xsd:float'
        float MinExposureTime;
        /// Required element 'tt:MaxExposureTime' of XML schema type 'xsd:float'
        float MaxExposureTime;
        /// Required element 'tt:MinGain' of XML schema type 'xsd:float'
        float MinGain;
        /// Required element 'tt:MaxGain' of XML schema type 'xsd:float'
        float MaxGain;
        /// Required element 'tt:MinIris' of XML schema type 'xsd:float'
        float MinIris;
        /// Required element 'tt:MaxIris' of XML schema type 'xsd:float'
        float MaxIris;
        /// Required element 'tt:ExposureTime' of XML schema type 'xsd:float'
        float ExposureTime;
        /// Required element 'tt:Gain' of XML schema type 'xsd:float'
        float Gain;
        /// Required element 'tt:Iris' of XML schema type 'xsd:float'
        float Iris;
      public:
        /// Return unique type id SOAP_TYPE_tt__Exposure
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Exposure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Exposure, default initialized and not managed by a soap context
        virtual tt__Exposure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Exposure); }
      public:
        /// Constructor with default initializations
        tt__Exposure() : Mode(), Priority(), Window(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris() { }
        virtual ~tt__Exposure() { }
        /// Friend allocator used by soap_new_tt__Exposure(struct soap*, int)
        friend SOAP_FMAC1 tt__Exposure * SOAP_FMAC2 soap_instantiate_tt__Exposure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1368 */
#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (636)
/* complex XML schema type 'tt:WideDynamicRange': */
class SOAP_CMAC tt__WideDynamicRange : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:WideDynamicMode'
        enum tt__WideDynamicMode Mode;
        /// Required element 'tt:Level' of XML schema type 'xsd:float'
        float Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRange, default initialized and not managed by a soap context
        virtual tt__WideDynamicRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRange); }
      public:
        /// Constructor with default initializations
        tt__WideDynamicRange() : Mode(), Level() { }
        virtual ~tt__WideDynamicRange() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRange(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRange * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1370 */
#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (637)
/* complex XML schema type 'tt:BacklightCompensation': */
class SOAP_CMAC tt__BacklightCompensation : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:BacklightCompensationMode'
        enum tt__BacklightCompensationMode Mode;
        /// Required element 'tt:Level' of XML schema type 'xsd:float'
        float Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensation, default initialized and not managed by a soap context
        virtual tt__BacklightCompensation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensation); }
      public:
        /// Constructor with default initializations
        tt__BacklightCompensation() : Mode(), Level() { }
        virtual ~tt__BacklightCompensation() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensation(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensation * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1372 */
#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (638)
/* Type tt__ImagingOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ImagingOptions': */
class SOAP_CMAC tt__ImagingOptions : public xsd__anyType {
      public:
        /// Required element 'tt:BacklightCompensation' of XML schema type 'tt:BacklightCompensationOptions'
        tt__BacklightCompensationOptions *BacklightCompensation;
        /// Required element 'tt:Brightness' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Brightness;
        /// Required element 'tt:ColorSaturation' of XML schema type 'tt:FloatRange'
        tt__FloatRange *ColorSaturation;
        /// Required element 'tt:Contrast' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Contrast;
        /// Required element 'tt:Exposure' of XML schema type 'tt:ExposureOptions'
        tt__ExposureOptions *Exposure;
        /// Required element 'tt:Focus' of XML schema type 'tt:FocusOptions'
        tt__FocusOptions *Focus;
        /// Sequence of at least 1 elements 'tt:IrCutFilterModes' of XML schema type 'tt:IrCutFilterMode' stored in dynamic array IrCutFilterModes of length __sizeIrCutFilterModes
        int __sizeIrCutFilterModes;
        enum tt__IrCutFilterMode *IrCutFilterModes;
        /// Required element 'tt:Sharpness' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Sharpness;
        /// Required element 'tt:WideDynamicRange' of XML schema type 'tt:WideDynamicRangeOptions'
        tt__WideDynamicRangeOptions *WideDynamicRange;
        /// Required element 'tt:WhiteBalance' of XML schema type 'tt:WhiteBalanceOptions'
        tt__WhiteBalanceOptions *WhiteBalance;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions, default initialized and not managed by a soap context
        virtual tt__ImagingOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), __sizeIrCutFilterModes(), IrCutFilterModes(), Sharpness(), WideDynamicRange(), WhiteBalance() { }
        virtual ~tt__ImagingOptions() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1374 */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (639)
/* Type tt__WideDynamicRangeOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:WideDynamicRangeOptions': */
class SOAP_CMAC tt__WideDynamicRangeOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:WideDynamicMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__WideDynamicMode *Mode;
        /// Required element 'tt:Level' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRangeOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRangeOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRangeOptions, default initialized and not managed by a soap context
        virtual tt__WideDynamicRangeOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRangeOptions); }
      public:
        /// Constructor with default initializations
        tt__WideDynamicRangeOptions() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__WideDynamicRangeOptions() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRangeOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRangeOptions * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1376 */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (640)
/* Type tt__BacklightCompensationOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:BacklightCompensationOptions': */
class SOAP_CMAC tt__BacklightCompensationOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:WideDynamicMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__WideDynamicMode *Mode;
        /// Required element 'tt:Level' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensationOptions, default initialized and not managed by a soap context
        virtual tt__BacklightCompensationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensationOptions); }
      public:
        /// Constructor with default initializations
        tt__BacklightCompensationOptions() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__BacklightCompensationOptions() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1378 */
#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (641)
/* Type tt__FocusOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FocusOptions': */
class SOAP_CMAC tt__FocusOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:AutoFocusModes' of XML schema type 'tt:AutoFocusMode' stored in dynamic array AutoFocusModes of length __sizeAutoFocusModes
        int __sizeAutoFocusModes;
        enum tt__AutoFocusMode *AutoFocusModes;
        /// Required element 'tt:DefaultSpeed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *DefaultSpeed;
        /// Required element 'tt:NearLimit' of XML schema type 'tt:FloatRange'
        tt__FloatRange *NearLimit;
        /// Required element 'tt:FarLimit' of XML schema type 'tt:FloatRange'
        tt__FloatRange *FarLimit;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions, default initialized and not managed by a soap context
        virtual tt__FocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions); }
      public:
        /// Constructor with default initializations
        tt__FocusOptions() : __sizeAutoFocusModes(), AutoFocusModes(), DefaultSpeed(), NearLimit(), FarLimit() { }
        virtual ~tt__FocusOptions() { }
        /// Friend allocator used by soap_new_tt__FocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions * SOAP_FMAC2 soap_instantiate_tt__FocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1380 */
#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (642)
/* Type tt__ExposureOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ExposureOptions': */
class SOAP_CMAC tt__ExposureOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:ExposureMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__ExposureMode *Mode;
        /// Sequence of at least 1 elements 'tt:Priority' of XML schema type 'tt:ExposurePriority' stored in dynamic array Priority of length __sizePriority
        int __sizePriority;
        enum tt__ExposurePriority *Priority;
        /// Required element 'tt:MinExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinExposureTime;
        /// Required element 'tt:MaxExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxExposureTime;
        /// Required element 'tt:MinGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinGain;
        /// Required element 'tt:MaxGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxGain;
        /// Required element 'tt:MinIris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinIris;
        /// Required element 'tt:MaxIris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxIris;
        /// Required element 'tt:ExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *ExposureTime;
        /// Required element 'tt:Gain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Gain;
        /// Required element 'tt:Iris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Iris;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposureOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposureOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposureOptions, default initialized and not managed by a soap context
        virtual tt__ExposureOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposureOptions); }
      public:
        /// Constructor with default initializations
        tt__ExposureOptions() : __sizeMode(), Mode(), __sizePriority(), Priority(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris() { }
        virtual ~tt__ExposureOptions() { }
        /// Friend allocator used by soap_new_tt__ExposureOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposureOptions * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1382 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (643)
/* Type tt__WhiteBalanceOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:WhiteBalanceOptions': */
class SOAP_CMAC tt__WhiteBalanceOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:WhiteBalanceMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__WhiteBalanceMode *Mode;
        /// Required element 'tt:YrGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *YrGain;
        /// Required element 'tt:YbGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *YbGain;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalanceOptions() : __sizeMode(), Mode(), YrGain(), YbGain() { }
        virtual ~tt__WhiteBalanceOptions() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1384 */
#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (644)
/* complex XML schema type 'tt:FocusMove': */
class SOAP_CMAC tt__FocusMove : public xsd__anyType {
      public:
        /// Optional element 'tt:Absolute' of XML schema type 'tt:AbsoluteFocus'
        tt__AbsoluteFocus *Absolute;
        /// Optional element 'tt:Relative' of XML schema type 'tt:RelativeFocus'
        tt__RelativeFocus *Relative;
        /// Optional element 'tt:Continuous' of XML schema type 'tt:ContinuousFocus'
        tt__ContinuousFocus *Continuous;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusMove
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusMove, default initialized and not managed by a soap context
        virtual tt__FocusMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusMove); }
      public:
        /// Constructor with default initializations
        tt__FocusMove() : Absolute(), Relative(), Continuous() { }
        virtual ~tt__FocusMove() { }
        /// Friend allocator used by soap_new_tt__FocusMove(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusMove * SOAP_FMAC2 soap_instantiate_tt__FocusMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1386 */
#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (645)
/* complex XML schema type 'tt:AbsoluteFocus': */
class SOAP_CMAC tt__AbsoluteFocus : public xsd__anyType {
      public:
        /// Required element 'tt:Position' of XML schema type 'xsd:float'
        float Position;
        /// Optional element 'tt:Speed' of XML schema type 'xsd:float'
        float *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__AbsoluteFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AbsoluteFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AbsoluteFocus, default initialized and not managed by a soap context
        virtual tt__AbsoluteFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AbsoluteFocus); }
      public:
        /// Constructor with default initializations
        tt__AbsoluteFocus() : Position(), Speed() { }
        virtual ~tt__AbsoluteFocus() { }
        /// Friend allocator used by soap_new_tt__AbsoluteFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__AbsoluteFocus * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1388 */
#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (646)
/* complex XML schema type 'tt:RelativeFocus': */
class SOAP_CMAC tt__RelativeFocus : public xsd__anyType {
      public:
        /// Required element 'tt:Distance' of XML schema type 'xsd:float'
        float Distance;
        /// Optional element 'tt:Speed' of XML schema type 'xsd:float'
        float *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocus, default initialized and not managed by a soap context
        virtual tt__RelativeFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocus); }
      public:
        /// Constructor with default initializations
        tt__RelativeFocus() : Distance(), Speed() { }
        virtual ~tt__RelativeFocus() { }
        /// Friend allocator used by soap_new_tt__RelativeFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocus * SOAP_FMAC2 soap_instantiate_tt__RelativeFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1390 */
#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (647)
/* complex XML schema type 'tt:ContinuousFocus': */
class SOAP_CMAC tt__ContinuousFocus : public xsd__anyType {
      public:
        /// Required element 'tt:Speed' of XML schema type 'xsd:float'
        float Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__ContinuousFocus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ContinuousFocus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ContinuousFocus, default initialized and not managed by a soap context
        virtual tt__ContinuousFocus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ContinuousFocus); }
      public:
        /// Constructor with default initializations
        tt__ContinuousFocus() : Speed() { }
        virtual ~tt__ContinuousFocus() { }
        /// Friend allocator used by soap_new_tt__ContinuousFocus(struct soap*, int)
        friend SOAP_FMAC1 tt__ContinuousFocus * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1392 */
#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (648)
/* Type tt__MoveOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MoveOptions': */
class SOAP_CMAC tt__MoveOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:Absolute' of XML schema type 'tt:AbsoluteFocusOptions'
        tt__AbsoluteFocusOptions *Absolute;
        /// Optional element 'tt:Relative' of XML schema type 'tt:RelativeFocusOptions'
        tt__RelativeFocusOptions *Relative;
        /// Optional element 'tt:Continuous' of XML schema type 'tt:ContinuousFocusOptions'
        tt__ContinuousFocusOptions *Continuous;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveOptions, default initialized and not managed by a soap context
        virtual tt__MoveOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveOptions); }
      public:
        /// Constructor with default initializations
        tt__MoveOptions() : Absolute(), Relative(), Continuous() { }
        virtual ~tt__MoveOptions() { }
        /// Friend allocator used by soap_new_tt__MoveOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveOptions * SOAP_FMAC2 soap_instantiate_tt__MoveOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1394 */
#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (649)
/* complex XML schema type 'tt:AbsoluteFocusOptions': */
class SOAP_CMAC tt__AbsoluteFocusOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Position' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Position;
        /// Optional element 'tt:Speed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__AbsoluteFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AbsoluteFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AbsoluteFocusOptions, default initialized and not managed by a soap context
        virtual tt__AbsoluteFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AbsoluteFocusOptions); }
      public:
        /// Constructor with default initializations
        tt__AbsoluteFocusOptions() : Position(), Speed() { }
        virtual ~tt__AbsoluteFocusOptions() { }
        /// Friend allocator used by soap_new_tt__AbsoluteFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__AbsoluteFocusOptions * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1396 */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (650)
/* Type tt__RelativeFocusOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RelativeFocusOptions': */
class SOAP_CMAC tt__RelativeFocusOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Distance' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Distance;
        /// Required element 'tt:Speed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocusOptions, default initialized and not managed by a soap context
        virtual tt__RelativeFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocusOptions); }
      public:
        /// Constructor with default initializations
        tt__RelativeFocusOptions() : Distance(), Speed() { }
        virtual ~tt__RelativeFocusOptions() { }
        /// Friend allocator used by soap_new_tt__RelativeFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocusOptions * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1398 */
#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (651)
/* complex XML schema type 'tt:ContinuousFocusOptions': */
class SOAP_CMAC tt__ContinuousFocusOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Speed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__ContinuousFocusOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ContinuousFocusOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ContinuousFocusOptions, default initialized and not managed by a soap context
        virtual tt__ContinuousFocusOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ContinuousFocusOptions); }
      public:
        /// Constructor with default initializations
        tt__ContinuousFocusOptions() : Speed() { }
        virtual ~tt__ContinuousFocusOptions() { }
        /// Friend allocator used by soap_new_tt__ContinuousFocusOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ContinuousFocusOptions * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocusOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1400 */
#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (652)
/* complex XML schema type 'tt:WhiteBalance': */
class SOAP_CMAC tt__WhiteBalance : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:WhiteBalanceMode'
        enum tt__WhiteBalanceMode Mode;
        /// Required element 'tt:CrGain' of XML schema type 'xsd:float'
        float CrGain;
        /// Required element 'tt:CbGain' of XML schema type 'xsd:float'
        float CbGain;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance, default initialized and not managed by a soap context
        virtual tt__WhiteBalance *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalance() : Mode(), CrGain(), CbGain() { }
        virtual ~tt__WhiteBalance() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1402 */
#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (653)
/* complex XML schema type 'tt:ImagingStatus20': */
class SOAP_CMAC tt__ImagingStatus20 : public xsd__anyType {
      public:
        /// Optional element 'tt:FocusStatus20' of XML schema type 'tt:FocusStatus20'
        tt__FocusStatus20 *FocusStatus20;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingStatus20Extension'
        tt__ImagingStatus20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus20, default initialized and not managed by a soap context
        virtual tt__ImagingStatus20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus20); }
      public:
        /// Constructor with default initializations
        tt__ImagingStatus20() : FocusStatus20(), Extension() { }
        virtual ~tt__ImagingStatus20() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus20 * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1404 */
#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (654)
/* simple XML schema type 'tt:ImagingStatus20Extension': */
class SOAP_CMAC tt__ImagingStatus20Extension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingStatus20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingStatus20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingStatus20Extension, default initialized and not managed by a soap context
        virtual tt__ImagingStatus20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingStatus20Extension); }
      public:
        /// Constructor with default initializations
        tt__ImagingStatus20Extension() { }
        virtual ~tt__ImagingStatus20Extension() { }
        /// Friend allocator used by soap_new_tt__ImagingStatus20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1406 */
#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (655)
/* complex XML schema type 'tt:FocusStatus20': */
class SOAP_CMAC tt__FocusStatus20 : public xsd__anyType {
      public:
        /// Required element 'tt:Position' of XML schema type 'xsd:float'
        float Position;
        /// Required element 'tt:MoveStatus' of XML schema type 'tt:MoveStatus'
        enum tt__MoveStatus MoveStatus;
        /// Optional element 'tt:Error' of XML schema type 'xsd:string'
        char *Error;
        /// Optional element 'tt:Extension' of XML schema type 'tt:FocusStatus20Extension'
        tt__FocusStatus20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus20, default initialized and not managed by a soap context
        virtual tt__FocusStatus20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus20); }
      public:
        /// Constructor with default initializations
        tt__FocusStatus20() : Position(), MoveStatus(), Error(), Extension() { }
        virtual ~tt__FocusStatus20() { }
        /// Friend allocator used by soap_new_tt__FocusStatus20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus20 * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1408 */
#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (656)
/* simple XML schema type 'tt:FocusStatus20Extension': */
class SOAP_CMAC tt__FocusStatus20Extension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusStatus20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusStatus20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusStatus20Extension, default initialized and not managed by a soap context
        virtual tt__FocusStatus20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusStatus20Extension); }
      public:
        /// Constructor with default initializations
        tt__FocusStatus20Extension() { }
        virtual ~tt__FocusStatus20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusStatus20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1410 */
#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (657)
/* complex XML schema type 'tt:ImagingSettings20': */
class SOAP_CMAC tt__ImagingSettings20 : public xsd__anyType {
      public:
        /// Optional element 'tt:BacklightCompensation' of XML schema type 'tt:BacklightCompensation20'
        tt__BacklightCompensation20 *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XML schema type 'xsd:float'
        float *Brightness;
        /// Optional element 'tt:ColorSaturation' of XML schema type 'xsd:float'
        float *ColorSaturation;
        /// Optional element 'tt:Contrast' of XML schema type 'xsd:float'
        float *Contrast;
        /// Optional element 'tt:Exposure' of XML schema type 'tt:Exposure20'
        tt__Exposure20 *Exposure;
        /// Optional element 'tt:Focus' of XML schema type 'tt:FocusConfiguration20'
        tt__FocusConfiguration20 *Focus;
        /// Optional element 'tt:IrCutFilter' of XML schema type 'tt:IrCutFilterMode'
        enum tt__IrCutFilterMode *IrCutFilter;
        /// Optional element 'tt:Sharpness' of XML schema type 'xsd:float'
        float *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XML schema type 'tt:WideDynamicRange20'
        tt__WideDynamicRange20 *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XML schema type 'tt:WhiteBalance20'
        tt__WhiteBalance20 *WhiteBalance;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingSettingsExtension20'
        tt__ImagingSettingsExtension20 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettings20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettings20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettings20, default initialized and not managed by a soap context
        virtual tt__ImagingSettings20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettings20); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettings20() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), IrCutFilter(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension() { }
        virtual ~tt__ImagingSettings20() { }
        /// Friend allocator used by soap_new_tt__ImagingSettings20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1412 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (658)
/* complex XML schema type 'tt:ImagingSettingsExtension20': */
class SOAP_CMAC tt__ImagingSettingsExtension20 : public xsd__anyType {
      public:
        /// Optional element 'tt:ImageStabilization' of XML schema type 'tt:ImageStabilization'
        tt__ImageStabilization *ImageStabilization;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingSettingsExtension202'
        tt__ImagingSettingsExtension202 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension20, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension20); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettingsExtension20() : ImageStabilization(), Extension() { }
        virtual ~tt__ImagingSettingsExtension20() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1414 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (659)
/* complex XML schema type 'tt:ImagingSettingsExtension202': */
class SOAP_CMAC tt__ImagingSettingsExtension202 : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:IrCutFilterAutoAdjustment' of XML schema type 'tt:IrCutFilterAutoAdjustment' stored in dynamic array IrCutFilterAutoAdjustment of length __sizeIrCutFilterAutoAdjustment
        int __sizeIrCutFilterAutoAdjustment;
        tt__IrCutFilterAutoAdjustment **IrCutFilterAutoAdjustment;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingSettingsExtension203'
        tt__ImagingSettingsExtension203 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension202
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension202; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension202, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension202 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension202); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettingsExtension202() : __sizeIrCutFilterAutoAdjustment(), IrCutFilterAutoAdjustment(), Extension() { }
        virtual ~tt__ImagingSettingsExtension202() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension202(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1416 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (660)
/* complex XML schema type 'tt:ImagingSettingsExtension203': */
class SOAP_CMAC tt__ImagingSettingsExtension203 : public xsd__anyType {
      public:
        /// Optional element 'tt:ToneCompensation' of XML schema type 'tt:ToneCompensation'
        tt__ToneCompensation *ToneCompensation;
        /// Optional element 'tt:Defogging' of XML schema type 'tt:Defogging'
        tt__Defogging *Defogging;
        /// Optional element 'tt:NoiseReduction' of XML schema type 'tt:NoiseReduction'
        tt__NoiseReduction *NoiseReduction;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingSettingsExtension204'
        tt__ImagingSettingsExtension204 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension203
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension203; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension203, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension203 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension203); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettingsExtension203() : ToneCompensation(), Defogging(), NoiseReduction(), Extension() { }
        virtual ~tt__ImagingSettingsExtension203() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension203(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1418 */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (661)
/* simple XML schema type 'tt:ImagingSettingsExtension204': */
class SOAP_CMAC tt__ImagingSettingsExtension204 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingSettingsExtension204
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingSettingsExtension204; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingSettingsExtension204, default initialized and not managed by a soap context
        virtual tt__ImagingSettingsExtension204 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingSettingsExtension204); }
      public:
        /// Constructor with default initializations
        tt__ImagingSettingsExtension204() { }
        virtual ~tt__ImagingSettingsExtension204() { }
        /// Friend allocator used by soap_new_tt__ImagingSettingsExtension204(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1420 */
#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (662)
/* complex XML schema type 'tt:ImageStabilization': */
class SOAP_CMAC tt__ImageStabilization : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:ImageStabilizationMode'
        enum tt__ImageStabilizationMode Mode;
        /// Optional element 'tt:Level' of XML schema type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImageStabilizationExtension'
        tt__ImageStabilizationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilization
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilization; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilization, default initialized and not managed by a soap context
        virtual tt__ImageStabilization *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilization); }
      public:
        /// Constructor with default initializations
        tt__ImageStabilization() : Mode(), Level(), Extension() { }
        virtual ~tt__ImageStabilization() { }
        /// Friend allocator used by soap_new_tt__ImageStabilization(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilization * SOAP_FMAC2 soap_instantiate_tt__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1422 */
#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (663)
/* simple XML schema type 'tt:ImageStabilizationExtension': */
class SOAP_CMAC tt__ImageStabilizationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationExtension, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationExtension); }
      public:
        /// Constructor with default initializations
        tt__ImageStabilizationExtension() { }
        virtual ~tt__ImageStabilizationExtension() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1424 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (664)
/* complex XML schema type 'tt:IrCutFilterAutoAdjustment': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustment : public xsd__anyType {
      public:
        /// Required element 'tt:BoundaryType' of XML schema type 'xsd:string'
        char *BoundaryType;
        /// Optional element 'tt:BoundaryOffset' of XML schema type 'xsd:float'
        float *BoundaryOffset;
        /// Optional element 'tt:ResponseTime' of XML schema type 'xsd:duration'
        char *ResponseTime;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IrCutFilterAutoAdjustmentExtension'
        tt__IrCutFilterAutoAdjustmentExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustment
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustment, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustment); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterAutoAdjustment() : BoundaryType(), BoundaryOffset(), ResponseTime(), Extension() { }
        virtual ~tt__IrCutFilterAutoAdjustment() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustment(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1426 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (665)
/* simple XML schema type 'tt:IrCutFilterAutoAdjustmentExtension': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentExtension, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentExtension); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterAutoAdjustmentExtension() { }
        virtual ~tt__IrCutFilterAutoAdjustmentExtension() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1428 */
#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (666)
/* complex XML schema type 'tt:WideDynamicRange20': */
class SOAP_CMAC tt__WideDynamicRange20 : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:WideDynamicMode'
        enum tt__WideDynamicMode Mode;
        /// Optional element 'tt:Level' of XML schema type 'xsd:float'
        float *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRange20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRange20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRange20, default initialized and not managed by a soap context
        virtual tt__WideDynamicRange20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRange20); }
      public:
        /// Constructor with default initializations
        tt__WideDynamicRange20() : Mode(), Level() { }
        virtual ~tt__WideDynamicRange20() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRange20(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1430 */
#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (667)
/* complex XML schema type 'tt:BacklightCompensation20': */
class SOAP_CMAC tt__BacklightCompensation20 : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:BacklightCompensationMode'
        enum tt__BacklightCompensationMode Mode;
        /// Optional element 'tt:Level' of XML schema type 'xsd:float'
        float *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensation20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensation20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensation20, default initialized and not managed by a soap context
        virtual tt__BacklightCompensation20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensation20); }
      public:
        /// Constructor with default initializations
        tt__BacklightCompensation20() : Mode(), Level() { }
        virtual ~tt__BacklightCompensation20() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensation20(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1432 */
#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (668)
/* complex XML schema type 'tt:Exposure20': */
class SOAP_CMAC tt__Exposure20 : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:ExposureMode'
        enum tt__ExposureMode Mode;
        /// Optional element 'tt:Priority' of XML schema type 'tt:ExposurePriority'
        enum tt__ExposurePriority *Priority;
        /// Optional element 'tt:Window' of XML schema type 'tt:Rectangle'
        tt__Rectangle *Window;
        /// Optional element 'tt:MinExposureTime' of XML schema type 'xsd:float'
        float *MinExposureTime;
        /// Optional element 'tt:MaxExposureTime' of XML schema type 'xsd:float'
        float *MaxExposureTime;
        /// Optional element 'tt:MinGain' of XML schema type 'xsd:float'
        float *MinGain;
        /// Optional element 'tt:MaxGain' of XML schema type 'xsd:float'
        float *MaxGain;
        /// Optional element 'tt:MinIris' of XML schema type 'xsd:float'
        float *MinIris;
        /// Optional element 'tt:MaxIris' of XML schema type 'xsd:float'
        float *MaxIris;
        /// Optional element 'tt:ExposureTime' of XML schema type 'xsd:float'
        float *ExposureTime;
        /// Optional element 'tt:Gain' of XML schema type 'xsd:float'
        float *Gain;
        /// Optional element 'tt:Iris' of XML schema type 'xsd:float'
        float *Iris;
      public:
        /// Return unique type id SOAP_TYPE_tt__Exposure20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Exposure20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Exposure20, default initialized and not managed by a soap context
        virtual tt__Exposure20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Exposure20); }
      public:
        /// Constructor with default initializations
        tt__Exposure20() : Mode(), Priority(), Window(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris() { }
        virtual ~tt__Exposure20() { }
        /// Friend allocator used by soap_new_tt__Exposure20(struct soap*, int)
        friend SOAP_FMAC1 tt__Exposure20 * SOAP_FMAC2 soap_instantiate_tt__Exposure20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1434 */
#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (669)
/* complex XML schema type 'tt:ToneCompensation': */
class SOAP_CMAC tt__ToneCompensation : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'xsd:string'
        char *Mode;
        /// Optional element 'tt:Level' of XML schema type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ToneCompensationExtension'
        tt__ToneCompensationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensation, default initialized and not managed by a soap context
        virtual tt__ToneCompensation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensation); }
      public:
        /// Constructor with default initializations
        tt__ToneCompensation() : Mode(), Level(), Extension() { }
        virtual ~tt__ToneCompensation() { }
        /// Friend allocator used by soap_new_tt__ToneCompensation(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensation * SOAP_FMAC2 soap_instantiate_tt__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1436 */
#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (670)
/* simple XML schema type 'tt:ToneCompensationExtension': */
class SOAP_CMAC tt__ToneCompensationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensationExtension, default initialized and not managed by a soap context
        virtual tt__ToneCompensationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensationExtension); }
      public:
        /// Constructor with default initializations
        tt__ToneCompensationExtension() { }
        virtual ~tt__ToneCompensationExtension() { }
        /// Friend allocator used by soap_new_tt__ToneCompensationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1438 */
#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (671)
/* complex XML schema type 'tt:Defogging': */
class SOAP_CMAC tt__Defogging : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'xsd:string'
        char *Mode;
        /// Optional element 'tt:Level' of XML schema type 'xsd:float'
        float *Level;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DefoggingExtension'
        tt__DefoggingExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Defogging
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Defogging; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Defogging, default initialized and not managed by a soap context
        virtual tt__Defogging *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Defogging); }
      public:
        /// Constructor with default initializations
        tt__Defogging() : Mode(), Level(), Extension() { }
        virtual ~tt__Defogging() { }
        /// Friend allocator used by soap_new_tt__Defogging(struct soap*, int)
        friend SOAP_FMAC1 tt__Defogging * SOAP_FMAC2 soap_instantiate_tt__Defogging(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1440 */
#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (672)
/* simple XML schema type 'tt:DefoggingExtension': */
class SOAP_CMAC tt__DefoggingExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__DefoggingExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DefoggingExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DefoggingExtension, default initialized and not managed by a soap context
        virtual tt__DefoggingExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DefoggingExtension); }
      public:
        /// Constructor with default initializations
        tt__DefoggingExtension() { }
        virtual ~tt__DefoggingExtension() { }
        /// Friend allocator used by soap_new_tt__DefoggingExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DefoggingExtension * SOAP_FMAC2 soap_instantiate_tt__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1442 */
#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (673)
/* complex XML schema type 'tt:NoiseReduction': */
class SOAP_CMAC tt__NoiseReduction : public xsd__anyType {
      public:
        /// Required element 'tt:Level' of XML schema type 'xsd:float'
        float Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__NoiseReduction
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NoiseReduction; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NoiseReduction, default initialized and not managed by a soap context
        virtual tt__NoiseReduction *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NoiseReduction); }
      public:
        /// Constructor with default initializations
        tt__NoiseReduction() : Level() { }
        virtual ~tt__NoiseReduction() { }
        /// Friend allocator used by soap_new_tt__NoiseReduction(struct soap*, int)
        friend SOAP_FMAC1 tt__NoiseReduction * SOAP_FMAC2 soap_instantiate_tt__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1444 */
#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (674)
/* complex XML schema type 'tt:ImagingOptions20': */
class SOAP_CMAC tt__ImagingOptions20 : public xsd__anyType {
      public:
        /// Optional element 'tt:BacklightCompensation' of XML schema type 'tt:BacklightCompensationOptions20'
        tt__BacklightCompensationOptions20 *BacklightCompensation;
        /// Optional element 'tt:Brightness' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Brightness;
        /// Optional element 'tt:ColorSaturation' of XML schema type 'tt:FloatRange'
        tt__FloatRange *ColorSaturation;
        /// Optional element 'tt:Contrast' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Contrast;
        /// Optional element 'tt:Exposure' of XML schema type 'tt:ExposureOptions20'
        tt__ExposureOptions20 *Exposure;
        /// Optional element 'tt:Focus' of XML schema type 'tt:FocusOptions20'
        tt__FocusOptions20 *Focus;
        /// Sequence of elements 'tt:IrCutFilterModes' of XML schema type 'tt:IrCutFilterMode' stored in dynamic array IrCutFilterModes of length __sizeIrCutFilterModes
        int __sizeIrCutFilterModes;
        enum tt__IrCutFilterMode *IrCutFilterModes;
        /// Optional element 'tt:Sharpness' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Sharpness;
        /// Optional element 'tt:WideDynamicRange' of XML schema type 'tt:WideDynamicRangeOptions20'
        tt__WideDynamicRangeOptions20 *WideDynamicRange;
        /// Optional element 'tt:WhiteBalance' of XML schema type 'tt:WhiteBalanceOptions20'
        tt__WhiteBalanceOptions20 *WhiteBalance;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingOptions20Extension'
        tt__ImagingOptions20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions20() : BacklightCompensation(), Brightness(), ColorSaturation(), Contrast(), Exposure(), Focus(), __sizeIrCutFilterModes(), IrCutFilterModes(), Sharpness(), WideDynamicRange(), WhiteBalance(), Extension() { }
        virtual ~tt__ImagingOptions20() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1446 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (675)
/* complex XML schema type 'tt:ImagingOptions20Extension': */
class SOAP_CMAC tt__ImagingOptions20Extension : public xsd__anyType {
      public:
        /// Optional element 'tt:ImageStabilization' of XML schema type 'tt:ImageStabilizationOptions'
        tt__ImageStabilizationOptions *ImageStabilization;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingOptions20Extension2'
        tt__ImagingOptions20Extension2 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions20Extension() : ImageStabilization(), Extension() { }
        virtual ~tt__ImagingOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1448 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (676)
/* complex XML schema type 'tt:ImagingOptions20Extension2': */
class SOAP_CMAC tt__ImagingOptions20Extension2 : public xsd__anyType {
      public:
        /// Optional element 'tt:IrCutFilterAutoAdjustment' of XML schema type 'tt:IrCutFilterAutoAdjustmentOptions'
        tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingOptions20Extension3'
        tt__ImagingOptions20Extension3 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension2, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension2); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions20Extension2() : IrCutFilterAutoAdjustment(), Extension() { }
        virtual ~tt__ImagingOptions20Extension2() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension2(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension2 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1450 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (677)
/* complex XML schema type 'tt:ImagingOptions20Extension3': */
class SOAP_CMAC tt__ImagingOptions20Extension3 : public xsd__anyType {
      public:
        /// Optional element 'tt:ToneCompensationOptions' of XML schema type 'tt:ToneCompensationOptions'
        tt__ToneCompensationOptions *ToneCompensationOptions;
        /// Optional element 'tt:DefoggingOptions' of XML schema type 'tt:DefoggingOptions'
        tt__DefoggingOptions *DefoggingOptions;
        /// Optional element 'tt:NoiseReductionOptions' of XML schema type 'tt:NoiseReductionOptions'
        tt__NoiseReductionOptions *NoiseReductionOptions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImagingOptions20Extension4'
        tt__ImagingOptions20Extension4 *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension3
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension3; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension3, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension3 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension3); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions20Extension3() : ToneCompensationOptions(), DefoggingOptions(), NoiseReductionOptions(), Extension() { }
        virtual ~tt__ImagingOptions20Extension3() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension3(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension3 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension3(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1452 */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (678)
/* simple XML schema type 'tt:ImagingOptions20Extension4': */
class SOAP_CMAC tt__ImagingOptions20Extension4 : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingOptions20Extension4
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingOptions20Extension4; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingOptions20Extension4, default initialized and not managed by a soap context
        virtual tt__ImagingOptions20Extension4 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingOptions20Extension4); }
      public:
        /// Constructor with default initializations
        tt__ImagingOptions20Extension4() { }
        virtual ~tt__ImagingOptions20Extension4() { }
        /// Friend allocator used by soap_new_tt__ImagingOptions20Extension4(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingOptions20Extension4 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension4(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1454 */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (679)
/* complex XML schema type 'tt:ImageStabilizationOptions': */
class SOAP_CMAC tt__ImageStabilizationOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:ImageStabilizationMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__ImageStabilizationMode *Mode;
        /// Optional element 'tt:Level' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Level;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ImageStabilizationOptionsExtension'
        tt__ImageStabilizationOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationOptions, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationOptions); }
      public:
        /// Constructor with default initializations
        tt__ImageStabilizationOptions() : __sizeMode(), Mode(), Level(), Extension() { }
        virtual ~tt__ImageStabilizationOptions() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationOptions * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1456 */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (680)
/* simple XML schema type 'tt:ImageStabilizationOptionsExtension': */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ImageStabilizationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImageStabilizationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImageStabilizationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__ImageStabilizationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImageStabilizationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__ImageStabilizationOptionsExtension() { }
        virtual ~tt__ImageStabilizationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__ImageStabilizationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ImageStabilizationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1458 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (681)
/* complex XML schema type 'tt:IrCutFilterAutoAdjustmentOptions': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:BoundaryType' of XML schema type 'xsd:string' stored in dynamic array BoundaryType of length __sizeBoundaryType
        int __sizeBoundaryType;
        char **BoundaryType;
        /// Optional element 'tt:BoundaryOffset' of XML schema type 'xsd:boolean'
        bool *BoundaryOffset;
        /// Optional element 'tt:ResponseTimeRange' of XML schema type 'tt:DurationRange'
        tt__DurationRange *ResponseTimeRange;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IrCutFilterAutoAdjustmentOptionsExtension'
        tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentOptions, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentOptions); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterAutoAdjustmentOptions() : __sizeBoundaryType(), BoundaryType(), BoundaryOffset(), ResponseTimeRange(), Extension() { }
        virtual ~tt__IrCutFilterAutoAdjustmentOptions() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1460 */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (682)
/* simple XML schema type 'tt:IrCutFilterAutoAdjustmentOptionsExtension': */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IrCutFilterAutoAdjustmentOptionsExtension, default initialized and not managed by a soap context
        virtual tt__IrCutFilterAutoAdjustmentOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IrCutFilterAutoAdjustmentOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
        virtual ~tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1462 */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (683)
/* complex XML schema type 'tt:WideDynamicRangeOptions20': */
class SOAP_CMAC tt__WideDynamicRangeOptions20 : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:WideDynamicMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__WideDynamicMode *Mode;
        /// Optional element 'tt:Level' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__WideDynamicRangeOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WideDynamicRangeOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WideDynamicRangeOptions20, default initialized and not managed by a soap context
        virtual tt__WideDynamicRangeOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WideDynamicRangeOptions20); }
      public:
        /// Constructor with default initializations
        tt__WideDynamicRangeOptions20() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__WideDynamicRangeOptions20() { }
        /// Friend allocator used by soap_new_tt__WideDynamicRangeOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__WideDynamicRangeOptions20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1464 */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (684)
/* complex XML schema type 'tt:BacklightCompensationOptions20': */
class SOAP_CMAC tt__BacklightCompensationOptions20 : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:BacklightCompensationMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__BacklightCompensationMode *Mode;
        /// Optional element 'tt:Level' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__BacklightCompensationOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BacklightCompensationOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BacklightCompensationOptions20, default initialized and not managed by a soap context
        virtual tt__BacklightCompensationOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BacklightCompensationOptions20); }
      public:
        /// Constructor with default initializations
        tt__BacklightCompensationOptions20() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__BacklightCompensationOptions20() { }
        /// Friend allocator used by soap_new_tt__BacklightCompensationOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__BacklightCompensationOptions20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1466 */
#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (685)
/* complex XML schema type 'tt:ExposureOptions20': */
class SOAP_CMAC tt__ExposureOptions20 : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:ExposureMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__ExposureMode *Mode;
        /// Sequence of elements 'tt:Priority' of XML schema type 'tt:ExposurePriority' stored in dynamic array Priority of length __sizePriority
        int __sizePriority;
        enum tt__ExposurePriority *Priority;
        /// Optional element 'tt:MinExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinExposureTime;
        /// Optional element 'tt:MaxExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxExposureTime;
        /// Optional element 'tt:MinGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinGain;
        /// Optional element 'tt:MaxGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxGain;
        /// Optional element 'tt:MinIris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MinIris;
        /// Optional element 'tt:MaxIris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *MaxIris;
        /// Optional element 'tt:ExposureTime' of XML schema type 'tt:FloatRange'
        tt__FloatRange *ExposureTime;
        /// Optional element 'tt:Gain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Gain;
        /// Optional element 'tt:Iris' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Iris;
      public:
        /// Return unique type id SOAP_TYPE_tt__ExposureOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ExposureOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ExposureOptions20, default initialized and not managed by a soap context
        virtual tt__ExposureOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ExposureOptions20); }
      public:
        /// Constructor with default initializations
        tt__ExposureOptions20() : __sizeMode(), Mode(), __sizePriority(), Priority(), MinExposureTime(), MaxExposureTime(), MinGain(), MaxGain(), MinIris(), MaxIris(), ExposureTime(), Gain(), Iris() { }
        virtual ~tt__ExposureOptions20() { }
        /// Friend allocator used by soap_new_tt__ExposureOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__ExposureOptions20 * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1468 */
#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (686)
/* complex XML schema type 'tt:MoveOptions20': */
class SOAP_CMAC tt__MoveOptions20 : public xsd__anyType {
      public:
        /// Optional element 'tt:Absolute' of XML schema type 'tt:AbsoluteFocusOptions'
        tt__AbsoluteFocusOptions *Absolute;
        /// Optional element 'tt:Relative' of XML schema type 'tt:RelativeFocusOptions20'
        tt__RelativeFocusOptions20 *Relative;
        /// Optional element 'tt:Continuous' of XML schema type 'tt:ContinuousFocusOptions'
        tt__ContinuousFocusOptions *Continuous;
      public:
        /// Return unique type id SOAP_TYPE_tt__MoveOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MoveOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MoveOptions20, default initialized and not managed by a soap context
        virtual tt__MoveOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MoveOptions20); }
      public:
        /// Constructor with default initializations
        tt__MoveOptions20() : Absolute(), Relative(), Continuous() { }
        virtual ~tt__MoveOptions20() { }
        /// Friend allocator used by soap_new_tt__MoveOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__MoveOptions20 * SOAP_FMAC2 soap_instantiate_tt__MoveOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1470 */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (687)
/* complex XML schema type 'tt:RelativeFocusOptions20': */
class SOAP_CMAC tt__RelativeFocusOptions20 : public xsd__anyType {
      public:
        /// Required element 'tt:Distance' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Distance;
        /// Optional element 'tt:Speed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Speed;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelativeFocusOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelativeFocusOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelativeFocusOptions20, default initialized and not managed by a soap context
        virtual tt__RelativeFocusOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelativeFocusOptions20); }
      public:
        /// Constructor with default initializations
        tt__RelativeFocusOptions20() : Distance(), Speed() { }
        virtual ~tt__RelativeFocusOptions20() { }
        /// Friend allocator used by soap_new_tt__RelativeFocusOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__RelativeFocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1472 */
#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (688)
/* complex XML schema type 'tt:WhiteBalance20': */
class SOAP_CMAC tt__WhiteBalance20 : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:WhiteBalanceMode'
        enum tt__WhiteBalanceMode Mode;
        /// Optional element 'tt:CrGain' of XML schema type 'xsd:float'
        float *CrGain;
        /// Optional element 'tt:CbGain' of XML schema type 'xsd:float'
        float *CbGain;
        /// Optional element 'tt:Extension' of XML schema type 'tt:WhiteBalance20Extension'
        tt__WhiteBalance20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance20, default initialized and not managed by a soap context
        virtual tt__WhiteBalance20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance20); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalance20() : Mode(), CrGain(), CbGain(), Extension() { }
        virtual ~tt__WhiteBalance20() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance20(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1474 */
#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (689)
/* simple XML schema type 'tt:WhiteBalance20Extension': */
class SOAP_CMAC tt__WhiteBalance20Extension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalance20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalance20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalance20Extension, default initialized and not managed by a soap context
        virtual tt__WhiteBalance20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalance20Extension); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalance20Extension() { }
        virtual ~tt__WhiteBalance20Extension() { }
        /// Friend allocator used by soap_new_tt__WhiteBalance20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1476 */
#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (690)
/* complex XML schema type 'tt:FocusConfiguration20': */
class SOAP_CMAC tt__FocusConfiguration20 : public xsd__anyType {
      public:
        /// Required element 'tt:AutoFocusMode' of XML schema type 'tt:AutoFocusMode'
        enum tt__AutoFocusMode AutoFocusMode;
        /// Optional element 'tt:DefaultSpeed' of XML schema type 'xsd:float'
        float *DefaultSpeed;
        /// Optional element 'tt:NearLimit' of XML schema type 'xsd:float'
        float *NearLimit;
        /// Optional element 'tt:FarLimit' of XML schema type 'xsd:float'
        float *FarLimit;
        /// Optional element 'tt:Extension' of XML schema type 'tt:FocusConfiguration20Extension'
        tt__FocusConfiguration20Extension *Extension;
        /// Optional attribute 'AFMode' of XML schema type 'tt:StringAttrList'
        char *AFMode;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration20, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration20); }
      public:
        /// Constructor with default initializations
        tt__FocusConfiguration20() : AutoFocusMode(), DefaultSpeed(), NearLimit(), FarLimit(), Extension(), AFMode() { }
        virtual ~tt__FocusConfiguration20() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1478 */
#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (691)
/* simple XML schema type 'tt:FocusConfiguration20Extension': */
class SOAP_CMAC tt__FocusConfiguration20Extension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusConfiguration20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusConfiguration20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusConfiguration20Extension, default initialized and not managed by a soap context
        virtual tt__FocusConfiguration20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusConfiguration20Extension); }
      public:
        /// Constructor with default initializations
        tt__FocusConfiguration20Extension() { }
        virtual ~tt__FocusConfiguration20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusConfiguration20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1480 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (692)
/* complex XML schema type 'tt:WhiteBalanceOptions20': */
class SOAP_CMAC tt__WhiteBalanceOptions20 : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'tt:WhiteBalanceMode' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        enum tt__WhiteBalanceMode *Mode;
        /// Optional element 'tt:YrGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *YrGain;
        /// Optional element 'tt:YbGain' of XML schema type 'tt:FloatRange'
        tt__FloatRange *YbGain;
        /// Optional element 'tt:Extension' of XML schema type 'tt:WhiteBalanceOptions20Extension'
        tt__WhiteBalanceOptions20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions20, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions20); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalanceOptions20() : __sizeMode(), Mode(), YrGain(), YbGain(), Extension() { }
        virtual ~tt__WhiteBalanceOptions20() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1482 */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (693)
/* simple XML schema type 'tt:WhiteBalanceOptions20Extension': */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__WhiteBalanceOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__WhiteBalanceOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__WhiteBalanceOptions20Extension, default initialized and not managed by a soap context
        virtual tt__WhiteBalanceOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__WhiteBalanceOptions20Extension); }
      public:
        /// Constructor with default initializations
        tt__WhiteBalanceOptions20Extension() { }
        virtual ~tt__WhiteBalanceOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__WhiteBalanceOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__WhiteBalanceOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1484 */
#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (694)
/* complex XML schema type 'tt:FocusOptions20': */
class SOAP_CMAC tt__FocusOptions20 : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:AutoFocusModes' of XML schema type 'tt:AutoFocusMode' stored in dynamic array AutoFocusModes of length __sizeAutoFocusModes
        int __sizeAutoFocusModes;
        enum tt__AutoFocusMode *AutoFocusModes;
        /// Optional element 'tt:DefaultSpeed' of XML schema type 'tt:FloatRange'
        tt__FloatRange *DefaultSpeed;
        /// Optional element 'tt:NearLimit' of XML schema type 'tt:FloatRange'
        tt__FloatRange *NearLimit;
        /// Optional element 'tt:FarLimit' of XML schema type 'tt:FloatRange'
        tt__FloatRange *FarLimit;
        /// Optional element 'tt:Extension' of XML schema type 'tt:FocusOptions20Extension'
        tt__FocusOptions20Extension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions20
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions20; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions20, default initialized and not managed by a soap context
        virtual tt__FocusOptions20 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions20); }
      public:
        /// Constructor with default initializations
        tt__FocusOptions20() : __sizeAutoFocusModes(), AutoFocusModes(), DefaultSpeed(), NearLimit(), FarLimit(), Extension() { }
        virtual ~tt__FocusOptions20() { }
        /// Friend allocator used by soap_new_tt__FocusOptions20(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1486 */
#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (695)
/* complex XML schema type 'tt:FocusOptions20Extension': */
class SOAP_CMAC tt__FocusOptions20Extension : public xsd__anyType {
      public:
        /// Optional element 'tt:AFModes' of XML schema type 'tt:StringAttrList'
        char *AFModes;
      public:
        /// Return unique type id SOAP_TYPE_tt__FocusOptions20Extension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FocusOptions20Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FocusOptions20Extension, default initialized and not managed by a soap context
        virtual tt__FocusOptions20Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FocusOptions20Extension); }
      public:
        /// Constructor with default initializations
        tt__FocusOptions20Extension() : AFModes() { }
        virtual ~tt__FocusOptions20Extension() { }
        /// Friend allocator used by soap_new_tt__FocusOptions20Extension(struct soap*, int)
        friend SOAP_FMAC1 tt__FocusOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1488 */
#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (696)
/* complex XML schema type 'tt:ToneCompensationOptions': */
class SOAP_CMAC tt__ToneCompensationOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'xsd:string' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        char **Mode;
        /// Required element 'tt:Level' of XML schema type 'xsd:boolean'
        bool Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__ToneCompensationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ToneCompensationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ToneCompensationOptions, default initialized and not managed by a soap context
        virtual tt__ToneCompensationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ToneCompensationOptions); }
      public:
        /// Constructor with default initializations
        tt__ToneCompensationOptions() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__ToneCompensationOptions() { }
        /// Friend allocator used by soap_new_tt__ToneCompensationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ToneCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1490 */
#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (697)
/* complex XML schema type 'tt:DefoggingOptions': */
class SOAP_CMAC tt__DefoggingOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Mode' of XML schema type 'xsd:string' stored in dynamic array Mode of length __sizeMode
        int __sizeMode;
        char **Mode;
        /// Required element 'tt:Level' of XML schema type 'xsd:boolean'
        bool Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__DefoggingOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DefoggingOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DefoggingOptions, default initialized and not managed by a soap context
        virtual tt__DefoggingOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DefoggingOptions); }
      public:
        /// Constructor with default initializations
        tt__DefoggingOptions() : __sizeMode(), Mode(), Level() { }
        virtual ~tt__DefoggingOptions() { }
        /// Friend allocator used by soap_new_tt__DefoggingOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__DefoggingOptions * SOAP_FMAC2 soap_instantiate_tt__DefoggingOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1492 */
#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (698)
/* complex XML schema type 'tt:NoiseReductionOptions': */
class SOAP_CMAC tt__NoiseReductionOptions : public xsd__anyType {
      public:
        /// Required element 'tt:Level' of XML schema type 'xsd:boolean'
        bool Level;
      public:
        /// Return unique type id SOAP_TYPE_tt__NoiseReductionOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NoiseReductionOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NoiseReductionOptions, default initialized and not managed by a soap context
        virtual tt__NoiseReductionOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NoiseReductionOptions); }
      public:
        /// Constructor with default initializations
        tt__NoiseReductionOptions() : Level() { }
        virtual ~tt__NoiseReductionOptions() { }
        /// Friend allocator used by soap_new_tt__NoiseReductionOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__NoiseReductionOptions * SOAP_FMAC2 soap_instantiate_tt__NoiseReductionOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1494 */
#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (699)
/* simple XML schema type 'tt:MessageExtension': */
class SOAP_CMAC tt__MessageExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageExtension, default initialized and not managed by a soap context
        virtual tt__MessageExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageExtension); }
      public:
        /// Constructor with default initializations
        tt__MessageExtension() { }
        virtual ~tt__MessageExtension() { }
        /// Friend allocator used by soap_new_tt__MessageExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageExtension * SOAP_FMAC2 soap_instantiate_tt__MessageExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:20762 */
#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1804)
/* complex XML schema type 'tt:ItemList-SimpleItem': */
class SOAP_CMAC _tt__ItemList_SimpleItem {
      public:
        /// Required attribute 'Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required attribute 'Value' of XML schema type 'xsd:anySimpleType'
        char *Value;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemList_SimpleItem
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemList_SimpleItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemList_SimpleItem, default initialized and not managed by a soap context
        virtual _tt__ItemList_SimpleItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemList_SimpleItem); }
      public:
        /// Constructor with default initializations
        _tt__ItemList_SimpleItem() : Name(), Value() { }
        virtual ~_tt__ItemList_SimpleItem() { }
        /// Friend allocator used by soap_new__tt__ItemList_SimpleItem(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:20794 */
#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1806)
/* complex XML schema type 'tt:ItemList-ElementItem': */
class SOAP_CMAC _tt__ItemList_ElementItem {
      public:
        /// Required attribute 'Name' of XML schema type 'xsd:string'
        char *Name;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemList_ElementItem
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemList_ElementItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemList_ElementItem, default initialized and not managed by a soap context
        virtual _tt__ItemList_ElementItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemList_ElementItem); }
      public:
        /// Constructor with default initializations
        _tt__ItemList_ElementItem() : Name() { }
        virtual ~_tt__ItemList_ElementItem() { }
        /// Friend allocator used by soap_new__tt__ItemList_ElementItem(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1496 */
#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (700)
/* complex XML schema type 'tt:ItemList': */
class SOAP_CMAC tt__ItemList : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:SimpleItem' of XML schema type 'tt:ItemList-SimpleItem' stored in dynamic array SimpleItem of length __sizeSimpleItem
        int __sizeSimpleItem;
        _tt__ItemList_SimpleItem *SimpleItem;
        /// Sequence of elements 'tt:ElementItem' of XML schema type 'tt:ItemList-ElementItem' stored in dynamic array ElementItem of length __sizeElementItem
        int __sizeElementItem;
        _tt__ItemList_ElementItem *ElementItem;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ItemListExtension'
        tt__ItemListExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemList, default initialized and not managed by a soap context
        virtual tt__ItemList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemList); }
      public:
        /// Constructor with default initializations
        tt__ItemList() : __sizeSimpleItem(), SimpleItem(), __sizeElementItem(), ElementItem(), Extension() { }
        virtual ~tt__ItemList() { }
        /// Friend allocator used by soap_new_tt__ItemList(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemList * SOAP_FMAC2 soap_instantiate_tt__ItemList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1498 */
#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (701)
/* simple XML schema type 'tt:ItemListExtension': */
class SOAP_CMAC tt__ItemListExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListExtension, default initialized and not managed by a soap context
        virtual tt__ItemListExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListExtension); }
      public:
        /// Constructor with default initializations
        tt__ItemListExtension() { }
        virtual ~tt__ItemListExtension() { }
        /// Friend allocator used by soap_new_tt__ItemListExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1500 */
#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (702)
/* Type tt__MessageDescription is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MessageDescription': */
class SOAP_CMAC tt__MessageDescription : public xsd__anyType {
      public:
        /// Optional element 'tt:Source' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Source;
        /// Optional element 'tt:Key' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Key;
        /// Optional element 'tt:Data' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Data;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MessageDescriptionExtension'
        tt__MessageDescriptionExtension *Extension;
        /// Optional attribute 'IsProperty' of XML schema type 'xsd:boolean'
        bool *IsProperty;
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageDescription, default initialized and not managed by a soap context
        virtual tt__MessageDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageDescription); }
      public:
        /// Constructor with default initializations
        tt__MessageDescription() : Source(), Key(), Data(), Extension(), IsProperty() { }
        virtual ~tt__MessageDescription() { }
        /// Friend allocator used by soap_new_tt__MessageDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageDescription * SOAP_FMAC2 soap_instantiate_tt__MessageDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1502 */
#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (703)
/* simple XML schema type 'tt:MessageDescriptionExtension': */
class SOAP_CMAC tt__MessageDescriptionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__MessageDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MessageDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MessageDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__MessageDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MessageDescriptionExtension); }
      public:
        /// Constructor with default initializations
        tt__MessageDescriptionExtension() { }
        virtual ~tt__MessageDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__MessageDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MessageDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__MessageDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:20953 */
#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1811)
/* complex XML schema type 'tt:ItemListDescription-SimpleItemDescription': */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription {
      public:
        /// Required attribute 'Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required attribute 'Type' of XML schema type 'xsd:QName'
        char *Type;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemListDescription_SimpleItemDescription, default initialized and not managed by a soap context
        virtual _tt__ItemListDescription_SimpleItemDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemListDescription_SimpleItemDescription); }
      public:
        /// Constructor with default initializations
        _tt__ItemListDescription_SimpleItemDescription() : Name(), Type() { }
        virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
        /// Friend allocator used by soap_new__tt__ItemListDescription_SimpleItemDescription(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:20981 */
#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1813)
/* complex XML schema type 'tt:ItemListDescription-ElementItemDescription': */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription {
      public:
        /// Required attribute 'Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required attribute 'Type' of XML schema type 'xsd:QName'
        char *Type;
      public:
        /// Return unique type id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ItemListDescription_ElementItemDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ItemListDescription_ElementItemDescription, default initialized and not managed by a soap context
        virtual _tt__ItemListDescription_ElementItemDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ItemListDescription_ElementItemDescription); }
      public:
        /// Constructor with default initializations
        _tt__ItemListDescription_ElementItemDescription() : Name(), Type() { }
        virtual ~_tt__ItemListDescription_ElementItemDescription() { }
        /// Friend allocator used by soap_new__tt__ItemListDescription_ElementItemDescription(struct soap*, int)
        friend SOAP_FMAC1 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1504 */
#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (704)
/* complex XML schema type 'tt:ItemListDescription': */
class SOAP_CMAC tt__ItemListDescription : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:SimpleItemDescription' of XML schema type 'tt:ItemListDescription-SimpleItemDescription' stored in dynamic array SimpleItemDescription of length __sizeSimpleItemDescription
        int __sizeSimpleItemDescription;
        _tt__ItemListDescription_SimpleItemDescription *SimpleItemDescription;
        /// Sequence of elements 'tt:ElementItemDescription' of XML schema type 'tt:ItemListDescription-ElementItemDescription' stored in dynamic array ElementItemDescription of length __sizeElementItemDescription
        int __sizeElementItemDescription;
        _tt__ItemListDescription_ElementItemDescription *ElementItemDescription;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ItemListDescriptionExtension'
        tt__ItemListDescriptionExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListDescription, default initialized and not managed by a soap context
        virtual tt__ItemListDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListDescription); }
      public:
        /// Constructor with default initializations
        tt__ItemListDescription() : __sizeSimpleItemDescription(), SimpleItemDescription(), __sizeElementItemDescription(), ElementItemDescription(), Extension() { }
        virtual ~tt__ItemListDescription() { }
        /// Friend allocator used by soap_new_tt__ItemListDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListDescription * SOAP_FMAC2 soap_instantiate_tt__ItemListDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1506 */
#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (705)
/* simple XML schema type 'tt:ItemListDescriptionExtension': */
class SOAP_CMAC tt__ItemListDescriptionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ItemListDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ItemListDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ItemListDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__ItemListDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ItemListDescriptionExtension); }
      public:
        /// Constructor with default initializations
        tt__ItemListDescriptionExtension() { }
        virtual ~tt__ItemListDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__ItemListDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ItemListDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1508 */
#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (706)
/* Type tt__Polyline is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Polyline': */
class SOAP_CMAC tt__Polyline : public xsd__anyType {
      public:
        /// Sequence of at least 2 elements 'tt:Point' of XML schema type 'tt:Vector' stored in dynamic array Point of length __sizePoint
        int __sizePoint;
        tt__Vector **Point;
      public:
        /// Return unique type id SOAP_TYPE_tt__Polyline
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Polyline; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Polyline, default initialized and not managed by a soap context
        virtual tt__Polyline *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Polyline); }
      public:
        /// Constructor with default initializations
        tt__Polyline() : __sizePoint(), Point() { }
        virtual ~tt__Polyline() { }
        /// Friend allocator used by soap_new_tt__Polyline(struct soap*, int)
        friend SOAP_FMAC1 tt__Polyline * SOAP_FMAC2 soap_instantiate_tt__Polyline(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1510 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (707)
/* complex XML schema type 'tt:AnalyticsEngineConfiguration': */
class SOAP_CMAC tt__AnalyticsEngineConfiguration : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:AnalyticsModule' of XML schema type 'tt:Config' stored in dynamic array AnalyticsModule of length __sizeAnalyticsModule
        int __sizeAnalyticsModule;
        tt__Config **AnalyticsModule;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AnalyticsEngineConfigurationExtension'
        tt__AnalyticsEngineConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineConfiguration() : __sizeAnalyticsModule(), AnalyticsModule(), Extension() { }
        virtual ~tt__AnalyticsEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1512 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (708)
/* simple XML schema type 'tt:AnalyticsEngineConfigurationExtension': */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineConfigurationExtension() { }
        virtual ~tt__AnalyticsEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1514 */
#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (709)
/* complex XML schema type 'tt:RuleEngineConfiguration': */
class SOAP_CMAC tt__RuleEngineConfiguration : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Rule' of XML schema type 'tt:Config' stored in dynamic array Rule of length __sizeRule
        int __sizeRule;
        tt__Config **Rule;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RuleEngineConfigurationExtension'
        tt__RuleEngineConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__RuleEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RuleEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RuleEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__RuleEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RuleEngineConfiguration); }
      public:
        /// Constructor with default initializations
        tt__RuleEngineConfiguration() : __sizeRule(), Rule(), Extension() { }
        virtual ~tt__RuleEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__RuleEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1516 */
#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (710)
/* simple XML schema type 'tt:RuleEngineConfigurationExtension': */
class SOAP_CMAC tt__RuleEngineConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RuleEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RuleEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RuleEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__RuleEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RuleEngineConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__RuleEngineConfigurationExtension() { }
        virtual ~tt__RuleEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__RuleEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1518 */
#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (711)
/* complex XML schema type 'tt:Config': */
class SOAP_CMAC tt__Config : public xsd__anyType {
      public:
        /// Required element 'tt:Parameters' of XML schema type 'tt:ItemList'
        tt__ItemList *Parameters;
        /// Required attribute 'Name' of XML schema type 'xsd:string'
        char *Name;
        /// Required attribute 'Type' of XML schema type 'xsd:QName'
        char *Type;
      public:
        /// Return unique type id SOAP_TYPE_tt__Config
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Config; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Config, default initialized and not managed by a soap context
        virtual tt__Config *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Config); }
      public:
        /// Constructor with default initializations
        tt__Config() : Parameters(), Name(), Type() { }
        virtual ~tt__Config() { }
        /// Friend allocator used by soap_new_tt__Config(struct soap*, int)
        friend SOAP_FMAC1 tt__Config * SOAP_FMAC2 soap_instantiate_tt__Config(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:21229 */
#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1823)
/* complex XML schema type 'tt:ConfigDescription-Messages': */
class SOAP_CMAC _tt__ConfigDescription_Messages {
      public:
        /// Optional element 'tt:Source' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Source;
        /// Optional element 'tt:Key' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Key;
        /// Optional element 'tt:Data' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Data;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MessageDescriptionExtension'
        tt__MessageDescriptionExtension *Extension;
        /// Optional attribute 'IsProperty' of XML schema type 'xsd:boolean'
        bool *IsProperty;
        /// Required element 'tt:ParentTopic' of XML schema type 'xsd:string'
        char *ParentTopic;
      public:
        /// Return unique type id SOAP_TYPE__tt__ConfigDescription_Messages
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ConfigDescription_Messages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ConfigDescription_Messages, default initialized and not managed by a soap context
        virtual _tt__ConfigDescription_Messages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ConfigDescription_Messages); }
      public:
        /// Constructor with default initializations
        _tt__ConfigDescription_Messages() : Source(), Key(), Data(), Extension(), IsProperty(), ParentTopic() { }
        virtual ~_tt__ConfigDescription_Messages() { }
        /// Friend allocator used by soap_new__tt__ConfigDescription_Messages(struct soap*, int)
        friend SOAP_FMAC1 _tt__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1520 */
#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (712)
/* Type tt__ConfigDescription is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ConfigDescription': */
class SOAP_CMAC tt__ConfigDescription : public xsd__anyType {
      public:
        /// Required element 'tt:Parameters' of XML schema type 'tt:ItemListDescription'
        tt__ItemListDescription *Parameters;
        /// Sequence of elements 'tt:Messages' of XML schema type 'tt:ConfigDescription-Messages' stored in dynamic array Messages of length __sizeMessages
        int __sizeMessages;
        _tt__ConfigDescription_Messages *Messages;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ConfigDescriptionExtension'
        tt__ConfigDescriptionExtension *Extension;
        /// Required attribute 'Name' of XML schema type 'xsd:QName'
        char *Name;
        /// Optional attribute 'fixed' of XML schema type 'xsd:boolean'
        bool *fixed;
        /// Optional attribute 'maxInstances' of XML schema type 'xsd:integer'
        char *maxInstances;
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigDescription
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigDescription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigDescription, default initialized and not managed by a soap context
        virtual tt__ConfigDescription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigDescription); }
      public:
        /// Constructor with default initializations
        tt__ConfigDescription() : Parameters(), __sizeMessages(), Messages(), Extension(), Name(), fixed(), maxInstances() { }
        virtual ~tt__ConfigDescription() { }
        /// Friend allocator used by soap_new_tt__ConfigDescription(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigDescription * SOAP_FMAC2 soap_instantiate_tt__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1522 */
#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (713)
/* Type tt__ConfigDescriptionExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:ConfigDescriptionExtension': */
class SOAP_CMAC tt__ConfigDescriptionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ConfigDescriptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ConfigDescriptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ConfigDescriptionExtension, default initialized and not managed by a soap context
        virtual tt__ConfigDescriptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ConfigDescriptionExtension); }
      public:
        /// Constructor with default initializations
        tt__ConfigDescriptionExtension() { }
        virtual ~tt__ConfigDescriptionExtension() { }
        /// Friend allocator used by soap_new_tt__ConfigDescriptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ConfigDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ConfigDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1524 */
#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (714)
/* Type tt__SupportedRules is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SupportedRules': */
class SOAP_CMAC tt__SupportedRules : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:RuleContentSchemaLocation' of XML schema type 'xsd:anyURI' stored in dynamic array RuleContentSchemaLocation of length __sizeRuleContentSchemaLocation
        int __sizeRuleContentSchemaLocation;
        char **RuleContentSchemaLocation;
        /// Sequence of elements 'tt:RuleDescription' of XML schema type 'tt:ConfigDescription' stored in dynamic array RuleDescription of length __sizeRuleDescription
        int __sizeRuleDescription;
        tt__ConfigDescription **RuleDescription;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SupportedRulesExtension'
        tt__SupportedRulesExtension *Extension;
        /// Optional attribute 'Limit' of XML schema type 'xsd:int'
        int *Limit;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedRules
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedRules; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedRules, default initialized and not managed by a soap context
        virtual tt__SupportedRules *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedRules); }
      public:
        /// Constructor with default initializations
        tt__SupportedRules() : __sizeRuleContentSchemaLocation(), RuleContentSchemaLocation(), __sizeRuleDescription(), RuleDescription(), Extension(), Limit() { }
        virtual ~tt__SupportedRules() { }
        /// Friend allocator used by soap_new_tt__SupportedRules(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedRules * SOAP_FMAC2 soap_instantiate_tt__SupportedRules(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1526 */
#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (715)
/* Type tt__SupportedRulesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SupportedRulesExtension': */
class SOAP_CMAC tt__SupportedRulesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedRulesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedRulesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedRulesExtension, default initialized and not managed by a soap context
        virtual tt__SupportedRulesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedRulesExtension); }
      public:
        /// Constructor with default initializations
        tt__SupportedRulesExtension() { }
        virtual ~tt__SupportedRulesExtension() { }
        /// Friend allocator used by soap_new_tt__SupportedRulesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedRulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedRulesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1528 */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (716)
/* Type tt__SupportedAnalyticsModules is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SupportedAnalyticsModules': */
class SOAP_CMAC tt__SupportedAnalyticsModules : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:AnalyticsModuleContentSchemaLocation' of XML schema type 'xsd:anyURI' stored in dynamic array AnalyticsModuleContentSchemaLocation of length __sizeAnalyticsModuleContentSchemaLocation
        int __sizeAnalyticsModuleContentSchemaLocation;
        char **AnalyticsModuleContentSchemaLocation;
        /// Sequence of elements 'tt:AnalyticsModuleDescription' of XML schema type 'tt:ConfigDescription' stored in dynamic array AnalyticsModuleDescription of length __sizeAnalyticsModuleDescription
        int __sizeAnalyticsModuleDescription;
        tt__ConfigDescription **AnalyticsModuleDescription;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SupportedAnalyticsModulesExtension'
        tt__SupportedAnalyticsModulesExtension *Extension;
        /// Optional attribute 'Limit' of XML schema type 'xsd:int'
        int *Limit;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedAnalyticsModules
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedAnalyticsModules; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedAnalyticsModules, default initialized and not managed by a soap context
        virtual tt__SupportedAnalyticsModules *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedAnalyticsModules); }
      public:
        /// Constructor with default initializations
        tt__SupportedAnalyticsModules() : __sizeAnalyticsModuleContentSchemaLocation(), AnalyticsModuleContentSchemaLocation(), __sizeAnalyticsModuleDescription(), AnalyticsModuleDescription(), Extension(), Limit() { }
        virtual ~tt__SupportedAnalyticsModules() { }
        /// Friend allocator used by soap_new_tt__SupportedAnalyticsModules(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedAnalyticsModules * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModules(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1530 */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (717)
/* Type tt__SupportedAnalyticsModulesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SupportedAnalyticsModulesExtension': */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportedAnalyticsModulesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportedAnalyticsModulesExtension, default initialized and not managed by a soap context
        virtual tt__SupportedAnalyticsModulesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportedAnalyticsModulesExtension); }
      public:
        /// Constructor with default initializations
        tt__SupportedAnalyticsModulesExtension() { }
        virtual ~tt__SupportedAnalyticsModulesExtension() { }
        /// Friend allocator used by soap_new_tt__SupportedAnalyticsModulesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModulesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1532 */
#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (718)
/* Type tt__PolylineArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PolylineArray': */
class SOAP_CMAC tt__PolylineArray : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Segment' of XML schema type 'tt:Polyline' stored in dynamic array Segment of length __sizeSegment
        int __sizeSegment;
        tt__Polyline **Segment;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PolylineArrayExtension'
        tt__PolylineArrayExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArray
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArray, default initialized and not managed by a soap context
        virtual tt__PolylineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArray); }
      public:
        /// Constructor with default initializations
        tt__PolylineArray() : __sizeSegment(), Segment(), Extension() { }
        virtual ~tt__PolylineArray() { }
        /// Friend allocator used by soap_new_tt__PolylineArray(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArray * SOAP_FMAC2 soap_instantiate_tt__PolylineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1534 */
#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (719)
/* Type tt__PolylineArrayExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:PolylineArrayExtension': */
class SOAP_CMAC tt__PolylineArrayExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArrayExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArrayExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArrayExtension, default initialized and not managed by a soap context
        virtual tt__PolylineArrayExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArrayExtension); }
      public:
        /// Constructor with default initializations
        tt__PolylineArrayExtension() { }
        virtual ~tt__PolylineArrayExtension() { }
        /// Friend allocator used by soap_new_tt__PolylineArrayExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArrayExtension * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1536 */
#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (720)
/* Type tt__PolylineArrayConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PolylineArrayConfiguration': */
class SOAP_CMAC tt__PolylineArrayConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:PolylineArray' of XML schema type 'tt:PolylineArray'
        tt__PolylineArray *PolylineArray;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolylineArrayConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolylineArrayConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolylineArrayConfiguration, default initialized and not managed by a soap context
        virtual tt__PolylineArrayConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolylineArrayConfiguration); }
      public:
        /// Constructor with default initializations
        tt__PolylineArrayConfiguration() : PolylineArray() { }
        virtual ~tt__PolylineArrayConfiguration() { }
        /// Friend allocator used by soap_new_tt__PolylineArrayConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PolylineArrayConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1538 */
#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (721)
/* Type tt__MotionExpression is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MotionExpression': */
class SOAP_CMAC tt__MotionExpression : public xsd__anyType {
      public:
        /// Required element 'tt:Expression' of XML schema type 'xsd:string'
        char *Expression;
        /// Optional attribute 'Type' of XML schema type 'xsd:string'
        char *Type;
      public:
        /// Return unique type id SOAP_TYPE_tt__MotionExpression
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MotionExpression; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MotionExpression, default initialized and not managed by a soap context
        virtual tt__MotionExpression *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MotionExpression); }
      public:
        /// Constructor with default initializations
        tt__MotionExpression() : Expression(), Type() { }
        virtual ~tt__MotionExpression() { }
        /// Friend allocator used by soap_new_tt__MotionExpression(struct soap*, int)
        friend SOAP_FMAC1 tt__MotionExpression * SOAP_FMAC2 soap_instantiate_tt__MotionExpression(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1540 */
#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (722)
/* Type tt__MotionExpressionConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MotionExpressionConfiguration': */
class SOAP_CMAC tt__MotionExpressionConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:MotionExpression' of XML schema type 'tt:MotionExpression'
        tt__MotionExpression *MotionExpression;
      public:
        /// Return unique type id SOAP_TYPE_tt__MotionExpressionConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MotionExpressionConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MotionExpressionConfiguration, default initialized and not managed by a soap context
        virtual tt__MotionExpressionConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MotionExpressionConfiguration); }
      public:
        /// Constructor with default initializations
        tt__MotionExpressionConfiguration() : MotionExpression() { }
        virtual ~tt__MotionExpressionConfiguration() { }
        /// Friend allocator used by soap_new_tt__MotionExpressionConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MotionExpressionConfiguration * SOAP_FMAC2 soap_instantiate_tt__MotionExpressionConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1542 */
#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (723)
/* Type tt__CellLayout is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CellLayout': */
class SOAP_CMAC tt__CellLayout : public xsd__anyType {
      public:
        /// Required element 'tt:Transformation' of XML schema type 'tt:Transformation'
        tt__Transformation *Transformation;
        /// Required attribute 'Columns' of XML schema type 'xsd:integer'
        char *Columns;
        /// Required attribute 'Rows' of XML schema type 'xsd:integer'
        char *Rows;
      public:
        /// Return unique type id SOAP_TYPE_tt__CellLayout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CellLayout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CellLayout, default initialized and not managed by a soap context
        virtual tt__CellLayout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CellLayout); }
      public:
        /// Constructor with default initializations
        tt__CellLayout() : Transformation(), Columns(), Rows() { }
        virtual ~tt__CellLayout() { }
        /// Friend allocator used by soap_new_tt__CellLayout(struct soap*, int)
        friend SOAP_FMAC1 tt__CellLayout * SOAP_FMAC2 soap_instantiate_tt__CellLayout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1544 */
#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (724)
/* Type tt__PaneConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PaneConfiguration': */
class SOAP_CMAC tt__PaneConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tt:PaneName' of XML schema type 'xsd:string'
        char *PaneName;
        /// Optional element 'tt:AudioOutputToken' of XML schema type 'tt:ReferenceToken'
        char *AudioOutputToken;
        /// Optional element 'tt:AudioSourceToken' of XML schema type 'tt:ReferenceToken'
        char *AudioSourceToken;
        /// Optional element 'tt:AudioEncoderConfiguration' of XML schema type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *AudioEncoderConfiguration;
        /// Optional element 'tt:ReceiverToken' of XML schema type 'tt:ReferenceToken'
        char *ReceiverToken;
        /// Required element 'tt:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneConfiguration, default initialized and not managed by a soap context
        virtual tt__PaneConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneConfiguration); }
      public:
        /// Constructor with default initializations
        tt__PaneConfiguration() : PaneName(), AudioOutputToken(), AudioSourceToken(), AudioEncoderConfiguration(), ReceiverToken(), Token() { }
        virtual ~tt__PaneConfiguration() { }
        /// Friend allocator used by soap_new_tt__PaneConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneConfiguration * SOAP_FMAC2 soap_instantiate_tt__PaneConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1546 */
#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (725)
/* Type tt__PaneLayout is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PaneLayout': */
class SOAP_CMAC tt__PaneLayout : public xsd__anyType {
      public:
        /// Required element 'tt:Pane' of XML schema type 'tt:ReferenceToken'
        char *Pane;
        /// Required element 'tt:Area' of XML schema type 'tt:Rectangle'
        tt__Rectangle *Area;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneLayout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneLayout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneLayout, default initialized and not managed by a soap context
        virtual tt__PaneLayout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneLayout); }
      public:
        /// Constructor with default initializations
        tt__PaneLayout() : Pane(), Area() { }
        virtual ~tt__PaneLayout() { }
        /// Friend allocator used by soap_new_tt__PaneLayout(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneLayout * SOAP_FMAC2 soap_instantiate_tt__PaneLayout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1548 */
#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (726)
/* Type tt__Layout is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Layout': */
class SOAP_CMAC tt__Layout : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:PaneLayout' of XML schema type 'tt:PaneLayout' stored in dynamic array PaneLayout of length __sizePaneLayout
        int __sizePaneLayout;
        tt__PaneLayout **PaneLayout;
        /// Optional element 'tt:Extension' of XML schema type 'tt:LayoutExtension'
        tt__LayoutExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Layout
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Layout; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Layout, default initialized and not managed by a soap context
        virtual tt__Layout *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Layout); }
      public:
        /// Constructor with default initializations
        tt__Layout() : __sizePaneLayout(), PaneLayout(), Extension() { }
        virtual ~tt__Layout() { }
        /// Friend allocator used by soap_new_tt__Layout(struct soap*, int)
        friend SOAP_FMAC1 tt__Layout * SOAP_FMAC2 soap_instantiate_tt__Layout(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1550 */
#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (727)
/* Type tt__LayoutExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:LayoutExtension': */
class SOAP_CMAC tt__LayoutExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutExtension, default initialized and not managed by a soap context
        virtual tt__LayoutExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutExtension); }
      public:
        /// Constructor with default initializations
        tt__LayoutExtension() { }
        virtual ~tt__LayoutExtension() { }
        /// Friend allocator used by soap_new_tt__LayoutExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1552 */
#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (728)
/* Type tt__CodingCapabilities is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:CodingCapabilities': */
class SOAP_CMAC tt__CodingCapabilities : public xsd__anyType {
      public:
        /// Optional element 'tt:AudioEncodingCapabilities' of XML schema type 'tt:AudioEncoderConfigurationOptions'
        tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;
        /// Optional element 'tt:AudioDecodingCapabilities' of XML schema type 'tt:AudioDecoderConfigurationOptions'
        tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;
        /// Required element 'tt:VideoDecodingCapabilities' of XML schema type 'tt:VideoDecoderConfigurationOptions'
        tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;
      public:
        /// Return unique type id SOAP_TYPE_tt__CodingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CodingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CodingCapabilities, default initialized and not managed by a soap context
        virtual tt__CodingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CodingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__CodingCapabilities() : AudioEncodingCapabilities(), AudioDecodingCapabilities(), VideoDecodingCapabilities() { }
        virtual ~tt__CodingCapabilities() { }
        /// Friend allocator used by soap_new_tt__CodingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__CodingCapabilities * SOAP_FMAC2 soap_instantiate_tt__CodingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1554 */
#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (729)
/* Type tt__LayoutOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:LayoutOptions': */
class SOAP_CMAC tt__LayoutOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:PaneLayoutOptions' of XML schema type 'tt:PaneLayoutOptions' stored in dynamic array PaneLayoutOptions of length __sizePaneLayoutOptions
        int __sizePaneLayoutOptions;
        tt__PaneLayoutOptions **PaneLayoutOptions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:LayoutOptionsExtension'
        tt__LayoutOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutOptions, default initialized and not managed by a soap context
        virtual tt__LayoutOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutOptions); }
      public:
        /// Constructor with default initializations
        tt__LayoutOptions() : __sizePaneLayoutOptions(), PaneLayoutOptions(), Extension() { }
        virtual ~tt__LayoutOptions() { }
        /// Friend allocator used by soap_new_tt__LayoutOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutOptions * SOAP_FMAC2 soap_instantiate_tt__LayoutOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1556 */
#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (730)
/* Type tt__LayoutOptionsExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:LayoutOptionsExtension': */
class SOAP_CMAC tt__LayoutOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__LayoutOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LayoutOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LayoutOptionsExtension, default initialized and not managed by a soap context
        virtual tt__LayoutOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LayoutOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__LayoutOptionsExtension() { }
        virtual ~tt__LayoutOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__LayoutOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__LayoutOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1558 */
#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (731)
/* Type tt__PaneLayoutOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PaneLayoutOptions': */
class SOAP_CMAC tt__PaneLayoutOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Area' of XML schema type 'tt:Rectangle' stored in dynamic array Area of length __sizeArea
        int __sizeArea;
        tt__Rectangle **Area;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PaneOptionExtension'
        tt__PaneOptionExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneLayoutOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneLayoutOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneLayoutOptions, default initialized and not managed by a soap context
        virtual tt__PaneLayoutOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneLayoutOptions); }
      public:
        /// Constructor with default initializations
        tt__PaneLayoutOptions() : __sizeArea(), Area(), Extension() { }
        virtual ~tt__PaneLayoutOptions() { }
        /// Friend allocator used by soap_new_tt__PaneLayoutOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneLayoutOptions * SOAP_FMAC2 soap_instantiate_tt__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1560 */
#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (732)
/* Type tt__PaneOptionExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:PaneOptionExtension': */
class SOAP_CMAC tt__PaneOptionExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__PaneOptionExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PaneOptionExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PaneOptionExtension, default initialized and not managed by a soap context
        virtual tt__PaneOptionExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PaneOptionExtension); }
      public:
        /// Constructor with default initializations
        tt__PaneOptionExtension() { }
        virtual ~tt__PaneOptionExtension() { }
        /// Friend allocator used by soap_new_tt__PaneOptionExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__PaneOptionExtension * SOAP_FMAC2 soap_instantiate_tt__PaneOptionExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1562 */
#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (733)
/* Type tt__Receiver is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:Receiver': */
class SOAP_CMAC tt__Receiver : public xsd__anyType {
      public:
        /// Required element 'tt:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Required element 'tt:Configuration' of XML schema type 'tt:ReceiverConfiguration'
        tt__ReceiverConfiguration *Configuration;
      public:
        /// Return unique type id SOAP_TYPE_tt__Receiver
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Receiver; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Receiver, default initialized and not managed by a soap context
        virtual tt__Receiver *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Receiver); }
      public:
        /// Constructor with default initializations
        tt__Receiver() : Token(), Configuration() { }
        virtual ~tt__Receiver() { }
        /// Friend allocator used by soap_new_tt__Receiver(struct soap*, int)
        friend SOAP_FMAC1 tt__Receiver * SOAP_FMAC2 soap_instantiate_tt__Receiver(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1564 */
#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (734)
/* complex XML schema type 'tt:ReceiverConfiguration': */
class SOAP_CMAC tt__ReceiverConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:ReceiverMode'
        enum tt__ReceiverMode Mode;
        /// Required element 'tt:MediaUri' of XML schema type 'xsd:anyURI'
        char *MediaUri;
        /// Required element 'tt:StreamSetup' of XML schema type 'tt:StreamSetup'
        tt__StreamSetup *StreamSetup;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverConfiguration, default initialized and not managed by a soap context
        virtual tt__ReceiverConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverConfiguration); }
      public:
        /// Constructor with default initializations
        tt__ReceiverConfiguration() : Mode(), MediaUri(), StreamSetup() { }
        virtual ~tt__ReceiverConfiguration() { }
        /// Friend allocator used by soap_new_tt__ReceiverConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1566 */
#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (735)
/* Type tt__ReceiverStateInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ReceiverStateInformation': */
class SOAP_CMAC tt__ReceiverStateInformation : public xsd__anyType {
      public:
        /// Required element 'tt:State' of XML schema type 'tt:ReceiverState'
        enum tt__ReceiverState State;
        /// Required element 'tt:AutoCreated' of XML schema type 'xsd:boolean'
        bool AutoCreated;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverStateInformation, default initialized and not managed by a soap context
        virtual tt__ReceiverStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverStateInformation); }
      public:
        /// Constructor with default initializations
        tt__ReceiverStateInformation() : State(), AutoCreated() { }
        virtual ~tt__ReceiverStateInformation() { }
        /// Friend allocator used by soap_new_tt__ReceiverStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverStateInformation * SOAP_FMAC2 soap_instantiate_tt__ReceiverStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1568 */
#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (736)
/* Type tt__SourceReference is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SourceReference': */
class SOAP_CMAC tt__SourceReference : public xsd__anyType {
      public:
        /// Required element 'tt:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Optional attribute 'Type' of XML schema type 'xsd:anyURI'
        char *Type;	///< initialized with default value = (char*)"http://www.onvif.org/ver10/schema/Receiver"
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceReference
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceReference, default initialized and not managed by a soap context
        virtual tt__SourceReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceReference); }
      public:
        /// Constructor with default initializations
        tt__SourceReference() : Token(), Type((char*)"http://www.onvif.org/ver10/schema/Receiver") { }
        virtual ~tt__SourceReference() { }
        /// Friend allocator used by soap_new_tt__SourceReference(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceReference * SOAP_FMAC2 soap_instantiate_tt__SourceReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1570 */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (737)
/* Type tt__DateTimeRange is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:DateTimeRange': */
class SOAP_CMAC tt__DateTimeRange : public xsd__anyType {
      public:
        /// Required element 'tt:From' of XML schema type 'xsd:dateTime'
        time_t From;
        /// Required element 'tt:Until' of XML schema type 'xsd:dateTime'
        time_t Until;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTimeRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTimeRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTimeRange, default initialized and not managed by a soap context
        virtual tt__DateTimeRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTimeRange); }
      public:
        /// Constructor with default initializations
        tt__DateTimeRange() : From(), Until() { }
        virtual ~tt__DateTimeRange() { }
        /// Friend allocator used by soap_new_tt__DateTimeRange(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1572 */
#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (738)
/* Type tt__RecordingSummary is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingSummary': */
class SOAP_CMAC tt__RecordingSummary : public xsd__anyType {
      public:
        /// Required element 'tt:DataFrom' of XML schema type 'xsd:dateTime'
        time_t DataFrom;
        /// Required element 'tt:DataUntil' of XML schema type 'xsd:dateTime'
        time_t DataUntil;
        /// Required element 'tt:NumberRecordings' of XML schema type 'xsd:int'
        int NumberRecordings;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingSummary
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingSummary, default initialized and not managed by a soap context
        virtual tt__RecordingSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingSummary); }
      public:
        /// Constructor with default initializations
        tt__RecordingSummary() : DataFrom(), DataUntil(), NumberRecordings() { }
        virtual ~tt__RecordingSummary() { }
        /// Friend allocator used by soap_new_tt__RecordingSummary(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingSummary * SOAP_FMAC2 soap_instantiate_tt__RecordingSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1574 */
#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (739)
/* Type tt__SearchScope is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SearchScope': */
class SOAP_CMAC tt__SearchScope : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:IncludedSources' of XML schema type 'tt:SourceReference' stored in dynamic array IncludedSources of length __sizeIncludedSources
        int __sizeIncludedSources;
        tt__SourceReference **IncludedSources;
        /// Sequence of elements 'tt:IncludedRecordings' of XML schema type 'tt:RecordingReference' stored in dynamic array IncludedRecordings of length __sizeIncludedRecordings
        int __sizeIncludedRecordings;
        char **IncludedRecordings;
        /// Optional element 'tt:RecordingInformationFilter' of XML schema type 'tt:XPathExpression'
        char *RecordingInformationFilter;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SearchScopeExtension'
        tt__SearchScopeExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchScope
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchScope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchScope, default initialized and not managed by a soap context
        virtual tt__SearchScope *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchScope); }
      public:
        /// Constructor with default initializations
        tt__SearchScope() : __sizeIncludedSources(), IncludedSources(), __sizeIncludedRecordings(), IncludedRecordings(), RecordingInformationFilter(), Extension() { }
        virtual ~tt__SearchScope() { }
        /// Friend allocator used by soap_new_tt__SearchScope(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchScope * SOAP_FMAC2 soap_instantiate_tt__SearchScope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1576 */
#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (740)
/* Type tt__SearchScopeExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SearchScopeExtension': */
class SOAP_CMAC tt__SearchScopeExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchScopeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchScopeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchScopeExtension, default initialized and not managed by a soap context
        virtual tt__SearchScopeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchScopeExtension); }
      public:
        /// Constructor with default initializations
        tt__SearchScopeExtension() { }
        virtual ~tt__SearchScopeExtension() { }
        /// Friend allocator used by soap_new_tt__SearchScopeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchScopeExtension * SOAP_FMAC2 soap_instantiate_tt__SearchScopeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1580 */
#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (742)
/* Type tt__PTZPositionFilter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PTZPositionFilter': */
class SOAP_CMAC tt__PTZPositionFilter : public xsd__anyType {
      public:
        /// Required element 'tt:MinPosition' of XML schema type 'tt:PTZVector'
        tt__PTZVector *MinPosition;
        /// Required element 'tt:MaxPosition' of XML schema type 'tt:PTZVector'
        tt__PTZVector *MaxPosition;
        /// Required element 'tt:EnterOrExit' of XML schema type 'xsd:boolean'
        bool EnterOrExit;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZPositionFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZPositionFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZPositionFilter, default initialized and not managed by a soap context
        virtual tt__PTZPositionFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZPositionFilter); }
      public:
        /// Constructor with default initializations
        tt__PTZPositionFilter() : MinPosition(), MaxPosition(), EnterOrExit() { }
        virtual ~tt__PTZPositionFilter() { }
        /// Friend allocator used by soap_new_tt__PTZPositionFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZPositionFilter * SOAP_FMAC2 soap_instantiate_tt__PTZPositionFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1582 */
#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (743)
/* Type tt__MetadataFilter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MetadataFilter': */
class SOAP_CMAC tt__MetadataFilter : public xsd__anyType {
      public:
        /// Required element 'tt:MetadataStreamFilter' of XML schema type 'tt:XPathExpression'
        char *MetadataStreamFilter;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataFilter, default initialized and not managed by a soap context
        virtual tt__MetadataFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataFilter); }
      public:
        /// Constructor with default initializations
        tt__MetadataFilter() : MetadataStreamFilter() { }
        virtual ~tt__MetadataFilter() { }
        /// Friend allocator used by soap_new_tt__MetadataFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataFilter * SOAP_FMAC2 soap_instantiate_tt__MetadataFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1584 */
#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (744)
/* Type tt__FindRecordingResultList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindRecordingResultList': */
class SOAP_CMAC tt__FindRecordingResultList : public xsd__anyType {
      public:
        /// Required element 'tt:SearchState' of XML schema type 'tt:SearchState'
        enum tt__SearchState SearchState;
        /// Sequence of elements 'tt:RecordingInformation' of XML schema type 'tt:RecordingInformation' stored in dynamic array RecordingInformation of length __sizeRecordingInformation
        int __sizeRecordingInformation;
        tt__RecordingInformation **RecordingInformation;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindRecordingResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindRecordingResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindRecordingResultList, default initialized and not managed by a soap context
        virtual tt__FindRecordingResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindRecordingResultList); }
      public:
        /// Constructor with default initializations
        tt__FindRecordingResultList() : SearchState(), __sizeRecordingInformation(), RecordingInformation() { }
        virtual ~tt__FindRecordingResultList() { }
        /// Friend allocator used by soap_new_tt__FindRecordingResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindRecordingResultList * SOAP_FMAC2 soap_instantiate_tt__FindRecordingResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1586 */
#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (745)
/* Type tt__FindEventResultList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindEventResultList': */
class SOAP_CMAC tt__FindEventResultList : public xsd__anyType {
      public:
        /// Required element 'tt:SearchState' of XML schema type 'tt:SearchState'
        enum tt__SearchState SearchState;
        /// Sequence of elements 'tt:Result' of XML schema type 'tt:FindEventResult' stored in dynamic array Result of length __sizeResult
        int __sizeResult;
        tt__FindEventResult **Result;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindEventResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindEventResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindEventResultList, default initialized and not managed by a soap context
        virtual tt__FindEventResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindEventResultList); }
      public:
        /// Constructor with default initializations
        tt__FindEventResultList() : SearchState(), __sizeResult(), Result() { }
        virtual ~tt__FindEventResultList() { }
        /// Friend allocator used by soap_new_tt__FindEventResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindEventResultList * SOAP_FMAC2 soap_instantiate_tt__FindEventResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1588 */
#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (746)
/* Type tt__FindEventResult is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindEventResult': */
class SOAP_CMAC tt__FindEventResult : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:TrackToken' of XML schema type 'tt:TrackReference'
        char *TrackToken;
        /// Required element 'tt:Time' of XML schema type 'xsd:dateTime'
        time_t Time;
        /// Required element 'tt:Event' of XML schema type 'wsnt:NotificationMessageHolderType'
        wsnt__NotificationMessageHolderType *Event;
        /// Required element 'tt:StartStateEvent' of XML schema type 'xsd:boolean'
        bool StartStateEvent;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindEventResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindEventResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindEventResult, default initialized and not managed by a soap context
        virtual tt__FindEventResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindEventResult); }
      public:
        /// Constructor with default initializations
        tt__FindEventResult() : RecordingToken(), TrackToken(), Time(), Event(), StartStateEvent() { }
        virtual ~tt__FindEventResult() { }
        /// Friend allocator used by soap_new_tt__FindEventResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindEventResult * SOAP_FMAC2 soap_instantiate_tt__FindEventResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1590 */
#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (747)
/* Type tt__FindPTZPositionResultList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindPTZPositionResultList': */
class SOAP_CMAC tt__FindPTZPositionResultList : public xsd__anyType {
      public:
        /// Required element 'tt:SearchState' of XML schema type 'tt:SearchState'
        enum tt__SearchState SearchState;
        /// Sequence of elements 'tt:Result' of XML schema type 'tt:FindPTZPositionResult' stored in dynamic array Result of length __sizeResult
        int __sizeResult;
        tt__FindPTZPositionResult **Result;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindPTZPositionResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindPTZPositionResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindPTZPositionResultList, default initialized and not managed by a soap context
        virtual tt__FindPTZPositionResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindPTZPositionResultList); }
      public:
        /// Constructor with default initializations
        tt__FindPTZPositionResultList() : SearchState(), __sizeResult(), Result() { }
        virtual ~tt__FindPTZPositionResultList() { }
        /// Friend allocator used by soap_new_tt__FindPTZPositionResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindPTZPositionResultList * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1592 */
#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (748)
/* Type tt__FindPTZPositionResult is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindPTZPositionResult': */
class SOAP_CMAC tt__FindPTZPositionResult : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:TrackToken' of XML schema type 'tt:TrackReference'
        char *TrackToken;
        /// Required element 'tt:Time' of XML schema type 'xsd:dateTime'
        time_t Time;
        /// Required element 'tt:Position' of XML schema type 'tt:PTZVector'
        tt__PTZVector *Position;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindPTZPositionResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindPTZPositionResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindPTZPositionResult, default initialized and not managed by a soap context
        virtual tt__FindPTZPositionResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindPTZPositionResult); }
      public:
        /// Constructor with default initializations
        tt__FindPTZPositionResult() : RecordingToken(), TrackToken(), Time(), Position() { }
        virtual ~tt__FindPTZPositionResult() { }
        /// Friend allocator used by soap_new_tt__FindPTZPositionResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindPTZPositionResult * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1594 */
#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (749)
/* Type tt__FindMetadataResultList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindMetadataResultList': */
class SOAP_CMAC tt__FindMetadataResultList : public xsd__anyType {
      public:
        /// Required element 'tt:SearchState' of XML schema type 'tt:SearchState'
        enum tt__SearchState SearchState;
        /// Sequence of elements 'tt:Result' of XML schema type 'tt:FindMetadataResult' stored in dynamic array Result of length __sizeResult
        int __sizeResult;
        tt__FindMetadataResult **Result;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindMetadataResultList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindMetadataResultList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindMetadataResultList, default initialized and not managed by a soap context
        virtual tt__FindMetadataResultList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindMetadataResultList); }
      public:
        /// Constructor with default initializations
        tt__FindMetadataResultList() : SearchState(), __sizeResult(), Result() { }
        virtual ~tt__FindMetadataResultList() { }
        /// Friend allocator used by soap_new_tt__FindMetadataResultList(struct soap*, int)
        friend SOAP_FMAC1 tt__FindMetadataResultList * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResultList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1596 */
#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (750)
/* Type tt__FindMetadataResult is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FindMetadataResult': */
class SOAP_CMAC tt__FindMetadataResult : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:TrackToken' of XML schema type 'tt:TrackReference'
        char *TrackToken;
        /// Required element 'tt:Time' of XML schema type 'xsd:dateTime'
        time_t Time;
      public:
        /// Return unique type id SOAP_TYPE_tt__FindMetadataResult
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FindMetadataResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FindMetadataResult, default initialized and not managed by a soap context
        virtual tt__FindMetadataResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FindMetadataResult); }
      public:
        /// Constructor with default initializations
        tt__FindMetadataResult() : RecordingToken(), TrackToken(), Time() { }
        virtual ~tt__FindMetadataResult() { }
        /// Friend allocator used by soap_new_tt__FindMetadataResult(struct soap*, int)
        friend SOAP_FMAC1 tt__FindMetadataResult * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1598 */
#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (751)
/* Type tt__RecordingInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingInformation': */
class SOAP_CMAC tt__RecordingInformation : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:Source' of XML schema type 'tt:RecordingSourceInformation'
        tt__RecordingSourceInformation *Source;
        /// Optional element 'tt:EarliestRecording' of XML schema type 'xsd:dateTime'
        time_t *EarliestRecording;
        /// Optional element 'tt:LatestRecording' of XML schema type 'xsd:dateTime'
        time_t *LatestRecording;
        /// Required element 'tt:Content' of XML schema type 'tt:Description'
        char *Content;
        /// Sequence of elements 'tt:Track' of XML schema type 'tt:TrackInformation' stored in dynamic array Track of length __sizeTrack
        int __sizeTrack;
        tt__TrackInformation **Track;
        /// Required element 'tt:RecordingStatus' of XML schema type 'tt:RecordingStatus'
        enum tt__RecordingStatus RecordingStatus;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingInformation, default initialized and not managed by a soap context
        virtual tt__RecordingInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingInformation); }
      public:
        /// Constructor with default initializations
        tt__RecordingInformation() : RecordingToken(), Source(), EarliestRecording(), LatestRecording(), Content(), __sizeTrack(), Track(), RecordingStatus() { }
        virtual ~tt__RecordingInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1600 */
#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (752)
/* Type tt__RecordingSourceInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingSourceInformation': */
class SOAP_CMAC tt__RecordingSourceInformation : public xsd__anyType {
      public:
        /// Required element 'tt:SourceId' of XML schema type 'xsd:anyURI'
        char *SourceId;
        /// Required element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Required element 'tt:Location' of XML schema type 'tt:Description'
        char *Location;
        /// Required element 'tt:Description' of XML schema type 'tt:Description'
        char *Description;
        /// Required element 'tt:Address' of XML schema type 'xsd:anyURI'
        char *Address;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingSourceInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingSourceInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingSourceInformation, default initialized and not managed by a soap context
        virtual tt__RecordingSourceInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingSourceInformation); }
      public:
        /// Constructor with default initializations
        tt__RecordingSourceInformation() : SourceId(), Name(), Location(), Description(), Address() { }
        virtual ~tt__RecordingSourceInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingSourceInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingSourceInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingSourceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1602 */
#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (753)
/* Type tt__TrackInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:TrackInformation': */
class SOAP_CMAC tt__TrackInformation : public xsd__anyType {
      public:
        /// Required element 'tt:TrackToken' of XML schema type 'tt:TrackReference'
        char *TrackToken;
        /// Required element 'tt:TrackType' of XML schema type 'tt:TrackType'
        enum tt__TrackType TrackType;
        /// Required element 'tt:Description' of XML schema type 'tt:Description'
        char *Description;
        /// Required element 'tt:DataFrom' of XML schema type 'xsd:dateTime'
        time_t DataFrom;
        /// Required element 'tt:DataTo' of XML schema type 'xsd:dateTime'
        time_t DataTo;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackInformation, default initialized and not managed by a soap context
        virtual tt__TrackInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackInformation); }
      public:
        /// Constructor with default initializations
        tt__TrackInformation() : TrackToken(), TrackType(), Description(), DataFrom(), DataTo() { }
        virtual ~tt__TrackInformation() { }
        /// Friend allocator used by soap_new_tt__TrackInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackInformation * SOAP_FMAC2 soap_instantiate_tt__TrackInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1604 */
#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (754)
/* Type tt__MediaAttributes is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MediaAttributes': */
class SOAP_CMAC tt__MediaAttributes : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Sequence of elements 'tt:TrackAttributes' of XML schema type 'tt:TrackAttributes' stored in dynamic array TrackAttributes of length __sizeTrackAttributes
        int __sizeTrackAttributes;
        tt__TrackAttributes **TrackAttributes;
        /// Required element 'tt:From' of XML schema type 'xsd:dateTime'
        time_t From;
        /// Required element 'tt:Until' of XML schema type 'xsd:dateTime'
        time_t Until;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaAttributes, default initialized and not managed by a soap context
        virtual tt__MediaAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaAttributes); }
      public:
        /// Constructor with default initializations
        tt__MediaAttributes() : RecordingToken(), __sizeTrackAttributes(), TrackAttributes(), From(), Until() { }
        virtual ~tt__MediaAttributes() { }
        /// Friend allocator used by soap_new_tt__MediaAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaAttributes * SOAP_FMAC2 soap_instantiate_tt__MediaAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1606 */
#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (755)
/* Type tt__TrackAttributes is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:TrackAttributes': */
class SOAP_CMAC tt__TrackAttributes : public xsd__anyType {
      public:
        /// Required element 'tt:TrackInformation' of XML schema type 'tt:TrackInformation'
        tt__TrackInformation *TrackInformation;
        /// Optional element 'tt:VideoAttributes' of XML schema type 'tt:VideoAttributes'
        tt__VideoAttributes *VideoAttributes;
        /// Optional element 'tt:AudioAttributes' of XML schema type 'tt:AudioAttributes'
        tt__AudioAttributes *AudioAttributes;
        /// Optional element 'tt:MetadataAttributes' of XML schema type 'tt:MetadataAttributes'
        tt__MetadataAttributes *MetadataAttributes;
        /// Optional element 'tt:Extension' of XML schema type 'tt:TrackAttributesExtension'
        tt__TrackAttributesExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackAttributes, default initialized and not managed by a soap context
        virtual tt__TrackAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackAttributes); }
      public:
        /// Constructor with default initializations
        tt__TrackAttributes() : TrackInformation(), VideoAttributes(), AudioAttributes(), MetadataAttributes(), Extension() { }
        virtual ~tt__TrackAttributes() { }
        /// Friend allocator used by soap_new_tt__TrackAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackAttributes * SOAP_FMAC2 soap_instantiate_tt__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1608 */
#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (756)
/* Type tt__TrackAttributesExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:TrackAttributesExtension': */
class SOAP_CMAC tt__TrackAttributesExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackAttributesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackAttributesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackAttributesExtension, default initialized and not managed by a soap context
        virtual tt__TrackAttributesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackAttributesExtension); }
      public:
        /// Constructor with default initializations
        tt__TrackAttributesExtension() { }
        virtual ~tt__TrackAttributesExtension() { }
        /// Friend allocator used by soap_new_tt__TrackAttributesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackAttributesExtension * SOAP_FMAC2 soap_instantiate_tt__TrackAttributesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1610 */
#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (757)
/* Type tt__VideoAttributes is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:VideoAttributes': */
class SOAP_CMAC tt__VideoAttributes : public xsd__anyType {
      public:
        /// Optional element 'tt:Bitrate' of XML schema type 'xsd:int'
        int *Bitrate;
        /// Required element 'tt:Width' of XML schema type 'xsd:int'
        int Width;
        /// Required element 'tt:Height' of XML schema type 'xsd:int'
        int Height;
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tt:Framerate' of XML schema type 'xsd:float'
        float Framerate;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoAttributes, default initialized and not managed by a soap context
        virtual tt__VideoAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoAttributes); }
      public:
        /// Constructor with default initializations
        tt__VideoAttributes() : Bitrate(), Width(), Height(), Encoding(), Framerate() { }
        virtual ~tt__VideoAttributes() { }
        /// Friend allocator used by soap_new_tt__VideoAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoAttributes * SOAP_FMAC2 soap_instantiate_tt__VideoAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1612 */
#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (758)
/* Type tt__AudioAttributes is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AudioAttributes': */
class SOAP_CMAC tt__AudioAttributes : public xsd__anyType {
      public:
        /// Optional element 'tt:Bitrate' of XML schema type 'xsd:int'
        int *Bitrate;
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tt:Samplerate' of XML schema type 'xsd:int'
        int Samplerate;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioAttributes, default initialized and not managed by a soap context
        virtual tt__AudioAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioAttributes); }
      public:
        /// Constructor with default initializations
        tt__AudioAttributes() : Bitrate(), Encoding(), Samplerate() { }
        virtual ~tt__AudioAttributes() { }
        /// Friend allocator used by soap_new_tt__AudioAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioAttributes * SOAP_FMAC2 soap_instantiate_tt__AudioAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1614 */
#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (759)
/* Type tt__MetadataAttributes is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MetadataAttributes': */
class SOAP_CMAC tt__MetadataAttributes : public xsd__anyType {
      public:
        /// Required element 'tt:CanContainPTZ' of XML schema type 'xsd:boolean'
        bool CanContainPTZ;
        /// Required element 'tt:CanContainAnalytics' of XML schema type 'xsd:boolean'
        bool CanContainAnalytics;
        /// Required element 'tt:CanContainNotifications' of XML schema type 'xsd:boolean'
        bool CanContainNotifications;
        /// Optional attribute 'PtzSpaces' of XML schema type 'tt:StringAttrList'
        char *PtzSpaces;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataAttributes
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataAttributes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataAttributes, default initialized and not managed by a soap context
        virtual tt__MetadataAttributes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataAttributes); }
      public:
        /// Constructor with default initializations
        tt__MetadataAttributes() : CanContainPTZ(), CanContainAnalytics(), CanContainNotifications(), PtzSpaces() { }
        virtual ~tt__MetadataAttributes() { }
        /// Friend allocator used by soap_new_tt__MetadataAttributes(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataAttributes * SOAP_FMAC2 soap_instantiate_tt__MetadataAttributes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1616 */
#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (760)
/* Type tt__RecordingConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingConfiguration': */
class SOAP_CMAC tt__RecordingConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Source' of XML schema type 'tt:RecordingSourceInformation'
        tt__RecordingSourceInformation *Source;
        /// Required element 'tt:Content' of XML schema type 'tt:Description'
        char *Content;
        /// Required element 'tt:MaximumRetentionTime' of XML schema type 'xsd:duration'
        char *MaximumRetentionTime;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingConfiguration, default initialized and not managed by a soap context
        virtual tt__RecordingConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingConfiguration); }
      public:
        /// Constructor with default initializations
        tt__RecordingConfiguration() : Source(), Content(), MaximumRetentionTime() { }
        virtual ~tt__RecordingConfiguration() { }
        /// Friend allocator used by soap_new_tt__RecordingConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1618 */
#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (761)
/* Type tt__TrackConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:TrackConfiguration': */
class SOAP_CMAC tt__TrackConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:TrackType' of XML schema type 'tt:TrackType'
        enum tt__TrackType TrackType;
        /// Required element 'tt:Description' of XML schema type 'tt:Description'
        char *Description;
      public:
        /// Return unique type id SOAP_TYPE_tt__TrackConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TrackConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TrackConfiguration, default initialized and not managed by a soap context
        virtual tt__TrackConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TrackConfiguration); }
      public:
        /// Constructor with default initializations
        tt__TrackConfiguration() : TrackType(), Description() { }
        virtual ~tt__TrackConfiguration() { }
        /// Friend allocator used by soap_new_tt__TrackConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__TrackConfiguration * SOAP_FMAC2 soap_instantiate_tt__TrackConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1620 */
#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (762)
/* Type tt__GetRecordingsResponseItem is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:GetRecordingsResponseItem': */
class SOAP_CMAC tt__GetRecordingsResponseItem : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:Configuration' of XML schema type 'tt:RecordingConfiguration'
        tt__RecordingConfiguration *Configuration;
        /// Required element 'tt:Tracks' of XML schema type 'tt:GetTracksResponseList'
        tt__GetTracksResponseList *Tracks;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetRecordingsResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetRecordingsResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetRecordingsResponseItem, default initialized and not managed by a soap context
        virtual tt__GetRecordingsResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetRecordingsResponseItem); }
      public:
        /// Constructor with default initializations
        tt__GetRecordingsResponseItem() : RecordingToken(), Configuration(), Tracks() { }
        virtual ~tt__GetRecordingsResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetRecordingsResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetRecordingsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingsResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1622 */
#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (763)
/* Type tt__GetTracksResponseList is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:GetTracksResponseList': */
class SOAP_CMAC tt__GetTracksResponseList : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Track' of XML schema type 'tt:GetTracksResponseItem' stored in dynamic array Track of length __sizeTrack
        int __sizeTrack;
        tt__GetTracksResponseItem **Track;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetTracksResponseList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetTracksResponseList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetTracksResponseList, default initialized and not managed by a soap context
        virtual tt__GetTracksResponseList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetTracksResponseList); }
      public:
        /// Constructor with default initializations
        tt__GetTracksResponseList() : __sizeTrack(), Track() { }
        virtual ~tt__GetTracksResponseList() { }
        /// Friend allocator used by soap_new_tt__GetTracksResponseList(struct soap*, int)
        friend SOAP_FMAC1 tt__GetTracksResponseList * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1624 */
#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (764)
/* Type tt__GetTracksResponseItem is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:GetTracksResponseItem': */
class SOAP_CMAC tt__GetTracksResponseItem : public xsd__anyType {
      public:
        /// Required element 'tt:TrackToken' of XML schema type 'tt:TrackReference'
        char *TrackToken;
        /// Required element 'tt:Configuration' of XML schema type 'tt:TrackConfiguration'
        tt__TrackConfiguration *Configuration;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetTracksResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetTracksResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetTracksResponseItem, default initialized and not managed by a soap context
        virtual tt__GetTracksResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetTracksResponseItem); }
      public:
        /// Constructor with default initializations
        tt__GetTracksResponseItem() : TrackToken(), Configuration() { }
        virtual ~tt__GetTracksResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetTracksResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetTracksResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1626 */
#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (765)
/* Type tt__RecordingJobConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobConfiguration': */
class SOAP_CMAC tt__RecordingJobConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:Mode' of XML schema type 'tt:RecordingJobMode'
        char *Mode;
        /// Required element 'tt:Priority' of XML schema type 'xsd:int'
        int Priority;
        /// Sequence of elements 'tt:Source' of XML schema type 'tt:RecordingJobSource' stored in dynamic array Source of length __sizeSource
        int __sizeSource;
        tt__RecordingJobSource **Source;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RecordingJobConfigurationExtension'
        tt__RecordingJobConfigurationExtension *Extension;
        /// Optional attribute 'ScheduleToken' of XML schema type 'xsd:string'
        char *ScheduleToken;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobConfiguration, default initialized and not managed by a soap context
        virtual tt__RecordingJobConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobConfiguration); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobConfiguration() : RecordingToken(), Mode(), Priority(), __sizeSource(), Source(), Extension(), ScheduleToken() { }
        virtual ~tt__RecordingJobConfiguration() { }
        /// Friend allocator used by soap_new_tt__RecordingJobConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1628 */
#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (766)
/* Type tt__RecordingJobConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:RecordingJobConfigurationExtension': */
class SOAP_CMAC tt__RecordingJobConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobConfigurationExtension() { }
        virtual ~tt__RecordingJobConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1630 */
#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (767)
/* Type tt__RecordingJobSource is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobSource': */
class SOAP_CMAC tt__RecordingJobSource : public xsd__anyType {
      public:
        /// Optional element 'tt:SourceToken' of XML schema type 'tt:SourceReference'
        tt__SourceReference *SourceToken;
        /// Optional element 'tt:AutoCreateReceiver' of XML schema type 'xsd:boolean'
        bool *AutoCreateReceiver;
        /// Sequence of elements 'tt:Tracks' of XML schema type 'tt:RecordingJobTrack' stored in dynamic array Tracks of length __sizeTracks
        int __sizeTracks;
        tt__RecordingJobTrack **Tracks;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RecordingJobSourceExtension'
        tt__RecordingJobSourceExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobSource, default initialized and not managed by a soap context
        virtual tt__RecordingJobSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobSource); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobSource() : SourceToken(), AutoCreateReceiver(), __sizeTracks(), Tracks(), Extension() { }
        virtual ~tt__RecordingJobSource() { }
        /// Friend allocator used by soap_new_tt__RecordingJobSource(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1632 */
#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (768)
/* Type tt__RecordingJobSourceExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:RecordingJobSourceExtension': */
class SOAP_CMAC tt__RecordingJobSourceExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobSourceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobSourceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobSourceExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobSourceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobSourceExtension); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobSourceExtension() { }
        virtual ~tt__RecordingJobSourceExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobSourceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobSourceExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSourceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1634 */
#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (769)
/* Type tt__RecordingJobTrack is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobTrack': */
class SOAP_CMAC tt__RecordingJobTrack : public xsd__anyType {
      public:
        /// Required element 'tt:SourceTag' of XML schema type 'xsd:string'
        char *SourceTag;
        /// Required element 'tt:Destination' of XML schema type 'tt:TrackReference'
        char *Destination;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobTrack
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobTrack, default initialized and not managed by a soap context
        virtual tt__RecordingJobTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobTrack); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobTrack() : SourceTag(), Destination() { }
        virtual ~tt__RecordingJobTrack() { }
        /// Friend allocator used by soap_new_tt__RecordingJobTrack(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1636 */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (770)
/* Type tt__RecordingJobStateInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobStateInformation': */
class SOAP_CMAC tt__RecordingJobStateInformation : public xsd__anyType {
      public:
        /// Required element 'tt:RecordingToken' of XML schema type 'tt:RecordingReference'
        char *RecordingToken;
        /// Required element 'tt:State' of XML schema type 'tt:RecordingJobState'
        char *State;
        /// Sequence of elements 'tt:Sources' of XML schema type 'tt:RecordingJobStateSource' stored in dynamic array Sources of length __sizeSources
        int __sizeSources;
        tt__RecordingJobStateSource **Sources;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RecordingJobStateInformationExtension'
        tt__RecordingJobStateInformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateInformation, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateInformation); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobStateInformation() : RecordingToken(), State(), __sizeSources(), Sources(), Extension() { }
        virtual ~tt__RecordingJobStateInformation() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1638 */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (771)
/* Type tt__RecordingJobStateInformationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:RecordingJobStateInformationExtension': */
class SOAP_CMAC tt__RecordingJobStateInformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateInformationExtension, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobStateInformationExtension() { }
        virtual ~tt__RecordingJobStateInformationExtension() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1640 */
#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (772)
/* Type tt__RecordingJobStateSource is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobStateSource': */
class SOAP_CMAC tt__RecordingJobStateSource : public xsd__anyType {
      public:
        /// Required element 'tt:SourceToken' of XML schema type 'tt:SourceReference'
        tt__SourceReference *SourceToken;
        /// Required element 'tt:State' of XML schema type 'tt:RecordingJobState'
        char *State;
        /// Required element 'tt:Tracks' of XML schema type 'tt:RecordingJobStateTracks'
        tt__RecordingJobStateTracks *Tracks;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateSource, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateSource); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobStateSource() : SourceToken(), State(), Tracks() { }
        virtual ~tt__RecordingJobStateSource() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateSource(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1642 */
#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (773)
/* Type tt__RecordingJobStateTracks is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobStateTracks': */
class SOAP_CMAC tt__RecordingJobStateTracks : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:Track' of XML schema type 'tt:RecordingJobStateTrack' stored in dynamic array Track of length __sizeTrack
        int __sizeTrack;
        tt__RecordingJobStateTrack **Track;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateTracks
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateTracks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateTracks, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateTracks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateTracks); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobStateTracks() : __sizeTrack(), Track() { }
        virtual ~tt__RecordingJobStateTracks() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateTracks(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateTracks * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTracks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1644 */
#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (774)
/* Type tt__RecordingJobStateTrack is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RecordingJobStateTrack': */
class SOAP_CMAC tt__RecordingJobStateTrack : public xsd__anyType {
      public:
        /// Required element 'tt:SourceTag' of XML schema type 'xsd:string'
        char *SourceTag;
        /// Required element 'tt:Destination' of XML schema type 'tt:TrackReference'
        char *Destination;
        /// Optional element 'tt:Error' of XML schema type 'xsd:string'
        char *Error;
        /// Required element 'tt:State' of XML schema type 'tt:RecordingJobState'
        char *State;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingJobStateTrack
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingJobStateTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingJobStateTrack, default initialized and not managed by a soap context
        virtual tt__RecordingJobStateTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingJobStateTrack); }
      public:
        /// Constructor with default initializations
        tt__RecordingJobStateTrack() : SourceTag(), Destination(), Error(), State() { }
        virtual ~tt__RecordingJobStateTrack() { }
        /// Friend allocator used by soap_new_tt__RecordingJobStateTrack(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingJobStateTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1646 */
#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (775)
/* Type tt__GetRecordingJobsResponseItem is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:GetRecordingJobsResponseItem': */
class SOAP_CMAC tt__GetRecordingJobsResponseItem : public xsd__anyType {
      public:
        /// Required element 'tt:JobToken' of XML schema type 'tt:RecordingJobReference'
        char *JobToken;
        /// Required element 'tt:JobConfiguration' of XML schema type 'tt:RecordingJobConfiguration'
        tt__RecordingJobConfiguration *JobConfiguration;
      public:
        /// Return unique type id SOAP_TYPE_tt__GetRecordingJobsResponseItem
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GetRecordingJobsResponseItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GetRecordingJobsResponseItem, default initialized and not managed by a soap context
        virtual tt__GetRecordingJobsResponseItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GetRecordingJobsResponseItem); }
      public:
        /// Constructor with default initializations
        tt__GetRecordingJobsResponseItem() : JobToken(), JobConfiguration() { }
        virtual ~tt__GetRecordingJobsResponseItem() { }
        /// Friend allocator used by soap_new_tt__GetRecordingJobsResponseItem(struct soap*, int)
        friend SOAP_FMAC1 tt__GetRecordingJobsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingJobsResponseItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1648 */
#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (776)
/* Type tt__ReplayConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ReplayConfiguration': */
class SOAP_CMAC tt__ReplayConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:SessionTimeout' of XML schema type 'xsd:duration'
        char *SessionTimeout;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReplayConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReplayConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReplayConfiguration, default initialized and not managed by a soap context
        virtual tt__ReplayConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReplayConfiguration); }
      public:
        /// Constructor with default initializations
        tt__ReplayConfiguration() : SessionTimeout() { }
        virtual ~tt__ReplayConfiguration() { }
        /// Friend allocator used by soap_new_tt__ReplayConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__ReplayConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReplayConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1652 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (778)
/* Type tt__AnalyticsDeviceEngineConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsDeviceEngineConfiguration': */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:EngineConfiguration' of XML schema type 'tt:EngineConfiguration' stored in dynamic array EngineConfiguration of length __sizeEngineConfiguration
        int __sizeEngineConfiguration;
        tt__EngineConfiguration **EngineConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AnalyticsDeviceEngineConfigurationExtension'
        tt__AnalyticsDeviceEngineConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceEngineConfiguration, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceEngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceEngineConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceEngineConfiguration() : __sizeEngineConfiguration(), EngineConfiguration(), Extension() { }
        virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1654 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (779)
/* Type tt__AnalyticsDeviceEngineConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:AnalyticsDeviceEngineConfigurationExtension': */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceEngineConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceEngineConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceEngineConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceEngineConfigurationExtension() { }
        virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1656 */
#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (780)
/* Type tt__EngineConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:EngineConfiguration': */
class SOAP_CMAC tt__EngineConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:VideoAnalyticsConfiguration' of XML schema type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;
        /// Required element 'tt:AnalyticsEngineInputInfo' of XML schema type 'tt:AnalyticsEngineInputInfo'
        tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;
      public:
        /// Return unique type id SOAP_TYPE_tt__EngineConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EngineConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EngineConfiguration, default initialized and not managed by a soap context
        virtual tt__EngineConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EngineConfiguration); }
      public:
        /// Constructor with default initializations
        tt__EngineConfiguration() : VideoAnalyticsConfiguration(), AnalyticsEngineInputInfo() { }
        virtual ~tt__EngineConfiguration() { }
        /// Friend allocator used by soap_new_tt__EngineConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__EngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1658 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (781)
/* Type tt__AnalyticsEngineInputInfo is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsEngineInputInfo': */
class SOAP_CMAC tt__AnalyticsEngineInputInfo : public xsd__anyType {
      public:
        /// Optional element 'tt:InputInfo' of XML schema type 'tt:Config'
        tt__Config *InputInfo;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AnalyticsEngineInputInfoExtension'
        tt__AnalyticsEngineInputInfoExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInputInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInputInfo, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInputInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInputInfo); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineInputInfo() : InputInfo(), Extension() { }
        virtual ~tt__AnalyticsEngineInputInfo() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInputInfo(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInputInfo * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1660 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (782)
/* Type tt__AnalyticsEngineInputInfoExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:AnalyticsEngineInputInfoExtension': */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInputInfoExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInputInfoExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInputInfoExtension); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineInputInfoExtension() { }
        virtual ~tt__AnalyticsEngineInputInfoExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInputInfoExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfoExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1664 */
#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (784)
/* Type tt__SourceIdentification is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:SourceIdentification': */
class SOAP_CMAC tt__SourceIdentification : public xsd__anyType {
      public:
        /// Required element 'tt:Name' of XML schema type 'xsd:string'
        char *Name;
        /// Sequence of at least 1 elements 'tt:Token' of XML schema type 'tt:ReferenceToken' stored in dynamic array Token of length __sizeToken
        int __sizeToken;
        char **Token;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SourceIdentificationExtension'
        tt__SourceIdentificationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceIdentification
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceIdentification; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceIdentification, default initialized and not managed by a soap context
        virtual tt__SourceIdentification *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceIdentification); }
      public:
        /// Constructor with default initializations
        tt__SourceIdentification() : Name(), __sizeToken(), Token(), Extension() { }
        virtual ~tt__SourceIdentification() { }
        /// Friend allocator used by soap_new_tt__SourceIdentification(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceIdentification * SOAP_FMAC2 soap_instantiate_tt__SourceIdentification(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1666 */
#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (785)
/* Type tt__SourceIdentificationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:SourceIdentificationExtension': */
class SOAP_CMAC tt__SourceIdentificationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__SourceIdentificationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SourceIdentificationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SourceIdentificationExtension, default initialized and not managed by a soap context
        virtual tt__SourceIdentificationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SourceIdentificationExtension); }
      public:
        /// Constructor with default initializations
        tt__SourceIdentificationExtension() { }
        virtual ~tt__SourceIdentificationExtension() { }
        /// Friend allocator used by soap_new_tt__SourceIdentificationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SourceIdentificationExtension * SOAP_FMAC2 soap_instantiate_tt__SourceIdentificationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1668 */
#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (786)
/* Type tt__MetadataInput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:MetadataInput': */
class SOAP_CMAC tt__MetadataInput : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:MetadataConfig' of XML schema type 'tt:Config' stored in dynamic array MetadataConfig of length __sizeMetadataConfig
        int __sizeMetadataConfig;
        tt__Config **MetadataConfig;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MetadataInputExtension'
        tt__MetadataInputExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataInput, default initialized and not managed by a soap context
        virtual tt__MetadataInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataInput); }
      public:
        /// Constructor with default initializations
        tt__MetadataInput() : __sizeMetadataConfig(), MetadataConfig(), Extension() { }
        virtual ~tt__MetadataInput() { }
        /// Friend allocator used by soap_new_tt__MetadataInput(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataInput * SOAP_FMAC2 soap_instantiate_tt__MetadataInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1670 */
#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (787)
/* Type tt__MetadataInputExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:MetadataInputExtension': */
class SOAP_CMAC tt__MetadataInputExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataInputExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataInputExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataInputExtension, default initialized and not managed by a soap context
        virtual tt__MetadataInputExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataInputExtension); }
      public:
        /// Constructor with default initializations
        tt__MetadataInputExtension() { }
        virtual ~tt__MetadataInputExtension() { }
        /// Friend allocator used by soap_new_tt__MetadataInputExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataInputExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataInputExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1674 */
#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (789)
/* Type tt__AnalyticsStateInformation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsStateInformation': */
class SOAP_CMAC tt__AnalyticsStateInformation : public xsd__anyType {
      public:
        /// Required element 'tt:AnalyticsEngineControlToken' of XML schema type 'tt:ReferenceToken'
        char *AnalyticsEngineControlToken;
        /// Required element 'tt:State' of XML schema type 'tt:AnalyticsState'
        tt__AnalyticsState *State;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsStateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsStateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsStateInformation, default initialized and not managed by a soap context
        virtual tt__AnalyticsStateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsStateInformation); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsStateInformation() : AnalyticsEngineControlToken(), State() { }
        virtual ~tt__AnalyticsStateInformation() { }
        /// Friend allocator used by soap_new_tt__AnalyticsStateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsStateInformation * SOAP_FMAC2 soap_instantiate_tt__AnalyticsStateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1676 */
#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (790)
/* Type tt__AnalyticsState is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsState': */
class SOAP_CMAC tt__AnalyticsState : public xsd__anyType {
      public:
        /// Optional element 'tt:Error' of XML schema type 'xsd:string'
        char *Error;
        /// Required element 'tt:State' of XML schema type 'xsd:string'
        char *State;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsState
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsState, default initialized and not managed by a soap context
        virtual tt__AnalyticsState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsState); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsState() : Error(), State() { }
        virtual ~tt__AnalyticsState() { }
        /// Friend allocator used by soap_new_tt__AnalyticsState(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsState * SOAP_FMAC2 soap_instantiate_tt__AnalyticsState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1678 */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (791)
/* Type tt__ActionEngineEventPayload is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ActionEngineEventPayload': */
class SOAP_CMAC tt__ActionEngineEventPayload : public xsd__anyType {
      public:
        /// Optional element 'tt:RequestInfo' of XML schema type 'SOAP-ENV:Envelope'
        struct SOAP_ENV__Envelope *RequestInfo;
        /// Optional element 'tt:ResponseInfo' of XML schema type 'SOAP-ENV:Envelope'
        struct SOAP_ENV__Envelope *ResponseInfo;
        /// Optional element 'tt:Fault' of XML schema type 'SOAP-ENV:Fault'
        struct SOAP_ENV__Fault *Fault;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ActionEngineEventPayloadExtension'
        tt__ActionEngineEventPayloadExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ActionEngineEventPayload
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActionEngineEventPayload; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActionEngineEventPayload, default initialized and not managed by a soap context
        virtual tt__ActionEngineEventPayload *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActionEngineEventPayload); }
      public:
        /// Constructor with default initializations
        tt__ActionEngineEventPayload() : RequestInfo(), ResponseInfo(), Fault(), Extension() { }
        virtual ~tt__ActionEngineEventPayload() { }
        /// Friend allocator used by soap_new_tt__ActionEngineEventPayload(struct soap*, int)
        friend SOAP_FMAC1 tt__ActionEngineEventPayload * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayload(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1680 */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (792)
/* Type tt__ActionEngineEventPayloadExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:ActionEngineEventPayloadExtension': */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ActionEngineEventPayloadExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActionEngineEventPayloadExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActionEngineEventPayloadExtension, default initialized and not managed by a soap context
        virtual tt__ActionEngineEventPayloadExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActionEngineEventPayloadExtension); }
      public:
        /// Constructor with default initializations
        tt__ActionEngineEventPayloadExtension() { }
        virtual ~tt__ActionEngineEventPayloadExtension() { }
        /// Friend allocator used by soap_new_tt__ActionEngineEventPayloadExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ActionEngineEventPayloadExtension * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayloadExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1682 */
#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (793)
/* Type tt__AudioClassCandidate is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AudioClassCandidate': */
class SOAP_CMAC tt__AudioClassCandidate : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:AudioClassType'
        enum tt__AudioClassType Type;
        /// Required element 'tt:Likelihood' of XML schema type 'xsd:float'
        float Likelihood;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassCandidate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassCandidate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassCandidate, default initialized and not managed by a soap context
        virtual tt__AudioClassCandidate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassCandidate); }
      public:
        /// Constructor with default initializations
        tt__AudioClassCandidate() : Type(), Likelihood() { }
        virtual ~tt__AudioClassCandidate() { }
        /// Friend allocator used by soap_new_tt__AudioClassCandidate(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassCandidate * SOAP_FMAC2 soap_instantiate_tt__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1684 */
#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (794)
/* Type tt__AudioClassDescriptor is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AudioClassDescriptor': */
class SOAP_CMAC tt__AudioClassDescriptor : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:ClassCandidate' of XML schema type 'tt:AudioClassCandidate' stored in dynamic array ClassCandidate of length __sizeClassCandidate
        int __sizeClassCandidate;
        tt__AudioClassCandidate **ClassCandidate;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AudioClassDescriptorExtension'
        tt__AudioClassDescriptorExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassDescriptor
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassDescriptor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassDescriptor, default initialized and not managed by a soap context
        virtual tt__AudioClassDescriptor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassDescriptor); }
      public:
        /// Constructor with default initializations
        tt__AudioClassDescriptor() : __sizeClassCandidate(), ClassCandidate(), Extension() { }
        virtual ~tt__AudioClassDescriptor() { }
        /// Friend allocator used by soap_new_tt__AudioClassDescriptor(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassDescriptor * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1686 */
#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (795)
/* Type tt__AudioClassDescriptorExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:AudioClassDescriptorExtension': */
class SOAP_CMAC tt__AudioClassDescriptorExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioClassDescriptorExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioClassDescriptorExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioClassDescriptorExtension, default initialized and not managed by a soap context
        virtual tt__AudioClassDescriptorExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioClassDescriptorExtension); }
      public:
        /// Constructor with default initializations
        tt__AudioClassDescriptorExtension() { }
        virtual ~tt__AudioClassDescriptorExtension() { }
        /// Friend allocator used by soap_new_tt__AudioClassDescriptorExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1688 */
#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (796)
/* Type tt__ActiveConnection is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ActiveConnection': */
class SOAP_CMAC tt__ActiveConnection : public xsd__anyType {
      public:
        /// Required element 'tt:CurrentBitrate' of XML schema type 'xsd:float'
        float CurrentBitrate;
        /// Required element 'tt:CurrentFps' of XML schema type 'xsd:float'
        float CurrentFps;
      public:
        /// Return unique type id SOAP_TYPE_tt__ActiveConnection
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ActiveConnection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ActiveConnection, default initialized and not managed by a soap context
        virtual tt__ActiveConnection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ActiveConnection); }
      public:
        /// Constructor with default initializations
        tt__ActiveConnection() : CurrentBitrate(), CurrentFps() { }
        virtual ~tt__ActiveConnection() { }
        /// Friend allocator used by soap_new_tt__ActiveConnection(struct soap*, int)
        friend SOAP_FMAC1 tt__ActiveConnection * SOAP_FMAC2 soap_instantiate_tt__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1690 */
#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (797)
/* Type tt__ProfileStatus is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ProfileStatus': */
class SOAP_CMAC tt__ProfileStatus : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:ActiveConnections' of XML schema type 'tt:ActiveConnection' stored in dynamic array ActiveConnections of length __sizeActiveConnections
        int __sizeActiveConnections;
        tt__ActiveConnection **ActiveConnections;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ProfileStatusExtension'
        tt__ProfileStatusExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileStatus, default initialized and not managed by a soap context
        virtual tt__ProfileStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileStatus); }
      public:
        /// Constructor with default initializations
        tt__ProfileStatus() : __sizeActiveConnections(), ActiveConnections(), Extension() { }
        virtual ~tt__ProfileStatus() { }
        /// Friend allocator used by soap_new_tt__ProfileStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileStatus * SOAP_FMAC2 soap_instantiate_tt__ProfileStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1692 */
#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (798)
/* Type tt__ProfileStatusExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:ProfileStatusExtension': */
class SOAP_CMAC tt__ProfileStatusExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileStatusExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileStatusExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileStatusExtension, default initialized and not managed by a soap context
        virtual tt__ProfileStatusExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileStatusExtension); }
      public:
        /// Constructor with default initializations
        tt__ProfileStatusExtension() { }
        virtual ~tt__ProfileStatusExtension() { }
        /// Friend allocator used by soap_new_tt__ProfileStatusExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileStatusExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileStatusExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1696 */
#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (800)
/* complex XML schema type 'tt:OSDPosConfiguration': */
class SOAP_CMAC tt__OSDPosConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'xsd:string'
        char *Type;
        /// Optional element 'tt:Pos' of XML schema type 'tt:Vector'
        tt__Vector *Pos;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDPosConfigurationExtension'
        tt__OSDPosConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDPosConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDPosConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDPosConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDPosConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDPosConfiguration); }
      public:
        /// Constructor with default initializations
        tt__OSDPosConfiguration() : Type(), Pos(), Extension() { }
        virtual ~tt__OSDPosConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDPosConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1698 */
#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (801)
/* simple XML schema type 'tt:OSDPosConfigurationExtension': */
class SOAP_CMAC tt__OSDPosConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDPosConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDPosConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDPosConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDPosConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDPosConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDPosConfigurationExtension() { }
        virtual ~tt__OSDPosConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDPosConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1700 */
#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (802)
/* complex XML schema type 'tt:OSDColor': */
class SOAP_CMAC tt__OSDColor : public xsd__anyType {
      public:
        /// Required element 'tt:Color' of XML schema type 'tt:Color'
        tt__Color *Color;
        /// Optional attribute 'Transparent' of XML schema type 'xsd:int'
        int *Transparent;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColor
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColor, default initialized and not managed by a soap context
        virtual tt__OSDColor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColor); }
      public:
        /// Constructor with default initializations
        tt__OSDColor() : Color(), Transparent() { }
        virtual ~tt__OSDColor() { }
        /// Friend allocator used by soap_new_tt__OSDColor(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColor * SOAP_FMAC2 soap_instantiate_tt__OSDColor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1702 */
#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (803)
/* complex XML schema type 'tt:OSDTextConfiguration': */
class SOAP_CMAC tt__OSDTextConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:Type' of XML schema type 'xsd:string'
        char *Type;
        /// Optional element 'tt:DateFormat' of XML schema type 'xsd:string'
        char *DateFormat;
        /// Optional element 'tt:TimeFormat' of XML schema type 'xsd:string'
        char *TimeFormat;
        /// Optional element 'tt:FontSize' of XML schema type 'xsd:int'
        int *FontSize;
        /// Optional element 'tt:FontColor' of XML schema type 'tt:OSDColor'
        tt__OSDColor *FontColor;
        /// Optional element 'tt:BackgroundColor' of XML schema type 'tt:OSDColor'
        tt__OSDColor *BackgroundColor;
        /// Optional element 'tt:PlainText' of XML schema type 'xsd:string'
        char *PlainText;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDTextConfigurationExtension'
        tt__OSDTextConfigurationExtension *Extension;
        /// Optional attribute 'IsPersistentText' of XML schema type 'xsd:boolean'
        bool *IsPersistentText;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDTextConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextConfiguration); }
      public:
        /// Constructor with default initializations
        tt__OSDTextConfiguration() : Type(), DateFormat(), TimeFormat(), FontSize(), FontColor(), BackgroundColor(), PlainText(), Extension(), IsPersistentText() { }
        virtual ~tt__OSDTextConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDTextConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1704 */
#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (804)
/* simple XML schema type 'tt:OSDTextConfigurationExtension': */
class SOAP_CMAC tt__OSDTextConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDTextConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDTextConfigurationExtension() { }
        virtual ~tt__OSDTextConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDTextConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1706 */
#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (805)
/* complex XML schema type 'tt:OSDImgConfiguration': */
class SOAP_CMAC tt__OSDImgConfiguration : public xsd__anyType {
      public:
        /// Required element 'tt:ImgPath' of XML schema type 'xsd:anyURI'
        char *ImgPath;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDImgConfigurationExtension'
        tt__OSDImgConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDImgConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgConfiguration); }
      public:
        /// Constructor with default initializations
        tt__OSDImgConfiguration() : ImgPath(), Extension() { }
        virtual ~tt__OSDImgConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDImgConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1708 */
#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (806)
/* simple XML schema type 'tt:OSDImgConfigurationExtension': */
class SOAP_CMAC tt__OSDImgConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDImgConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDImgConfigurationExtension() { }
        virtual ~tt__OSDImgConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDImgConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1710 */
#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (807)
/* complex XML schema type 'tt:ColorspaceRange': */
class SOAP_CMAC tt__ColorspaceRange : public xsd__anyType {
      public:
        /// Required element 'tt:X' of XML schema type 'tt:FloatRange'
        tt__FloatRange *X;
        /// Required element 'tt:Y' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Y;
        /// Required element 'tt:Z' of XML schema type 'tt:FloatRange'
        tt__FloatRange *Z;
        /// Required element 'tt:Colorspace' of XML schema type 'xsd:anyURI'
        char *Colorspace;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorspaceRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorspaceRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorspaceRange, default initialized and not managed by a soap context
        virtual tt__ColorspaceRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorspaceRange); }
      public:
        /// Constructor with default initializations
        tt__ColorspaceRange() : X(), Y(), Z(), Colorspace() { }
        virtual ~tt__ColorspaceRange() { }
        /// Friend allocator used by soap_new_tt__ColorspaceRange(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorspaceRange * SOAP_FMAC2 soap_instantiate_tt__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1712 */
#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (808)
/* complex XML schema type 'tt:ColorOptions': */
class SOAP_CMAC tt__ColorOptions : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:ColorList' of XML schema type 'tt:Color' stored in dynamic array ColorList of length __sizeColorList
        int __sizeColorList;
        tt__Color **ColorList;
        /// Sequence of elements 'tt:ColorspaceRange' of XML schema type 'tt:ColorspaceRange' stored in dynamic array ColorspaceRange of length __sizeColorspaceRange
        int __sizeColorspaceRange;
        tt__ColorspaceRange **ColorspaceRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorOptions, default initialized and not managed by a soap context
        virtual tt__ColorOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorOptions); }
      public:
        /// Constructor with default initializations
        tt__ColorOptions() : __sizeColorList(), ColorList(), __sizeColorspaceRange(), ColorspaceRange() { }
        virtual ~tt__ColorOptions() { }
        /// Friend allocator used by soap_new_tt__ColorOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorOptions * SOAP_FMAC2 soap_instantiate_tt__ColorOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1714 */
#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (809)
/* complex XML schema type 'tt:OSDColorOptions': */
class SOAP_CMAC tt__OSDColorOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:Color' of XML schema type 'tt:ColorOptions'
        tt__ColorOptions *Color;
        /// Optional element 'tt:Transparent' of XML schema type 'tt:IntRange'
        tt__IntRange *Transparent;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDColorOptionsExtension'
        tt__OSDColorOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColorOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColorOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColorOptions, default initialized and not managed by a soap context
        virtual tt__OSDColorOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColorOptions); }
      public:
        /// Constructor with default initializations
        tt__OSDColorOptions() : Color(), Transparent(), Extension() { }
        virtual ~tt__OSDColorOptions() { }
        /// Friend allocator used by soap_new_tt__OSDColorOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColorOptions * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1716 */
#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (810)
/* simple XML schema type 'tt:OSDColorOptionsExtension': */
class SOAP_CMAC tt__OSDColorOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDColorOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDColorOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDColorOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDColorOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDColorOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDColorOptionsExtension() { }
        virtual ~tt__OSDColorOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDColorOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1718 */
#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (811)
/* complex XML schema type 'tt:OSDTextOptions': */
class SOAP_CMAC tt__OSDTextOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:Type' of XML schema type 'xsd:string' stored in dynamic array Type of length __sizeType
        int __sizeType;
        char **Type;
        /// Optional element 'tt:FontSizeRange' of XML schema type 'tt:IntRange'
        tt__IntRange *FontSizeRange;
        /// Sequence of elements 'tt:DateFormat' of XML schema type 'xsd:string' stored in dynamic array DateFormat of length __sizeDateFormat
        int __sizeDateFormat;
        char **DateFormat;
        /// Sequence of elements 'tt:TimeFormat' of XML schema type 'xsd:string' stored in dynamic array TimeFormat of length __sizeTimeFormat
        int __sizeTimeFormat;
        char **TimeFormat;
        /// Optional element 'tt:FontColor' of XML schema type 'tt:OSDColorOptions'
        tt__OSDColorOptions *FontColor;
        /// Optional element 'tt:BackgroundColor' of XML schema type 'tt:OSDColorOptions'
        tt__OSDColorOptions *BackgroundColor;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDTextOptionsExtension'
        tt__OSDTextOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextOptions, default initialized and not managed by a soap context
        virtual tt__OSDTextOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextOptions); }
      public:
        /// Constructor with default initializations
        tt__OSDTextOptions() : __sizeType(), Type(), FontSizeRange(), __sizeDateFormat(), DateFormat(), __sizeTimeFormat(), TimeFormat(), FontColor(), BackgroundColor(), Extension() { }
        virtual ~tt__OSDTextOptions() { }
        /// Friend allocator used by soap_new_tt__OSDTextOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextOptions * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1720 */
#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (812)
/* simple XML schema type 'tt:OSDTextOptionsExtension': */
class SOAP_CMAC tt__OSDTextOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDTextOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDTextOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDTextOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDTextOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDTextOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDTextOptionsExtension() { }
        virtual ~tt__OSDTextOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDTextOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1722 */
#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (813)
/* complex XML schema type 'tt:OSDImgOptions': */
class SOAP_CMAC tt__OSDImgOptions : public xsd__anyType {
      public:
        /// Sequence of at least 1 elements 'tt:ImagePath' of XML schema type 'xsd:anyURI' stored in dynamic array ImagePath of length __sizeImagePath
        int __sizeImagePath;
        char **ImagePath;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDImgOptionsExtension'
        tt__OSDImgOptionsExtension *Extension;
        /// Optional attribute 'FormatsSupported' of XML schema type 'tt:StringAttrList'
        char *FormatsSupported;
        /// Optional attribute 'MaxSize' of XML schema type 'xsd:int'
        int *MaxSize;
        /// Optional attribute 'MaxWidth' of XML schema type 'xsd:int'
        int *MaxWidth;
        /// Optional attribute 'MaxHeight' of XML schema type 'xsd:int'
        int *MaxHeight;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgOptions, default initialized and not managed by a soap context
        virtual tt__OSDImgOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgOptions); }
      public:
        /// Constructor with default initializations
        tt__OSDImgOptions() : __sizeImagePath(), ImagePath(), Extension(), FormatsSupported(), MaxSize(), MaxWidth(), MaxHeight() { }
        virtual ~tt__OSDImgOptions() { }
        /// Friend allocator used by soap_new_tt__OSDImgOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgOptions * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1724 */
#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (814)
/* simple XML schema type 'tt:OSDImgOptionsExtension': */
class SOAP_CMAC tt__OSDImgOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDImgOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDImgOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDImgOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDImgOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDImgOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDImgOptionsExtension() { }
        virtual ~tt__OSDImgOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDImgOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1728 */
#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (816)
/* simple XML schema type 'tt:OSDConfigurationExtension': */
class SOAP_CMAC tt__OSDConfigurationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDConfigurationExtension() { }
        virtual ~tt__OSDConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1730 */
#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (817)
/* simple XML schema type 'tt:MaximumNumberOfOSDs': */
class SOAP_CMAC tt__MaximumNumberOfOSDs : public xsd__anyType {
      public:
        /// Required attribute 'Total' of XML schema type 'xsd:int'
        int Total;
        /// Optional attribute 'Image' of XML schema type 'xsd:int'
        int *Image;
        /// Optional attribute 'PlainText' of XML schema type 'xsd:int'
        int *PlainText;
        /// Optional attribute 'Date' of XML schema type 'xsd:int'
        int *Date;
        /// Optional attribute 'Time' of XML schema type 'xsd:int'
        int *Time;
        /// Optional attribute 'DateAndTime' of XML schema type 'xsd:int'
        int *DateAndTime;
      public:
        /// Return unique type id SOAP_TYPE_tt__MaximumNumberOfOSDs
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MaximumNumberOfOSDs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MaximumNumberOfOSDs, default initialized and not managed by a soap context
        virtual tt__MaximumNumberOfOSDs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MaximumNumberOfOSDs); }
      public:
        /// Constructor with default initializations
        tt__MaximumNumberOfOSDs() : Total(), Image(), PlainText(), Date(), Time(), DateAndTime() { }
        virtual ~tt__MaximumNumberOfOSDs() { }
        /// Friend allocator used by soap_new_tt__MaximumNumberOfOSDs(struct soap*, int)
        friend SOAP_FMAC1 tt__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_tt__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1732 */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (818)
/* complex XML schema type 'tt:OSDConfigurationOptions': */
class SOAP_CMAC tt__OSDConfigurationOptions : public xsd__anyType {
      public:
        /// Required element 'tt:MaximumNumberOfOSDs' of XML schema type 'tt:MaximumNumberOfOSDs'
        tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs;
        /// Sequence of at least 1 elements 'tt:Type' of XML schema type 'tt:OSDType' stored in dynamic array Type of length __sizeType
        int __sizeType;
        enum tt__OSDType *Type;
        /// Sequence of at least 1 elements 'tt:PositionOption' of XML schema type 'xsd:string' stored in dynamic array PositionOption of length __sizePositionOption
        int __sizePositionOption;
        char **PositionOption;
        /// Optional element 'tt:TextOption' of XML schema type 'tt:OSDTextOptions'
        tt__OSDTextOptions *TextOption;
        /// Optional element 'tt:ImageOption' of XML schema type 'tt:OSDImgOptions'
        tt__OSDImgOptions *ImageOption;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDConfigurationOptionsExtension'
        tt__OSDConfigurationOptionsExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationOptions, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationOptions); }
      public:
        /// Constructor with default initializations
        tt__OSDConfigurationOptions() : MaximumNumberOfOSDs(), __sizeType(), Type(), __sizePositionOption(), PositionOption(), TextOption(), ImageOption(), Extension() { }
        virtual ~tt__OSDConfigurationOptions() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1734 */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (819)
/* simple XML schema type 'tt:OSDConfigurationOptionsExtension': */
class SOAP_CMAC tt__OSDConfigurationOptionsExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfigurationOptionsExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfigurationOptionsExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfigurationOptionsExtension, default initialized and not managed by a soap context
        virtual tt__OSDConfigurationOptionsExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfigurationOptionsExtension); }
      public:
        /// Constructor with default initializations
        tt__OSDConfigurationOptionsExtension() { }
        virtual ~tt__OSDConfigurationOptionsExtension() { }
        /// Friend allocator used by soap_new_tt__OSDConfigurationOptionsExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1736 */
#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (820)
/* Type tt__FileProgress is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:FileProgress': */
class SOAP_CMAC tt__FileProgress : public xsd__anyType {
      public:
        /// Required element 'tt:FileName' of XML schema type 'xsd:string'
        char *FileName;
        /// Required element 'tt:Progress' of XML schema type 'xsd:float'
        float Progress;
      public:
        /// Return unique type id SOAP_TYPE_tt__FileProgress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__FileProgress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__FileProgress, default initialized and not managed by a soap context
        virtual tt__FileProgress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__FileProgress); }
      public:
        /// Constructor with default initializations
        tt__FileProgress() : FileName(), Progress() { }
        virtual ~tt__FileProgress() { }
        /// Friend allocator used by soap_new_tt__FileProgress(struct soap*, int)
        friend SOAP_FMAC1 tt__FileProgress * SOAP_FMAC2 soap_instantiate_tt__FileProgress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1738 */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (821)
/* Type tt__ArrayOfFileProgress is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ArrayOfFileProgress': */
class SOAP_CMAC tt__ArrayOfFileProgress : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:FileProgress' of XML schema type 'tt:FileProgress' stored in dynamic array FileProgress of length __sizeFileProgress
        int __sizeFileProgress;
        tt__FileProgress **FileProgress;
        /// Optional element 'tt:Extension' of XML schema type 'tt:ArrayOfFileProgressExtension'
        tt__ArrayOfFileProgressExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ArrayOfFileProgress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ArrayOfFileProgress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ArrayOfFileProgress, default initialized and not managed by a soap context
        virtual tt__ArrayOfFileProgress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ArrayOfFileProgress); }
      public:
        /// Constructor with default initializations
        tt__ArrayOfFileProgress() : __sizeFileProgress(), FileProgress(), Extension() { }
        virtual ~tt__ArrayOfFileProgress() { }
        /// Friend allocator used by soap_new_tt__ArrayOfFileProgress(struct soap*, int)
        friend SOAP_FMAC1 tt__ArrayOfFileProgress * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1740 */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (822)
/* Type tt__ArrayOfFileProgressExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:ArrayOfFileProgressExtension': */
class SOAP_CMAC tt__ArrayOfFileProgressExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__ArrayOfFileProgressExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ArrayOfFileProgressExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ArrayOfFileProgressExtension, default initialized and not managed by a soap context
        virtual tt__ArrayOfFileProgressExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ArrayOfFileProgressExtension); }
      public:
        /// Constructor with default initializations
        tt__ArrayOfFileProgressExtension() { }
        virtual ~tt__ArrayOfFileProgressExtension() { }
        /// Friend allocator used by soap_new_tt__ArrayOfFileProgressExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__ArrayOfFileProgressExtension * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgressExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1742 */
#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (823)
/* Type tt__StorageReferencePath is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:StorageReferencePath': */
class SOAP_CMAC tt__StorageReferencePath : public xsd__anyType {
      public:
        /// Required element 'tt:StorageToken' of XML schema type 'tt:ReferenceToken'
        char *StorageToken;
        /// Optional element 'tt:RelativePath' of XML schema type 'xsd:string'
        char *RelativePath;
        /// Optional element 'tt:Extension' of XML schema type 'tt:StorageReferencePathExtension'
        tt__StorageReferencePathExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__StorageReferencePath
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StorageReferencePath; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StorageReferencePath, default initialized and not managed by a soap context
        virtual tt__StorageReferencePath *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StorageReferencePath); }
      public:
        /// Constructor with default initializations
        tt__StorageReferencePath() : StorageToken(), RelativePath(), Extension() { }
        virtual ~tt__StorageReferencePath() { }
        /// Friend allocator used by soap_new_tt__StorageReferencePath(struct soap*, int)
        friend SOAP_FMAC1 tt__StorageReferencePath * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePath(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1744 */
#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (824)
/* Type tt__StorageReferencePathExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:StorageReferencePathExtension': */
class SOAP_CMAC tt__StorageReferencePathExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__StorageReferencePathExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__StorageReferencePathExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__StorageReferencePathExtension, default initialized and not managed by a soap context
        virtual tt__StorageReferencePathExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__StorageReferencePathExtension); }
      public:
        /// Constructor with default initializations
        tt__StorageReferencePathExtension() { }
        virtual ~tt__StorageReferencePathExtension() { }
        /// Friend allocator used by soap_new_tt__StorageReferencePathExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__StorageReferencePathExtension * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePathExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1746 */
#ifndef SOAP_TYPE_tt__PolygonOptions
#define SOAP_TYPE_tt__PolygonOptions (825)
/* Type tt__PolygonOptions is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:PolygonOptions': */
class SOAP_CMAC tt__PolygonOptions : public xsd__anyType {
      public:
        /// Optional element 'tt:RectangleOnly' of XML schema type 'xsd:boolean'
        bool *RectangleOnly;
        /// Optional element 'tt:VertexLimits' of XML schema type 'tt:IntRange'
        tt__IntRange *VertexLimits;
      public:
        /// Return unique type id SOAP_TYPE_tt__PolygonOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PolygonOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PolygonOptions, default initialized and not managed by a soap context
        virtual tt__PolygonOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PolygonOptions); }
      public:
        /// Constructor with default initializations
        tt__PolygonOptions() : RectangleOnly(), VertexLimits() { }
        virtual ~tt__PolygonOptions() { }
        /// Friend allocator used by soap_new_tt__PolygonOptions(struct soap*, int)
        friend SOAP_FMAC1 tt__PolygonOptions * SOAP_FMAC2 soap_instantiate_tt__PolygonOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1748 */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (826)
/* complex XML schema type 'tt:IntRange': */
class SOAP_CMAC tt__IntRange : public xsd__anyType {
      public:
        /// Required element 'tt:Min' of XML schema type 'xsd:int'
        int Min;
        /// Required element 'tt:Max' of XML schema type 'xsd:int'
        int Max;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRange, default initialized and not managed by a soap context
        virtual tt__IntRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRange); }
      public:
        /// Constructor with default initializations
        tt__IntRange() : Min(), Max() { }
        virtual ~tt__IntRange() { }
        /// Friend allocator used by soap_new_tt__IntRange(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1750 */
#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (827)
/* simple XML schema type 'tt:Vector2D': */
class SOAP_CMAC tt__Vector2D : public xsd__anyType {
      public:
        /// Required attribute 'x' of XML schema type 'xsd:float'
        float x;
        /// Required attribute 'y' of XML schema type 'xsd:float'
        float y;
        /// Optional attribute 'space' of XML schema type 'xsd:anyURI'
        char *space;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector2D
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector2D; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector2D, default initialized and not managed by a soap context
        virtual tt__Vector2D *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector2D); }
      public:
        /// Constructor with default initializations
        tt__Vector2D() : x(), y(), space() { }
        virtual ~tt__Vector2D() { }
        /// Friend allocator used by soap_new_tt__Vector2D(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1752 */
#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (828)
/* simple XML schema type 'tt:Vector1D': */
class SOAP_CMAC tt__Vector1D : public xsd__anyType {
      public:
        /// Required attribute 'x' of XML schema type 'xsd:float'
        float x;
        /// Optional attribute 'space' of XML schema type 'xsd:anyURI'
        char *space;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector1D
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector1D; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector1D, default initialized and not managed by a soap context
        virtual tt__Vector1D *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector1D); }
      public:
        /// Constructor with default initializations
        tt__Vector1D() : x(), space() { }
        virtual ~tt__Vector1D() { }
        /// Friend allocator used by soap_new_tt__Vector1D(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1754 */
#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (829)
/* complex XML schema type 'tt:PTZVector': */
class SOAP_CMAC tt__PTZVector : public xsd__anyType {
      public:
        /// Optional element 'tt:PanTilt' of XML schema type 'tt:Vector2D'
        tt__Vector2D *PanTilt;
        /// Optional element 'tt:Zoom' of XML schema type 'tt:Vector1D'
        tt__Vector1D *Zoom;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZVector
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZVector; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZVector, default initialized and not managed by a soap context
        virtual tt__PTZVector *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZVector); }
      public:
        /// Constructor with default initializations
        tt__PTZVector() : PanTilt(), Zoom() { }
        virtual ~tt__PTZVector() { }
        /// Friend allocator used by soap_new_tt__PTZVector(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1756 */
#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (830)
/* complex XML schema type 'tt:PTZStatus': */
class SOAP_CMAC tt__PTZStatus : public xsd__anyType {
      public:
        /// Optional element 'tt:Position' of XML schema type 'tt:PTZVector'
        tt__PTZVector *Position;
        /// Optional element 'tt:MoveStatus' of XML schema type 'tt:PTZMoveStatus'
        tt__PTZMoveStatus *MoveStatus;
        /// Optional element 'tt:Error' of XML schema type 'xsd:string'
        char *Error;
        /// Required element 'tt:UtcTime' of XML schema type 'xsd:dateTime'
        time_t UtcTime;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZStatus, default initialized and not managed by a soap context
        virtual tt__PTZStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZStatus); }
      public:
        /// Constructor with default initializations
        tt__PTZStatus() : Position(), MoveStatus(), Error(), UtcTime() { }
        virtual ~tt__PTZStatus() { }
        /// Friend allocator used by soap_new_tt__PTZStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1758 */
#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (831)
/* complex XML schema type 'tt:PTZMoveStatus': */
class SOAP_CMAC tt__PTZMoveStatus : public xsd__anyType {
      public:
        /// Optional element 'tt:PanTilt' of XML schema type 'tt:MoveStatus'
        enum tt__MoveStatus *PanTilt;
        /// Optional element 'tt:Zoom' of XML schema type 'tt:MoveStatus'
        enum tt__MoveStatus *Zoom;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZMoveStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZMoveStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZMoveStatus, default initialized and not managed by a soap context
        virtual tt__PTZMoveStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZMoveStatus); }
      public:
        /// Constructor with default initializations
        tt__PTZMoveStatus() : PanTilt(), Zoom() { }
        virtual ~tt__PTZMoveStatus() { }
        /// Friend allocator used by soap_new_tt__PTZMoveStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1760 */
#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (832)
/* simple XML schema type 'tt:Vector': */
class SOAP_CMAC tt__Vector : public xsd__anyType {
      public:
        /// Optional attribute 'x' of XML schema type 'xsd:float'
        float *x;
        /// Optional attribute 'y' of XML schema type 'xsd:float'
        float *y;
      public:
        /// Return unique type id SOAP_TYPE_tt__Vector
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Vector; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Vector, default initialized and not managed by a soap context
        virtual tt__Vector *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Vector); }
      public:
        /// Constructor with default initializations
        tt__Vector() : x(), y() { }
        virtual ~tt__Vector() { }
        /// Friend allocator used by soap_new_tt__Vector(struct soap*, int)
        friend SOAP_FMAC1 tt__Vector * SOAP_FMAC2 soap_instantiate_tt__Vector(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1762 */
#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (833)
/* simple XML schema type 'tt:Rectangle': */
class SOAP_CMAC tt__Rectangle : public xsd__anyType {
      public:
        /// Optional attribute 'bottom' of XML schema type 'xsd:float'
        float *bottom;
        /// Optional attribute 'top' of XML schema type 'xsd:float'
        float *top;
        /// Optional attribute 'right' of XML schema type 'xsd:float'
        float *right;
        /// Optional attribute 'left' of XML schema type 'xsd:float'
        float *left;
      public:
        /// Return unique type id SOAP_TYPE_tt__Rectangle
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Rectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Rectangle, default initialized and not managed by a soap context
        virtual tt__Rectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Rectangle); }
      public:
        /// Constructor with default initializations
        tt__Rectangle() : bottom(), top(), right(), left() { }
        virtual ~tt__Rectangle() { }
        /// Friend allocator used by soap_new_tt__Rectangle(struct soap*, int)
        friend SOAP_FMAC1 tt__Rectangle * SOAP_FMAC2 soap_instantiate_tt__Rectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1764 */
#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (834)
/* complex XML schema type 'tt:Polygon': */
class SOAP_CMAC tt__Polygon : public xsd__anyType {
      public:
        /// Sequence of at least 3 elements 'tt:Point' of XML schema type 'tt:Vector' stored in dynamic array Point of length __sizePoint
        int __sizePoint;
        tt__Vector **Point;
      public:
        /// Return unique type id SOAP_TYPE_tt__Polygon
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Polygon; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Polygon, default initialized and not managed by a soap context
        virtual tt__Polygon *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Polygon); }
      public:
        /// Constructor with default initializations
        tt__Polygon() : __sizePoint(), Point() { }
        virtual ~tt__Polygon() { }
        /// Friend allocator used by soap_new_tt__Polygon(struct soap*, int)
        friend SOAP_FMAC1 tt__Polygon * SOAP_FMAC2 soap_instantiate_tt__Polygon(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1766 */
#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (835)
/* simple XML schema type 'tt:Color': */
class SOAP_CMAC tt__Color : public xsd__anyType {
      public:
        /// Required attribute 'X' of XML schema type 'xsd:float'
        float X;
        /// Required attribute 'Y' of XML schema type 'xsd:float'
        float Y;
        /// Required attribute 'Z' of XML schema type 'xsd:float'
        float Z;
        /// Optional attribute 'Colorspace' of XML schema type 'xsd:anyURI'
        char *Colorspace;
      public:
        /// Return unique type id SOAP_TYPE_tt__Color
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Color; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Color, default initialized and not managed by a soap context
        virtual tt__Color *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Color); }
      public:
        /// Constructor with default initializations
        tt__Color() : X(), Y(), Z(), Colorspace() { }
        virtual ~tt__Color() { }
        /// Friend allocator used by soap_new_tt__Color(struct soap*, int)
        friend SOAP_FMAC1 tt__Color * SOAP_FMAC2 soap_instantiate_tt__Color(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1768 */
#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (836)
/* simple XML schema type 'tt:ColorCovariance': */
class SOAP_CMAC tt__ColorCovariance : public xsd__anyType {
      public:
        /// Required attribute 'XX' of XML schema type 'xsd:float'
        float XX;
        /// Required attribute 'YY' of XML schema type 'xsd:float'
        float YY;
        /// Required attribute 'ZZ' of XML schema type 'xsd:float'
        float ZZ;
        /// Optional attribute 'XY' of XML schema type 'xsd:float'
        float *XY;
        /// Optional attribute 'XZ' of XML schema type 'xsd:float'
        float *XZ;
        /// Optional attribute 'YZ' of XML schema type 'xsd:float'
        float *YZ;
        /// Optional attribute 'Colorspace' of XML schema type 'xsd:anyURI'
        char *Colorspace;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorCovariance
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorCovariance; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorCovariance, default initialized and not managed by a soap context
        virtual tt__ColorCovariance *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorCovariance); }
      public:
        /// Constructor with default initializations
        tt__ColorCovariance() : XX(), YY(), ZZ(), XY(), XZ(), YZ(), Colorspace() { }
        virtual ~tt__ColorCovariance() { }
        /// Friend allocator used by soap_new_tt__ColorCovariance(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorCovariance * SOAP_FMAC2 soap_instantiate_tt__ColorCovariance(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:25716 */
#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1930)
/* complex XML schema type 'tt:ColorDescriptor-ColorCluster': */
class SOAP_CMAC _tt__ColorDescriptor_ColorCluster {
      public:
        /// Required element 'tt:Color' of XML schema type 'tt:Color'
        tt__Color *Color;
        /// Optional element 'tt:Weight' of XML schema type 'xsd:float'
        float *Weight;
        /// Optional element 'tt:Covariance' of XML schema type 'tt:ColorCovariance'
        tt__ColorCovariance *Covariance;
      public:
        /// Return unique type id SOAP_TYPE__tt__ColorDescriptor_ColorCluster
        virtual long soap_type(void) const { return SOAP_TYPE__tt__ColorDescriptor_ColorCluster; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__ColorDescriptor_ColorCluster, default initialized and not managed by a soap context
        virtual _tt__ColorDescriptor_ColorCluster *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__ColorDescriptor_ColorCluster); }
      public:
        /// Constructor with default initializations
        _tt__ColorDescriptor_ColorCluster() : Color(), Weight(), Covariance() { }
        virtual ~_tt__ColorDescriptor_ColorCluster() { }
        /// Friend allocator used by soap_new__tt__ColorDescriptor_ColorCluster(struct soap*, int)
        friend SOAP_FMAC1 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC2 soap_instantiate__tt__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1770 */
#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (837)
/* Type tt__ColorDescriptor is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:ColorDescriptor': */
class SOAP_CMAC tt__ColorDescriptor : public xsd__anyType {
      public:
        /// Sequence of elements 'tt:ColorCluster' of XML schema type 'tt:ColorDescriptor-ColorCluster' stored in dynamic array ColorCluster of length __sizeColorCluster
        int __sizeColorCluster;
        _tt__ColorDescriptor_ColorCluster *ColorCluster;
        /// Optional element 'tt:Extension' of XML schema type 'xsd:anyType'
        xsd__anyType *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__ColorDescriptor
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ColorDescriptor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ColorDescriptor, default initialized and not managed by a soap context
        virtual tt__ColorDescriptor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ColorDescriptor); }
      public:
        /// Constructor with default initializations
        tt__ColorDescriptor() : __sizeColorCluster(), ColorCluster(), Extension() { }
        virtual ~tt__ColorDescriptor() { }
        /// Friend allocator used by soap_new_tt__ColorDescriptor(struct soap*, int)
        friend SOAP_FMAC1 tt__ColorDescriptor * SOAP_FMAC2 soap_instantiate_tt__ColorDescriptor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1772 */
#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (838)
/* complex XML schema type 'tt:Transformation': */
class SOAP_CMAC tt__Transformation : public xsd__anyType {
      public:
        /// Optional element 'tt:Translate' of XML schema type 'tt:Vector'
        tt__Vector *Translate;
        /// Optional element 'tt:Scale' of XML schema type 'tt:Vector'
        tt__Vector *Scale;
        /// Optional element 'tt:Extension' of XML schema type 'tt:TransformationExtension'
        tt__TransformationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__Transformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Transformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Transformation, default initialized and not managed by a soap context
        virtual tt__Transformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Transformation); }
      public:
        /// Constructor with default initializations
        tt__Transformation() : Translate(), Scale(), Extension() { }
        virtual ~tt__Transformation() { }
        /// Friend allocator used by soap_new_tt__Transformation(struct soap*, int)
        friend SOAP_FMAC1 tt__Transformation * SOAP_FMAC2 soap_instantiate_tt__Transformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1774 */
#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (839)
/* simple XML schema type 'tt:TransformationExtension': */
class SOAP_CMAC tt__TransformationExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tt__TransformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TransformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TransformationExtension, default initialized and not managed by a soap context
        virtual tt__TransformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TransformationExtension); }
      public:
        /// Constructor with default initializations
        tt__TransformationExtension() { }
        virtual ~tt__TransformationExtension() { }
        /// Friend allocator used by soap_new_tt__TransformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__TransformationExtension * SOAP_FMAC2 soap_instantiate_tt__TransformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1776 */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (840)
/* simple XML schema type 'tt:GeoLocation': */
class SOAP_CMAC tt__GeoLocation : public xsd__anyType {
      public:
        /// Optional attribute 'lon' of XML schema type 'xsd:double'
        double *lon;
        /// Optional attribute 'lat' of XML schema type 'xsd:double'
        double *lat;
        /// Optional attribute 'elevation' of XML schema type 'xsd:float'
        float *elevation;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoLocation, default initialized and not managed by a soap context
        virtual tt__GeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoLocation); }
      public:
        /// Constructor with default initializations
        tt__GeoLocation() : lon(), lat(), elevation() { }
        virtual ~tt__GeoLocation() { }
        /// Friend allocator used by soap_new_tt__GeoLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1778 */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (841)
/* simple XML schema type 'tt:GeoOrientation': */
class SOAP_CMAC tt__GeoOrientation : public xsd__anyType {
      public:
        /// Optional attribute 'roll' of XML schema type 'xsd:float'
        float *roll;
        /// Optional attribute 'pitch' of XML schema type 'xsd:float'
        float *pitch;
        /// Optional attribute 'yaw' of XML schema type 'xsd:float'
        float *yaw;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoOrientation, default initialized and not managed by a soap context
        virtual tt__GeoOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoOrientation); }
      public:
        /// Constructor with default initializations
        tt__GeoOrientation() : roll(), pitch(), yaw() { }
        virtual ~tt__GeoOrientation() { }
        /// Friend allocator used by soap_new_tt__GeoOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoOrientation * SOAP_FMAC2 soap_instantiate_tt__GeoOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1780 */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (842)
/* simple XML schema type 'tt:LocalLocation': */
class SOAP_CMAC tt__LocalLocation : public xsd__anyType {
      public:
        /// Optional attribute 'x' of XML schema type 'xsd:float'
        float *x;
        /// Optional attribute 'y' of XML schema type 'xsd:float'
        float *y;
        /// Optional attribute 'z' of XML schema type 'xsd:float'
        float *z;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalLocation, default initialized and not managed by a soap context
        virtual tt__LocalLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalLocation); }
      public:
        /// Constructor with default initializations
        tt__LocalLocation() : x(), y(), z() { }
        virtual ~tt__LocalLocation() { }
        /// Friend allocator used by soap_new_tt__LocalLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalLocation * SOAP_FMAC2 soap_instantiate_tt__LocalLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1782 */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (843)
/* simple XML schema type 'tt:LocalOrientation': */
class SOAP_CMAC tt__LocalOrientation : public xsd__anyType {
      public:
        /// Optional attribute 'pan' of XML schema type 'xsd:float'
        float *pan;
        /// Optional attribute 'tilt' of XML schema type 'xsd:float'
        float *tilt;
        /// Optional attribute 'roll' of XML schema type 'xsd:float'
        float *roll;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalOrientation, default initialized and not managed by a soap context
        virtual tt__LocalOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalOrientation); }
      public:
        /// Constructor with default initializations
        tt__LocalOrientation() : pan(), tilt(), roll() { }
        virtual ~tt__LocalOrientation() { }
        /// Friend allocator used by soap_new_tt__LocalOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalOrientation * SOAP_FMAC2 soap_instantiate_tt__LocalOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1784 */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (844)
/* complex XML schema type 'tt:LocationEntity': */
class SOAP_CMAC tt__LocationEntity : public xsd__anyType {
      public:
        /// Optional element 'tt:GeoLocation' of XML schema type 'tt:GeoLocation'
        tt__GeoLocation *GeoLocation;
        /// Optional element 'tt:GeoOrientation' of XML schema type 'tt:GeoOrientation'
        tt__GeoOrientation *GeoOrientation;
        /// Optional element 'tt:LocalLocation' of XML schema type 'tt:LocalLocation'
        tt__LocalLocation *LocalLocation;
        /// Optional element 'tt:LocalOrientation' of XML schema type 'tt:LocalOrientation'
        tt__LocalOrientation *LocalOrientation;
        /// Optional attribute 'Entity' of XML schema type 'xsd:string'
        char *Entity;
        /// Optional attribute 'Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Optional attribute 'Fixed' of XML schema type 'xsd:boolean'
        bool *Fixed;
        /// Optional attribute 'GeoSource' of XML schema type 'xsd:anyURI'
        char *GeoSource;
        /// Optional attribute 'AutoGeo' of XML schema type 'xsd:boolean'
        bool *AutoGeo;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocationEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocationEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocationEntity, default initialized and not managed by a soap context
        virtual tt__LocationEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocationEntity); }
      public:
        /// Constructor with default initializations
        tt__LocationEntity() : GeoLocation(), GeoOrientation(), LocalLocation(), LocalOrientation(), Entity(), Token(), Fixed(), GeoSource(), AutoGeo() { }
        virtual ~tt__LocationEntity() { }
        /// Friend allocator used by soap_new_tt__LocationEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__LocationEntity * SOAP_FMAC2 soap_instantiate_tt__LocationEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1786 */
#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (845)
/* complex XML schema type 'tt:StringItems': */
class SOAP_CMAC _tt__StringItems {
      public:
        /// Sequence of at least 1 elements 'tt:Item' of XML schema type 'xsd:string' stored in dynamic array Item of length __sizeItem
        int __sizeItem;
        char **Item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tt__StringItems
        virtual long soap_type(void) const { return SOAP_TYPE__tt__StringItems; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__StringItems, default initialized and not managed by a soap context
        virtual _tt__StringItems *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__StringItems); }
      public:
        /// Constructor with default initializations
        _tt__StringItems() : __sizeItem(), Item(), soap() { }
        virtual ~_tt__StringItems() { }
        /// Friend allocator used by soap_new__tt__StringItems(struct soap*, int)
        friend SOAP_FMAC1 _tt__StringItems * SOAP_FMAC2 soap_instantiate__tt__StringItems(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1788 */
#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (846)
/* complex XML schema type 'tt:Message': */
class SOAP_CMAC _tt__Message {
      public:
        /// Optional element 'tt:Source' of XML schema type 'tt:ItemList'
        tt__ItemList *Source;
        /// Optional element 'tt:Key' of XML schema type 'tt:ItemList'
        tt__ItemList *Key;
        /// Optional element 'tt:Data' of XML schema type 'tt:ItemList'
        tt__ItemList *Data;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MessageExtension'
        tt__MessageExtension *Extension;
        /// Required attribute 'UtcTime' of XML schema type 'xsd:dateTime'
        time_t UtcTime;
        /// Optional attribute 'PropertyOperation' of XML schema type 'tt:PropertyOperation'
        enum tt__PropertyOperation *PropertyOperation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tt__Message
        virtual long soap_type(void) const { return SOAP_TYPE__tt__Message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tt__Message, default initialized and not managed by a soap context
        virtual _tt__Message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tt__Message); }
      public:
        /// Constructor with default initializations
        _tt__Message() : Source(), Key(), Data(), Extension(), UtcTime(), PropertyOperation(), soap() { }
        virtual ~_tt__Message() { }
        /// Friend allocator used by soap_new__tt__Message(struct soap*, int)
        friend SOAP_FMAC1 _tt__Message * SOAP_FMAC2 soap_instantiate__tt__Message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1790 */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (847)
/* complex XML schema type 'wsnt:QueryExpressionType': */
class SOAP_CMAC wsnt__QueryExpressionType : public xsd__anyType {
      public:
        /// Required attribute 'Dialect' of XML schema type 'xsd:anyURI'
        char *Dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__QueryExpressionType, default initialized and not managed by a soap context
        virtual wsnt__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__QueryExpressionType); }
      public:
        /// Constructor with default initializations
        wsnt__QueryExpressionType() : Dialect(), __mixed() { }
        virtual ~wsnt__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1792 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (848)
/* complex XML schema type 'wsnt:TopicExpressionType': */
class SOAP_CMAC wsnt__TopicExpressionType : public xsd__anyType {
      public:
        /// Required attribute 'Dialect' of XML schema type 'xsd:anyURI'
        char *Dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionType); }
      public:
        /// Constructor with default initializations
        wsnt__TopicExpressionType() : Dialect(), __mixed() { }
        virtual ~wsnt__TopicExpressionType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1794 */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (849)
/* simple XML schema type 'wsnt:FilterType': */
class SOAP_CMAC wsnt__FilterType : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__FilterType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__FilterType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__FilterType, default initialized and not managed by a soap context
        virtual wsnt__FilterType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__FilterType); }
      public:
        /// Constructor with default initializations
        wsnt__FilterType() { }
        virtual ~wsnt__FilterType() { }
        /// Friend allocator used by soap_new_wsnt__FilterType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1796 */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (850)
/* simple XML schema type 'wsnt:SubscriptionPolicyType': */
class SOAP_CMAC wsnt__SubscriptionPolicyType : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscriptionPolicyType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscriptionPolicyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscriptionPolicyType, default initialized and not managed by a soap context
        virtual wsnt__SubscriptionPolicyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscriptionPolicyType); }
      public:
        /// Constructor with default initializations
        wsnt__SubscriptionPolicyType() { }
        virtual ~wsnt__SubscriptionPolicyType() { }
        /// Friend allocator used by soap_new_wsnt__SubscriptionPolicyType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:26271 */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1944)
/* complex XML schema type 'wsnt:NotificationMessageHolderType-Message': */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message {
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationMessageHolderType_Message; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationMessageHolderType_Message, default initialized and not managed by a soap context
        virtual _wsnt__NotificationMessageHolderType_Message *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationMessageHolderType_Message); }
      public:
        /// Constructor with default initializations
        _wsnt__NotificationMessageHolderType_Message() { }
        virtual ~_wsnt__NotificationMessageHolderType_Message() { }
        /// Friend allocator used by soap_new__wsnt__NotificationMessageHolderType_Message(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1798 */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (851)
/* complex XML schema type 'wsnt:NotificationMessageHolderType': */
class SOAP_CMAC wsnt__NotificationMessageHolderType : public xsd__anyType {
      public:
        /// Optional element 'wsnt:SubscriptionReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *SubscriptionReference;
        /// Optional element 'wsnt:Topic' of XML schema type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        /// Optional element 'wsnt:ProducerReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *ProducerReference;
        /// Required element 'wsnt:Message' of XML schema type 'wsnt:NotificationMessageHolderType-Message'
        _wsnt__NotificationMessageHolderType_Message Message;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotificationMessageHolderType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotificationMessageHolderType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotificationMessageHolderType, default initialized and not managed by a soap context
        virtual wsnt__NotificationMessageHolderType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotificationMessageHolderType); }
      public:
        /// Constructor with default initializations
        wsnt__NotificationMessageHolderType() : SubscriptionReference(), Topic(), ProducerReference(), Message() { }
        virtual ~wsnt__NotificationMessageHolderType() { }
        /// Friend allocator used by soap_new_wsnt__NotificationMessageHolderType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1840 */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (872)
/* complex XML schema type 'wsnt:NotificationProducerRP': */
class SOAP_CMAC _wsnt__NotificationProducerRP {
      public:
        /// Sequence of elements 'wsnt:TopicExpression' of XML schema type 'wsnt:TopicExpressionType' stored in dynamic array TopicExpression_ of length __sizeTopicExpression
        int __sizeTopicExpression;
        wsnt__TopicExpressionType **TopicExpression_;
        /// Optional element 'wsnt:FixedTopicSet' of XML schema type 'xsd:boolean'
        bool *FixedTopicSet;	///< optional with default value = (bool)1
        /// Sequence of elements 'wsnt:TopicExpressionDialect' of XML schema type 'xsd:anyURI' stored in dynamic array TopicExpressionDialect_ of length __sizeTopicExpressionDialect
        int __sizeTopicExpressionDialect;
        char **TopicExpressionDialect_;
        /// Optional element 'wstop:TopicSet' of XML schema type 'wstop:TopicSetType'
        wstop__TopicSetType *wstop__TopicSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__NotificationProducerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__NotificationProducerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__NotificationProducerRP, default initialized and not managed by a soap context
        virtual _wsnt__NotificationProducerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__NotificationProducerRP); }
      public:
        /// Constructor with default initializations
        _wsnt__NotificationProducerRP() : __sizeTopicExpression(), TopicExpression_(), FixedTopicSet(), __sizeTopicExpressionDialect(), TopicExpressionDialect_(), wstop__TopicSet(), soap() { }
        virtual ~_wsnt__NotificationProducerRP() { }
        /// Friend allocator used by soap_new__wsnt__NotificationProducerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1842 */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (873)
/* complex XML schema type 'wsnt:SubscriptionManagerRP': */
class SOAP_CMAC _wsnt__SubscriptionManagerRP {
      public:
        /// Required element 'wsnt:ConsumerReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XML schema type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:SubscriptionPolicy' of XML schema type 'wsnt:SubscriptionPolicyType'
        wsnt__SubscriptionPolicyType *SubscriptionPolicy;
        /// Optional element 'wsnt:CreationTime' of XML schema type 'xsd:dateTime'
        time_t *CreationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscriptionManagerRP
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscriptionManagerRP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscriptionManagerRP, default initialized and not managed by a soap context
        virtual _wsnt__SubscriptionManagerRP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscriptionManagerRP); }
      public:
        /// Constructor with default initializations
        _wsnt__SubscriptionManagerRP() : ConsumerReference(), Filter(), SubscriptionPolicy(), CreationTime(), soap() { }
        virtual ~_wsnt__SubscriptionManagerRP() { }
        /// Friend allocator used by soap_new__wsnt__SubscriptionManagerRP(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1844 */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (874)
/* complex XML schema type 'wsnt:Notify': */
class SOAP_CMAC _wsnt__Notify {
      public:
        /// Sequence of at least 1 elements 'wsnt:NotificationMessage' of XML schema type 'wsnt:NotificationMessageHolderType' stored in dynamic array NotificationMessage_ of length __sizeNotificationMessage
        int __sizeNotificationMessage;
        wsnt__NotificationMessageHolderType **NotificationMessage_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Notify
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Notify; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Notify, default initialized and not managed by a soap context
        virtual _wsnt__Notify *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Notify); }
      public:
        /// Constructor with default initializations
        _wsnt__Notify() : __sizeNotificationMessage(), NotificationMessage_(), soap() { }
        virtual ~_wsnt__Notify() { }
        /// Friend allocator used by soap_new__wsnt__Notify(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1846 */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (875)
/* complex XML schema type 'wsnt:UseRaw': */
class SOAP_CMAC _wsnt__UseRaw {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UseRaw
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UseRaw; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UseRaw, default initialized and not managed by a soap context
        virtual _wsnt__UseRaw *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UseRaw); }
      public:
        /// Constructor with default initializations
        _wsnt__UseRaw() : soap() { }
        virtual ~_wsnt__UseRaw() { }
        /// Friend allocator used by soap_new__wsnt__UseRaw(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:26425 */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1949)
/* complex XML schema type 'wsnt:Subscribe-SubscriptionPolicy': */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy {
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe_SubscriptionPolicy); }
      public:
        /// Constructor with default initializations
        _wsnt__Subscribe_SubscriptionPolicy() { }
        virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1848 */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (876)
/* complex XML schema type 'wsnt:Subscribe': */
class SOAP_CMAC _wsnt__Subscribe {
      public:
        /// Required element 'wsnt:ConsumerReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType ConsumerReference;
        /// Optional element 'wsnt:Filter' of XML schema type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'wsnt:InitialTerminationTime' of XML schema type 'wsnt:AbsoluteOrRelativeTimeType'
        char *InitialTerminationTime;
        /// Optional element 'wsnt:SubscriptionPolicy' of XML schema type 'wsnt:Subscribe-SubscriptionPolicy'
        _wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Subscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Subscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Subscribe, default initialized and not managed by a soap context
        virtual _wsnt__Subscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Subscribe); }
      public:
        /// Constructor with default initializations
        _wsnt__Subscribe() : ConsumerReference(), Filter(), InitialTerminationTime(), SubscriptionPolicy(), soap() { }
        virtual ~_wsnt__Subscribe() { }
        /// Friend allocator used by soap_new__wsnt__Subscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1850 */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (877)
/* complex XML schema type 'wsnt:SubscribeResponse': */
class SOAP_CMAC _wsnt__SubscribeResponse {
      public:
        /// Required element 'wsnt:SubscriptionReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType SubscriptionReference;
        /// Optional element 'wsnt:CurrentTime' of XML schema type 'xsd:dateTime'
        time_t *CurrentTime;
        /// Optional element 'wsnt:TerminationTime' of XML schema type 'xsd:dateTime'
        time_t *TerminationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__SubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__SubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__SubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__SubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__SubscribeResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__SubscribeResponse() : SubscriptionReference(), CurrentTime(), TerminationTime(), soap() { }
        virtual ~_wsnt__SubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__SubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1852 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (878)
/* complex XML schema type 'wsnt:GetCurrentMessage': */
class SOAP_CMAC _wsnt__GetCurrentMessage {
      public:
        /// Required element 'wsnt:Topic' of XML schema type 'wsnt:TopicExpressionType'
        wsnt__TopicExpressionType *Topic;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessage
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessage, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessage); }
      public:
        /// Constructor with default initializations
        _wsnt__GetCurrentMessage() : Topic(), soap() { }
        virtual ~_wsnt__GetCurrentMessage() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessage(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1854 */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (879)
/* complex XML schema type 'wsnt:GetCurrentMessageResponse': */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetCurrentMessageResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetCurrentMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetCurrentMessageResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetCurrentMessageResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetCurrentMessageResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__GetCurrentMessageResponse() : soap() { }
        virtual ~_wsnt__GetCurrentMessageResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetCurrentMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1856 */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (880)
/* complex XML schema type 'wsnt:GetMessages': */
class SOAP_CMAC _wsnt__GetMessages {
      public:
        /// Optional element 'wsnt:MaximumNumber' of XML schema type 'xsd:nonNegativeInteger'
        char *MaximumNumber;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessages
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessages, default initialized and not managed by a soap context
        virtual _wsnt__GetMessages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessages); }
      public:
        /// Constructor with default initializations
        _wsnt__GetMessages() : MaximumNumber(), soap() { }
        virtual ~_wsnt__GetMessages() { }
        /// Friend allocator used by soap_new__wsnt__GetMessages(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1858 */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (881)
/* complex XML schema type 'wsnt:GetMessagesResponse': */
class SOAP_CMAC _wsnt__GetMessagesResponse {
      public:
        /// Sequence of elements 'wsnt:NotificationMessage' of XML schema type 'wsnt:NotificationMessageHolderType' stored in dynamic array NotificationMessage_ of length __sizeNotificationMessage
        int __sizeNotificationMessage;
        wsnt__NotificationMessageHolderType **NotificationMessage_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__GetMessagesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__GetMessagesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__GetMessagesResponse, default initialized and not managed by a soap context
        virtual _wsnt__GetMessagesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__GetMessagesResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__GetMessagesResponse() : __sizeNotificationMessage(), NotificationMessage_(), soap() { }
        virtual ~_wsnt__GetMessagesResponse() { }
        /// Friend allocator used by soap_new__wsnt__GetMessagesResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1860 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (882)
/* complex XML schema type 'wsnt:DestroyPullPoint': */
class SOAP_CMAC _wsnt__DestroyPullPoint {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPoint, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPoint); }
      public:
        /// Constructor with default initializations
        _wsnt__DestroyPullPoint() : soap() { }
        virtual ~_wsnt__DestroyPullPoint() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1862 */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (883)
/* complex XML schema type 'wsnt:DestroyPullPointResponse': */
class SOAP_CMAC _wsnt__DestroyPullPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__DestroyPullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__DestroyPullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__DestroyPullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__DestroyPullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__DestroyPullPointResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__DestroyPullPointResponse() : soap() { }
        virtual ~_wsnt__DestroyPullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__DestroyPullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1864 */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (884)
/* complex XML schema type 'wsnt:CreatePullPoint': */
class SOAP_CMAC _wsnt__CreatePullPoint {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPoint
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPoint, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPoint); }
      public:
        /// Constructor with default initializations
        _wsnt__CreatePullPoint() : soap() { }
        virtual ~_wsnt__CreatePullPoint() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPoint(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1866 */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (885)
/* complex XML schema type 'wsnt:CreatePullPointResponse': */
class SOAP_CMAC _wsnt__CreatePullPointResponse {
      public:
        /// Required element 'wsnt:PullPoint' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType PullPoint;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__CreatePullPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__CreatePullPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__CreatePullPointResponse, default initialized and not managed by a soap context
        virtual _wsnt__CreatePullPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__CreatePullPointResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__CreatePullPointResponse() : PullPoint(), soap() { }
        virtual ~_wsnt__CreatePullPointResponse() { }
        /// Friend allocator used by soap_new__wsnt__CreatePullPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1868 */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (886)
/* complex XML schema type 'wsnt:Renew': */
class SOAP_CMAC _wsnt__Renew {
      public:
        /// Required nillable (xsi:nil when NULL) element 'wsnt:TerminationTime' of XML schema type 'wsnt:AbsoluteOrRelativeTimeType'
        char *TerminationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Renew
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Renew; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Renew, default initialized and not managed by a soap context
        virtual _wsnt__Renew *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Renew); }
      public:
        /// Constructor with default initializations
        _wsnt__Renew() : TerminationTime(), soap() { }
        virtual ~_wsnt__Renew() { }
        /// Friend allocator used by soap_new__wsnt__Renew(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1870 */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (887)
/* complex XML schema type 'wsnt:RenewResponse': */
class SOAP_CMAC _wsnt__RenewResponse {
      public:
        /// Required element 'wsnt:TerminationTime' of XML schema type 'xsd:dateTime'
        time_t TerminationTime;
        /// Optional element 'wsnt:CurrentTime' of XML schema type 'xsd:dateTime'
        time_t *CurrentTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__RenewResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__RenewResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__RenewResponse, default initialized and not managed by a soap context
        virtual _wsnt__RenewResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__RenewResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__RenewResponse() : TerminationTime(), CurrentTime(), soap() { }
        virtual ~_wsnt__RenewResponse() { }
        /// Friend allocator used by soap_new__wsnt__RenewResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1872 */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (888)
/* complex XML schema type 'wsnt:Unsubscribe': */
class SOAP_CMAC _wsnt__Unsubscribe {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__Unsubscribe
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__Unsubscribe; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__Unsubscribe, default initialized and not managed by a soap context
        virtual _wsnt__Unsubscribe *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__Unsubscribe); }
      public:
        /// Constructor with default initializations
        _wsnt__Unsubscribe() : soap() { }
        virtual ~_wsnt__Unsubscribe() { }
        /// Friend allocator used by soap_new__wsnt__Unsubscribe(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1874 */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (889)
/* complex XML schema type 'wsnt:UnsubscribeResponse': */
class SOAP_CMAC _wsnt__UnsubscribeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__UnsubscribeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__UnsubscribeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__UnsubscribeResponse, default initialized and not managed by a soap context
        virtual _wsnt__UnsubscribeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__UnsubscribeResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__UnsubscribeResponse() : soap() { }
        virtual ~_wsnt__UnsubscribeResponse() { }
        /// Friend allocator used by soap_new__wsnt__UnsubscribeResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1876 */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (890)
/* complex XML schema type 'wsnt:PauseSubscription': */
class SOAP_CMAC _wsnt__PauseSubscription {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscription, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscription); }
      public:
        /// Constructor with default initializations
        _wsnt__PauseSubscription() : soap() { }
        virtual ~_wsnt__PauseSubscription() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1878 */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (891)
/* complex XML schema type 'wsnt:PauseSubscriptionResponse': */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__PauseSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__PauseSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__PauseSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__PauseSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__PauseSubscriptionResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__PauseSubscriptionResponse() : soap() { }
        virtual ~_wsnt__PauseSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__PauseSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1880 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (892)
/* complex XML schema type 'wsnt:ResumeSubscription': */
class SOAP_CMAC _wsnt__ResumeSubscription {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscription, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscription); }
      public:
        /// Constructor with default initializations
        _wsnt__ResumeSubscription() : soap() { }
        virtual ~_wsnt__ResumeSubscription() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscription(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1882 */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (893)
/* complex XML schema type 'wsnt:ResumeSubscriptionResponse': */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__wsnt__ResumeSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__wsnt__ResumeSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsnt__ResumeSubscriptionResponse, default initialized and not managed by a soap context
        virtual _wsnt__ResumeSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsnt__ResumeSubscriptionResponse); }
      public:
        /// Constructor with default initializations
        _wsnt__ResumeSubscriptionResponse() : soap() { }
        virtual ~_wsnt__ResumeSubscriptionResponse() { }
        /// Friend allocator used by soap_new__wsnt__ResumeSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:27006 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1951)
/* complex XML schema type 'wsrfbf:BaseFaultType-ErrorCode': */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode {
      public:
        /// Required attribute 'dialect' of XML schema type 'xsd:anyURI'
        char *dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_ErrorCode, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_ErrorCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_ErrorCode); }
      public:
        /// Constructor with default initializations
        _wsrfbf__BaseFaultType_ErrorCode() : dialect(), __mixed() { }
        virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:27029 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1953)
/* simple XML schema type 'wsrfbf:BaseFaultType-Description': */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        char *__item;
        /// Optional attribute 'xml:lang' of XML schema type 'xml:lang'
        char *xml__lang;
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_Description
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_Description; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_Description, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_Description *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_Description); }
      public:
        /// Constructor with default initializations
        _wsrfbf__BaseFaultType_Description() : __item(), xml__lang() { }
        virtual ~_wsrfbf__BaseFaultType_Description() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_Description(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:27047 */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1955)
/* complex XML schema type 'wsrfbf:BaseFaultType-FaultCause': */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause {
      public:
        /// Return unique type id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
        virtual long soap_type(void) const { return SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wsrfbf__BaseFaultType_FaultCause, default initialized and not managed by a soap context
        virtual _wsrfbf__BaseFaultType_FaultCause *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wsrfbf__BaseFaultType_FaultCause); }
      public:
        /// Constructor with default initializations
        _wsrfbf__BaseFaultType_FaultCause() { }
        virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
        /// Friend allocator used by soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap*, int)
        friend SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1884 */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (894)
/* complex XML schema type 'wsrfbf:BaseFaultType': */
class SOAP_CMAC wsrfbf__BaseFaultType : public xsd__anyType {
      public:
        /// Required element 'wsrfbf:Timestamp' of XML schema type 'xsd:dateTime'
        time_t Timestamp;
        /// Optional element 'wsrfbf:Originator' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType *Originator;
        /// Optional element 'wsrfbf:ErrorCode' of XML schema type 'wsrfbf:BaseFaultType-ErrorCode'
        _wsrfbf__BaseFaultType_ErrorCode *ErrorCode;
        /// Sequence of elements 'wsrfbf:Description' of XML schema type 'wsrfbf:BaseFaultType-Description' stored in dynamic array Description of length __sizeDescription
        int __sizeDescription;
        _wsrfbf__BaseFaultType_Description *Description;
        /// Optional element 'wsrfbf:FaultCause' of XML schema type 'wsrfbf:BaseFaultType-FaultCause'
        _wsrfbf__BaseFaultType_FaultCause *FaultCause;
      public:
        /// Return unique type id SOAP_TYPE_wsrfbf__BaseFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfbf__BaseFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfbf__BaseFaultType, default initialized and not managed by a soap context
        virtual wsrfbf__BaseFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfbf__BaseFaultType); }
      public:
        /// Constructor with default initializations
        wsrfbf__BaseFaultType() : Timestamp(), Originator(), ErrorCode(), __sizeDescription(), Description(), FaultCause() { }
        virtual ~wsrfbf__BaseFaultType() { }
        /// Friend allocator used by soap_new_wsrfbf__BaseFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1886 */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (895)
/* complex XML schema type 'wstop:Documentation': */
class SOAP_CMAC wstop__Documentation : public xsd__anyType {
      public:
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE_wstop__Documentation
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__Documentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__Documentation, default initialized and not managed by a soap context
        virtual wstop__Documentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__Documentation); }
      public:
        /// Constructor with default initializations
        wstop__Documentation() : __mixed() { }
        virtual ~wstop__Documentation() { }
        /// Friend allocator used by soap_new_wstop__Documentation(struct soap*, int)
        friend SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1888 */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (896)
/* complex XML schema type 'wstop:ExtensibleDocumented': */
class SOAP_CMAC wstop__ExtensibleDocumented : public xsd__anyType {
      public:
        /// Optional element 'wstop:documentation' of XML schema type 'wstop:Documentation'
        wstop__Documentation *documentation;
      public:
        /// Return unique type id SOAP_TYPE_wstop__ExtensibleDocumented
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__ExtensibleDocumented; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__ExtensibleDocumented, default initialized and not managed by a soap context
        virtual wstop__ExtensibleDocumented *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__ExtensibleDocumented); }
      public:
        /// Constructor with default initializations
        wstop__ExtensibleDocumented() : documentation() { }
        virtual ~wstop__ExtensibleDocumented() { }
        /// Friend allocator used by soap_new_wstop__ExtensibleDocumented(struct soap*, int)
        friend SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1890 */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (897)
/* complex XML schema type 'wstop:QueryExpressionType': */
class SOAP_CMAC wstop__QueryExpressionType : public xsd__anyType {
      public:
        /// Required attribute 'Dialect' of XML schema type 'xsd:anyURI'
        char *Dialect;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE_wstop__QueryExpressionType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__QueryExpressionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__QueryExpressionType, default initialized and not managed by a soap context
        virtual wstop__QueryExpressionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__QueryExpressionType); }
      public:
        /// Constructor with default initializations
        wstop__QueryExpressionType() : Dialect(), __mixed() { }
        virtual ~wstop__QueryExpressionType() { }
        /// Friend allocator used by soap_new_wstop__QueryExpressionType(struct soap*, int)
        friend SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1898 */
#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (901)
/* complex XML schema type 'trt:Capabilities': */
class SOAP_CMAC trt__Capabilities : public xsd__anyType {
      public:
        /// Required element 'trt:ProfileCapabilities' of XML schema type 'trt:ProfileCapabilities'
        trt__ProfileCapabilities *ProfileCapabilities;
        /// Required element 'trt:StreamingCapabilities' of XML schema type 'trt:StreamingCapabilities'
        trt__StreamingCapabilities *StreamingCapabilities;
        /// Optional attribute 'SnapshotUri' of XML schema type 'xsd:boolean'
        bool *SnapshotUri;
        /// Optional attribute 'Rotation' of XML schema type 'xsd:boolean'
        bool *Rotation;
        /// Optional attribute 'VideoSourceMode' of XML schema type 'xsd:boolean'
        bool *VideoSourceMode;
        /// Optional attribute 'OSD' of XML schema type 'xsd:boolean'
        bool *OSD;
        /// Optional attribute 'TemporaryOSDText' of XML schema type 'xsd:boolean'
        bool *TemporaryOSDText;
        /// Optional attribute 'EXICompression' of XML schema type 'xsd:boolean'
        bool *EXICompression;
      public:
        /// Return unique type id SOAP_TYPE_trt__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__Capabilities, default initialized and not managed by a soap context
        virtual trt__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__Capabilities); }
      public:
        /// Constructor with default initializations
        trt__Capabilities() : ProfileCapabilities(), StreamingCapabilities(), SnapshotUri(), Rotation(), VideoSourceMode(), OSD(), TemporaryOSDText(), EXICompression() { }
        virtual ~trt__Capabilities() { }
        /// Friend allocator used by soap_new_trt__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__Capabilities * SOAP_FMAC2 soap_instantiate_trt__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1900 */
#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (902)
/* simple XML schema type 'trt:ProfileCapabilities': */
class SOAP_CMAC trt__ProfileCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'MaximumNumberOfProfiles' of XML schema type 'xsd:int'
        int *MaximumNumberOfProfiles;
      public:
        /// Return unique type id SOAP_TYPE_trt__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__ProfileCapabilities, default initialized and not managed by a soap context
        virtual trt__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__ProfileCapabilities); }
      public:
        /// Constructor with default initializations
        trt__ProfileCapabilities() : MaximumNumberOfProfiles() { }
        virtual ~trt__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_trt__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_trt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1902 */
#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (903)
/* simple XML schema type 'trt:StreamingCapabilities': */
class SOAP_CMAC trt__StreamingCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'RTPMulticast' of XML schema type 'xsd:boolean'
        bool *RTPMulticast;
        /// Optional attribute 'RTP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORETCP;
        /// Optional attribute 'RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// Optional attribute 'NonAggregateControl' of XML schema type 'xsd:boolean'
        bool *NonAggregateControl;
        /// Optional attribute 'NoRTSPStreaming' of XML schema type 'xsd:boolean'
        bool *NoRTSPStreaming;
      public:
        /// Return unique type id SOAP_TYPE_trt__StreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_trt__StreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__StreamingCapabilities, default initialized and not managed by a soap context
        virtual trt__StreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__StreamingCapabilities); }
      public:
        /// Constructor with default initializations
        trt__StreamingCapabilities() : RTPMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), NonAggregateControl(), NoRTSPStreaming() { }
        virtual ~trt__StreamingCapabilities() { }
        /// Friend allocator used by soap_new_trt__StreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 trt__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_trt__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1904 */
#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (904)
/* complex XML schema type 'trt:VideoSourceMode': */
class SOAP_CMAC trt__VideoSourceMode : public xsd__anyType {
      public:
        /// Required element 'trt:MaxFramerate' of XML schema type 'xsd:float'
        float MaxFramerate;
        /// Required element 'trt:MaxResolution' of XML schema type 'tt:VideoResolution'
        tt__VideoResolution *MaxResolution;
        /// Required element 'trt:Encodings' of XML schema type 'tt:StringList'
        char *Encodings;
        /// Required element 'trt:Reboot' of XML schema type 'xsd:boolean'
        bool Reboot;
        /// Optional element 'trt:Description' of XML schema type 'tt:Description'
        char *Description;
        /// Optional element 'trt:Extension' of XML schema type 'trt:VideoSourceModeExtension'
        trt__VideoSourceModeExtension *Extension;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
        /// Optional attribute 'Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
      public:
        /// Return unique type id SOAP_TYPE_trt__VideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE_trt__VideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__VideoSourceMode, default initialized and not managed by a soap context
        virtual trt__VideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__VideoSourceMode); }
      public:
        /// Constructor with default initializations
        trt__VideoSourceMode() : MaxFramerate(), MaxResolution(), Encodings(), Reboot(), Description(), Extension(), token(), Enabled() { }
        virtual ~trt__VideoSourceMode() { }
        /// Friend allocator used by soap_new_trt__VideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 trt__VideoSourceMode * SOAP_FMAC2 soap_instantiate_trt__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1906 */
#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (905)
/* simple XML schema type 'trt:VideoSourceModeExtension': */
class SOAP_CMAC trt__VideoSourceModeExtension : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_trt__VideoSourceModeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_trt__VideoSourceModeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type trt__VideoSourceModeExtension, default initialized and not managed by a soap context
        virtual trt__VideoSourceModeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(trt__VideoSourceModeExtension); }
      public:
        /// Constructor with default initializations
        trt__VideoSourceModeExtension() { }
        virtual ~trt__VideoSourceModeExtension() { }
        /// Friend allocator used by soap_new_trt__VideoSourceModeExtension(struct soap*, int)
        friend SOAP_FMAC1 trt__VideoSourceModeExtension * SOAP_FMAC2 soap_instantiate_trt__VideoSourceModeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1908 */
#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (906)
/* complex XML schema type 'trt:GetServiceCapabilities': */
class SOAP_CMAC _trt__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _trt__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _trt__GetServiceCapabilities() : soap() { }
        virtual ~_trt__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__trt__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1910 */
#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (907)
/* complex XML schema type 'trt:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'trt:Capabilities' of XML schema type 'trt:Capabilities'
        trt__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _trt__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_trt__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__trt__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__trt__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1912 */
#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (908)
/* complex XML schema type 'trt:GetVideoSources': */
class SOAP_CMAC _trt__GetVideoSources {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSources
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSources; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSources, default initialized and not managed by a soap context
        virtual _trt__GetVideoSources *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSources); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSources() : soap() { }
        virtual ~_trt__GetVideoSources() { }
        /// Friend allocator used by soap_new__trt__GetVideoSources(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSources * SOAP_FMAC2 soap_instantiate__trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1914 */
#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (909)
/* complex XML schema type 'trt:GetVideoSourcesResponse': */
class SOAP_CMAC _trt__GetVideoSourcesResponse {
      public:
        /// Sequence of elements 'trt:VideoSources' of XML schema type 'tt:VideoSource' stored in dynamic array VideoSources of length __sizeVideoSources
        int __sizeVideoSources;
        tt__VideoSource **VideoSources;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourcesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourcesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourcesResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourcesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourcesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourcesResponse() : __sizeVideoSources(), VideoSources(), soap() { }
        virtual ~_trt__GetVideoSourcesResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourcesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourcesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1916 */
#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (910)
/* complex XML schema type 'trt:GetAudioSources': */
class SOAP_CMAC _trt__GetAudioSources {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSources
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSources; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSources, default initialized and not managed by a soap context
        virtual _trt__GetAudioSources *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSources); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSources() : soap() { }
        virtual ~_trt__GetAudioSources() { }
        /// Friend allocator used by soap_new__trt__GetAudioSources(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSources * SOAP_FMAC2 soap_instantiate__trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1918 */
#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (911)
/* complex XML schema type 'trt:GetAudioSourcesResponse': */
class SOAP_CMAC _trt__GetAudioSourcesResponse {
      public:
        /// Sequence of elements 'trt:AudioSources' of XML schema type 'tt:AudioSource' stored in dynamic array AudioSources of length __sizeAudioSources
        int __sizeAudioSources;
        tt__AudioSource **AudioSources;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourcesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourcesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourcesResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourcesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourcesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourcesResponse() : __sizeAudioSources(), AudioSources(), soap() { }
        virtual ~_trt__GetAudioSourcesResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourcesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourcesResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourcesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1920 */
#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (912)
/* complex XML schema type 'trt:GetAudioOutputs': */
class SOAP_CMAC _trt__GetAudioOutputs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputs
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputs, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputs); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputs() : soap() { }
        virtual ~_trt__GetAudioOutputs() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputs(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1922 */
#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (913)
/* complex XML schema type 'trt:GetAudioOutputsResponse': */
class SOAP_CMAC _trt__GetAudioOutputsResponse {
      public:
        /// Sequence of elements 'trt:AudioOutputs' of XML schema type 'tt:AudioOutput' stored in dynamic array AudioOutputs of length __sizeAudioOutputs
        int __sizeAudioOutputs;
        tt__AudioOutput **AudioOutputs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputsResponse() : __sizeAudioOutputs(), AudioOutputs(), soap() { }
        virtual ~_trt__GetAudioOutputsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1924 */
#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (914)
/* complex XML schema type 'trt:CreateProfile': */
class SOAP_CMAC _trt__CreateProfile {
      public:
        /// Required element 'trt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Optional element 'trt:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateProfile, default initialized and not managed by a soap context
        virtual _trt__CreateProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateProfile); }
      public:
        /// Constructor with default initializations
        _trt__CreateProfile() : Name(), Token(), soap() { }
        virtual ~_trt__CreateProfile() { }
        /// Friend allocator used by soap_new__trt__CreateProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateProfile * SOAP_FMAC2 soap_instantiate__trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1926 */
#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (915)
/* complex XML schema type 'trt:CreateProfileResponse': */
class SOAP_CMAC _trt__CreateProfileResponse {
      public:
        /// Required element 'trt:Profile' of XML schema type 'tt:Profile'
        tt__Profile *Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateProfileResponse, default initialized and not managed by a soap context
        virtual _trt__CreateProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateProfileResponse); }
      public:
        /// Constructor with default initializations
        _trt__CreateProfileResponse() : Profile(), soap() { }
        virtual ~_trt__CreateProfileResponse() { }
        /// Friend allocator used by soap_new__trt__CreateProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__trt__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1928 */
#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (916)
/* complex XML schema type 'trt:GetProfile': */
class SOAP_CMAC _trt__GetProfile {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfile, default initialized and not managed by a soap context
        virtual _trt__GetProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfile); }
      public:
        /// Constructor with default initializations
        _trt__GetProfile() : ProfileToken(), soap() { }
        virtual ~_trt__GetProfile() { }
        /// Friend allocator used by soap_new__trt__GetProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfile * SOAP_FMAC2 soap_instantiate__trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1930 */
#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (917)
/* complex XML schema type 'trt:GetProfileResponse': */
class SOAP_CMAC _trt__GetProfileResponse {
      public:
        /// Required element 'trt:Profile' of XML schema type 'tt:Profile'
        tt__Profile *Profile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfileResponse, default initialized and not managed by a soap context
        virtual _trt__GetProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfileResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetProfileResponse() : Profile(), soap() { }
        virtual ~_trt__GetProfileResponse() { }
        /// Friend allocator used by soap_new__trt__GetProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfileResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1932 */
#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (918)
/* complex XML schema type 'trt:GetProfiles': */
class SOAP_CMAC _trt__GetProfiles {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfiles
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfiles; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfiles, default initialized and not managed by a soap context
        virtual _trt__GetProfiles *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfiles); }
      public:
        /// Constructor with default initializations
        _trt__GetProfiles() : soap() { }
        virtual ~_trt__GetProfiles() { }
        /// Friend allocator used by soap_new__trt__GetProfiles(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfiles * SOAP_FMAC2 soap_instantiate__trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1934 */
#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (919)
/* complex XML schema type 'trt:GetProfilesResponse': */
class SOAP_CMAC _trt__GetProfilesResponse {
      public:
        /// Sequence of elements 'trt:Profiles' of XML schema type 'tt:Profile' stored in dynamic array Profiles of length __sizeProfiles
        int __sizeProfiles;
        tt__Profile **Profiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetProfilesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetProfilesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetProfilesResponse, default initialized and not managed by a soap context
        virtual _trt__GetProfilesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetProfilesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetProfilesResponse() : __sizeProfiles(), Profiles(), soap() { }
        virtual ~_trt__GetProfilesResponse() { }
        /// Friend allocator used by soap_new__trt__GetProfilesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__trt__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1936 */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (920)
/* complex XML schema type 'trt:AddVideoEncoderConfiguration': */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoEncoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1938 */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (921)
/* complex XML schema type 'trt:AddVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1940 */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (922)
/* complex XML schema type 'trt:RemoveVideoEncoderConfiguration': */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoEncoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1942 */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (923)
/* complex XML schema type 'trt:RemoveVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1944 */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (924)
/* complex XML schema type 'trt:AddVideoSourceConfiguration': */
class SOAP_CMAC _trt__AddVideoSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoSourceConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1946 */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (925)
/* complex XML schema type 'trt:AddVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1948 */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (926)
/* complex XML schema type 'trt:RemoveVideoSourceConfiguration': */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoSourceConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1950 */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (927)
/* complex XML schema type 'trt:RemoveVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1952 */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (928)
/* complex XML schema type 'trt:AddAudioEncoderConfiguration': */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioEncoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1954 */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (929)
/* complex XML schema type 'trt:AddAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1956 */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (930)
/* complex XML schema type 'trt:RemoveAudioEncoderConfiguration': */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioEncoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1958 */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (931)
/* complex XML schema type 'trt:RemoveAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1960 */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (932)
/* complex XML schema type 'trt:AddAudioSourceConfiguration': */
class SOAP_CMAC _trt__AddAudioSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioSourceConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1962 */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (933)
/* complex XML schema type 'trt:AddAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1964 */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (934)
/* complex XML schema type 'trt:RemoveAudioSourceConfiguration': */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioSourceConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1966 */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (935)
/* complex XML schema type 'trt:RemoveAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1968 */
#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (936)
/* complex XML schema type 'trt:AddPTZConfiguration': */
class SOAP_CMAC _trt__AddPTZConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddPTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddPTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddPTZConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddPTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddPTZConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddPTZConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddPTZConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddPTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1970 */
#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (937)
/* complex XML schema type 'trt:AddPTZConfigurationResponse': */
class SOAP_CMAC _trt__AddPTZConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddPTZConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddPTZConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddPTZConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddPTZConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddPTZConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddPTZConfigurationResponse() : soap() { }
        virtual ~_trt__AddPTZConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddPTZConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddPTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddPTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1972 */
#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (938)
/* complex XML schema type 'trt:RemovePTZConfiguration': */
class SOAP_CMAC _trt__RemovePTZConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemovePTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemovePTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemovePTZConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemovePTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemovePTZConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemovePTZConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemovePTZConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemovePTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1974 */
#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (939)
/* complex XML schema type 'trt:RemovePTZConfigurationResponse': */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemovePTZConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemovePTZConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemovePTZConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemovePTZConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemovePTZConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemovePTZConfigurationResponse() : soap() { }
        virtual ~_trt__RemovePTZConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemovePTZConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemovePTZConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemovePTZConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1976 */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (940)
/* complex XML schema type 'trt:AddVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoAnalyticsConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoAnalyticsConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1978 */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (941)
/* complex XML schema type 'trt:AddVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1980 */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (942)
/* complex XML schema type 'trt:RemoveVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoAnalyticsConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoAnalyticsConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1982 */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (943)
/* complex XML schema type 'trt:RemoveVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1984 */
#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (944)
/* complex XML schema type 'trt:AddMetadataConfiguration': */
class SOAP_CMAC _trt__AddMetadataConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddMetadataConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddMetadataConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1986 */
#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (945)
/* complex XML schema type 'trt:AddMetadataConfigurationResponse': */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddMetadataConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__AddMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1988 */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (946)
/* complex XML schema type 'trt:RemoveMetadataConfiguration': */
class SOAP_CMAC _trt__RemoveMetadataConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveMetadataConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveMetadataConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1990 */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (947)
/* complex XML schema type 'trt:RemoveMetadataConfigurationResponse': */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveMetadataConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1992 */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (948)
/* complex XML schema type 'trt:AddAudioOutputConfiguration': */
class SOAP_CMAC _trt__AddAudioOutputConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioOutputConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1994 */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (949)
/* complex XML schema type 'trt:AddAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioOutputConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1996 */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (950)
/* complex XML schema type 'trt:RemoveAudioOutputConfiguration': */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioOutputConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1998 */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (951)
/* complex XML schema type 'trt:RemoveAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioOutputConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2000 */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (952)
/* complex XML schema type 'trt:AddAudioDecoderConfiguration': */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__AddAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioDecoderConfiguration() : ProfileToken(), ConfigurationToken(), soap() { }
        virtual ~_trt__AddAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__AddAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2002 */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (953)
/* complex XML schema type 'trt:AddAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__AddAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__AddAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__AddAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__AddAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__AddAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__AddAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__AddAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2004 */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (954)
/* complex XML schema type 'trt:RemoveAudioDecoderConfiguration': */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioDecoderConfiguration() : ProfileToken(), soap() { }
        virtual ~_trt__RemoveAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2006 */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (955)
/* complex XML schema type 'trt:RemoveAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__RemoveAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__RemoveAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__RemoveAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__RemoveAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__RemoveAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__RemoveAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2008 */
#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (956)
/* complex XML schema type 'trt:DeleteProfile': */
class SOAP_CMAC _trt__DeleteProfile {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteProfile
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteProfile, default initialized and not managed by a soap context
        virtual _trt__DeleteProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteProfile); }
      public:
        /// Constructor with default initializations
        _trt__DeleteProfile() : ProfileToken(), soap() { }
        virtual ~_trt__DeleteProfile() { }
        /// Friend allocator used by soap_new__trt__DeleteProfile(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteProfile * SOAP_FMAC2 soap_instantiate__trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2010 */
#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (957)
/* complex XML schema type 'trt:DeleteProfileResponse': */
class SOAP_CMAC _trt__DeleteProfileResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteProfileResponse, default initialized and not managed by a soap context
        virtual _trt__DeleteProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteProfileResponse); }
      public:
        /// Constructor with default initializations
        _trt__DeleteProfileResponse() : soap() { }
        virtual ~_trt__DeleteProfileResponse() { }
        /// Friend allocator used by soap_new__trt__DeleteProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2012 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (958)
/* complex XML schema type 'trt:GetVideoEncoderConfigurations': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfigurations() : soap() { }
        virtual ~_trt__GetVideoEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2014 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (959)
/* complex XML schema type 'trt:GetVideoEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoEncoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoEncoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2016 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (960)
/* complex XML schema type 'trt:GetVideoSourceConfigurations': */
class SOAP_CMAC _trt__GetVideoSourceConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfigurations() : soap() { }
        virtual ~_trt__GetVideoSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2018 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (961)
/* complex XML schema type 'trt:GetVideoSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2020 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (962)
/* complex XML schema type 'trt:GetAudioEncoderConfigurations': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfigurations() : soap() { }
        virtual ~_trt__GetAudioEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2022 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (963)
/* complex XML schema type 'trt:GetAudioEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioEncoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioEncoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2024 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (964)
/* complex XML schema type 'trt:GetAudioSourceConfigurations': */
class SOAP_CMAC _trt__GetAudioSourceConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfigurations() : soap() { }
        virtual ~_trt__GetAudioSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2026 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (965)
/* complex XML schema type 'trt:GetAudioSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2028 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (966)
/* complex XML schema type 'trt:GetVideoAnalyticsConfigurations': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoAnalyticsConfigurations() : soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2030 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (967)
/* complex XML schema type 'trt:GetVideoAnalyticsConfigurationsResponse': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoAnalyticsConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoAnalyticsConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoAnalyticsConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2032 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (968)
/* complex XML schema type 'trt:GetMetadataConfigurations': */
class SOAP_CMAC _trt__GetMetadataConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfigurations() : soap() { }
        virtual ~_trt__GetMetadataConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2034 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (969)
/* complex XML schema type 'trt:GetMetadataConfigurationsResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:MetadataConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__MetadataConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetMetadataConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2036 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (970)
/* complex XML schema type 'trt:GetAudioOutputConfigurations': */
class SOAP_CMAC _trt__GetAudioOutputConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfigurations() : soap() { }
        virtual ~_trt__GetAudioOutputConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2038 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (971)
/* complex XML schema type 'trt:GetAudioOutputConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioOutputConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioOutputConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2040 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (972)
/* complex XML schema type 'trt:GetAudioDecoderConfigurations': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfigurations() : soap() { }
        virtual ~_trt__GetAudioDecoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2042 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (973)
/* complex XML schema type 'trt:GetAudioDecoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioDecoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioDecoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2044 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (974)
/* complex XML schema type 'trt:GetVideoSourceConfiguration': */
class SOAP_CMAC _trt__GetVideoSourceConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2046 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (975)
/* complex XML schema type 'trt:GetVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2048 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (976)
/* complex XML schema type 'trt:GetVideoEncoderConfiguration': */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2050 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (977)
/* complex XML schema type 'trt:GetVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2052 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (978)
/* complex XML schema type 'trt:GetAudioSourceConfiguration': */
class SOAP_CMAC _trt__GetAudioSourceConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2054 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (979)
/* complex XML schema type 'trt:GetAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2056 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (980)
/* complex XML schema type 'trt:GetAudioEncoderConfiguration': */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2058 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (981)
/* complex XML schema type 'trt:GetAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2060 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (982)
/* complex XML schema type 'trt:GetVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoAnalyticsConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2062 */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (983)
/* complex XML schema type 'trt:GetVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoAnalyticsConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2064 */
#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (984)
/* complex XML schema type 'trt:GetMetadataConfiguration': */
class SOAP_CMAC _trt__GetMetadataConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2066 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (985)
/* complex XML schema type 'trt:GetMetadataConfigurationResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2068 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (986)
/* complex XML schema type 'trt:GetAudioOutputConfiguration': */
class SOAP_CMAC _trt__GetAudioOutputConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2070 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (987)
/* complex XML schema type 'trt:GetAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2072 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (988)
/* complex XML schema type 'trt:GetAudioDecoderConfiguration': */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfiguration() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2074 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (989)
/* complex XML schema type 'trt:GetAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfigurationResponse() : Configuration(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2076 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (990)
/* complex XML schema type 'trt:GetCompatibleVideoEncoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoEncoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoEncoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2078 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (991)
/* complex XML schema type 'trt:GetCompatibleVideoEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoEncoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoEncoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2080 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (992)
/* complex XML schema type 'trt:GetCompatibleVideoSourceConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoSourceConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoSourceConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2082 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (993)
/* complex XML schema type 'trt:GetCompatibleVideoSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2084 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (994)
/* complex XML schema type 'trt:GetCompatibleAudioEncoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioEncoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioEncoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioEncoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioEncoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2086 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (995)
/* complex XML schema type 'trt:GetCompatibleAudioEncoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioEncoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioEncoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2088 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (996)
/* complex XML schema type 'trt:GetCompatibleAudioSourceConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioSourceConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioSourceConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioSourceConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioSourceConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2090 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (997)
/* complex XML schema type 'trt:GetCompatibleAudioSourceConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2092 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (998)
/* complex XML schema type 'trt:GetCompatibleVideoAnalyticsConfigurations': */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoAnalyticsConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoAnalyticsConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoAnalyticsConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoAnalyticsConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2094 */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (999)
/* complex XML schema type 'trt:GetCompatibleVideoAnalyticsConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:VideoAnalyticsConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoAnalyticsConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleVideoAnalyticsConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleVideoAnalyticsConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleVideoAnalyticsConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleVideoAnalyticsConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleVideoAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleVideoAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2096 */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (1000)
/* complex XML schema type 'trt:GetCompatibleMetadataConfigurations': */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleMetadataConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleMetadataConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleMetadataConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleMetadataConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleMetadataConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleMetadataConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleMetadataConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2098 */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (1001)
/* complex XML schema type 'trt:GetCompatibleMetadataConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:MetadataConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__MetadataConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleMetadataConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleMetadataConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleMetadataConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleMetadataConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2100 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (1002)
/* complex XML schema type 'trt:GetCompatibleAudioOutputConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioOutputConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioOutputConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioOutputConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioOutputConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2102 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (1003)
/* complex XML schema type 'trt:GetCompatibleAudioOutputConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioOutputConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioOutputConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioOutputConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioOutputConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioOutputConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioOutputConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2104 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (1004)
/* complex XML schema type 'trt:GetCompatibleAudioDecoderConfigurations': */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioDecoderConfigurations, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioDecoderConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioDecoderConfigurations); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioDecoderConfigurations() : ProfileToken(), soap() { }
        virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2106 */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (1005)
/* complex XML schema type 'trt:GetCompatibleAudioDecoderConfigurationsResponse': */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse {
      public:
        /// Sequence of elements 'trt:Configurations' of XML schema type 'tt:AudioDecoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioDecoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetCompatibleAudioDecoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _trt__GetCompatibleAudioDecoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetCompatibleAudioDecoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetCompatibleAudioDecoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetCompatibleAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__trt__GetCompatibleAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2108 */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (1006)
/* complex XML schema type 'trt:SetVideoEncoderConfiguration': */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoEncoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2110 */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (1007)
/* complex XML schema type 'trt:SetVideoEncoderConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2112 */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (1008)
/* complex XML schema type 'trt:SetVideoSourceConfiguration': */
class SOAP_CMAC _trt__SetVideoSourceConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoSourceConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2114 */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (1009)
/* complex XML schema type 'trt:SetVideoSourceConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoSourceConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2116 */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (1010)
/* complex XML schema type 'trt:SetAudioEncoderConfiguration': */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioEncoderConfiguration'
        tt__AudioEncoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioEncoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2118 */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (1011)
/* complex XML schema type 'trt:SetAudioEncoderConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioEncoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioEncoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioEncoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioEncoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioEncoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2120 */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (1012)
/* complex XML schema type 'trt:SetAudioSourceConfiguration': */
class SOAP_CMAC _trt__SetAudioSourceConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioSourceConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2122 */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (1013)
/* complex XML schema type 'trt:SetAudioSourceConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioSourceConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioSourceConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioSourceConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioSourceConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioSourceConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioSourceConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioSourceConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2124 */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (1014)
/* complex XML schema type 'trt:SetVideoAnalyticsConfiguration': */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetVideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoAnalyticsConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoAnalyticsConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetVideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetVideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2126 */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (1015)
/* complex XML schema type 'trt:SetVideoAnalyticsConfigurationResponse': */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoAnalyticsConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoAnalyticsConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoAnalyticsConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoAnalyticsConfigurationResponse() : soap() { }
        virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoAnalyticsConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoAnalyticsConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2128 */
#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (1016)
/* complex XML schema type 'trt:SetMetadataConfiguration': */
class SOAP_CMAC _trt__SetMetadataConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetMetadataConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetMetadataConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetMetadataConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetMetadataConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2130 */
#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (1017)
/* complex XML schema type 'trt:SetMetadataConfigurationResponse': */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetMetadataConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetMetadataConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetMetadataConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetMetadataConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetMetadataConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetMetadataConfigurationResponse() : soap() { }
        virtual ~_trt__SetMetadataConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetMetadataConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2132 */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (1018)
/* complex XML schema type 'trt:SetAudioOutputConfiguration': */
class SOAP_CMAC _trt__SetAudioOutputConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioOutputConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2134 */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (1019)
/* complex XML schema type 'trt:SetAudioOutputConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioOutputConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioOutputConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioOutputConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioOutputConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioOutputConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioOutputConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioOutputConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2136 */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (1020)
/* complex XML schema type 'trt:SetAudioDecoderConfiguration': */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration {
      public:
        /// Required element 'trt:Configuration' of XML schema type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *Configuration;
        /// Required element 'trt:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _trt__SetAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioDecoderConfiguration() : Configuration(), ForcePersistence(), soap() { }
        virtual ~_trt__SetAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__trt__SetAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2138 */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (1021)
/* complex XML schema type 'trt:SetAudioDecoderConfigurationResponse': */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetAudioDecoderConfigurationResponse, default initialized and not managed by a soap context
        virtual _trt__SetAudioDecoderConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetAudioDecoderConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetAudioDecoderConfigurationResponse() : soap() { }
        virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
        /// Friend allocator used by soap_new__trt__SetAudioDecoderConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate__trt__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2140 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (1022)
/* complex XML schema type 'trt:GetVideoSourceConfigurationOptions': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2142 */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (1023)
/* complex XML schema type 'trt:GetVideoSourceConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:VideoSourceConfigurationOptions'
        tt__VideoSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2144 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (1024)
/* complex XML schema type 'trt:GetVideoEncoderConfigurationOptions': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2146 */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (1025)
/* complex XML schema type 'trt:GetVideoEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:VideoEncoderConfigurationOptions'
        tt__VideoEncoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoEncoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2148 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (1026)
/* complex XML schema type 'trt:GetAudioSourceConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2150 */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (1027)
/* complex XML schema type 'trt:GetAudioSourceConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:AudioSourceConfigurationOptions'
        tt__AudioSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2152 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (1028)
/* complex XML schema type 'trt:GetAudioEncoderConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2154 */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (1029)
/* complex XML schema type 'trt:GetAudioEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:AudioEncoderConfigurationOptions'
        tt__AudioEncoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioEncoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2156 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (1030)
/* complex XML schema type 'trt:GetMetadataConfigurationOptions': */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetMetadataConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2158 */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (1031)
/* complex XML schema type 'trt:GetMetadataConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:MetadataConfigurationOptions'
        tt__MetadataConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetMetadataConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetMetadataConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetMetadataConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetMetadataConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2160 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (1032)
/* complex XML schema type 'trt:GetAudioOutputConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2162 */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (1033)
/* complex XML schema type 'trt:GetAudioOutputConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:AudioOutputConfigurationOptions'
        tt__AudioOutputConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioOutputConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioOutputConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioOutputConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioOutputConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2164 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (1034)
/* complex XML schema type 'trt:GetAudioDecoderConfigurationOptions': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationOptions, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfigurationOptions() : ConfigurationToken(), ProfileToken(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2166 */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (1035)
/* complex XML schema type 'trt:GetAudioDecoderConfigurationOptionsResponse': */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse {
      public:
        /// Required element 'trt:Options' of XML schema type 'tt:AudioDecoderConfigurationOptions'
        tt__AudioDecoderConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetAudioDecoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetAudioDecoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetAudioDecoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetAudioDecoderConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2168 */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (1036)
/* complex XML schema type 'trt:GetGuaranteedNumberOfVideoEncoderInstances': */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetGuaranteedNumberOfVideoEncoderInstances, default initialized and not managed by a soap context
        virtual _trt__GetGuaranteedNumberOfVideoEncoderInstances *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetGuaranteedNumberOfVideoEncoderInstances); }
      public:
        /// Constructor with default initializations
        _trt__GetGuaranteedNumberOfVideoEncoderInstances() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
        /// Friend allocator used by soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2170 */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (1037)
/* complex XML schema type 'trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse': */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse {
      public:
        /// Required element 'trt:TotalNumber' of XML schema type 'xsd:int'
        int TotalNumber;
        /// Optional element 'trt:JPEG' of XML schema type 'xsd:int'
        int *JPEG;
        /// Optional element 'trt:H264' of XML schema type 'xsd:int'
        int *H264;
        /// Optional element 'trt:MPEG4' of XML schema type 'xsd:int'
        int *MPEG4;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse, default initialized and not managed by a soap context
        virtual _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() : TotalNumber(), JPEG(), H264(), MPEG4(), soap() { }
        virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
        /// Friend allocator used by soap_new__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2172 */
#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (1038)
/* complex XML schema type 'trt:GetStreamUri': */
class SOAP_CMAC _trt__GetStreamUri {
      public:
        /// Required element 'trt:StreamSetup' of XML schema type 'tt:StreamSetup'
        tt__StreamSetup *StreamSetup;
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetStreamUri
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetStreamUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetStreamUri, default initialized and not managed by a soap context
        virtual _trt__GetStreamUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetStreamUri); }
      public:
        /// Constructor with default initializations
        _trt__GetStreamUri() : StreamSetup(), ProfileToken(), soap() { }
        virtual ~_trt__GetStreamUri() { }
        /// Friend allocator used by soap_new__trt__GetStreamUri(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetStreamUri * SOAP_FMAC2 soap_instantiate__trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2174 */
#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (1039)
/* complex XML schema type 'trt:GetStreamUriResponse': */
class SOAP_CMAC _trt__GetStreamUriResponse {
      public:
        /// Required element 'trt:MediaUri' of XML schema type 'tt:MediaUri'
        tt__MediaUri *MediaUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetStreamUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetStreamUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetStreamUriResponse, default initialized and not managed by a soap context
        virtual _trt__GetStreamUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetStreamUriResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetStreamUriResponse() : MediaUri(), soap() { }
        virtual ~_trt__GetStreamUriResponse() { }
        /// Friend allocator used by soap_new__trt__GetStreamUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2176 */
#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (1040)
/* complex XML schema type 'trt:StartMulticastStreaming': */
class SOAP_CMAC _trt__StartMulticastStreaming {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StartMulticastStreaming
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StartMulticastStreaming; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StartMulticastStreaming, default initialized and not managed by a soap context
        virtual _trt__StartMulticastStreaming *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StartMulticastStreaming); }
      public:
        /// Constructor with default initializations
        _trt__StartMulticastStreaming() : ProfileToken(), soap() { }
        virtual ~_trt__StartMulticastStreaming() { }
        /// Friend allocator used by soap_new__trt__StartMulticastStreaming(struct soap*, int)
        friend SOAP_FMAC1 _trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2178 */
#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (1041)
/* complex XML schema type 'trt:StartMulticastStreamingResponse': */
class SOAP_CMAC _trt__StartMulticastStreamingResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StartMulticastStreamingResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StartMulticastStreamingResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StartMulticastStreamingResponse, default initialized and not managed by a soap context
        virtual _trt__StartMulticastStreamingResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StartMulticastStreamingResponse); }
      public:
        /// Constructor with default initializations
        _trt__StartMulticastStreamingResponse() : soap() { }
        virtual ~_trt__StartMulticastStreamingResponse() { }
        /// Friend allocator used by soap_new__trt__StartMulticastStreamingResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2180 */
#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (1042)
/* complex XML schema type 'trt:StopMulticastStreaming': */
class SOAP_CMAC _trt__StopMulticastStreaming {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StopMulticastStreaming
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StopMulticastStreaming; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StopMulticastStreaming, default initialized and not managed by a soap context
        virtual _trt__StopMulticastStreaming *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StopMulticastStreaming); }
      public:
        /// Constructor with default initializations
        _trt__StopMulticastStreaming() : ProfileToken(), soap() { }
        virtual ~_trt__StopMulticastStreaming() { }
        /// Friend allocator used by soap_new__trt__StopMulticastStreaming(struct soap*, int)
        friend SOAP_FMAC1 _trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2182 */
#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (1043)
/* complex XML schema type 'trt:StopMulticastStreamingResponse': */
class SOAP_CMAC _trt__StopMulticastStreamingResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__StopMulticastStreamingResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__StopMulticastStreamingResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__StopMulticastStreamingResponse, default initialized and not managed by a soap context
        virtual _trt__StopMulticastStreamingResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__StopMulticastStreamingResponse); }
      public:
        /// Constructor with default initializations
        _trt__StopMulticastStreamingResponse() : soap() { }
        virtual ~_trt__StopMulticastStreamingResponse() { }
        /// Friend allocator used by soap_new__trt__StopMulticastStreamingResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate__trt__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2184 */
#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (1044)
/* complex XML schema type 'trt:SetSynchronizationPoint': */
class SOAP_CMAC _trt__SetSynchronizationPoint {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetSynchronizationPoint
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetSynchronizationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetSynchronizationPoint, default initialized and not managed by a soap context
        virtual _trt__SetSynchronizationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetSynchronizationPoint); }
      public:
        /// Constructor with default initializations
        _trt__SetSynchronizationPoint() : ProfileToken(), soap() { }
        virtual ~_trt__SetSynchronizationPoint() { }
        /// Friend allocator used by soap_new__trt__SetSynchronizationPoint(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2186 */
#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (1045)
/* complex XML schema type 'trt:SetSynchronizationPointResponse': */
class SOAP_CMAC _trt__SetSynchronizationPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetSynchronizationPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetSynchronizationPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetSynchronizationPointResponse, default initialized and not managed by a soap context
        virtual _trt__SetSynchronizationPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetSynchronizationPointResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetSynchronizationPointResponse() : soap() { }
        virtual ~_trt__SetSynchronizationPointResponse() { }
        /// Friend allocator used by soap_new__trt__SetSynchronizationPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__trt__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2188 */
#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (1046)
/* complex XML schema type 'trt:GetSnapshotUri': */
class SOAP_CMAC _trt__GetSnapshotUri {
      public:
        /// Required element 'trt:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetSnapshotUri
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetSnapshotUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetSnapshotUri, default initialized and not managed by a soap context
        virtual _trt__GetSnapshotUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetSnapshotUri); }
      public:
        /// Constructor with default initializations
        _trt__GetSnapshotUri() : ProfileToken(), soap() { }
        virtual ~_trt__GetSnapshotUri() { }
        /// Friend allocator used by soap_new__trt__GetSnapshotUri(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2190 */
#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (1047)
/* complex XML schema type 'trt:GetSnapshotUriResponse': */
class SOAP_CMAC _trt__GetSnapshotUriResponse {
      public:
        /// Required element 'trt:MediaUri' of XML schema type 'tt:MediaUri'
        tt__MediaUri *MediaUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetSnapshotUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetSnapshotUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetSnapshotUriResponse, default initialized and not managed by a soap context
        virtual _trt__GetSnapshotUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetSnapshotUriResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetSnapshotUriResponse() : MediaUri(), soap() { }
        virtual ~_trt__GetSnapshotUriResponse() { }
        /// Friend allocator used by soap_new__trt__GetSnapshotUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__trt__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2192 */
#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (1048)
/* complex XML schema type 'trt:GetVideoSourceModes': */
class SOAP_CMAC _trt__GetVideoSourceModes {
      public:
        /// Required element 'trt:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceModes
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceModes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceModes, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceModes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceModes); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceModes() : VideoSourceToken(), soap() { }
        virtual ~_trt__GetVideoSourceModes() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceModes(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2194 */
#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (1049)
/* complex XML schema type 'trt:GetVideoSourceModesResponse': */
class SOAP_CMAC _trt__GetVideoSourceModesResponse {
      public:
        /// Sequence of at least 1 elements 'trt:VideoSourceModes' of XML schema type 'trt:VideoSourceMode' stored in dynamic array VideoSourceModes of length __sizeVideoSourceModes
        int __sizeVideoSourceModes;
        trt__VideoSourceMode **VideoSourceModes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetVideoSourceModesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetVideoSourceModesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetVideoSourceModesResponse, default initialized and not managed by a soap context
        virtual _trt__GetVideoSourceModesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetVideoSourceModesResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetVideoSourceModesResponse() : __sizeVideoSourceModes(), VideoSourceModes(), soap() { }
        virtual ~_trt__GetVideoSourceModesResponse() { }
        /// Friend allocator used by soap_new__trt__GetVideoSourceModesResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__trt__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2196 */
#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (1050)
/* complex XML schema type 'trt:SetVideoSourceMode': */
class SOAP_CMAC _trt__SetVideoSourceMode {
      public:
        /// Required element 'trt:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Required element 'trt:VideoSourceModeToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceModeToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceMode, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceMode); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoSourceMode() : VideoSourceToken(), VideoSourceModeToken(), soap() { }
        virtual ~_trt__SetVideoSourceMode() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2198 */
#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (1051)
/* complex XML schema type 'trt:SetVideoSourceModeResponse': */
class SOAP_CMAC _trt__SetVideoSourceModeResponse {
      public:
        /// Required element 'trt:Reboot' of XML schema type 'xsd:boolean'
        bool Reboot;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetVideoSourceModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetVideoSourceModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetVideoSourceModeResponse, default initialized and not managed by a soap context
        virtual _trt__SetVideoSourceModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetVideoSourceModeResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetVideoSourceModeResponse() : Reboot(), soap() { }
        virtual ~_trt__SetVideoSourceModeResponse() { }
        /// Friend allocator used by soap_new__trt__SetVideoSourceModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__trt__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2200 */
#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (1052)
/* complex XML schema type 'trt:GetOSDs': */
class SOAP_CMAC _trt__GetOSDs {
      public:
        /// Optional element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDs
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDs, default initialized and not managed by a soap context
        virtual _trt__GetOSDs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDs); }
      public:
        /// Constructor with default initializations
        _trt__GetOSDs() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetOSDs() { }
        /// Friend allocator used by soap_new__trt__GetOSDs(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDs * SOAP_FMAC2 soap_instantiate__trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2202 */
#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (1053)
/* complex XML schema type 'trt:GetOSDsResponse': */
class SOAP_CMAC _trt__GetOSDsResponse {
      public:
        /// Sequence of elements 'trt:OSDs' of XML schema type 'tt:OSDConfiguration' stored in dynamic array OSDs of length __sizeOSDs
        int __sizeOSDs;
        tt__OSDConfiguration **OSDs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDsResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetOSDsResponse() : __sizeOSDs(), OSDs(), soap() { }
        virtual ~_trt__GetOSDsResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2204 */
#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (1054)
/* complex XML schema type 'trt:GetOSD': */
class SOAP_CMAC _trt__GetOSD {
      public:
        /// Required element 'trt:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSD, default initialized and not managed by a soap context
        virtual _trt__GetOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSD); }
      public:
        /// Constructor with default initializations
        _trt__GetOSD() : OSDToken(), soap() { }
        virtual ~_trt__GetOSD() { }
        /// Friend allocator used by soap_new__trt__GetOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSD * SOAP_FMAC2 soap_instantiate__trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2206 */
#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (1055)
/* complex XML schema type 'trt:GetOSDResponse': */
class SOAP_CMAC _trt__GetOSDResponse {
      public:
        /// Required element 'trt:OSD' of XML schema type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetOSDResponse() : OSD(), soap() { }
        virtual ~_trt__GetOSDResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2208 */
#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (1056)
/* complex XML schema type 'trt:SetOSD': */
class SOAP_CMAC _trt__SetOSD {
      public:
        /// Required element 'trt:OSD' of XML schema type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetOSD, default initialized and not managed by a soap context
        virtual _trt__SetOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetOSD); }
      public:
        /// Constructor with default initializations
        _trt__SetOSD() : OSD(), soap() { }
        virtual ~_trt__SetOSD() { }
        /// Friend allocator used by soap_new__trt__SetOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetOSD * SOAP_FMAC2 soap_instantiate__trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2210 */
#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (1057)
/* complex XML schema type 'trt:SetOSDResponse': */
class SOAP_CMAC _trt__SetOSDResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__SetOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__SetOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__SetOSDResponse, default initialized and not managed by a soap context
        virtual _trt__SetOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__SetOSDResponse); }
      public:
        /// Constructor with default initializations
        _trt__SetOSDResponse() : soap() { }
        virtual ~_trt__SetOSDResponse() { }
        /// Friend allocator used by soap_new__trt__SetOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__SetOSDResponse * SOAP_FMAC2 soap_instantiate__trt__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2212 */
#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (1058)
/* complex XML schema type 'trt:GetOSDOptions': */
class SOAP_CMAC _trt__GetOSDOptions {
      public:
        /// Required element 'trt:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDOptions
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDOptions, default initialized and not managed by a soap context
        virtual _trt__GetOSDOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDOptions); }
      public:
        /// Constructor with default initializations
        _trt__GetOSDOptions() : ConfigurationToken(), soap() { }
        virtual ~_trt__GetOSDOptions() { }
        /// Friend allocator used by soap_new__trt__GetOSDOptions(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2214 */
#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (1059)
/* complex XML schema type 'trt:GetOSDOptionsResponse': */
class SOAP_CMAC _trt__GetOSDOptionsResponse {
      public:
        /// Required element 'trt:OSDOptions' of XML schema type 'tt:OSDConfigurationOptions'
        tt__OSDConfigurationOptions *OSDOptions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__GetOSDOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__GetOSDOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__GetOSDOptionsResponse, default initialized and not managed by a soap context
        virtual _trt__GetOSDOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__GetOSDOptionsResponse); }
      public:
        /// Constructor with default initializations
        _trt__GetOSDOptionsResponse() : OSDOptions(), soap() { }
        virtual ~_trt__GetOSDOptionsResponse() { }
        /// Friend allocator used by soap_new__trt__GetOSDOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__trt__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2216 */
#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (1060)
/* complex XML schema type 'trt:CreateOSD': */
class SOAP_CMAC _trt__CreateOSD {
      public:
        /// Required element 'trt:OSD' of XML schema type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateOSD, default initialized and not managed by a soap context
        virtual _trt__CreateOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateOSD); }
      public:
        /// Constructor with default initializations
        _trt__CreateOSD() : OSD(), soap() { }
        virtual ~_trt__CreateOSD() { }
        /// Friend allocator used by soap_new__trt__CreateOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateOSD * SOAP_FMAC2 soap_instantiate__trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2218 */
#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (1061)
/* complex XML schema type 'trt:CreateOSDResponse': */
class SOAP_CMAC _trt__CreateOSDResponse {
      public:
        /// Required element 'trt:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__CreateOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__CreateOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__CreateOSDResponse, default initialized and not managed by a soap context
        virtual _trt__CreateOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__CreateOSDResponse); }
      public:
        /// Constructor with default initializations
        _trt__CreateOSDResponse() : OSDToken(), soap() { }
        virtual ~_trt__CreateOSDResponse() { }
        /// Friend allocator used by soap_new__trt__CreateOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__trt__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2220 */
#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (1062)
/* complex XML schema type 'trt:DeleteOSD': */
class SOAP_CMAC _trt__DeleteOSD {
      public:
        /// Required element 'trt:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteOSD
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteOSD, default initialized and not managed by a soap context
        virtual _trt__DeleteOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteOSD); }
      public:
        /// Constructor with default initializations
        _trt__DeleteOSD() : OSDToken(), soap() { }
        virtual ~_trt__DeleteOSD() { }
        /// Friend allocator used by soap_new__trt__DeleteOSD(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteOSD * SOAP_FMAC2 soap_instantiate__trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2222 */
#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (1063)
/* complex XML schema type 'trt:DeleteOSDResponse': */
class SOAP_CMAC _trt__DeleteOSDResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__trt__DeleteOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__trt__DeleteOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _trt__DeleteOSDResponse, default initialized and not managed by a soap context
        virtual _trt__DeleteOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_trt__DeleteOSDResponse); }
      public:
        /// Constructor with default initializations
        _trt__DeleteOSDResponse() : soap() { }
        virtual ~_trt__DeleteOSDResponse() { }
        /// Friend allocator used by soap_new__trt__DeleteOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _trt__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate__trt__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2224 */
#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (1064)
/* simple XML schema type 'tev:Capabilities': */
class SOAP_CMAC tev__Capabilities : public xsd__anyType {
      public:
        /// Optional attribute 'WSSubscriptionPolicySupport' of XML schema type 'xsd:boolean'
        bool *WSSubscriptionPolicySupport;
        /// Optional attribute 'WSPullPointSupport' of XML schema type 'xsd:boolean'
        bool *WSPullPointSupport;
        /// Optional attribute 'WSPausableSubscriptionManagerInterfaceSupport' of XML schema type 'xsd:boolean'
        bool *WSPausableSubscriptionManagerInterfaceSupport;
        /// Optional attribute 'MaxNotificationProducers' of XML schema type 'xsd:int'
        int *MaxNotificationProducers;
        /// Optional attribute 'MaxPullPoints' of XML schema type 'xsd:int'
        int *MaxPullPoints;
        /// Optional attribute 'PersistentNotificationStorage' of XML schema type 'xsd:boolean'
        bool *PersistentNotificationStorage;
        /// Optional attribute 'EventBrokerProtocols' of XML schema type 'xsd:string'
        char *EventBrokerProtocols;
        /// Optional attribute 'MaxEventBrokers' of XML schema type 'xsd:int'
        int *MaxEventBrokers;
      public:
        /// Return unique type id SOAP_TYPE_tev__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tev__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tev__Capabilities, default initialized and not managed by a soap context
        virtual tev__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tev__Capabilities); }
      public:
        /// Constructor with default initializations
        tev__Capabilities() : WSSubscriptionPolicySupport(), WSPullPointSupport(), WSPausableSubscriptionManagerInterfaceSupport(), MaxNotificationProducers(), MaxPullPoints(), PersistentNotificationStorage(), EventBrokerProtocols(), MaxEventBrokers() { }
        virtual ~tev__Capabilities() { }
        /// Friend allocator used by soap_new_tev__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tev__Capabilities * SOAP_FMAC2 soap_instantiate_tev__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2226 */
#ifndef SOAP_TYPE_tev__EventBrokerConfig
#define SOAP_TYPE_tev__EventBrokerConfig (1065)
/* complex XML schema type 'tev:EventBrokerConfig': */
class SOAP_CMAC tev__EventBrokerConfig : public xsd__anyType {
      public:
        /// Required element 'tev:Address' of XML schema type 'xsd:anyURI'
        char *Address;
        /// Required element 'tev:TopicPrefix' of XML schema type 'xsd:string'
        char *TopicPrefix;
        /// Optional element 'tev:UserName' of XML schema type 'xsd:string'
        char *UserName;
        /// Optional element 'tev:Password' of XML schema type 'xsd:string'
        char *Password;
        /// Optional element 'tev:CertificateID' of XML schema type 'xsd:token'
        char *CertificateID;
        /// Optional element 'tev:PublishFilter' of XML schema type 'wsnt:FilterType'
        wsnt__FilterType *PublishFilter;
        /// Optional element 'tev:QoS' of XML schema type 'xsd:int'
        int *QoS;
        /// Optional element 'tev:Status' of XML schema type 'xsd:string'
        char *Status;
        /// Optional element 'tev:CertPathValidationPolicyID' of XML schema type 'xsd:string'
        char *CertPathValidationPolicyID;
      public:
        /// Return unique type id SOAP_TYPE_tev__EventBrokerConfig
        virtual long soap_type(void) const { return SOAP_TYPE_tev__EventBrokerConfig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tev__EventBrokerConfig, default initialized and not managed by a soap context
        virtual tev__EventBrokerConfig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tev__EventBrokerConfig); }
      public:
        /// Constructor with default initializations
        tev__EventBrokerConfig() : Address(), TopicPrefix(), UserName(), Password(), CertificateID(), PublishFilter(), QoS(), Status(), CertPathValidationPolicyID() { }
        virtual ~tev__EventBrokerConfig() { }
        /// Friend allocator used by soap_new_tev__EventBrokerConfig(struct soap*, int)
        friend SOAP_FMAC1 tev__EventBrokerConfig * SOAP_FMAC2 soap_instantiate_tev__EventBrokerConfig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2228 */
#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (1066)
/* complex XML schema type 'tev:GetServiceCapabilities': */
class SOAP_CMAC _tev__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tev__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _tev__GetServiceCapabilities() : soap() { }
        virtual ~_tev__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tev__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2230 */
#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (1067)
/* complex XML schema type 'tev:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tev__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tev:Capabilities' of XML schema type 'tev:Capabilities'
        tev__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tev__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tev__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tev__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tev__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:31809 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (1990)
/* complex XML schema type 'tev:CreatePullPointSubscription-SubscriptionPolicy': */
class SOAP_CMAC _tev__CreatePullPointSubscription_SubscriptionPolicy {
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscription_SubscriptionPolicy, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscription_SubscriptionPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscription_SubscriptionPolicy); }
      public:
        /// Constructor with default initializations
        _tev__CreatePullPointSubscription_SubscriptionPolicy() { }
        virtual ~_tev__CreatePullPointSubscription_SubscriptionPolicy() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2232 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (1068)
/* complex XML schema type 'tev:CreatePullPointSubscription': */
class SOAP_CMAC _tev__CreatePullPointSubscription {
      public:
        /// Optional element 'tev:Filter' of XML schema type 'wsnt:FilterType'
        wsnt__FilterType *Filter;
        /// Optional element 'tev:InitialTerminationTime' of XML schema type 'wsnt:AbsoluteOrRelativeTimeType'
        char *InitialTerminationTime;
        /// Optional element 'tev:SubscriptionPolicy' of XML schema type 'tev:CreatePullPointSubscription-SubscriptionPolicy'
        _tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscription
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscription; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscription, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscription *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscription); }
      public:
        /// Constructor with default initializations
        _tev__CreatePullPointSubscription() : Filter(), InitialTerminationTime(), SubscriptionPolicy(), soap() { }
        virtual ~_tev__CreatePullPointSubscription() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscription(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2234 */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (1069)
/* complex XML schema type 'tev:CreatePullPointSubscriptionResponse': */
class SOAP_CMAC _tev__CreatePullPointSubscriptionResponse {
      public:
        /// Required element 'tev:SubscriptionReference' of XML schema type 'wsa5:EndpointReferenceType'
        struct wsa5__EndpointReferenceType SubscriptionReference;
        /// Required element 'wsnt:CurrentTime' of XML schema type 'xsd:dateTime'
        time_t wsnt__CurrentTime;
        /// Required element 'wsnt:TerminationTime' of XML schema type 'xsd:dateTime'
        time_t wsnt__TerminationTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__CreatePullPointSubscriptionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__CreatePullPointSubscriptionResponse, default initialized and not managed by a soap context
        virtual _tev__CreatePullPointSubscriptionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__CreatePullPointSubscriptionResponse); }
      public:
        /// Constructor with default initializations
        _tev__CreatePullPointSubscriptionResponse() : SubscriptionReference(), wsnt__CurrentTime(), wsnt__TerminationTime(), soap() { }
        virtual ~_tev__CreatePullPointSubscriptionResponse() { }
        /// Friend allocator used by soap_new__tev__CreatePullPointSubscriptionResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__CreatePullPointSubscriptionResponse * SOAP_FMAC2 soap_instantiate__tev__CreatePullPointSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2236 */
#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (1070)
/* complex XML schema type 'tev:PullMessages': */
class SOAP_CMAC _tev__PullMessages {
      public:
        /// Required element 'tev:Timeout' of XML schema type 'xsd:duration'
        char *Timeout;
        /// Required element 'tev:MessageLimit' of XML schema type 'xsd:int'
        int MessageLimit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessages
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessages; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessages, default initialized and not managed by a soap context
        virtual _tev__PullMessages *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessages); }
      public:
        /// Constructor with default initializations
        _tev__PullMessages() : Timeout(), MessageLimit(), soap() { }
        virtual ~_tev__PullMessages() { }
        /// Friend allocator used by soap_new__tev__PullMessages(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessages * SOAP_FMAC2 soap_instantiate__tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2238 */
#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (1071)
/* complex XML schema type 'tev:PullMessagesResponse': */
class SOAP_CMAC _tev__PullMessagesResponse {
      public:
        /// Required element 'tev:CurrentTime' of XML schema type 'xsd:dateTime'
        time_t CurrentTime;
        /// Required element 'tev:TerminationTime' of XML schema type 'xsd:dateTime'
        time_t TerminationTime;
        /// Sequence of elements 'wsnt:NotificationMessage' of XML schema type 'wsnt:NotificationMessageHolderType' stored in dynamic array wsnt__NotificationMessage of length __sizeNotificationMessage
        int __sizeNotificationMessage;
        wsnt__NotificationMessageHolderType **wsnt__NotificationMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessagesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessagesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessagesResponse, default initialized and not managed by a soap context
        virtual _tev__PullMessagesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessagesResponse); }
      public:
        /// Constructor with default initializations
        _tev__PullMessagesResponse() : CurrentTime(), TerminationTime(), __sizeNotificationMessage(), wsnt__NotificationMessage(), soap() { }
        virtual ~_tev__PullMessagesResponse() { }
        /// Friend allocator used by soap_new__tev__PullMessagesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessagesResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2240 */
#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (1072)
/* complex XML schema type 'tev:PullMessagesFaultResponse': */
class SOAP_CMAC _tev__PullMessagesFaultResponse {
      public:
        /// Required element 'tev:MaxTimeout' of XML schema type 'xsd:duration'
        char *MaxTimeout;
        /// Required element 'tev:MaxMessageLimit' of XML schema type 'xsd:int'
        int MaxMessageLimit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__PullMessagesFaultResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__PullMessagesFaultResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__PullMessagesFaultResponse, default initialized and not managed by a soap context
        virtual _tev__PullMessagesFaultResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__PullMessagesFaultResponse); }
      public:
        /// Constructor with default initializations
        _tev__PullMessagesFaultResponse() : MaxTimeout(), MaxMessageLimit(), soap() { }
        virtual ~_tev__PullMessagesFaultResponse() { }
        /// Friend allocator used by soap_new__tev__PullMessagesFaultResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__PullMessagesFaultResponse * SOAP_FMAC2 soap_instantiate__tev__PullMessagesFaultResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2242 */
#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (1073)
/* complex XML schema type 'tev:Seek': */
class SOAP_CMAC _tev__Seek {
      public:
        /// Required element 'tev:UtcTime' of XML schema type 'xsd:dateTime'
        time_t UtcTime;
        /// Optional element 'tev:Reverse' of XML schema type 'xsd:boolean'
        bool *Reverse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__Seek
        virtual long soap_type(void) const { return SOAP_TYPE__tev__Seek; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__Seek, default initialized and not managed by a soap context
        virtual _tev__Seek *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__Seek); }
      public:
        /// Constructor with default initializations
        _tev__Seek() : UtcTime(), Reverse(), soap() { }
        virtual ~_tev__Seek() { }
        /// Friend allocator used by soap_new__tev__Seek(struct soap*, int)
        friend SOAP_FMAC1 _tev__Seek * SOAP_FMAC2 soap_instantiate__tev__Seek(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2244 */
#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (1074)
/* complex XML schema type 'tev:SeekResponse': */
class SOAP_CMAC _tev__SeekResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SeekResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SeekResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SeekResponse, default initialized and not managed by a soap context
        virtual _tev__SeekResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SeekResponse); }
      public:
        /// Constructor with default initializations
        _tev__SeekResponse() : soap() { }
        virtual ~_tev__SeekResponse() { }
        /// Friend allocator used by soap_new__tev__SeekResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__SeekResponse * SOAP_FMAC2 soap_instantiate__tev__SeekResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2246 */
#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (1075)
/* complex XML schema type 'tev:SetSynchronizationPoint': */
class SOAP_CMAC _tev__SetSynchronizationPoint {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SetSynchronizationPoint
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SetSynchronizationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SetSynchronizationPoint, default initialized and not managed by a soap context
        virtual _tev__SetSynchronizationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SetSynchronizationPoint); }
      public:
        /// Constructor with default initializations
        _tev__SetSynchronizationPoint() : soap() { }
        virtual ~_tev__SetSynchronizationPoint() { }
        /// Friend allocator used by soap_new__tev__SetSynchronizationPoint(struct soap*, int)
        friend SOAP_FMAC1 _tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2248 */
#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (1076)
/* complex XML schema type 'tev:SetSynchronizationPointResponse': */
class SOAP_CMAC _tev__SetSynchronizationPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__SetSynchronizationPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__SetSynchronizationPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__SetSynchronizationPointResponse, default initialized and not managed by a soap context
        virtual _tev__SetSynchronizationPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__SetSynchronizationPointResponse); }
      public:
        /// Constructor with default initializations
        _tev__SetSynchronizationPointResponse() : soap() { }
        virtual ~_tev__SetSynchronizationPointResponse() { }
        /// Friend allocator used by soap_new__tev__SetSynchronizationPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__tev__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2250 */
#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (1077)
/* complex XML schema type 'tev:GetEventProperties': */
class SOAP_CMAC _tev__GetEventProperties {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventProperties
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventProperties; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventProperties, default initialized and not managed by a soap context
        virtual _tev__GetEventProperties *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventProperties); }
      public:
        /// Constructor with default initializations
        _tev__GetEventProperties() : soap() { }
        virtual ~_tev__GetEventProperties() { }
        /// Friend allocator used by soap_new__tev__GetEventProperties(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventProperties * SOAP_FMAC2 soap_instantiate__tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2252 */
#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (1078)
/* complex XML schema type 'tev:GetEventPropertiesResponse': */
class SOAP_CMAC _tev__GetEventPropertiesResponse {
      public:
        /// Sequence of at least 1 elements 'tev:TopicNamespaceLocation' of XML schema type 'xsd:anyURI' stored in dynamic array TopicNamespaceLocation of length __sizeTopicNamespaceLocation
        int __sizeTopicNamespaceLocation;
        char **TopicNamespaceLocation;
        /// Required element 'wsnt:FixedTopicSet' of XML schema type 'xsd:boolean'
        bool wsnt__FixedTopicSet;	///< initialized with default value = (bool)1
        /// Required element 'wstop:TopicSet' of XML schema type 'wstop:TopicSetType'
        wstop__TopicSetType *wstop__TopicSet;
        /// Sequence of at least 1 elements 'wsnt:TopicExpressionDialect' of XML schema type 'xsd:anyURI' stored in dynamic array wsnt__TopicExpressionDialect of length __sizeTopicExpressionDialect
        int __sizeTopicExpressionDialect;
        char **wsnt__TopicExpressionDialect;
        /// Sequence of at least 1 elements 'tev:MessageContentFilterDialect' of XML schema type 'xsd:anyURI' stored in dynamic array MessageContentFilterDialect of length __sizeMessageContentFilterDialect
        int __sizeMessageContentFilterDialect;
        char **MessageContentFilterDialect;
        /// Sequence of elements 'tev:ProducerPropertiesFilterDialect' of XML schema type 'xsd:anyURI' stored in dynamic array ProducerPropertiesFilterDialect of length __sizeProducerPropertiesFilterDialect
        int __sizeProducerPropertiesFilterDialect;
        char **ProducerPropertiesFilterDialect;
        /// Sequence of at least 1 elements 'tev:MessageContentSchemaLocation' of XML schema type 'xsd:anyURI' stored in dynamic array MessageContentSchemaLocation of length __sizeMessageContentSchemaLocation
        int __sizeMessageContentSchemaLocation;
        char **MessageContentSchemaLocation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventPropertiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventPropertiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventPropertiesResponse, default initialized and not managed by a soap context
        virtual _tev__GetEventPropertiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventPropertiesResponse); }
      public:
        /// Constructor with default initializations
        _tev__GetEventPropertiesResponse() : __sizeTopicNamespaceLocation(), TopicNamespaceLocation(), wsnt__FixedTopicSet((bool)1), wstop__TopicSet(), __sizeTopicExpressionDialect(), wsnt__TopicExpressionDialect(), __sizeMessageContentFilterDialect(), MessageContentFilterDialect(), __sizeProducerPropertiesFilterDialect(), ProducerPropertiesFilterDialect(), __sizeMessageContentSchemaLocation(), MessageContentSchemaLocation(), soap() { }
        virtual ~_tev__GetEventPropertiesResponse() { }
        /// Friend allocator used by soap_new__tev__GetEventPropertiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventPropertiesResponse * SOAP_FMAC2 soap_instantiate__tev__GetEventPropertiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2257 */
#ifndef SOAP_TYPE__tev__AddEventBroker
#define SOAP_TYPE__tev__AddEventBroker (1079)
/* complex XML schema type 'tev:AddEventBroker': */
class SOAP_CMAC _tev__AddEventBroker {
      public:
        /// Required element 'tev:EventBroker' of XML schema type 'tev:EventBrokerConfig'
        tev__EventBrokerConfig *EventBroker;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__AddEventBroker
        virtual long soap_type(void) const { return SOAP_TYPE__tev__AddEventBroker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__AddEventBroker, default initialized and not managed by a soap context
        virtual _tev__AddEventBroker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__AddEventBroker); }
      public:
        /// Constructor with default initializations
        _tev__AddEventBroker() : EventBroker(), soap() { }
        virtual ~_tev__AddEventBroker() { }
        /// Friend allocator used by soap_new__tev__AddEventBroker(struct soap*, int)
        friend SOAP_FMAC1 _tev__AddEventBroker * SOAP_FMAC2 soap_instantiate__tev__AddEventBroker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2259 */
#ifndef SOAP_TYPE__tev__AddEventBrokerResponse
#define SOAP_TYPE__tev__AddEventBrokerResponse (1080)
/* complex XML schema type 'tev:AddEventBrokerResponse': */
class SOAP_CMAC _tev__AddEventBrokerResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__AddEventBrokerResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__AddEventBrokerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__AddEventBrokerResponse, default initialized and not managed by a soap context
        virtual _tev__AddEventBrokerResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__AddEventBrokerResponse); }
      public:
        /// Constructor with default initializations
        _tev__AddEventBrokerResponse() : soap() { }
        virtual ~_tev__AddEventBrokerResponse() { }
        /// Friend allocator used by soap_new__tev__AddEventBrokerResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__AddEventBrokerResponse * SOAP_FMAC2 soap_instantiate__tev__AddEventBrokerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2261 */
#ifndef SOAP_TYPE__tev__DeleteEventBroker
#define SOAP_TYPE__tev__DeleteEventBroker (1081)
/* complex XML schema type 'tev:DeleteEventBroker': */
class SOAP_CMAC _tev__DeleteEventBroker {
      public:
        /// Required element 'tev:Address' of XML schema type 'xsd:anyURI'
        char *Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__DeleteEventBroker
        virtual long soap_type(void) const { return SOAP_TYPE__tev__DeleteEventBroker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__DeleteEventBroker, default initialized and not managed by a soap context
        virtual _tev__DeleteEventBroker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__DeleteEventBroker); }
      public:
        /// Constructor with default initializations
        _tev__DeleteEventBroker() : Address(), soap() { }
        virtual ~_tev__DeleteEventBroker() { }
        /// Friend allocator used by soap_new__tev__DeleteEventBroker(struct soap*, int)
        friend SOAP_FMAC1 _tev__DeleteEventBroker * SOAP_FMAC2 soap_instantiate__tev__DeleteEventBroker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2263 */
#ifndef SOAP_TYPE__tev__DeleteEventBrokerResponse
#define SOAP_TYPE__tev__DeleteEventBrokerResponse (1082)
/* complex XML schema type 'tev:DeleteEventBrokerResponse': */
class SOAP_CMAC _tev__DeleteEventBrokerResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__DeleteEventBrokerResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__DeleteEventBrokerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__DeleteEventBrokerResponse, default initialized and not managed by a soap context
        virtual _tev__DeleteEventBrokerResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__DeleteEventBrokerResponse); }
      public:
        /// Constructor with default initializations
        _tev__DeleteEventBrokerResponse() : soap() { }
        virtual ~_tev__DeleteEventBrokerResponse() { }
        /// Friend allocator used by soap_new__tev__DeleteEventBrokerResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__DeleteEventBrokerResponse * SOAP_FMAC2 soap_instantiate__tev__DeleteEventBrokerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2265 */
#ifndef SOAP_TYPE__tev__GetEventBrokers
#define SOAP_TYPE__tev__GetEventBrokers (1083)
/* complex XML schema type 'tev:GetEventBrokers': */
class SOAP_CMAC _tev__GetEventBrokers {
      public:
        /// Optional element 'tev:Address' of XML schema type 'xsd:anyURI'
        char *Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventBrokers
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventBrokers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventBrokers, default initialized and not managed by a soap context
        virtual _tev__GetEventBrokers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventBrokers); }
      public:
        /// Constructor with default initializations
        _tev__GetEventBrokers() : Address(), soap() { }
        virtual ~_tev__GetEventBrokers() { }
        /// Friend allocator used by soap_new__tev__GetEventBrokers(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventBrokers * SOAP_FMAC2 soap_instantiate__tev__GetEventBrokers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2267 */
#ifndef SOAP_TYPE__tev__GetEventBrokersResponse
#define SOAP_TYPE__tev__GetEventBrokersResponse (1084)
/* complex XML schema type 'tev:GetEventBrokersResponse': */
class SOAP_CMAC _tev__GetEventBrokersResponse {
      public:
        /// Sequence of elements 'tev:EventBroker' of XML schema type 'tev:EventBrokerConfig' stored in dynamic array EventBroker of length __sizeEventBroker
        int __sizeEventBroker;
        tev__EventBrokerConfig **EventBroker;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tev__GetEventBrokersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tev__GetEventBrokersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tev__GetEventBrokersResponse, default initialized and not managed by a soap context
        virtual _tev__GetEventBrokersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tev__GetEventBrokersResponse); }
      public:
        /// Constructor with default initializations
        _tev__GetEventBrokersResponse() : __sizeEventBroker(), EventBroker(), soap() { }
        virtual ~_tev__GetEventBrokersResponse() { }
        /// Friend allocator used by soap_new__tev__GetEventBrokersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tev__GetEventBrokersResponse * SOAP_FMAC2 soap_instantiate__tev__GetEventBrokersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2273 */
#ifndef SOAP_TYPE_timg__Capabilities
#define SOAP_TYPE_timg__Capabilities (1087)
/* simple XML schema type 'timg:Capabilities': */
class SOAP_CMAC timg__Capabilities : public xsd__anyType {
      public:
        /// Optional attribute 'ImageStabilization' of XML schema type 'xsd:boolean'
        bool *ImageStabilization;
        /// Optional attribute 'Presets' of XML schema type 'xsd:boolean'
        bool *Presets;
        /// Optional attribute 'AdaptablePreset' of XML schema type 'xsd:boolean'
        bool *AdaptablePreset;
      public:
        /// Return unique type id SOAP_TYPE_timg__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_timg__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type timg__Capabilities, default initialized and not managed by a soap context
        virtual timg__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(timg__Capabilities); }
      public:
        /// Constructor with default initializations
        timg__Capabilities() : ImageStabilization(), Presets(), AdaptablePreset() { }
        virtual ~timg__Capabilities() { }
        /// Friend allocator used by soap_new_timg__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 timg__Capabilities * SOAP_FMAC2 soap_instantiate_timg__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2275 */
#ifndef SOAP_TYPE_timg__ImagingPreset
#define SOAP_TYPE_timg__ImagingPreset (1088)
/* complex XML schema type 'timg:ImagingPreset': */
class SOAP_CMAC timg__ImagingPreset : public xsd__anyType {
      public:
        /// Required element 'timg:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
        /// Required attribute 'type' of XML schema type 'xsd:string'
        char *type;
      public:
        /// Return unique type id SOAP_TYPE_timg__ImagingPreset
        virtual long soap_type(void) const { return SOAP_TYPE_timg__ImagingPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type timg__ImagingPreset, default initialized and not managed by a soap context
        virtual timg__ImagingPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(timg__ImagingPreset); }
      public:
        /// Constructor with default initializations
        timg__ImagingPreset() : Name(), token(), type() { }
        virtual ~timg__ImagingPreset() { }
        /// Friend allocator used by soap_new_timg__ImagingPreset(struct soap*, int)
        friend SOAP_FMAC1 timg__ImagingPreset * SOAP_FMAC2 soap_instantiate_timg__ImagingPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2277 */
#ifndef SOAP_TYPE__timg__GetServiceCapabilities
#define SOAP_TYPE__timg__GetServiceCapabilities (1089)
/* complex XML schema type 'timg:GetServiceCapabilities': */
class SOAP_CMAC _timg__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _timg__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _timg__GetServiceCapabilities() : soap() { }
        virtual ~_timg__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__timg__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__timg__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2279 */
#ifndef SOAP_TYPE__timg__GetServiceCapabilitiesResponse
#define SOAP_TYPE__timg__GetServiceCapabilitiesResponse (1090)
/* complex XML schema type 'timg:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _timg__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'timg:Capabilities' of XML schema type 'timg:Capabilities'
        timg__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _timg__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_timg__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__timg__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__timg__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2281 */
#ifndef SOAP_TYPE__timg__GetImagingSettings
#define SOAP_TYPE__timg__GetImagingSettings (1091)
/* complex XML schema type 'timg:GetImagingSettings': */
class SOAP_CMAC _timg__GetImagingSettings {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetImagingSettings
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetImagingSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetImagingSettings, default initialized and not managed by a soap context
        virtual _timg__GetImagingSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetImagingSettings); }
      public:
        /// Constructor with default initializations
        _timg__GetImagingSettings() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetImagingSettings() { }
        /// Friend allocator used by soap_new__timg__GetImagingSettings(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetImagingSettings * SOAP_FMAC2 soap_instantiate__timg__GetImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2283 */
#ifndef SOAP_TYPE__timg__GetImagingSettingsResponse
#define SOAP_TYPE__timg__GetImagingSettingsResponse (1092)
/* complex XML schema type 'timg:GetImagingSettingsResponse': */
class SOAP_CMAC _timg__GetImagingSettingsResponse {
      public:
        /// Required element 'timg:ImagingSettings' of XML schema type 'tt:ImagingSettings20'
        tt__ImagingSettings20 *ImagingSettings;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetImagingSettingsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetImagingSettingsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetImagingSettingsResponse, default initialized and not managed by a soap context
        virtual _timg__GetImagingSettingsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetImagingSettingsResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetImagingSettingsResponse() : ImagingSettings(), soap() { }
        virtual ~_timg__GetImagingSettingsResponse() { }
        /// Friend allocator used by soap_new__timg__GetImagingSettingsResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetImagingSettingsResponse * SOAP_FMAC2 soap_instantiate__timg__GetImagingSettingsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2285 */
#ifndef SOAP_TYPE__timg__SetImagingSettings
#define SOAP_TYPE__timg__SetImagingSettings (1093)
/* complex XML schema type 'timg:SetImagingSettings': */
class SOAP_CMAC _timg__SetImagingSettings {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Required element 'timg:ImagingSettings' of XML schema type 'tt:ImagingSettings20'
        tt__ImagingSettings20 *ImagingSettings;
        /// Optional element 'timg:ForcePersistence' of XML schema type 'xsd:boolean'
        bool *ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__SetImagingSettings
        virtual long soap_type(void) const { return SOAP_TYPE__timg__SetImagingSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__SetImagingSettings, default initialized and not managed by a soap context
        virtual _timg__SetImagingSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__SetImagingSettings); }
      public:
        /// Constructor with default initializations
        _timg__SetImagingSettings() : VideoSourceToken(), ImagingSettings(), ForcePersistence(), soap() { }
        virtual ~_timg__SetImagingSettings() { }
        /// Friend allocator used by soap_new__timg__SetImagingSettings(struct soap*, int)
        friend SOAP_FMAC1 _timg__SetImagingSettings * SOAP_FMAC2 soap_instantiate__timg__SetImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2287 */
#ifndef SOAP_TYPE__timg__SetImagingSettingsResponse
#define SOAP_TYPE__timg__SetImagingSettingsResponse (1094)
/* complex XML schema type 'timg:SetImagingSettingsResponse': */
class SOAP_CMAC _timg__SetImagingSettingsResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__SetImagingSettingsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__SetImagingSettingsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__SetImagingSettingsResponse, default initialized and not managed by a soap context
        virtual _timg__SetImagingSettingsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__SetImagingSettingsResponse); }
      public:
        /// Constructor with default initializations
        _timg__SetImagingSettingsResponse() : soap() { }
        virtual ~_timg__SetImagingSettingsResponse() { }
        /// Friend allocator used by soap_new__timg__SetImagingSettingsResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__SetImagingSettingsResponse * SOAP_FMAC2 soap_instantiate__timg__SetImagingSettingsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2289 */
#ifndef SOAP_TYPE__timg__GetOptions
#define SOAP_TYPE__timg__GetOptions (1095)
/* complex XML schema type 'timg:GetOptions': */
class SOAP_CMAC _timg__GetOptions {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetOptions
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetOptions, default initialized and not managed by a soap context
        virtual _timg__GetOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetOptions); }
      public:
        /// Constructor with default initializations
        _timg__GetOptions() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetOptions() { }
        /// Friend allocator used by soap_new__timg__GetOptions(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetOptions * SOAP_FMAC2 soap_instantiate__timg__GetOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2291 */
#ifndef SOAP_TYPE__timg__GetOptionsResponse
#define SOAP_TYPE__timg__GetOptionsResponse (1096)
/* complex XML schema type 'timg:GetOptionsResponse': */
class SOAP_CMAC _timg__GetOptionsResponse {
      public:
        /// Required element 'timg:ImagingOptions' of XML schema type 'tt:ImagingOptions20'
        tt__ImagingOptions20 *ImagingOptions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetOptionsResponse, default initialized and not managed by a soap context
        virtual _timg__GetOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetOptionsResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetOptionsResponse() : ImagingOptions(), soap() { }
        virtual ~_timg__GetOptionsResponse() { }
        /// Friend allocator used by soap_new__timg__GetOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetOptionsResponse * SOAP_FMAC2 soap_instantiate__timg__GetOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2293 */
#ifndef SOAP_TYPE__timg__Move
#define SOAP_TYPE__timg__Move (1097)
/* complex XML schema type 'timg:Move': */
class SOAP_CMAC _timg__Move {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Required element 'timg:Focus' of XML schema type 'tt:FocusMove'
        tt__FocusMove *Focus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__Move
        virtual long soap_type(void) const { return SOAP_TYPE__timg__Move; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__Move, default initialized and not managed by a soap context
        virtual _timg__Move *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__Move); }
      public:
        /// Constructor with default initializations
        _timg__Move() : VideoSourceToken(), Focus(), soap() { }
        virtual ~_timg__Move() { }
        /// Friend allocator used by soap_new__timg__Move(struct soap*, int)
        friend SOAP_FMAC1 _timg__Move * SOAP_FMAC2 soap_instantiate__timg__Move(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2295 */
#ifndef SOAP_TYPE__timg__MoveResponse
#define SOAP_TYPE__timg__MoveResponse (1098)
/* complex XML schema type 'timg:MoveResponse': */
class SOAP_CMAC _timg__MoveResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__MoveResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__MoveResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__MoveResponse, default initialized and not managed by a soap context
        virtual _timg__MoveResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__MoveResponse); }
      public:
        /// Constructor with default initializations
        _timg__MoveResponse() : soap() { }
        virtual ~_timg__MoveResponse() { }
        /// Friend allocator used by soap_new__timg__MoveResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__MoveResponse * SOAP_FMAC2 soap_instantiate__timg__MoveResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2297 */
#ifndef SOAP_TYPE__timg__GetMoveOptions
#define SOAP_TYPE__timg__GetMoveOptions (1099)
/* complex XML schema type 'timg:GetMoveOptions': */
class SOAP_CMAC _timg__GetMoveOptions {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetMoveOptions
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetMoveOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetMoveOptions, default initialized and not managed by a soap context
        virtual _timg__GetMoveOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetMoveOptions); }
      public:
        /// Constructor with default initializations
        _timg__GetMoveOptions() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetMoveOptions() { }
        /// Friend allocator used by soap_new__timg__GetMoveOptions(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetMoveOptions * SOAP_FMAC2 soap_instantiate__timg__GetMoveOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2299 */
#ifndef SOAP_TYPE__timg__GetMoveOptionsResponse
#define SOAP_TYPE__timg__GetMoveOptionsResponse (1100)
/* complex XML schema type 'timg:GetMoveOptionsResponse': */
class SOAP_CMAC _timg__GetMoveOptionsResponse {
      public:
        /// Required element 'timg:MoveOptions' of XML schema type 'tt:MoveOptions20'
        tt__MoveOptions20 *MoveOptions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetMoveOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetMoveOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetMoveOptionsResponse, default initialized and not managed by a soap context
        virtual _timg__GetMoveOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetMoveOptionsResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetMoveOptionsResponse() : MoveOptions(), soap() { }
        virtual ~_timg__GetMoveOptionsResponse() { }
        /// Friend allocator used by soap_new__timg__GetMoveOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetMoveOptionsResponse * SOAP_FMAC2 soap_instantiate__timg__GetMoveOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2301 */
#ifndef SOAP_TYPE__timg__Stop
#define SOAP_TYPE__timg__Stop (1101)
/* complex XML schema type 'timg:Stop': */
class SOAP_CMAC _timg__Stop {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__Stop
        virtual long soap_type(void) const { return SOAP_TYPE__timg__Stop; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__Stop, default initialized and not managed by a soap context
        virtual _timg__Stop *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__Stop); }
      public:
        /// Constructor with default initializations
        _timg__Stop() : VideoSourceToken(), soap() { }
        virtual ~_timg__Stop() { }
        /// Friend allocator used by soap_new__timg__Stop(struct soap*, int)
        friend SOAP_FMAC1 _timg__Stop * SOAP_FMAC2 soap_instantiate__timg__Stop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2303 */
#ifndef SOAP_TYPE__timg__StopResponse
#define SOAP_TYPE__timg__StopResponse (1102)
/* complex XML schema type 'timg:StopResponse': */
class SOAP_CMAC _timg__StopResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__StopResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__StopResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__StopResponse, default initialized and not managed by a soap context
        virtual _timg__StopResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__StopResponse); }
      public:
        /// Constructor with default initializations
        _timg__StopResponse() : soap() { }
        virtual ~_timg__StopResponse() { }
        /// Friend allocator used by soap_new__timg__StopResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__StopResponse * SOAP_FMAC2 soap_instantiate__timg__StopResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2305 */
#ifndef SOAP_TYPE__timg__GetStatus
#define SOAP_TYPE__timg__GetStatus (1103)
/* complex XML schema type 'timg:GetStatus': */
class SOAP_CMAC _timg__GetStatus {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetStatus
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetStatus, default initialized and not managed by a soap context
        virtual _timg__GetStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetStatus); }
      public:
        /// Constructor with default initializations
        _timg__GetStatus() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetStatus() { }
        /// Friend allocator used by soap_new__timg__GetStatus(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetStatus * SOAP_FMAC2 soap_instantiate__timg__GetStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2307 */
#ifndef SOAP_TYPE__timg__GetStatusResponse
#define SOAP_TYPE__timg__GetStatusResponse (1104)
/* complex XML schema type 'timg:GetStatusResponse': */
class SOAP_CMAC _timg__GetStatusResponse {
      public:
        /// Required element 'timg:Status' of XML schema type 'tt:ImagingStatus20'
        tt__ImagingStatus20 *Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetStatusResponse, default initialized and not managed by a soap context
        virtual _timg__GetStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetStatusResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetStatusResponse() : Status(), soap() { }
        virtual ~_timg__GetStatusResponse() { }
        /// Friend allocator used by soap_new__timg__GetStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetStatusResponse * SOAP_FMAC2 soap_instantiate__timg__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2309 */
#ifndef SOAP_TYPE__timg__GetPresets
#define SOAP_TYPE__timg__GetPresets (1105)
/* complex XML schema type 'timg:GetPresets': */
class SOAP_CMAC _timg__GetPresets {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetPresets
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetPresets; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetPresets, default initialized and not managed by a soap context
        virtual _timg__GetPresets *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetPresets); }
      public:
        /// Constructor with default initializations
        _timg__GetPresets() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetPresets() { }
        /// Friend allocator used by soap_new__timg__GetPresets(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetPresets * SOAP_FMAC2 soap_instantiate__timg__GetPresets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2311 */
#ifndef SOAP_TYPE__timg__GetPresetsResponse
#define SOAP_TYPE__timg__GetPresetsResponse (1106)
/* complex XML schema type 'timg:GetPresetsResponse': */
class SOAP_CMAC _timg__GetPresetsResponse {
      public:
        /// Sequence of at least 1 elements 'timg:Preset' of XML schema type 'timg:ImagingPreset' stored in dynamic array Preset of length __sizePreset
        int __sizePreset;
        timg__ImagingPreset **Preset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetPresetsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetPresetsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetPresetsResponse, default initialized and not managed by a soap context
        virtual _timg__GetPresetsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetPresetsResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetPresetsResponse() : __sizePreset(), Preset(), soap() { }
        virtual ~_timg__GetPresetsResponse() { }
        /// Friend allocator used by soap_new__timg__GetPresetsResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__timg__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2313 */
#ifndef SOAP_TYPE__timg__GetCurrentPreset
#define SOAP_TYPE__timg__GetCurrentPreset (1107)
/* complex XML schema type 'timg:GetCurrentPreset': */
class SOAP_CMAC _timg__GetCurrentPreset {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetCurrentPreset
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetCurrentPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetCurrentPreset, default initialized and not managed by a soap context
        virtual _timg__GetCurrentPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetCurrentPreset); }
      public:
        /// Constructor with default initializations
        _timg__GetCurrentPreset() : VideoSourceToken(), soap() { }
        virtual ~_timg__GetCurrentPreset() { }
        /// Friend allocator used by soap_new__timg__GetCurrentPreset(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetCurrentPreset * SOAP_FMAC2 soap_instantiate__timg__GetCurrentPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2315 */
#ifndef SOAP_TYPE__timg__GetCurrentPresetResponse
#define SOAP_TYPE__timg__GetCurrentPresetResponse (1108)
/* complex XML schema type 'timg:GetCurrentPresetResponse': */
class SOAP_CMAC _timg__GetCurrentPresetResponse {
      public:
        /// Optional element 'timg:Preset' of XML schema type 'timg:ImagingPreset'
        timg__ImagingPreset *Preset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__GetCurrentPresetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__GetCurrentPresetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__GetCurrentPresetResponse, default initialized and not managed by a soap context
        virtual _timg__GetCurrentPresetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__GetCurrentPresetResponse); }
      public:
        /// Constructor with default initializations
        _timg__GetCurrentPresetResponse() : Preset(), soap() { }
        virtual ~_timg__GetCurrentPresetResponse() { }
        /// Friend allocator used by soap_new__timg__GetCurrentPresetResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__GetCurrentPresetResponse * SOAP_FMAC2 soap_instantiate__timg__GetCurrentPresetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2317 */
#ifndef SOAP_TYPE__timg__SetCurrentPreset
#define SOAP_TYPE__timg__SetCurrentPreset (1109)
/* complex XML schema type 'timg:SetCurrentPreset': */
class SOAP_CMAC _timg__SetCurrentPreset {
      public:
        /// Required element 'timg:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Required element 'timg:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__SetCurrentPreset
        virtual long soap_type(void) const { return SOAP_TYPE__timg__SetCurrentPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__SetCurrentPreset, default initialized and not managed by a soap context
        virtual _timg__SetCurrentPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__SetCurrentPreset); }
      public:
        /// Constructor with default initializations
        _timg__SetCurrentPreset() : VideoSourceToken(), PresetToken(), soap() { }
        virtual ~_timg__SetCurrentPreset() { }
        /// Friend allocator used by soap_new__timg__SetCurrentPreset(struct soap*, int)
        friend SOAP_FMAC1 _timg__SetCurrentPreset * SOAP_FMAC2 soap_instantiate__timg__SetCurrentPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2319 */
#ifndef SOAP_TYPE__timg__SetCurrentPresetResponse
#define SOAP_TYPE__timg__SetCurrentPresetResponse (1110)
/* complex XML schema type 'timg:SetCurrentPresetResponse': */
class SOAP_CMAC _timg__SetCurrentPresetResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__timg__SetCurrentPresetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__timg__SetCurrentPresetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _timg__SetCurrentPresetResponse, default initialized and not managed by a soap context
        virtual _timg__SetCurrentPresetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_timg__SetCurrentPresetResponse); }
      public:
        /// Constructor with default initializations
        _timg__SetCurrentPresetResponse() : soap() { }
        virtual ~_timg__SetCurrentPresetResponse() { }
        /// Friend allocator used by soap_new__timg__SetCurrentPresetResponse(struct soap*, int)
        friend SOAP_FMAC1 _timg__SetCurrentPresetResponse * SOAP_FMAC2 soap_instantiate__timg__SetCurrentPresetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2321 */
#ifndef SOAP_TYPE_tr2__Capabilities2
#define SOAP_TYPE_tr2__Capabilities2 (1111)
/* complex XML schema type 'tr2:Capabilities2': */
class SOAP_CMAC tr2__Capabilities2 : public xsd__anyType {
      public:
        /// Required element 'tr2:ProfileCapabilities' of XML schema type 'tr2:ProfileCapabilities'
        tr2__ProfileCapabilities *ProfileCapabilities;
        /// Required element 'tr2:StreamingCapabilities' of XML schema type 'tr2:StreamingCapabilities'
        tr2__StreamingCapabilities *StreamingCapabilities;
        /// Optional attribute 'SnapshotUri' of XML schema type 'xsd:boolean'
        bool *SnapshotUri;
        /// Optional attribute 'Rotation' of XML schema type 'xsd:boolean'
        bool *Rotation;
        /// Optional attribute 'VideoSourceMode' of XML schema type 'xsd:boolean'
        bool *VideoSourceMode;
        /// Optional attribute 'OSD' of XML schema type 'xsd:boolean'
        bool *OSD;
        /// Optional attribute 'TemporaryOSDText' of XML schema type 'xsd:boolean'
        bool *TemporaryOSDText;
        /// Optional attribute 'Mask' of XML schema type 'xsd:boolean'
        bool *Mask;
        /// Optional attribute 'SourceMask' of XML schema type 'xsd:boolean'
        bool *SourceMask;
      public:
        /// Return unique type id SOAP_TYPE_tr2__Capabilities2
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__Capabilities2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__Capabilities2, default initialized and not managed by a soap context
        virtual tr2__Capabilities2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__Capabilities2); }
      public:
        /// Constructor with default initializations
        tr2__Capabilities2() : ProfileCapabilities(), StreamingCapabilities(), SnapshotUri(), Rotation(), VideoSourceMode(), OSD(), TemporaryOSDText(), Mask(), SourceMask() { }
        virtual ~tr2__Capabilities2() { }
        /// Friend allocator used by soap_new_tr2__Capabilities2(struct soap*, int)
        friend SOAP_FMAC1 tr2__Capabilities2 * SOAP_FMAC2 soap_instantiate_tr2__Capabilities2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2323 */
#ifndef SOAP_TYPE_tr2__ProfileCapabilities
#define SOAP_TYPE_tr2__ProfileCapabilities (1112)
/* simple XML schema type 'tr2:ProfileCapabilities': */
class SOAP_CMAC tr2__ProfileCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'MaximumNumberOfProfiles' of XML schema type 'xsd:int'
        int *MaximumNumberOfProfiles;
        /// Optional attribute 'ConfigurationsSupported' of XML schema type 'tt:StringAttrList'
        char *ConfigurationsSupported;
      public:
        /// Return unique type id SOAP_TYPE_tr2__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__ProfileCapabilities, default initialized and not managed by a soap context
        virtual tr2__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__ProfileCapabilities); }
      public:
        /// Constructor with default initializations
        tr2__ProfileCapabilities() : MaximumNumberOfProfiles(), ConfigurationsSupported() { }
        virtual ~tr2__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_tr2__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tr2__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tr2__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2325 */
#ifndef SOAP_TYPE_tr2__StreamingCapabilities
#define SOAP_TYPE_tr2__StreamingCapabilities (1113)
/* simple XML schema type 'tr2:StreamingCapabilities': */
class SOAP_CMAC tr2__StreamingCapabilities : public xsd__anyType {
      public:
        /// Optional attribute 'RTSPStreaming' of XML schema type 'xsd:boolean'
        bool *RTSPStreaming;
        /// Optional attribute 'RTPMulticast' of XML schema type 'xsd:boolean'
        bool *RTPMulticast;
        /// Optional attribute 'RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// Optional attribute 'NonAggregateControl' of XML schema type 'xsd:boolean'
        bool *NonAggregateControl;
        /// Optional attribute 'RTSPWebSocketUri' of XML schema type 'xsd:anyURI'
        char *RTSPWebSocketUri;
        /// Optional attribute 'AutoStartMulticast' of XML schema type 'xsd:boolean'
        bool *AutoStartMulticast;
      public:
        /// Return unique type id SOAP_TYPE_tr2__StreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__StreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__StreamingCapabilities, default initialized and not managed by a soap context
        virtual tr2__StreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__StreamingCapabilities); }
      public:
        /// Constructor with default initializations
        tr2__StreamingCapabilities() : RTSPStreaming(), RTPMulticast(), RTP_USCORERTSP_USCORETCP(), NonAggregateControl(), RTSPWebSocketUri(), AutoStartMulticast() { }
        virtual ~tr2__StreamingCapabilities() { }
        /// Friend allocator used by soap_new_tr2__StreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tr2__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_tr2__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2327 */
#ifndef SOAP_TYPE_tr2__ConfigurationRef
#define SOAP_TYPE_tr2__ConfigurationRef (1114)
/* complex XML schema type 'tr2:ConfigurationRef': */
class SOAP_CMAC tr2__ConfigurationRef : public xsd__anyType {
      public:
        /// Required element 'tr2:Type' of XML schema type 'xsd:string'
        char *Type;
        /// Optional element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
      public:
        /// Return unique type id SOAP_TYPE_tr2__ConfigurationRef
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__ConfigurationRef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__ConfigurationRef, default initialized and not managed by a soap context
        virtual tr2__ConfigurationRef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__ConfigurationRef); }
      public:
        /// Constructor with default initializations
        tr2__ConfigurationRef() : Type(), Token() { }
        virtual ~tr2__ConfigurationRef() { }
        /// Friend allocator used by soap_new_tr2__ConfigurationRef(struct soap*, int)
        friend SOAP_FMAC1 tr2__ConfigurationRef * SOAP_FMAC2 soap_instantiate_tr2__ConfigurationRef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2331 */
#ifndef SOAP_TYPE_tr2__ConfigurationSet
#define SOAP_TYPE_tr2__ConfigurationSet (1116)
/* complex XML schema type 'tr2:ConfigurationSet': */
class SOAP_CMAC tr2__ConfigurationSet : public xsd__anyType {
      public:
        /// Optional element 'tr2:VideoSource' of XML schema type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *VideoSource;
        /// Optional element 'tr2:AudioSource' of XML schema type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *AudioSource;
        /// Optional element 'tr2:VideoEncoder' of XML schema type 'tt:VideoEncoder2Configuration'
        tt__VideoEncoder2Configuration *VideoEncoder;
        /// Optional element 'tr2:AudioEncoder' of XML schema type 'tt:AudioEncoder2Configuration'
        tt__AudioEncoder2Configuration *AudioEncoder;
        /// Optional element 'tr2:Analytics' of XML schema type 'tt:VideoAnalyticsConfiguration'
        tt__VideoAnalyticsConfiguration *Analytics;
        /// Optional element 'tr2:PTZ' of XML schema type 'tt:PTZConfiguration'
        tt__PTZConfiguration *PTZ;
        /// Optional element 'tr2:Metadata' of XML schema type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Metadata;
        /// Optional element 'tr2:AudioOutput' of XML schema type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *AudioOutput;
        /// Optional element 'tr2:AudioDecoder' of XML schema type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *AudioDecoder;
        /// Optional element 'tr2:Receiver' of XML schema type 'tr2:ReceiverConfiguration'
        tr2__ReceiverConfiguration *Receiver;
      public:
        /// Return unique type id SOAP_TYPE_tr2__ConfigurationSet
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__ConfigurationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__ConfigurationSet, default initialized and not managed by a soap context
        virtual tr2__ConfigurationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__ConfigurationSet); }
      public:
        /// Constructor with default initializations
        tr2__ConfigurationSet() : VideoSource(), AudioSource(), VideoEncoder(), AudioEncoder(), Analytics(), PTZ(), Metadata(), AudioOutput(), AudioDecoder(), Receiver() { }
        virtual ~tr2__ConfigurationSet() { }
        /// Friend allocator used by soap_new_tr2__ConfigurationSet(struct soap*, int)
        friend SOAP_FMAC1 tr2__ConfigurationSet * SOAP_FMAC2 soap_instantiate_tr2__ConfigurationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2333 */
#ifndef SOAP_TYPE_tr2__MediaProfile
#define SOAP_TYPE_tr2__MediaProfile (1117)
/* complex XML schema type 'tr2:MediaProfile': */
class SOAP_CMAC tr2__MediaProfile : public xsd__anyType {
      public:
        /// Required element 'tr2:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Optional element 'tr2:Configurations' of XML schema type 'tr2:ConfigurationSet'
        tr2__ConfigurationSet *Configurations;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
        /// Optional attribute 'fixed' of XML schema type 'xsd:boolean'
        bool *fixed;
      public:
        /// Return unique type id SOAP_TYPE_tr2__MediaProfile
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__MediaProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__MediaProfile, default initialized and not managed by a soap context
        virtual tr2__MediaProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__MediaProfile); }
      public:
        /// Constructor with default initializations
        tr2__MediaProfile() : Name(), Configurations(), token(), fixed() { }
        virtual ~tr2__MediaProfile() { }
        /// Friend allocator used by soap_new_tr2__MediaProfile(struct soap*, int)
        friend SOAP_FMAC1 tr2__MediaProfile * SOAP_FMAC2 soap_instantiate_tr2__MediaProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2335 */
#ifndef SOAP_TYPE_tr2__GetConfiguration
#define SOAP_TYPE_tr2__GetConfiguration (1118)
/* complex XML schema type 'tr2:GetConfiguration': */
class SOAP_CMAC tr2__GetConfiguration : public xsd__anyType {
      public:
        /// Optional element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Optional element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
      public:
        /// Return unique type id SOAP_TYPE_tr2__GetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__GetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__GetConfiguration, default initialized and not managed by a soap context
        virtual tr2__GetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__GetConfiguration); }
      public:
        /// Constructor with default initializations
        tr2__GetConfiguration() : ConfigurationToken(), ProfileToken() { }
        virtual ~tr2__GetConfiguration() { }
        /// Friend allocator used by soap_new_tr2__GetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tr2__GetConfiguration * SOAP_FMAC2 soap_instantiate_tr2__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2337 */
#ifndef SOAP_TYPE_tr2__SetConfigurationResponse
#define SOAP_TYPE_tr2__SetConfigurationResponse (1119)
/* simple XML schema type 'tr2:SetConfigurationResponse': */
class SOAP_CMAC tr2__SetConfigurationResponse : public xsd__anyType {
      public:
        /// Return unique type id SOAP_TYPE_tr2__SetConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__SetConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__SetConfigurationResponse, default initialized and not managed by a soap context
        virtual tr2__SetConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__SetConfigurationResponse); }
      public:
        /// Constructor with default initializations
        tr2__SetConfigurationResponse() { }
        virtual ~tr2__SetConfigurationResponse() { }
        /// Friend allocator used by soap_new_tr2__SetConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 tr2__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate_tr2__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2339 */
#ifndef SOAP_TYPE_tr2__EncoderInstance
#define SOAP_TYPE_tr2__EncoderInstance (1120)
/* complex XML schema type 'tr2:EncoderInstance': */
class SOAP_CMAC tr2__EncoderInstance : public xsd__anyType {
      public:
        /// Required element 'tr2:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tr2:Number' of XML schema type 'xsd:int'
        int Number;
      public:
        /// Return unique type id SOAP_TYPE_tr2__EncoderInstance
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__EncoderInstance; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__EncoderInstance, default initialized and not managed by a soap context
        virtual tr2__EncoderInstance *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__EncoderInstance); }
      public:
        /// Constructor with default initializations
        tr2__EncoderInstance() : Encoding(), Number() { }
        virtual ~tr2__EncoderInstance() { }
        /// Friend allocator used by soap_new_tr2__EncoderInstance(struct soap*, int)
        friend SOAP_FMAC1 tr2__EncoderInstance * SOAP_FMAC2 soap_instantiate_tr2__EncoderInstance(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2341 */
#ifndef SOAP_TYPE_tr2__EncoderInstanceInfo
#define SOAP_TYPE_tr2__EncoderInstanceInfo (1121)
/* complex XML schema type 'tr2:EncoderInstanceInfo': */
class SOAP_CMAC tr2__EncoderInstanceInfo : public xsd__anyType {
      public:
        /// Sequence of elements 'tr2:Codec' of XML schema type 'tr2:EncoderInstance' stored in dynamic array Codec of length __sizeCodec
        int __sizeCodec;
        tr2__EncoderInstance **Codec;
        /// Required element 'tr2:Total' of XML schema type 'xsd:int'
        int Total;
      public:
        /// Return unique type id SOAP_TYPE_tr2__EncoderInstanceInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__EncoderInstanceInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__EncoderInstanceInfo, default initialized and not managed by a soap context
        virtual tr2__EncoderInstanceInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__EncoderInstanceInfo); }
      public:
        /// Constructor with default initializations
        tr2__EncoderInstanceInfo() : __sizeCodec(), Codec(), Total() { }
        virtual ~tr2__EncoderInstanceInfo() { }
        /// Friend allocator used by soap_new_tr2__EncoderInstanceInfo(struct soap*, int)
        friend SOAP_FMAC1 tr2__EncoderInstanceInfo * SOAP_FMAC2 soap_instantiate_tr2__EncoderInstanceInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2343 */
#ifndef SOAP_TYPE_tr2__StartStopMulticastStreaming
#define SOAP_TYPE_tr2__StartStopMulticastStreaming (1122)
/* complex XML schema type 'tr2:StartStopMulticastStreaming': */
class SOAP_CMAC tr2__StartStopMulticastStreaming : public xsd__anyType {
      public:
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
      public:
        /// Return unique type id SOAP_TYPE_tr2__StartStopMulticastStreaming
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__StartStopMulticastStreaming; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__StartStopMulticastStreaming, default initialized and not managed by a soap context
        virtual tr2__StartStopMulticastStreaming *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__StartStopMulticastStreaming); }
      public:
        /// Constructor with default initializations
        tr2__StartStopMulticastStreaming() : ProfileToken() { }
        virtual ~tr2__StartStopMulticastStreaming() { }
        /// Friend allocator used by soap_new_tr2__StartStopMulticastStreaming(struct soap*, int)
        friend SOAP_FMAC1 tr2__StartStopMulticastStreaming * SOAP_FMAC2 soap_instantiate_tr2__StartStopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2345 */
#ifndef SOAP_TYPE_tr2__VideoSourceMode
#define SOAP_TYPE_tr2__VideoSourceMode (1123)
/* complex XML schema type 'tr2:VideoSourceMode': */
class SOAP_CMAC tr2__VideoSourceMode : public xsd__anyType {
      public:
        /// Required element 'tr2:MaxFramerate' of XML schema type 'xsd:float'
        float MaxFramerate;
        /// Required element 'tr2:MaxResolution' of XML schema type 'tt:VideoResolution'
        tt__VideoResolution *MaxResolution;
        /// Required element 'tr2:Encodings' of XML schema type 'tt:StringList'
        char *Encodings;
        /// Required element 'tr2:Reboot' of XML schema type 'xsd:boolean'
        bool Reboot;
        /// Optional element 'tr2:Description' of XML schema type 'tt:Description'
        char *Description;
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
        /// Optional attribute 'Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
      public:
        /// Return unique type id SOAP_TYPE_tr2__VideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__VideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__VideoSourceMode, default initialized and not managed by a soap context
        virtual tr2__VideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__VideoSourceMode); }
      public:
        /// Constructor with default initializations
        tr2__VideoSourceMode() : MaxFramerate(), MaxResolution(), Encodings(), Reboot(), Description(), token(), Enabled() { }
        virtual ~tr2__VideoSourceMode() { }
        /// Friend allocator used by soap_new_tr2__VideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 tr2__VideoSourceMode * SOAP_FMAC2 soap_instantiate_tr2__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2347 */
#ifndef SOAP_TYPE_tr2__Mask
#define SOAP_TYPE_tr2__Mask (1124)
/* complex XML schema type 'tr2:Mask': */
class SOAP_CMAC tr2__Mask : public xsd__anyType {
      public:
        /// Required element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Required element 'tr2:Polygon' of XML schema type 'tt:Polygon'
        tt__Polygon *Polygon;
        /// Required element 'tr2:Type' of XML schema type 'xsd:string'
        char *Type;
        /// Optional element 'tr2:Color' of XML schema type 'tt:Color'
        tt__Color *Color;
        /// Required element 'tr2:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tr2__Mask
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__Mask; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__Mask, default initialized and not managed by a soap context
        virtual tr2__Mask *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__Mask); }
      public:
        /// Constructor with default initializations
        tr2__Mask() : ConfigurationToken(), Polygon(), Type(), Color(), Enabled(), token() { }
        virtual ~tr2__Mask() { }
        /// Friend allocator used by soap_new_tr2__Mask(struct soap*, int)
        friend SOAP_FMAC1 tr2__Mask * SOAP_FMAC2 soap_instantiate_tr2__Mask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2349 */
#ifndef SOAP_TYPE_tr2__MaskOptions
#define SOAP_TYPE_tr2__MaskOptions (1125)
/* complex XML schema type 'tr2:MaskOptions': */
class SOAP_CMAC tr2__MaskOptions : public xsd__anyType {
      public:
        /// Required element 'tr2:MaxMasks' of XML schema type 'xsd:int'
        int MaxMasks;
        /// Required element 'tr2:MaxPoints' of XML schema type 'xsd:int'
        int MaxPoints;
        /// Sequence of at least 1 elements 'tr2:Types' of XML schema type 'xsd:string' stored in dynamic array Types of length __sizeTypes
        int __sizeTypes;
        char **Types;
        /// Required element 'tr2:Color' of XML schema type 'tt:ColorOptions'
        tt__ColorOptions *Color;
        /// Optional attribute 'RectangleOnly' of XML schema type 'xsd:boolean'
        bool *RectangleOnly;
        /// Optional attribute 'SingleColorOnly' of XML schema type 'xsd:boolean'
        bool *SingleColorOnly;
      public:
        /// Return unique type id SOAP_TYPE_tr2__MaskOptions
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__MaskOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__MaskOptions, default initialized and not managed by a soap context
        virtual tr2__MaskOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__MaskOptions); }
      public:
        /// Constructor with default initializations
        tr2__MaskOptions() : MaxMasks(), MaxPoints(), __sizeTypes(), Types(), Color(), RectangleOnly(), SingleColorOnly() { }
        virtual ~tr2__MaskOptions() { }
        /// Friend allocator used by soap_new_tr2__MaskOptions(struct soap*, int)
        friend SOAP_FMAC1 tr2__MaskOptions * SOAP_FMAC2 soap_instantiate_tr2__MaskOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2351 */
#ifndef SOAP_TYPE__tr2__GetServiceCapabilities
#define SOAP_TYPE__tr2__GetServiceCapabilities (1126)
/* complex XML schema type 'tr2:GetServiceCapabilities': */
class SOAP_CMAC _tr2__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tr2__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _tr2__GetServiceCapabilities() : soap() { }
        virtual ~_tr2__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tr2__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tr2__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2353 */
#ifndef SOAP_TYPE__tr2__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tr2__GetServiceCapabilitiesResponse (1127)
/* complex XML schema type 'tr2:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tr2__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tr2:Capabilities' of XML schema type 'tr2:Capabilities2'
        tr2__Capabilities2 *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tr2__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tr2__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tr2__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tr2__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2355 */
#ifndef SOAP_TYPE__tr2__CreateProfile
#define SOAP_TYPE__tr2__CreateProfile (1128)
/* complex XML schema type 'tr2:CreateProfile': */
class SOAP_CMAC _tr2__CreateProfile {
      public:
        /// Required element 'tr2:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Sequence of elements 'tr2:Configuration' of XML schema type 'tr2:ConfigurationRef' stored in dynamic array Configuration of length __sizeConfiguration
        int __sizeConfiguration;
        tr2__ConfigurationRef **Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateProfile
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateProfile, default initialized and not managed by a soap context
        virtual _tr2__CreateProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateProfile); }
      public:
        /// Constructor with default initializations
        _tr2__CreateProfile() : Name(), __sizeConfiguration(), Configuration(), soap() { }
        virtual ~_tr2__CreateProfile() { }
        /// Friend allocator used by soap_new__tr2__CreateProfile(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateProfile * SOAP_FMAC2 soap_instantiate__tr2__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2357 */
#ifndef SOAP_TYPE__tr2__CreateProfileResponse
#define SOAP_TYPE__tr2__CreateProfileResponse (1129)
/* complex XML schema type 'tr2:CreateProfileResponse': */
class SOAP_CMAC _tr2__CreateProfileResponse {
      public:
        /// Required element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateProfileResponse, default initialized and not managed by a soap context
        virtual _tr2__CreateProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateProfileResponse); }
      public:
        /// Constructor with default initializations
        _tr2__CreateProfileResponse() : Token(), soap() { }
        virtual ~_tr2__CreateProfileResponse() { }
        /// Friend allocator used by soap_new__tr2__CreateProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__tr2__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2359 */
#ifndef SOAP_TYPE__tr2__GetProfiles
#define SOAP_TYPE__tr2__GetProfiles (1130)
/* complex XML schema type 'tr2:GetProfiles': */
class SOAP_CMAC _tr2__GetProfiles {
      public:
        /// Optional element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Sequence of elements 'tr2:Type' of XML schema type 'xsd:string' stored in dynamic array Type of length __sizeType
        int __sizeType;
        char **Type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetProfiles
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetProfiles; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetProfiles, default initialized and not managed by a soap context
        virtual _tr2__GetProfiles *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetProfiles); }
      public:
        /// Constructor with default initializations
        _tr2__GetProfiles() : Token(), __sizeType(), Type(), soap() { }
        virtual ~_tr2__GetProfiles() { }
        /// Friend allocator used by soap_new__tr2__GetProfiles(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetProfiles * SOAP_FMAC2 soap_instantiate__tr2__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2361 */
#ifndef SOAP_TYPE__tr2__GetProfilesResponse
#define SOAP_TYPE__tr2__GetProfilesResponse (1131)
/* complex XML schema type 'tr2:GetProfilesResponse': */
class SOAP_CMAC _tr2__GetProfilesResponse {
      public:
        /// Sequence of elements 'tr2:Profiles' of XML schema type 'tr2:MediaProfile' stored in dynamic array Profiles of length __sizeProfiles
        int __sizeProfiles;
        tr2__MediaProfile **Profiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetProfilesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetProfilesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetProfilesResponse, default initialized and not managed by a soap context
        virtual _tr2__GetProfilesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetProfilesResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetProfilesResponse() : __sizeProfiles(), Profiles(), soap() { }
        virtual ~_tr2__GetProfilesResponse() { }
        /// Friend allocator used by soap_new__tr2__GetProfilesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__tr2__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2363 */
#ifndef SOAP_TYPE__tr2__AddConfiguration
#define SOAP_TYPE__tr2__AddConfiguration (1132)
/* complex XML schema type 'tr2:AddConfiguration': */
class SOAP_CMAC _tr2__AddConfiguration {
      public:
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tr2:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Sequence of elements 'tr2:Configuration' of XML schema type 'tr2:ConfigurationRef' stored in dynamic array Configuration of length __sizeConfiguration
        int __sizeConfiguration;
        tr2__ConfigurationRef **Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__AddConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__AddConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__AddConfiguration, default initialized and not managed by a soap context
        virtual _tr2__AddConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__AddConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__AddConfiguration() : ProfileToken(), Name(), __sizeConfiguration(), Configuration(), soap() { }
        virtual ~_tr2__AddConfiguration() { }
        /// Friend allocator used by soap_new__tr2__AddConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__AddConfiguration * SOAP_FMAC2 soap_instantiate__tr2__AddConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2365 */
#ifndef SOAP_TYPE__tr2__AddConfigurationResponse
#define SOAP_TYPE__tr2__AddConfigurationResponse (1133)
/* complex XML schema type 'tr2:AddConfigurationResponse': */
class SOAP_CMAC _tr2__AddConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__AddConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__AddConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__AddConfigurationResponse, default initialized and not managed by a soap context
        virtual _tr2__AddConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__AddConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tr2__AddConfigurationResponse() : soap() { }
        virtual ~_tr2__AddConfigurationResponse() { }
        /// Friend allocator used by soap_new__tr2__AddConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__AddConfigurationResponse * SOAP_FMAC2 soap_instantiate__tr2__AddConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2367 */
#ifndef SOAP_TYPE__tr2__RemoveConfiguration
#define SOAP_TYPE__tr2__RemoveConfiguration (1134)
/* complex XML schema type 'tr2:RemoveConfiguration': */
class SOAP_CMAC _tr2__RemoveConfiguration {
      public:
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Sequence of at least 1 elements 'tr2:Configuration' of XML schema type 'tr2:ConfigurationRef' stored in dynamic array Configuration of length __sizeConfiguration
        int __sizeConfiguration;
        tr2__ConfigurationRef **Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__RemoveConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__RemoveConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__RemoveConfiguration, default initialized and not managed by a soap context
        virtual _tr2__RemoveConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__RemoveConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__RemoveConfiguration() : ProfileToken(), __sizeConfiguration(), Configuration(), soap() { }
        virtual ~_tr2__RemoveConfiguration() { }
        /// Friend allocator used by soap_new__tr2__RemoveConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__RemoveConfiguration * SOAP_FMAC2 soap_instantiate__tr2__RemoveConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2369 */
#ifndef SOAP_TYPE__tr2__RemoveConfigurationResponse
#define SOAP_TYPE__tr2__RemoveConfigurationResponse (1135)
/* complex XML schema type 'tr2:RemoveConfigurationResponse': */
class SOAP_CMAC _tr2__RemoveConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__RemoveConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__RemoveConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__RemoveConfigurationResponse, default initialized and not managed by a soap context
        virtual _tr2__RemoveConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__RemoveConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tr2__RemoveConfigurationResponse() : soap() { }
        virtual ~_tr2__RemoveConfigurationResponse() { }
        /// Friend allocator used by soap_new__tr2__RemoveConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__RemoveConfigurationResponse * SOAP_FMAC2 soap_instantiate__tr2__RemoveConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2371 */
#ifndef SOAP_TYPE__tr2__DeleteProfile
#define SOAP_TYPE__tr2__DeleteProfile (1136)
/* complex XML schema type 'tr2:DeleteProfile': */
class SOAP_CMAC _tr2__DeleteProfile {
      public:
        /// Required element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__DeleteProfile
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__DeleteProfile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__DeleteProfile, default initialized and not managed by a soap context
        virtual _tr2__DeleteProfile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__DeleteProfile); }
      public:
        /// Constructor with default initializations
        _tr2__DeleteProfile() : Token(), soap() { }
        virtual ~_tr2__DeleteProfile() { }
        /// Friend allocator used by soap_new__tr2__DeleteProfile(struct soap*, int)
        friend SOAP_FMAC1 _tr2__DeleteProfile * SOAP_FMAC2 soap_instantiate__tr2__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2373 */
#ifndef SOAP_TYPE__tr2__DeleteProfileResponse
#define SOAP_TYPE__tr2__DeleteProfileResponse (1137)
/* complex XML schema type 'tr2:DeleteProfileResponse': */
class SOAP_CMAC _tr2__DeleteProfileResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__DeleteProfileResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__DeleteProfileResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__DeleteProfileResponse, default initialized and not managed by a soap context
        virtual _tr2__DeleteProfileResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__DeleteProfileResponse); }
      public:
        /// Constructor with default initializations
        _tr2__DeleteProfileResponse() : soap() { }
        virtual ~_tr2__DeleteProfileResponse() { }
        /// Friend allocator used by soap_new__tr2__DeleteProfileResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__tr2__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2375 */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse (1138)
/* complex XML schema type 'tr2:GetVideoEncoderConfigurationsResponse': */
class SOAP_CMAC _tr2__GetVideoEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:VideoEncoder2Configuration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoEncoder2Configuration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetVideoEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2377 */
#ifndef SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse (1139)
/* complex XML schema type 'tr2:GetVideoSourceConfigurationsResponse': */
class SOAP_CMAC _tr2__GetVideoSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:VideoSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetVideoSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2379 */
#ifndef SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse (1140)
/* complex XML schema type 'tr2:GetAudioEncoderConfigurationsResponse': */
class SOAP_CMAC _tr2__GetAudioEncoderConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:AudioEncoder2Configuration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioEncoder2Configuration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioEncoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioEncoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioEncoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioEncoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetAudioEncoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioEncoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2381 */
#ifndef SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse (1141)
/* complex XML schema type 'tr2:GetAudioSourceConfigurationsResponse': */
class SOAP_CMAC _tr2__GetAudioSourceConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:AudioSourceConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioSourceConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioSourceConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioSourceConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioSourceConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioSourceConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetAudioSourceConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioSourceConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2383 */
#ifndef SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse
#define SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse (1142)
/* complex XML schema type 'tr2:GetAnalyticsConfigurationsResponse': */
class SOAP_CMAC _tr2__GetAnalyticsConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:VideoAnalyticsConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__VideoAnalyticsConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAnalyticsConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAnalyticsConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAnalyticsConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAnalyticsConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetAnalyticsConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAnalyticsConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2385 */
#ifndef SOAP_TYPE__tr2__GetMetadataConfigurationsResponse
#define SOAP_TYPE__tr2__GetMetadataConfigurationsResponse (1143)
/* complex XML schema type 'tr2:GetMetadataConfigurationsResponse': */
class SOAP_CMAC _tr2__GetMetadataConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:MetadataConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__MetadataConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMetadataConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMetadataConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMetadataConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetMetadataConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMetadataConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetMetadataConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetMetadataConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetMetadataConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2387 */
#ifndef SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse (1144)
/* complex XML schema type 'tr2:GetAudioOutputConfigurationsResponse': */
class SOAP_CMAC _tr2__GetAudioOutputConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:AudioOutputConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioOutputConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioOutputConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioOutputConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioOutputConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioOutputConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetAudioOutputConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioOutputConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2389 */
#ifndef SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse (1145)
/* complex XML schema type 'tr2:GetAudioDecoderConfigurationsResponse': */
class SOAP_CMAC _tr2__GetAudioDecoderConfigurationsResponse {
      public:
        /// Sequence of elements 'tr2:Configurations' of XML schema type 'tt:AudioDecoderConfiguration' stored in dynamic array Configurations of length __sizeConfigurations
        int __sizeConfigurations;
        tt__AudioDecoderConfiguration **Configurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioDecoderConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioDecoderConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioDecoderConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioDecoderConfigurationsResponse() : __sizeConfigurations(), Configurations(), soap() { }
        virtual ~_tr2__GetAudioDecoderConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioDecoderConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2391 */
#ifndef SOAP_TYPE__tr2__SetVideoEncoderConfiguration
#define SOAP_TYPE__tr2__SetVideoEncoderConfiguration (1146)
/* complex XML schema type 'tr2:SetVideoEncoderConfiguration': */
class SOAP_CMAC _tr2__SetVideoEncoderConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:VideoEncoder2Configuration'
        tt__VideoEncoder2Configuration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetVideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetVideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetVideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetVideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetVideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetVideoEncoderConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetVideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetVideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2393 */
#ifndef SOAP_TYPE__tr2__SetVideoSourceConfiguration
#define SOAP_TYPE__tr2__SetVideoSourceConfiguration (1147)
/* complex XML schema type 'tr2:SetVideoSourceConfiguration': */
class SOAP_CMAC _tr2__SetVideoSourceConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:VideoSourceConfiguration'
        tt__VideoSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetVideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetVideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetVideoSourceConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetVideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetVideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetVideoSourceConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetVideoSourceConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetVideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2395 */
#ifndef SOAP_TYPE__tr2__SetAudioEncoderConfiguration
#define SOAP_TYPE__tr2__SetAudioEncoderConfiguration (1148)
/* complex XML schema type 'tr2:SetAudioEncoderConfiguration': */
class SOAP_CMAC _tr2__SetAudioEncoderConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:AudioEncoder2Configuration'
        tt__AudioEncoder2Configuration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetAudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetAudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetAudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetAudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetAudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetAudioEncoderConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetAudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetAudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2397 */
#ifndef SOAP_TYPE__tr2__SetAudioSourceConfiguration
#define SOAP_TYPE__tr2__SetAudioSourceConfiguration (1149)
/* complex XML schema type 'tr2:SetAudioSourceConfiguration': */
class SOAP_CMAC _tr2__SetAudioSourceConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:AudioSourceConfiguration'
        tt__AudioSourceConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetAudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetAudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetAudioSourceConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetAudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetAudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetAudioSourceConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetAudioSourceConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetAudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2399 */
#ifndef SOAP_TYPE__tr2__SetMetadataConfiguration
#define SOAP_TYPE__tr2__SetMetadataConfiguration (1150)
/* complex XML schema type 'tr2:SetMetadataConfiguration': */
class SOAP_CMAC _tr2__SetMetadataConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:MetadataConfiguration'
        tt__MetadataConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetMetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetMetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetMetadataConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetMetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetMetadataConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetMetadataConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetMetadataConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetMetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2401 */
#ifndef SOAP_TYPE__tr2__SetAudioOutputConfiguration
#define SOAP_TYPE__tr2__SetAudioOutputConfiguration (1151)
/* complex XML schema type 'tr2:SetAudioOutputConfiguration': */
class SOAP_CMAC _tr2__SetAudioOutputConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:AudioOutputConfiguration'
        tt__AudioOutputConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetAudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetAudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetAudioOutputConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetAudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetAudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetAudioOutputConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetAudioOutputConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetAudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2403 */
#ifndef SOAP_TYPE__tr2__SetAudioDecoderConfiguration
#define SOAP_TYPE__tr2__SetAudioDecoderConfiguration (1152)
/* complex XML schema type 'tr2:SetAudioDecoderConfiguration': */
class SOAP_CMAC _tr2__SetAudioDecoderConfiguration {
      public:
        /// Required element 'tr2:Configuration' of XML schema type 'tt:AudioDecoderConfiguration'
        tt__AudioDecoderConfiguration *Configuration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetAudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetAudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetAudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual _tr2__SetAudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetAudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        _tr2__SetAudioDecoderConfiguration() : Configuration(), soap() { }
        virtual ~_tr2__SetAudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new__tr2__SetAudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__tr2__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2405 */
#ifndef SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse (1153)
/* complex XML schema type 'tr2:GetVideoSourceConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetVideoSourceConfigurationOptionsResponse {
      public:
        /// Required element 'tr2:Options' of XML schema type 'tt:VideoSourceConfigurationOptions'
        tt__VideoSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_tr2__GetVideoSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2407 */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse (1154)
/* complex XML schema type 'tr2:GetVideoEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetVideoEncoderConfigurationOptionsResponse {
      public:
        /// Sequence of at least 1 elements 'tr2:Options' of XML schema type 'tt:VideoEncoder2ConfigurationOptions' stored in dynamic array Options of length __sizeOptions
        int __sizeOptions;
        tt__VideoEncoder2ConfigurationOptions **Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoEncoderConfigurationOptionsResponse() : __sizeOptions(), Options(), soap() { }
        virtual ~_tr2__GetVideoEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2409 */
#ifndef SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse (1155)
/* complex XML schema type 'tr2:GetAudioSourceConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetAudioSourceConfigurationOptionsResponse {
      public:
        /// Required element 'tr2:Options' of XML schema type 'tt:AudioSourceConfigurationOptions'
        tt__AudioSourceConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioSourceConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioSourceConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioSourceConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioSourceConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_tr2__GetAudioSourceConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioSourceConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2411 */
#ifndef SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse (1156)
/* complex XML schema type 'tr2:GetAudioEncoderConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetAudioEncoderConfigurationOptionsResponse {
      public:
        /// Sequence of at least 1 elements 'tr2:Options' of XML schema type 'tt:AudioEncoder2ConfigurationOptions' stored in dynamic array Options of length __sizeOptions
        int __sizeOptions;
        tt__AudioEncoder2ConfigurationOptions **Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioEncoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioEncoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioEncoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioEncoderConfigurationOptionsResponse() : __sizeOptions(), Options(), soap() { }
        virtual ~_tr2__GetAudioEncoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2413 */
#ifndef SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse (1157)
/* complex XML schema type 'tr2:GetMetadataConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetMetadataConfigurationOptionsResponse {
      public:
        /// Required element 'tr2:Options' of XML schema type 'tt:MetadataConfigurationOptions'
        tt__MetadataConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMetadataConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetMetadataConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMetadataConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetMetadataConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_tr2__GetMetadataConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetMetadataConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2415 */
#ifndef SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse (1158)
/* complex XML schema type 'tr2:GetAudioOutputConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetAudioOutputConfigurationOptionsResponse {
      public:
        /// Required element 'tr2:Options' of XML schema type 'tt:AudioOutputConfigurationOptions'
        tt__AudioOutputConfigurationOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioOutputConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioOutputConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioOutputConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioOutputConfigurationOptionsResponse() : Options(), soap() { }
        virtual ~_tr2__GetAudioOutputConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioOutputConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2417 */
#ifndef SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse (1159)
/* complex XML schema type 'tr2:GetAudioDecoderConfigurationOptionsResponse': */
class SOAP_CMAC _tr2__GetAudioDecoderConfigurationOptionsResponse {
      public:
        /// Sequence of at least 1 elements 'tr2:Options' of XML schema type 'tt:AudioEncoder2ConfigurationOptions' stored in dynamic array Options of length __sizeOptions
        int __sizeOptions;
        tt__AudioEncoder2ConfigurationOptions **Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetAudioDecoderConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetAudioDecoderConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetAudioDecoderConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetAudioDecoderConfigurationOptionsResponse() : __sizeOptions(), Options(), soap() { }
        virtual ~_tr2__GetAudioDecoderConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2419 */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderInstances
#define SOAP_TYPE__tr2__GetVideoEncoderInstances (1160)
/* complex XML schema type 'tr2:GetVideoEncoderInstances': */
class SOAP_CMAC _tr2__GetVideoEncoderInstances {
      public:
        /// Required element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoEncoderInstances
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoEncoderInstances; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoEncoderInstances, default initialized and not managed by a soap context
        virtual _tr2__GetVideoEncoderInstances *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoEncoderInstances); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoEncoderInstances() : ConfigurationToken(), soap() { }
        virtual ~_tr2__GetVideoEncoderInstances() { }
        /// Friend allocator used by soap_new__tr2__GetVideoEncoderInstances(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__tr2__GetVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2421 */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse
#define SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse (1161)
/* complex XML schema type 'tr2:GetVideoEncoderInstancesResponse': */
class SOAP_CMAC _tr2__GetVideoEncoderInstancesResponse {
      public:
        /// Required element 'tr2:Info' of XML schema type 'tr2:EncoderInstanceInfo'
        tr2__EncoderInstanceInfo *Info;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoEncoderInstancesResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoEncoderInstancesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoEncoderInstancesResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoEncoderInstancesResponse() : Info(), soap() { }
        virtual ~_tr2__GetVideoEncoderInstancesResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoEncoderInstancesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2423 */
#ifndef SOAP_TYPE__tr2__GetStreamUri
#define SOAP_TYPE__tr2__GetStreamUri (1162)
/* complex XML schema type 'tr2:GetStreamUri': */
class SOAP_CMAC _tr2__GetStreamUri {
      public:
        /// Required element 'tr2:Protocol' of XML schema type 'xsd:string'
        char *Protocol;
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetStreamUri
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetStreamUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetStreamUri, default initialized and not managed by a soap context
        virtual _tr2__GetStreamUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetStreamUri); }
      public:
        /// Constructor with default initializations
        _tr2__GetStreamUri() : Protocol(), ProfileToken(), soap() { }
        virtual ~_tr2__GetStreamUri() { }
        /// Friend allocator used by soap_new__tr2__GetStreamUri(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetStreamUri * SOAP_FMAC2 soap_instantiate__tr2__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2425 */
#ifndef SOAP_TYPE__tr2__GetStreamUriResponse
#define SOAP_TYPE__tr2__GetStreamUriResponse (1163)
/* complex XML schema type 'tr2:GetStreamUriResponse': */
class SOAP_CMAC _tr2__GetStreamUriResponse {
      public:
        /// Required element 'tr2:Uri' of XML schema type 'xsd:anyURI'
        char *Uri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetStreamUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetStreamUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetStreamUriResponse, default initialized and not managed by a soap context
        virtual _tr2__GetStreamUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetStreamUriResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetStreamUriResponse() : Uri(), soap() { }
        virtual ~_tr2__GetStreamUriResponse() { }
        /// Friend allocator used by soap_new__tr2__GetStreamUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__tr2__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2427 */
#ifndef SOAP_TYPE__tr2__SetSynchronizationPoint
#define SOAP_TYPE__tr2__SetSynchronizationPoint (1164)
/* complex XML schema type 'tr2:SetSynchronizationPoint': */
class SOAP_CMAC _tr2__SetSynchronizationPoint {
      public:
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetSynchronizationPoint
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetSynchronizationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetSynchronizationPoint, default initialized and not managed by a soap context
        virtual _tr2__SetSynchronizationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetSynchronizationPoint); }
      public:
        /// Constructor with default initializations
        _tr2__SetSynchronizationPoint() : ProfileToken(), soap() { }
        virtual ~_tr2__SetSynchronizationPoint() { }
        /// Friend allocator used by soap_new__tr2__SetSynchronizationPoint(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__tr2__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2429 */
#ifndef SOAP_TYPE__tr2__SetSynchronizationPointResponse
#define SOAP_TYPE__tr2__SetSynchronizationPointResponse (1165)
/* complex XML schema type 'tr2:SetSynchronizationPointResponse': */
class SOAP_CMAC _tr2__SetSynchronizationPointResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetSynchronizationPointResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetSynchronizationPointResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetSynchronizationPointResponse, default initialized and not managed by a soap context
        virtual _tr2__SetSynchronizationPointResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetSynchronizationPointResponse); }
      public:
        /// Constructor with default initializations
        _tr2__SetSynchronizationPointResponse() : soap() { }
        virtual ~_tr2__SetSynchronizationPointResponse() { }
        /// Friend allocator used by soap_new__tr2__SetSynchronizationPointResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__tr2__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2431 */
#ifndef SOAP_TYPE__tr2__GetSnapshotUri
#define SOAP_TYPE__tr2__GetSnapshotUri (1166)
/* complex XML schema type 'tr2:GetSnapshotUri': */
class SOAP_CMAC _tr2__GetSnapshotUri {
      public:
        /// Required element 'tr2:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetSnapshotUri
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetSnapshotUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetSnapshotUri, default initialized and not managed by a soap context
        virtual _tr2__GetSnapshotUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetSnapshotUri); }
      public:
        /// Constructor with default initializations
        _tr2__GetSnapshotUri() : ProfileToken(), soap() { }
        virtual ~_tr2__GetSnapshotUri() { }
        /// Friend allocator used by soap_new__tr2__GetSnapshotUri(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__tr2__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2433 */
#ifndef SOAP_TYPE__tr2__GetSnapshotUriResponse
#define SOAP_TYPE__tr2__GetSnapshotUriResponse (1167)
/* complex XML schema type 'tr2:GetSnapshotUriResponse': */
class SOAP_CMAC _tr2__GetSnapshotUriResponse {
      public:
        /// Required element 'tr2:Uri' of XML schema type 'xsd:anyURI'
        char *Uri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetSnapshotUriResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetSnapshotUriResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetSnapshotUriResponse, default initialized and not managed by a soap context
        virtual _tr2__GetSnapshotUriResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetSnapshotUriResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetSnapshotUriResponse() : Uri(), soap() { }
        virtual ~_tr2__GetSnapshotUriResponse() { }
        /// Friend allocator used by soap_new__tr2__GetSnapshotUriResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__tr2__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2435 */
#ifndef SOAP_TYPE__tr2__GetVideoSourceModes
#define SOAP_TYPE__tr2__GetVideoSourceModes (1168)
/* complex XML schema type 'tr2:GetVideoSourceModes': */
class SOAP_CMAC _tr2__GetVideoSourceModes {
      public:
        /// Required element 'tr2:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoSourceModes
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoSourceModes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoSourceModes, default initialized and not managed by a soap context
        virtual _tr2__GetVideoSourceModes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoSourceModes); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoSourceModes() : VideoSourceToken(), soap() { }
        virtual ~_tr2__GetVideoSourceModes() { }
        /// Friend allocator used by soap_new__tr2__GetVideoSourceModes(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__tr2__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2437 */
#ifndef SOAP_TYPE__tr2__GetVideoSourceModesResponse
#define SOAP_TYPE__tr2__GetVideoSourceModesResponse (1169)
/* complex XML schema type 'tr2:GetVideoSourceModesResponse': */
class SOAP_CMAC _tr2__GetVideoSourceModesResponse {
      public:
        /// Sequence of at least 1 elements 'tr2:VideoSourceModes' of XML schema type 'tr2:VideoSourceMode' stored in dynamic array VideoSourceModes of length __sizeVideoSourceModes
        int __sizeVideoSourceModes;
        tr2__VideoSourceMode **VideoSourceModes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetVideoSourceModesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetVideoSourceModesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetVideoSourceModesResponse, default initialized and not managed by a soap context
        virtual _tr2__GetVideoSourceModesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetVideoSourceModesResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetVideoSourceModesResponse() : __sizeVideoSourceModes(), VideoSourceModes(), soap() { }
        virtual ~_tr2__GetVideoSourceModesResponse() { }
        /// Friend allocator used by soap_new__tr2__GetVideoSourceModesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__tr2__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2439 */
#ifndef SOAP_TYPE__tr2__SetVideoSourceMode
#define SOAP_TYPE__tr2__SetVideoSourceMode (1170)
/* complex XML schema type 'tr2:SetVideoSourceMode': */
class SOAP_CMAC _tr2__SetVideoSourceMode {
      public:
        /// Required element 'tr2:VideoSourceToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceToken;
        /// Required element 'tr2:VideoSourceModeToken' of XML schema type 'tt:ReferenceToken'
        char *VideoSourceModeToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetVideoSourceMode
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetVideoSourceMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetVideoSourceMode, default initialized and not managed by a soap context
        virtual _tr2__SetVideoSourceMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetVideoSourceMode); }
      public:
        /// Constructor with default initializations
        _tr2__SetVideoSourceMode() : VideoSourceToken(), VideoSourceModeToken(), soap() { }
        virtual ~_tr2__SetVideoSourceMode() { }
        /// Friend allocator used by soap_new__tr2__SetVideoSourceMode(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__tr2__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2441 */
#ifndef SOAP_TYPE__tr2__SetVideoSourceModeResponse
#define SOAP_TYPE__tr2__SetVideoSourceModeResponse (1171)
/* complex XML schema type 'tr2:SetVideoSourceModeResponse': */
class SOAP_CMAC _tr2__SetVideoSourceModeResponse {
      public:
        /// Required element 'tr2:Reboot' of XML schema type 'xsd:boolean'
        bool Reboot;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetVideoSourceModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetVideoSourceModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetVideoSourceModeResponse, default initialized and not managed by a soap context
        virtual _tr2__SetVideoSourceModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetVideoSourceModeResponse); }
      public:
        /// Constructor with default initializations
        _tr2__SetVideoSourceModeResponse() : Reboot(), soap() { }
        virtual ~_tr2__SetVideoSourceModeResponse() { }
        /// Friend allocator used by soap_new__tr2__SetVideoSourceModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__tr2__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2443 */
#ifndef SOAP_TYPE__tr2__GetOSDs
#define SOAP_TYPE__tr2__GetOSDs (1172)
/* complex XML schema type 'tr2:GetOSDs': */
class SOAP_CMAC _tr2__GetOSDs {
      public:
        /// Optional element 'tr2:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Optional element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetOSDs
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetOSDs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetOSDs, default initialized and not managed by a soap context
        virtual _tr2__GetOSDs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetOSDs); }
      public:
        /// Constructor with default initializations
        _tr2__GetOSDs() : OSDToken(), ConfigurationToken(), soap() { }
        virtual ~_tr2__GetOSDs() { }
        /// Friend allocator used by soap_new__tr2__GetOSDs(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetOSDs * SOAP_FMAC2 soap_instantiate__tr2__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2445 */
#ifndef SOAP_TYPE__tr2__GetOSDsResponse
#define SOAP_TYPE__tr2__GetOSDsResponse (1173)
/* complex XML schema type 'tr2:GetOSDsResponse': */
class SOAP_CMAC _tr2__GetOSDsResponse {
      public:
        /// Sequence of elements 'tr2:OSDs' of XML schema type 'tt:OSDConfiguration' stored in dynamic array OSDs of length __sizeOSDs
        int __sizeOSDs;
        tt__OSDConfiguration **OSDs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetOSDsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetOSDsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetOSDsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetOSDsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetOSDsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetOSDsResponse() : __sizeOSDs(), OSDs(), soap() { }
        virtual ~_tr2__GetOSDsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetOSDsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2447 */
#ifndef SOAP_TYPE__tr2__SetOSD
#define SOAP_TYPE__tr2__SetOSD (1174)
/* complex XML schema type 'tr2:SetOSD': */
class SOAP_CMAC _tr2__SetOSD {
      public:
        /// Required element 'tr2:OSD' of XML schema type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetOSD
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetOSD, default initialized and not managed by a soap context
        virtual _tr2__SetOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetOSD); }
      public:
        /// Constructor with default initializations
        _tr2__SetOSD() : OSD(), soap() { }
        virtual ~_tr2__SetOSD() { }
        /// Friend allocator used by soap_new__tr2__SetOSD(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetOSD * SOAP_FMAC2 soap_instantiate__tr2__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2449 */
#ifndef SOAP_TYPE__tr2__GetOSDOptions
#define SOAP_TYPE__tr2__GetOSDOptions (1175)
/* complex XML schema type 'tr2:GetOSDOptions': */
class SOAP_CMAC _tr2__GetOSDOptions {
      public:
        /// Required element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetOSDOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetOSDOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetOSDOptions, default initialized and not managed by a soap context
        virtual _tr2__GetOSDOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetOSDOptions); }
      public:
        /// Constructor with default initializations
        _tr2__GetOSDOptions() : ConfigurationToken(), soap() { }
        virtual ~_tr2__GetOSDOptions() { }
        /// Friend allocator used by soap_new__tr2__GetOSDOptions(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetOSDOptions * SOAP_FMAC2 soap_instantiate__tr2__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2451 */
#ifndef SOAP_TYPE__tr2__GetOSDOptionsResponse
#define SOAP_TYPE__tr2__GetOSDOptionsResponse (1176)
/* complex XML schema type 'tr2:GetOSDOptionsResponse': */
class SOAP_CMAC _tr2__GetOSDOptionsResponse {
      public:
        /// Required element 'tr2:OSDOptions' of XML schema type 'tt:OSDConfigurationOptions'
        tt__OSDConfigurationOptions *OSDOptions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetOSDOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetOSDOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetOSDOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetOSDOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetOSDOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetOSDOptionsResponse() : OSDOptions(), soap() { }
        virtual ~_tr2__GetOSDOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetOSDOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2453 */
#ifndef SOAP_TYPE__tr2__CreateOSD
#define SOAP_TYPE__tr2__CreateOSD (1177)
/* complex XML schema type 'tr2:CreateOSD': */
class SOAP_CMAC _tr2__CreateOSD {
      public:
        /// Required element 'tr2:OSD' of XML schema type 'tt:OSDConfiguration'
        tt__OSDConfiguration *OSD;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateOSD
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateOSD, default initialized and not managed by a soap context
        virtual _tr2__CreateOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateOSD); }
      public:
        /// Constructor with default initializations
        _tr2__CreateOSD() : OSD(), soap() { }
        virtual ~_tr2__CreateOSD() { }
        /// Friend allocator used by soap_new__tr2__CreateOSD(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateOSD * SOAP_FMAC2 soap_instantiate__tr2__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2455 */
#ifndef SOAP_TYPE__tr2__CreateOSDResponse
#define SOAP_TYPE__tr2__CreateOSDResponse (1178)
/* complex XML schema type 'tr2:CreateOSDResponse': */
class SOAP_CMAC _tr2__CreateOSDResponse {
      public:
        /// Required element 'tr2:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateOSDResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateOSDResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateOSDResponse, default initialized and not managed by a soap context
        virtual _tr2__CreateOSDResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateOSDResponse); }
      public:
        /// Constructor with default initializations
        _tr2__CreateOSDResponse() : OSDToken(), soap() { }
        virtual ~_tr2__CreateOSDResponse() { }
        /// Friend allocator used by soap_new__tr2__CreateOSDResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__tr2__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2457 */
#ifndef SOAP_TYPE__tr2__DeleteOSD
#define SOAP_TYPE__tr2__DeleteOSD (1179)
/* complex XML schema type 'tr2:DeleteOSD': */
class SOAP_CMAC _tr2__DeleteOSD {
      public:
        /// Required element 'tr2:OSDToken' of XML schema type 'tt:ReferenceToken'
        char *OSDToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__DeleteOSD
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__DeleteOSD; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__DeleteOSD, default initialized and not managed by a soap context
        virtual _tr2__DeleteOSD *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__DeleteOSD); }
      public:
        /// Constructor with default initializations
        _tr2__DeleteOSD() : OSDToken(), soap() { }
        virtual ~_tr2__DeleteOSD() { }
        /// Friend allocator used by soap_new__tr2__DeleteOSD(struct soap*, int)
        friend SOAP_FMAC1 _tr2__DeleteOSD * SOAP_FMAC2 soap_instantiate__tr2__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2459 */
#ifndef SOAP_TYPE__tr2__GetMasks
#define SOAP_TYPE__tr2__GetMasks (1180)
/* complex XML schema type 'tr2:GetMasks': */
class SOAP_CMAC _tr2__GetMasks {
      public:
        /// Optional element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Optional element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMasks
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMasks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMasks, default initialized and not managed by a soap context
        virtual _tr2__GetMasks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMasks); }
      public:
        /// Constructor with default initializations
        _tr2__GetMasks() : Token(), ConfigurationToken(), soap() { }
        virtual ~_tr2__GetMasks() { }
        /// Friend allocator used by soap_new__tr2__GetMasks(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMasks * SOAP_FMAC2 soap_instantiate__tr2__GetMasks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2461 */
#ifndef SOAP_TYPE__tr2__GetMasksResponse
#define SOAP_TYPE__tr2__GetMasksResponse (1181)
/* complex XML schema type 'tr2:GetMasksResponse': */
class SOAP_CMAC _tr2__GetMasksResponse {
      public:
        /// Sequence of elements 'tr2:Masks' of XML schema type 'tr2:Mask' stored in dynamic array Masks of length __sizeMasks
        int __sizeMasks;
        tr2__Mask **Masks;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMasksResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMasksResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMasksResponse, default initialized and not managed by a soap context
        virtual _tr2__GetMasksResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMasksResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetMasksResponse() : __sizeMasks(), Masks(), soap() { }
        virtual ~_tr2__GetMasksResponse() { }
        /// Friend allocator used by soap_new__tr2__GetMasksResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMasksResponse * SOAP_FMAC2 soap_instantiate__tr2__GetMasksResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2463 */
#ifndef SOAP_TYPE__tr2__SetMask
#define SOAP_TYPE__tr2__SetMask (1182)
/* complex XML schema type 'tr2:SetMask': */
class SOAP_CMAC _tr2__SetMask {
      public:
        /// Required element 'tr2:Mask' of XML schema type 'tr2:Mask'
        tr2__Mask *Mask;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__SetMask
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__SetMask; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__SetMask, default initialized and not managed by a soap context
        virtual _tr2__SetMask *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__SetMask); }
      public:
        /// Constructor with default initializations
        _tr2__SetMask() : Mask(), soap() { }
        virtual ~_tr2__SetMask() { }
        /// Friend allocator used by soap_new__tr2__SetMask(struct soap*, int)
        friend SOAP_FMAC1 _tr2__SetMask * SOAP_FMAC2 soap_instantiate__tr2__SetMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2465 */
#ifndef SOAP_TYPE__tr2__GetMaskOptions
#define SOAP_TYPE__tr2__GetMaskOptions (1183)
/* complex XML schema type 'tr2:GetMaskOptions': */
class SOAP_CMAC _tr2__GetMaskOptions {
      public:
        /// Required element 'tr2:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMaskOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMaskOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMaskOptions, default initialized and not managed by a soap context
        virtual _tr2__GetMaskOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMaskOptions); }
      public:
        /// Constructor with default initializations
        _tr2__GetMaskOptions() : ConfigurationToken(), soap() { }
        virtual ~_tr2__GetMaskOptions() { }
        /// Friend allocator used by soap_new__tr2__GetMaskOptions(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMaskOptions * SOAP_FMAC2 soap_instantiate__tr2__GetMaskOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2467 */
#ifndef SOAP_TYPE__tr2__GetMaskOptionsResponse
#define SOAP_TYPE__tr2__GetMaskOptionsResponse (1184)
/* complex XML schema type 'tr2:GetMaskOptionsResponse': */
class SOAP_CMAC _tr2__GetMaskOptionsResponse {
      public:
        /// Required element 'tr2:Options' of XML schema type 'tr2:MaskOptions'
        tr2__MaskOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__GetMaskOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__GetMaskOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__GetMaskOptionsResponse, default initialized and not managed by a soap context
        virtual _tr2__GetMaskOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__GetMaskOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tr2__GetMaskOptionsResponse() : Options(), soap() { }
        virtual ~_tr2__GetMaskOptionsResponse() { }
        /// Friend allocator used by soap_new__tr2__GetMaskOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__GetMaskOptionsResponse * SOAP_FMAC2 soap_instantiate__tr2__GetMaskOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2469 */
#ifndef SOAP_TYPE__tr2__CreateMask
#define SOAP_TYPE__tr2__CreateMask (1185)
/* complex XML schema type 'tr2:CreateMask': */
class SOAP_CMAC _tr2__CreateMask {
      public:
        /// Required element 'tr2:Mask' of XML schema type 'tr2:Mask'
        tr2__Mask *Mask;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateMask
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateMask; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateMask, default initialized and not managed by a soap context
        virtual _tr2__CreateMask *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateMask); }
      public:
        /// Constructor with default initializations
        _tr2__CreateMask() : Mask(), soap() { }
        virtual ~_tr2__CreateMask() { }
        /// Friend allocator used by soap_new__tr2__CreateMask(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateMask * SOAP_FMAC2 soap_instantiate__tr2__CreateMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2471 */
#ifndef SOAP_TYPE__tr2__CreateMaskResponse
#define SOAP_TYPE__tr2__CreateMaskResponse (1186)
/* complex XML schema type 'tr2:CreateMaskResponse': */
class SOAP_CMAC _tr2__CreateMaskResponse {
      public:
        /// Required element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__CreateMaskResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__CreateMaskResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__CreateMaskResponse, default initialized and not managed by a soap context
        virtual _tr2__CreateMaskResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__CreateMaskResponse); }
      public:
        /// Constructor with default initializations
        _tr2__CreateMaskResponse() : Token(), soap() { }
        virtual ~_tr2__CreateMaskResponse() { }
        /// Friend allocator used by soap_new__tr2__CreateMaskResponse(struct soap*, int)
        friend SOAP_FMAC1 _tr2__CreateMaskResponse * SOAP_FMAC2 soap_instantiate__tr2__CreateMaskResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2473 */
#ifndef SOAP_TYPE__tr2__DeleteMask
#define SOAP_TYPE__tr2__DeleteMask (1187)
/* complex XML schema type 'tr2:DeleteMask': */
class SOAP_CMAC _tr2__DeleteMask {
      public:
        /// Required element 'tr2:Token' of XML schema type 'tt:ReferenceToken'
        char *Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tr2__DeleteMask
        virtual long soap_type(void) const { return SOAP_TYPE__tr2__DeleteMask; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tr2__DeleteMask, default initialized and not managed by a soap context
        virtual _tr2__DeleteMask *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tr2__DeleteMask); }
      public:
        /// Constructor with default initializations
        _tr2__DeleteMask() : Token(), soap() { }
        virtual ~_tr2__DeleteMask() { }
        /// Friend allocator used by soap_new__tr2__DeleteMask(struct soap*, int)
        friend SOAP_FMAC1 _tr2__DeleteMask * SOAP_FMAC2 soap_instantiate__tr2__DeleteMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2475 */
#ifndef SOAP_TYPE_tptz__Capabilities
#define SOAP_TYPE_tptz__Capabilities (1188)
/* simple XML schema type 'tptz:Capabilities': */
class SOAP_CMAC tptz__Capabilities : public xsd__anyType {
      public:
        /// Optional attribute 'EFlip' of XML schema type 'xsd:boolean'
        bool *EFlip;
        /// Optional attribute 'Reverse' of XML schema type 'xsd:boolean'
        bool *Reverse;
        /// Optional attribute 'GetCompatibleConfigurations' of XML schema type 'xsd:boolean'
        bool *GetCompatibleConfigurations;
        /// Optional attribute 'MoveStatus' of XML schema type 'xsd:boolean'
        bool *MoveStatus;
        /// Optional attribute 'StatusPosition' of XML schema type 'xsd:boolean'
        bool *StatusPosition;
        /// Optional attribute 'MoveAndTrack' of XML schema type 'tt:StringList'
        char *MoveAndTrack;
      public:
        /// Return unique type id SOAP_TYPE_tptz__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tptz__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tptz__Capabilities, default initialized and not managed by a soap context
        virtual tptz__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tptz__Capabilities); }
      public:
        /// Constructor with default initializations
        tptz__Capabilities() : EFlip(), Reverse(), GetCompatibleConfigurations(), MoveStatus(), StatusPosition(), MoveAndTrack() { }
        virtual ~tptz__Capabilities() { }
        /// Friend allocator used by soap_new_tptz__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tptz__Capabilities * SOAP_FMAC2 soap_instantiate_tptz__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2477 */
#ifndef SOAP_TYPE__tptz__GetServiceCapabilities
#define SOAP_TYPE__tptz__GetServiceCapabilities (1189)
/* complex XML schema type 'tptz:GetServiceCapabilities': */
class SOAP_CMAC _tptz__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tptz__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _tptz__GetServiceCapabilities() : soap() { }
        virtual ~_tptz__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tptz__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2479 */
#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse (1190)
/* complex XML schema type 'tptz:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tptz__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tptz:Capabilities' of XML schema type 'tptz:Capabilities'
        tptz__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tptz__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        virtual ~_tptz__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tptz__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2481 */
#ifndef SOAP_TYPE__tptz__GetNodes
#define SOAP_TYPE__tptz__GetNodes (1191)
/* complex XML schema type 'tptz:GetNodes': */
class SOAP_CMAC _tptz__GetNodes {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetNodes
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetNodes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetNodes, default initialized and not managed by a soap context
        virtual _tptz__GetNodes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetNodes); }
      public:
        /// Constructor with default initializations
        _tptz__GetNodes() : soap() { }
        virtual ~_tptz__GetNodes() { }
        /// Friend allocator used by soap_new__tptz__GetNodes(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetNodes * SOAP_FMAC2 soap_instantiate__tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2483 */
#ifndef SOAP_TYPE__tptz__GetNodesResponse
#define SOAP_TYPE__tptz__GetNodesResponse (1192)
/* complex XML schema type 'tptz:GetNodesResponse': */
class SOAP_CMAC _tptz__GetNodesResponse {
      public:
        /// Sequence of elements 'tptz:PTZNode' of XML schema type 'tt:PTZNode' stored in dynamic array PTZNode of length __sizePTZNode
        int __sizePTZNode;
        tt__PTZNode **PTZNode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetNodesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetNodesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetNodesResponse, default initialized and not managed by a soap context
        virtual _tptz__GetNodesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetNodesResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetNodesResponse() : __sizePTZNode(), PTZNode(), soap() { }
        virtual ~_tptz__GetNodesResponse() { }
        /// Friend allocator used by soap_new__tptz__GetNodesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetNodesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2485 */
#ifndef SOAP_TYPE__tptz__GetNode
#define SOAP_TYPE__tptz__GetNode (1193)
/* complex XML schema type 'tptz:GetNode': */
class SOAP_CMAC _tptz__GetNode {
      public:
        /// Required element 'tptz:NodeToken' of XML schema type 'tt:ReferenceToken'
        char *NodeToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetNode
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetNode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetNode, default initialized and not managed by a soap context
        virtual _tptz__GetNode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetNode); }
      public:
        /// Constructor with default initializations
        _tptz__GetNode() : NodeToken(), soap() { }
        virtual ~_tptz__GetNode() { }
        /// Friend allocator used by soap_new__tptz__GetNode(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetNode * SOAP_FMAC2 soap_instantiate__tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2487 */
#ifndef SOAP_TYPE__tptz__GetNodeResponse
#define SOAP_TYPE__tptz__GetNodeResponse (1194)
/* complex XML schema type 'tptz:GetNodeResponse': */
class SOAP_CMAC _tptz__GetNodeResponse {
      public:
        /// Required element 'tptz:PTZNode' of XML schema type 'tt:PTZNode'
        tt__PTZNode *PTZNode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetNodeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetNodeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetNodeResponse, default initialized and not managed by a soap context
        virtual _tptz__GetNodeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetNodeResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetNodeResponse() : PTZNode(), soap() { }
        virtual ~_tptz__GetNodeResponse() { }
        /// Friend allocator used by soap_new__tptz__GetNodeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetNodeResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2489 */
#ifndef SOAP_TYPE__tptz__GetConfigurations
#define SOAP_TYPE__tptz__GetConfigurations (1195)
/* complex XML schema type 'tptz:GetConfigurations': */
class SOAP_CMAC _tptz__GetConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfigurations, default initialized and not managed by a soap context
        virtual _tptz__GetConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfigurations); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfigurations() : soap() { }
        virtual ~_tptz__GetConfigurations() { }
        /// Friend allocator used by soap_new__tptz__GetConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2491 */
#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse
#define SOAP_TYPE__tptz__GetConfigurationsResponse (1196)
/* complex XML schema type 'tptz:GetConfigurationsResponse': */
class SOAP_CMAC _tptz__GetConfigurationsResponse {
      public:
        /// Sequence of elements 'tptz:PTZConfiguration' of XML schema type 'tt:PTZConfiguration' stored in dynamic array PTZConfiguration of length __sizePTZConfiguration
        int __sizePTZConfiguration;
        tt__PTZConfiguration **PTZConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tptz__GetConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfigurationsResponse() : __sizePTZConfiguration(), PTZConfiguration(), soap() { }
        virtual ~_tptz__GetConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tptz__GetConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2493 */
#ifndef SOAP_TYPE__tptz__GetConfiguration
#define SOAP_TYPE__tptz__GetConfiguration (1197)
/* complex XML schema type 'tptz:GetConfiguration': */
class SOAP_CMAC _tptz__GetConfiguration {
      public:
        /// Required element 'tptz:PTZConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *PTZConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfiguration, default initialized and not managed by a soap context
        virtual _tptz__GetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfiguration); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfiguration() : PTZConfigurationToken(), soap() { }
        virtual ~_tptz__GetConfiguration() { }
        /// Friend allocator used by soap_new__tptz__GetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2495 */
#ifndef SOAP_TYPE__tptz__GetConfigurationResponse
#define SOAP_TYPE__tptz__GetConfigurationResponse (1198)
/* complex XML schema type 'tptz:GetConfigurationResponse': */
class SOAP_CMAC _tptz__GetConfigurationResponse {
      public:
        /// Required element 'tptz:PTZConfiguration' of XML schema type 'tt:PTZConfiguration'
        tt__PTZConfiguration *PTZConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfigurationResponse, default initialized and not managed by a soap context
        virtual _tptz__GetConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfigurationResponse() : PTZConfiguration(), soap() { }
        virtual ~_tptz__GetConfigurationResponse() { }
        /// Friend allocator used by soap_new__tptz__GetConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2497 */
#ifndef SOAP_TYPE__tptz__SetConfiguration
#define SOAP_TYPE__tptz__SetConfiguration (1199)
/* complex XML schema type 'tptz:SetConfiguration': */
class SOAP_CMAC _tptz__SetConfiguration {
      public:
        /// Required element 'tptz:PTZConfiguration' of XML schema type 'tt:PTZConfiguration'
        tt__PTZConfiguration *PTZConfiguration;
        /// Required element 'tptz:ForcePersistence' of XML schema type 'xsd:boolean'
        bool ForcePersistence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetConfiguration, default initialized and not managed by a soap context
        virtual _tptz__SetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetConfiguration); }
      public:
        /// Constructor with default initializations
        _tptz__SetConfiguration() : PTZConfiguration(), ForcePersistence(), soap() { }
        virtual ~_tptz__SetConfiguration() { }
        /// Friend allocator used by soap_new__tptz__SetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:35759 */
#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence (2031)
/* Wrapper: */
struct SOAP_CMAC __tptz__SetConfigurationResponse_sequence {
      public:
        /** Return unique type id SOAP_TYPE___tptz__SetConfigurationResponse_sequence */
        long soap_type() const { return SOAP_TYPE___tptz__SetConfigurationResponse_sequence; }
        /** Constructor with member initializations */
        __tptz__SetConfigurationResponse_sequence() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__SetConfigurationResponse_sequence * SOAP_FMAC2 soap_instantiate___tptz__SetConfigurationResponse_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2499 */
#ifndef SOAP_TYPE__tptz__SetConfigurationResponse
#define SOAP_TYPE__tptz__SetConfigurationResponse (1200)
/* complex XML schema type 'tptz:SetConfigurationResponse': */
class SOAP_CMAC _tptz__SetConfigurationResponse {
      public:
        struct __tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetConfigurationResponse, default initialized and not managed by a soap context
        virtual _tptz__SetConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tptz__SetConfigurationResponse() : __SetConfigurationResponse_sequence(), soap() { }
        virtual ~_tptz__SetConfigurationResponse() { }
        /// Friend allocator used by soap_new__tptz__SetConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2501 */
#ifndef SOAP_TYPE__tptz__GetConfigurationOptions
#define SOAP_TYPE__tptz__GetConfigurationOptions (1201)
/* complex XML schema type 'tptz:GetConfigurationOptions': */
class SOAP_CMAC _tptz__GetConfigurationOptions {
      public:
        /// Required element 'tptz:ConfigurationToken' of XML schema type 'tt:ReferenceToken'
        char *ConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfigurationOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfigurationOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfigurationOptions, default initialized and not managed by a soap context
        virtual _tptz__GetConfigurationOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfigurationOptions); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfigurationOptions() : ConfigurationToken(), soap() { }
        virtual ~_tptz__GetConfigurationOptions() { }
        /// Friend allocator used by soap_new__tptz__GetConfigurationOptions(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2503 */
#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse (1202)
/* complex XML schema type 'tptz:GetConfigurationOptionsResponse': */
class SOAP_CMAC _tptz__GetConfigurationOptionsResponse {
      public:
        /// Required element 'tptz:PTZConfigurationOptions' of XML schema type 'tt:PTZConfigurationOptions'
        tt__PTZConfigurationOptions *PTZConfigurationOptions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetConfigurationOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetConfigurationOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetConfigurationOptionsResponse, default initialized and not managed by a soap context
        virtual _tptz__GetConfigurationOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetConfigurationOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetConfigurationOptionsResponse() : PTZConfigurationOptions(), soap() { }
        virtual ~_tptz__GetConfigurationOptionsResponse() { }
        /// Friend allocator used by soap_new__tptz__GetConfigurationOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2505 */
#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand
#define SOAP_TYPE__tptz__SendAuxiliaryCommand (1203)
/* complex XML schema type 'tptz:SendAuxiliaryCommand': */
class SOAP_CMAC _tptz__SendAuxiliaryCommand {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:AuxiliaryData' of XML schema type 'tt:AuxiliaryData'
        char *AuxiliaryData;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SendAuxiliaryCommand
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SendAuxiliaryCommand; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SendAuxiliaryCommand, default initialized and not managed by a soap context
        virtual _tptz__SendAuxiliaryCommand *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SendAuxiliaryCommand); }
      public:
        /// Constructor with default initializations
        _tptz__SendAuxiliaryCommand() : ProfileToken(), AuxiliaryData(), soap() { }
        virtual ~_tptz__SendAuxiliaryCommand() { }
        /// Friend allocator used by soap_new__tptz__SendAuxiliaryCommand(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2507 */
#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse (1204)
/* complex XML schema type 'tptz:SendAuxiliaryCommandResponse': */
class SOAP_CMAC _tptz__SendAuxiliaryCommandResponse {
      public:
        /// Required element 'tptz:AuxiliaryResponse' of XML schema type 'tt:AuxiliaryData'
        char *AuxiliaryResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SendAuxiliaryCommandResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SendAuxiliaryCommandResponse, default initialized and not managed by a soap context
        virtual _tptz__SendAuxiliaryCommandResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SendAuxiliaryCommandResponse); }
      public:
        /// Constructor with default initializations
        _tptz__SendAuxiliaryCommandResponse() : AuxiliaryResponse(), soap() { }
        virtual ~_tptz__SendAuxiliaryCommandResponse() { }
        /// Friend allocator used by soap_new__tptz__SendAuxiliaryCommandResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2509 */
#ifndef SOAP_TYPE__tptz__GetPresets
#define SOAP_TYPE__tptz__GetPresets (1205)
/* complex XML schema type 'tptz:GetPresets': */
class SOAP_CMAC _tptz__GetPresets {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresets
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresets; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresets, default initialized and not managed by a soap context
        virtual _tptz__GetPresets *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresets); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresets() : ProfileToken(), soap() { }
        virtual ~_tptz__GetPresets() { }
        /// Friend allocator used by soap_new__tptz__GetPresets(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresets * SOAP_FMAC2 soap_instantiate__tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2511 */
#ifndef SOAP_TYPE__tptz__GetPresetsResponse
#define SOAP_TYPE__tptz__GetPresetsResponse (1206)
/* complex XML schema type 'tptz:GetPresetsResponse': */
class SOAP_CMAC _tptz__GetPresetsResponse {
      public:
        /// Sequence of elements 'tptz:Preset' of XML schema type 'tt:PTZPreset' stored in dynamic array Preset of length __sizePreset
        int __sizePreset;
        tt__PTZPreset **Preset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetsResponse, default initialized and not managed by a soap context
        virtual _tptz__GetPresetsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetsResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetsResponse() : __sizePreset(), Preset(), soap() { }
        virtual ~_tptz__GetPresetsResponse() { }
        /// Friend allocator used by soap_new__tptz__GetPresetsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2513 */
#ifndef SOAP_TYPE__tptz__SetPreset
#define SOAP_TYPE__tptz__SetPreset (1207)
/* complex XML schema type 'tptz:SetPreset': */
class SOAP_CMAC _tptz__SetPreset {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tptz:PresetName' of XML schema type 'xsd:string'
        char *PresetName;
        /// Optional element 'tptz:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetPreset
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetPreset, default initialized and not managed by a soap context
        virtual _tptz__SetPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetPreset); }
      public:
        /// Constructor with default initializations
        _tptz__SetPreset() : ProfileToken(), PresetName(), PresetToken(), soap() { }
        virtual ~_tptz__SetPreset() { }
        /// Friend allocator used by soap_new__tptz__SetPreset(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetPreset * SOAP_FMAC2 soap_instantiate__tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2515 */
#ifndef SOAP_TYPE__tptz__SetPresetResponse
#define SOAP_TYPE__tptz__SetPresetResponse (1208)
/* complex XML schema type 'tptz:SetPresetResponse': */
class SOAP_CMAC _tptz__SetPresetResponse {
      public:
        /// Required element 'tptz:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetPresetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetPresetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetPresetResponse, default initialized and not managed by a soap context
        virtual _tptz__SetPresetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetPresetResponse); }
      public:
        /// Constructor with default initializations
        _tptz__SetPresetResponse() : PresetToken(), soap() { }
        virtual ~_tptz__SetPresetResponse() { }
        /// Friend allocator used by soap_new__tptz__SetPresetResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__SetPresetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2517 */
#ifndef SOAP_TYPE__tptz__RemovePreset
#define SOAP_TYPE__tptz__RemovePreset (1209)
/* complex XML schema type 'tptz:RemovePreset': */
class SOAP_CMAC _tptz__RemovePreset {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RemovePreset
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RemovePreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RemovePreset, default initialized and not managed by a soap context
        virtual _tptz__RemovePreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RemovePreset); }
      public:
        /// Constructor with default initializations
        _tptz__RemovePreset() : ProfileToken(), PresetToken(), soap() { }
        virtual ~_tptz__RemovePreset() { }
        /// Friend allocator used by soap_new__tptz__RemovePreset(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RemovePreset * SOAP_FMAC2 soap_instantiate__tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2519 */
#ifndef SOAP_TYPE__tptz__RemovePresetResponse
#define SOAP_TYPE__tptz__RemovePresetResponse (1210)
/* complex XML schema type 'tptz:RemovePresetResponse': */
class SOAP_CMAC _tptz__RemovePresetResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RemovePresetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RemovePresetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RemovePresetResponse, default initialized and not managed by a soap context
        virtual _tptz__RemovePresetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RemovePresetResponse); }
      public:
        /// Constructor with default initializations
        _tptz__RemovePresetResponse() : soap() { }
        virtual ~_tptz__RemovePresetResponse() { }
        /// Friend allocator used by soap_new__tptz__RemovePresetResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RemovePresetResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2521 */
#ifndef SOAP_TYPE__tptz__GotoPreset
#define SOAP_TYPE__tptz__GotoPreset (1211)
/* complex XML schema type 'tptz:GotoPreset': */
class SOAP_CMAC _tptz__GotoPreset {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GotoPreset
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GotoPreset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GotoPreset, default initialized and not managed by a soap context
        virtual _tptz__GotoPreset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GotoPreset); }
      public:
        /// Constructor with default initializations
        _tptz__GotoPreset() : ProfileToken(), PresetToken(), Speed(), soap() { }
        virtual ~_tptz__GotoPreset() { }
        /// Friend allocator used by soap_new__tptz__GotoPreset(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GotoPreset * SOAP_FMAC2 soap_instantiate__tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2523 */
#ifndef SOAP_TYPE__tptz__GotoPresetResponse
#define SOAP_TYPE__tptz__GotoPresetResponse (1212)
/* complex XML schema type 'tptz:GotoPresetResponse': */
class SOAP_CMAC _tptz__GotoPresetResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GotoPresetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GotoPresetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GotoPresetResponse, default initialized and not managed by a soap context
        virtual _tptz__GotoPresetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GotoPresetResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GotoPresetResponse() : soap() { }
        virtual ~_tptz__GotoPresetResponse() { }
        /// Friend allocator used by soap_new__tptz__GotoPresetResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GotoPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoPresetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2525 */
#ifndef SOAP_TYPE__tptz__GetStatus
#define SOAP_TYPE__tptz__GetStatus (1213)
/* complex XML schema type 'tptz:GetStatus': */
class SOAP_CMAC _tptz__GetStatus {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetStatus
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetStatus, default initialized and not managed by a soap context
        virtual _tptz__GetStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetStatus); }
      public:
        /// Constructor with default initializations
        _tptz__GetStatus() : ProfileToken(), soap() { }
        virtual ~_tptz__GetStatus() { }
        /// Friend allocator used by soap_new__tptz__GetStatus(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetStatus * SOAP_FMAC2 soap_instantiate__tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2527 */
#ifndef SOAP_TYPE__tptz__GetStatusResponse
#define SOAP_TYPE__tptz__GetStatusResponse (1214)
/* complex XML schema type 'tptz:GetStatusResponse': */
class SOAP_CMAC _tptz__GetStatusResponse {
      public:
        /// Required element 'tptz:PTZStatus' of XML schema type 'tt:PTZStatus'
        tt__PTZStatus *PTZStatus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetStatusResponse, default initialized and not managed by a soap context
        virtual _tptz__GetStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetStatusResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetStatusResponse() : PTZStatus(), soap() { }
        virtual ~_tptz__GetStatusResponse() { }
        /// Friend allocator used by soap_new__tptz__GetStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetStatusResponse * SOAP_FMAC2 soap_instantiate__tptz__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2529 */
#ifndef SOAP_TYPE__tptz__GotoHomePosition
#define SOAP_TYPE__tptz__GotoHomePosition (1215)
/* complex XML schema type 'tptz:GotoHomePosition': */
class SOAP_CMAC _tptz__GotoHomePosition {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GotoHomePosition
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GotoHomePosition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GotoHomePosition, default initialized and not managed by a soap context
        virtual _tptz__GotoHomePosition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GotoHomePosition); }
      public:
        /// Constructor with default initializations
        _tptz__GotoHomePosition() : ProfileToken(), Speed(), soap() { }
        virtual ~_tptz__GotoHomePosition() { }
        /// Friend allocator used by soap_new__tptz__GotoHomePosition(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2531 */
#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse
#define SOAP_TYPE__tptz__GotoHomePositionResponse (1216)
/* complex XML schema type 'tptz:GotoHomePositionResponse': */
class SOAP_CMAC _tptz__GotoHomePositionResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GotoHomePositionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GotoHomePositionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GotoHomePositionResponse, default initialized and not managed by a soap context
        virtual _tptz__GotoHomePositionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GotoHomePositionResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GotoHomePositionResponse() : soap() { }
        virtual ~_tptz__GotoHomePositionResponse() { }
        /// Friend allocator used by soap_new__tptz__GotoHomePositionResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GotoHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2533 */
#ifndef SOAP_TYPE__tptz__SetHomePosition
#define SOAP_TYPE__tptz__SetHomePosition (1217)
/* complex XML schema type 'tptz:SetHomePosition': */
class SOAP_CMAC _tptz__SetHomePosition {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetHomePosition
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetHomePosition; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetHomePosition, default initialized and not managed by a soap context
        virtual _tptz__SetHomePosition *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetHomePosition); }
      public:
        /// Constructor with default initializations
        _tptz__SetHomePosition() : ProfileToken(), soap() { }
        virtual ~_tptz__SetHomePosition() { }
        /// Friend allocator used by soap_new__tptz__SetHomePosition(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate__tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2535 */
#ifndef SOAP_TYPE__tptz__SetHomePositionResponse
#define SOAP_TYPE__tptz__SetHomePositionResponse (1218)
/* complex XML schema type 'tptz:SetHomePositionResponse': */
class SOAP_CMAC _tptz__SetHomePositionResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__SetHomePositionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__SetHomePositionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__SetHomePositionResponse, default initialized and not managed by a soap context
        virtual _tptz__SetHomePositionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__SetHomePositionResponse); }
      public:
        /// Constructor with default initializations
        _tptz__SetHomePositionResponse() : soap() { }
        virtual ~_tptz__SetHomePositionResponse() { }
        /// Friend allocator used by soap_new__tptz__SetHomePositionResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__SetHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__SetHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2537 */
#ifndef SOAP_TYPE__tptz__ContinuousMove
#define SOAP_TYPE__tptz__ContinuousMove (1219)
/* complex XML schema type 'tptz:ContinuousMove': */
class SOAP_CMAC _tptz__ContinuousMove {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:Velocity' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Velocity;
        /// Optional element 'tptz:Timeout' of XML schema type 'xsd:duration'
        char *Timeout;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__ContinuousMove
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__ContinuousMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__ContinuousMove, default initialized and not managed by a soap context
        virtual _tptz__ContinuousMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__ContinuousMove); }
      public:
        /// Constructor with default initializations
        _tptz__ContinuousMove() : ProfileToken(), Velocity(), Timeout(), soap() { }
        virtual ~_tptz__ContinuousMove() { }
        /// Friend allocator used by soap_new__tptz__ContinuousMove(struct soap*, int)
        friend SOAP_FMAC1 _tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2539 */
#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse
#define SOAP_TYPE__tptz__ContinuousMoveResponse (1220)
/* complex XML schema type 'tptz:ContinuousMoveResponse': */
class SOAP_CMAC _tptz__ContinuousMoveResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__ContinuousMoveResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__ContinuousMoveResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__ContinuousMoveResponse, default initialized and not managed by a soap context
        virtual _tptz__ContinuousMoveResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__ContinuousMoveResponse); }
      public:
        /// Constructor with default initializations
        _tptz__ContinuousMoveResponse() : soap() { }
        virtual ~_tptz__ContinuousMoveResponse() { }
        /// Friend allocator used by soap_new__tptz__ContinuousMoveResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__ContinuousMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMoveResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2541 */
#ifndef SOAP_TYPE__tptz__RelativeMove
#define SOAP_TYPE__tptz__RelativeMove (1221)
/* complex XML schema type 'tptz:RelativeMove': */
class SOAP_CMAC _tptz__RelativeMove {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:Translation' of XML schema type 'tt:PTZVector'
        tt__PTZVector *Translation;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RelativeMove
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RelativeMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RelativeMove, default initialized and not managed by a soap context
        virtual _tptz__RelativeMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RelativeMove); }
      public:
        /// Constructor with default initializations
        _tptz__RelativeMove() : ProfileToken(), Translation(), Speed(), soap() { }
        virtual ~_tptz__RelativeMove() { }
        /// Friend allocator used by soap_new__tptz__RelativeMove(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RelativeMove * SOAP_FMAC2 soap_instantiate__tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2543 */
#ifndef SOAP_TYPE__tptz__RelativeMoveResponse
#define SOAP_TYPE__tptz__RelativeMoveResponse (1222)
/* complex XML schema type 'tptz:RelativeMoveResponse': */
class SOAP_CMAC _tptz__RelativeMoveResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RelativeMoveResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RelativeMoveResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RelativeMoveResponse, default initialized and not managed by a soap context
        virtual _tptz__RelativeMoveResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RelativeMoveResponse); }
      public:
        /// Constructor with default initializations
        _tptz__RelativeMoveResponse() : soap() { }
        virtual ~_tptz__RelativeMoveResponse() { }
        /// Friend allocator used by soap_new__tptz__RelativeMoveResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RelativeMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__RelativeMoveResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2545 */
#ifndef SOAP_TYPE__tptz__AbsoluteMove
#define SOAP_TYPE__tptz__AbsoluteMove (1223)
/* complex XML schema type 'tptz:AbsoluteMove': */
class SOAP_CMAC _tptz__AbsoluteMove {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:Position' of XML schema type 'tt:PTZVector'
        tt__PTZVector *Position;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__AbsoluteMove
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__AbsoluteMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__AbsoluteMove, default initialized and not managed by a soap context
        virtual _tptz__AbsoluteMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__AbsoluteMove); }
      public:
        /// Constructor with default initializations
        _tptz__AbsoluteMove() : ProfileToken(), Position(), Speed(), soap() { }
        virtual ~_tptz__AbsoluteMove() { }
        /// Friend allocator used by soap_new__tptz__AbsoluteMove(struct soap*, int)
        friend SOAP_FMAC1 _tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2547 */
#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse
#define SOAP_TYPE__tptz__AbsoluteMoveResponse (1224)
/* complex XML schema type 'tptz:AbsoluteMoveResponse': */
class SOAP_CMAC _tptz__AbsoluteMoveResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__AbsoluteMoveResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__AbsoluteMoveResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__AbsoluteMoveResponse, default initialized and not managed by a soap context
        virtual _tptz__AbsoluteMoveResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__AbsoluteMoveResponse); }
      public:
        /// Constructor with default initializations
        _tptz__AbsoluteMoveResponse() : soap() { }
        virtual ~_tptz__AbsoluteMoveResponse() { }
        /// Friend allocator used by soap_new__tptz__AbsoluteMoveResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__AbsoluteMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMoveResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2549 */
#ifndef SOAP_TYPE__tptz__GeoMove
#define SOAP_TYPE__tptz__GeoMove (1225)
/* complex XML schema type 'tptz:GeoMove': */
class SOAP_CMAC _tptz__GeoMove {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:Target' of XML schema type 'tt:GeoLocation'
        tt__GeoLocation *Target;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Optional element 'tptz:AreaHeight' of XML schema type 'xsd:float'
        float *AreaHeight;
        /// Optional element 'tptz:AreaWidth' of XML schema type 'xsd:float'
        float *AreaWidth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GeoMove
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GeoMove; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GeoMove, default initialized and not managed by a soap context
        virtual _tptz__GeoMove *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GeoMove); }
      public:
        /// Constructor with default initializations
        _tptz__GeoMove() : ProfileToken(), Target(), Speed(), AreaHeight(), AreaWidth(), soap() { }
        virtual ~_tptz__GeoMove() { }
        /// Friend allocator used by soap_new__tptz__GeoMove(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GeoMove * SOAP_FMAC2 soap_instantiate__tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2551 */
#ifndef SOAP_TYPE__tptz__GeoMoveResponse
#define SOAP_TYPE__tptz__GeoMoveResponse (1226)
/* complex XML schema type 'tptz:GeoMoveResponse': */
class SOAP_CMAC _tptz__GeoMoveResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GeoMoveResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GeoMoveResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GeoMoveResponse, default initialized and not managed by a soap context
        virtual _tptz__GeoMoveResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GeoMoveResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GeoMoveResponse() : soap() { }
        virtual ~_tptz__GeoMoveResponse() { }
        /// Friend allocator used by soap_new__tptz__GeoMoveResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GeoMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__GeoMoveResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2553 */
#ifndef SOAP_TYPE__tptz__Stop
#define SOAP_TYPE__tptz__Stop (1227)
/* complex XML schema type 'tptz:Stop': */
class SOAP_CMAC _tptz__Stop {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tptz:PanTilt' of XML schema type 'xsd:boolean'
        bool *PanTilt;
        /// Optional element 'tptz:Zoom' of XML schema type 'xsd:boolean'
        bool *Zoom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__Stop
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__Stop; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__Stop, default initialized and not managed by a soap context
        virtual _tptz__Stop *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__Stop); }
      public:
        /// Constructor with default initializations
        _tptz__Stop() : ProfileToken(), PanTilt(), Zoom(), soap() { }
        virtual ~_tptz__Stop() { }
        /// Friend allocator used by soap_new__tptz__Stop(struct soap*, int)
        friend SOAP_FMAC1 _tptz__Stop * SOAP_FMAC2 soap_instantiate__tptz__Stop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2555 */
#ifndef SOAP_TYPE__tptz__StopResponse
#define SOAP_TYPE__tptz__StopResponse (1228)
/* complex XML schema type 'tptz:StopResponse': */
class SOAP_CMAC _tptz__StopResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__StopResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__StopResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__StopResponse, default initialized and not managed by a soap context
        virtual _tptz__StopResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__StopResponse); }
      public:
        /// Constructor with default initializations
        _tptz__StopResponse() : soap() { }
        virtual ~_tptz__StopResponse() { }
        /// Friend allocator used by soap_new__tptz__StopResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__StopResponse * SOAP_FMAC2 soap_instantiate__tptz__StopResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2557 */
#ifndef SOAP_TYPE__tptz__GetPresetTours
#define SOAP_TYPE__tptz__GetPresetTours (1229)
/* complex XML schema type 'tptz:GetPresetTours': */
class SOAP_CMAC _tptz__GetPresetTours {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetTours
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetTours; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetTours, default initialized and not managed by a soap context
        virtual _tptz__GetPresetTours *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetTours); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetTours() : ProfileToken(), soap() { }
        virtual ~_tptz__GetPresetTours() { }
        /// Friend allocator used by soap_new__tptz__GetPresetTours(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2559 */
#ifndef SOAP_TYPE__tptz__GetPresetToursResponse
#define SOAP_TYPE__tptz__GetPresetToursResponse (1230)
/* complex XML schema type 'tptz:GetPresetToursResponse': */
class SOAP_CMAC _tptz__GetPresetToursResponse {
      public:
        /// Sequence of elements 'tptz:PresetTour' of XML schema type 'tt:PresetTour' stored in dynamic array PresetTour of length __sizePresetTour
        int __sizePresetTour;
        tt__PresetTour **PresetTour;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetToursResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetToursResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetToursResponse, default initialized and not managed by a soap context
        virtual _tptz__GetPresetToursResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetToursResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetToursResponse() : __sizePresetTour(), PresetTour(), soap() { }
        virtual ~_tptz__GetPresetToursResponse() { }
        /// Friend allocator used by soap_new__tptz__GetPresetToursResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetToursResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetToursResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2561 */
#ifndef SOAP_TYPE__tptz__GetPresetTour
#define SOAP_TYPE__tptz__GetPresetTour (1231)
/* complex XML schema type 'tptz:GetPresetTour': */
class SOAP_CMAC _tptz__GetPresetTour {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetTourToken' of XML schema type 'tt:ReferenceToken'
        char *PresetTourToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetTour
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetTour, default initialized and not managed by a soap context
        virtual _tptz__GetPresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetTour); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetTour() : ProfileToken(), PresetTourToken(), soap() { }
        virtual ~_tptz__GetPresetTour() { }
        /// Friend allocator used by soap_new__tptz__GetPresetTour(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2563 */
#ifndef SOAP_TYPE__tptz__GetPresetTourResponse
#define SOAP_TYPE__tptz__GetPresetTourResponse (1232)
/* complex XML schema type 'tptz:GetPresetTourResponse': */
class SOAP_CMAC _tptz__GetPresetTourResponse {
      public:
        /// Required element 'tptz:PresetTour' of XML schema type 'tt:PresetTour'
        tt__PresetTour *PresetTour;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetTourResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetTourResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetTourResponse, default initialized and not managed by a soap context
        virtual _tptz__GetPresetTourResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetTourResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetTourResponse() : PresetTour(), soap() { }
        virtual ~_tptz__GetPresetTourResponse() { }
        /// Friend allocator used by soap_new__tptz__GetPresetTourResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2565 */
#ifndef SOAP_TYPE__tptz__GetPresetTourOptions
#define SOAP_TYPE__tptz__GetPresetTourOptions (1233)
/* complex XML schema type 'tptz:GetPresetTourOptions': */
class SOAP_CMAC _tptz__GetPresetTourOptions {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tptz:PresetTourToken' of XML schema type 'tt:ReferenceToken'
        char *PresetTourToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetTourOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetTourOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetTourOptions, default initialized and not managed by a soap context
        virtual _tptz__GetPresetTourOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetTourOptions); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetTourOptions() : ProfileToken(), PresetTourToken(), soap() { }
        virtual ~_tptz__GetPresetTourOptions() { }
        /// Friend allocator used by soap_new__tptz__GetPresetTourOptions(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2567 */
#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse (1234)
/* complex XML schema type 'tptz:GetPresetTourOptionsResponse': */
class SOAP_CMAC _tptz__GetPresetTourOptionsResponse {
      public:
        /// Required element 'tptz:Options' of XML schema type 'tt:PTZPresetTourOptions'
        tt__PTZPresetTourOptions *Options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetPresetTourOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetPresetTourOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetPresetTourOptionsResponse, default initialized and not managed by a soap context
        virtual _tptz__GetPresetTourOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetPresetTourOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetPresetTourOptionsResponse() : Options(), soap() { }
        virtual ~_tptz__GetPresetTourOptionsResponse() { }
        /// Friend allocator used by soap_new__tptz__GetPresetTourOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2569 */
#ifndef SOAP_TYPE__tptz__CreatePresetTour
#define SOAP_TYPE__tptz__CreatePresetTour (1235)
/* complex XML schema type 'tptz:CreatePresetTour': */
class SOAP_CMAC _tptz__CreatePresetTour {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__CreatePresetTour
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__CreatePresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__CreatePresetTour, default initialized and not managed by a soap context
        virtual _tptz__CreatePresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__CreatePresetTour); }
      public:
        /// Constructor with default initializations
        _tptz__CreatePresetTour() : ProfileToken(), soap() { }
        virtual ~_tptz__CreatePresetTour() { }
        /// Friend allocator used by soap_new__tptz__CreatePresetTour(struct soap*, int)
        friend SOAP_FMAC1 _tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2571 */
#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse
#define SOAP_TYPE__tptz__CreatePresetTourResponse (1236)
/* complex XML schema type 'tptz:CreatePresetTourResponse': */
class SOAP_CMAC _tptz__CreatePresetTourResponse {
      public:
        /// Required element 'tptz:PresetTourToken' of XML schema type 'tt:ReferenceToken'
        char *PresetTourToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__CreatePresetTourResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__CreatePresetTourResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__CreatePresetTourResponse, default initialized and not managed by a soap context
        virtual _tptz__CreatePresetTourResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__CreatePresetTourResponse); }
      public:
        /// Constructor with default initializations
        _tptz__CreatePresetTourResponse() : PresetTourToken(), soap() { }
        virtual ~_tptz__CreatePresetTourResponse() { }
        /// Friend allocator used by soap_new__tptz__CreatePresetTourResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__CreatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2573 */
#ifndef SOAP_TYPE__tptz__ModifyPresetTour
#define SOAP_TYPE__tptz__ModifyPresetTour (1237)
/* complex XML schema type 'tptz:ModifyPresetTour': */
class SOAP_CMAC _tptz__ModifyPresetTour {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetTour' of XML schema type 'tt:PresetTour'
        tt__PresetTour *PresetTour;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__ModifyPresetTour
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__ModifyPresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__ModifyPresetTour, default initialized and not managed by a soap context
        virtual _tptz__ModifyPresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__ModifyPresetTour); }
      public:
        /// Constructor with default initializations
        _tptz__ModifyPresetTour() : ProfileToken(), PresetTour(), soap() { }
        virtual ~_tptz__ModifyPresetTour() { }
        /// Friend allocator used by soap_new__tptz__ModifyPresetTour(struct soap*, int)
        friend SOAP_FMAC1 _tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2575 */
#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse
#define SOAP_TYPE__tptz__ModifyPresetTourResponse (1238)
/* complex XML schema type 'tptz:ModifyPresetTourResponse': */
class SOAP_CMAC _tptz__ModifyPresetTourResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__ModifyPresetTourResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__ModifyPresetTourResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__ModifyPresetTourResponse, default initialized and not managed by a soap context
        virtual _tptz__ModifyPresetTourResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__ModifyPresetTourResponse); }
      public:
        /// Constructor with default initializations
        _tptz__ModifyPresetTourResponse() : soap() { }
        virtual ~_tptz__ModifyPresetTourResponse() { }
        /// Friend allocator used by soap_new__tptz__ModifyPresetTourResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__ModifyPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2577 */
#ifndef SOAP_TYPE__tptz__OperatePresetTour
#define SOAP_TYPE__tptz__OperatePresetTour (1239)
/* complex XML schema type 'tptz:OperatePresetTour': */
class SOAP_CMAC _tptz__OperatePresetTour {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetTourToken' of XML schema type 'tt:ReferenceToken'
        char *PresetTourToken;
        /// Required element 'tptz:Operation' of XML schema type 'tt:PTZPresetTourOperation'
        enum tt__PTZPresetTourOperation Operation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__OperatePresetTour
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__OperatePresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__OperatePresetTour, default initialized and not managed by a soap context
        virtual _tptz__OperatePresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__OperatePresetTour); }
      public:
        /// Constructor with default initializations
        _tptz__OperatePresetTour() : ProfileToken(), PresetTourToken(), Operation(), soap() { }
        virtual ~_tptz__OperatePresetTour() { }
        /// Friend allocator used by soap_new__tptz__OperatePresetTour(struct soap*, int)
        friend SOAP_FMAC1 _tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2579 */
#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse
#define SOAP_TYPE__tptz__OperatePresetTourResponse (1240)
/* complex XML schema type 'tptz:OperatePresetTourResponse': */
class SOAP_CMAC _tptz__OperatePresetTourResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__OperatePresetTourResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__OperatePresetTourResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__OperatePresetTourResponse, default initialized and not managed by a soap context
        virtual _tptz__OperatePresetTourResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__OperatePresetTourResponse); }
      public:
        /// Constructor with default initializations
        _tptz__OperatePresetTourResponse() : soap() { }
        virtual ~_tptz__OperatePresetTourResponse() { }
        /// Friend allocator used by soap_new__tptz__OperatePresetTourResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__OperatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2581 */
#ifndef SOAP_TYPE__tptz__RemovePresetTour
#define SOAP_TYPE__tptz__RemovePresetTour (1241)
/* complex XML schema type 'tptz:RemovePresetTour': */
class SOAP_CMAC _tptz__RemovePresetTour {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Required element 'tptz:PresetTourToken' of XML schema type 'tt:ReferenceToken'
        char *PresetTourToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RemovePresetTour
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RemovePresetTour; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RemovePresetTour, default initialized and not managed by a soap context
        virtual _tptz__RemovePresetTour *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RemovePresetTour); }
      public:
        /// Constructor with default initializations
        _tptz__RemovePresetTour() : ProfileToken(), PresetTourToken(), soap() { }
        virtual ~_tptz__RemovePresetTour() { }
        /// Friend allocator used by soap_new__tptz__RemovePresetTour(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2583 */
#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse
#define SOAP_TYPE__tptz__RemovePresetTourResponse (1242)
/* complex XML schema type 'tptz:RemovePresetTourResponse': */
class SOAP_CMAC _tptz__RemovePresetTourResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__RemovePresetTourResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__RemovePresetTourResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__RemovePresetTourResponse, default initialized and not managed by a soap context
        virtual _tptz__RemovePresetTourResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__RemovePresetTourResponse); }
      public:
        /// Constructor with default initializations
        _tptz__RemovePresetTourResponse() : soap() { }
        virtual ~_tptz__RemovePresetTourResponse() { }
        /// Friend allocator used by soap_new__tptz__RemovePresetTourResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__RemovePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2585 */
#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations
#define SOAP_TYPE__tptz__GetCompatibleConfigurations (1243)
/* complex XML schema type 'tptz:GetCompatibleConfigurations': */
class SOAP_CMAC _tptz__GetCompatibleConfigurations {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetCompatibleConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetCompatibleConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetCompatibleConfigurations, default initialized and not managed by a soap context
        virtual _tptz__GetCompatibleConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetCompatibleConfigurations); }
      public:
        /// Constructor with default initializations
        _tptz__GetCompatibleConfigurations() : ProfileToken(), soap() { }
        virtual ~_tptz__GetCompatibleConfigurations() { }
        /// Friend allocator used by soap_new__tptz__GetCompatibleConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2587 */
#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse (1244)
/* complex XML schema type 'tptz:GetCompatibleConfigurationsResponse': */
class SOAP_CMAC _tptz__GetCompatibleConfigurationsResponse {
      public:
        /// Sequence of elements 'tptz:PTZConfiguration' of XML schema type 'tt:PTZConfiguration' stored in dynamic array PTZConfiguration of length __sizePTZConfiguration
        int __sizePTZConfiguration;
        tt__PTZConfiguration **PTZConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__GetCompatibleConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tptz__GetCompatibleConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__GetCompatibleConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tptz__GetCompatibleConfigurationsResponse() : __sizePTZConfiguration(), PTZConfiguration(), soap() { }
        virtual ~_tptz__GetCompatibleConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tptz__GetCompatibleConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2589 */
#ifndef SOAP_TYPE__tptz__MoveAndStartTracking
#define SOAP_TYPE__tptz__MoveAndStartTracking (1245)
/* complex XML schema type 'tptz:MoveAndStartTracking': */
class SOAP_CMAC _tptz__MoveAndStartTracking {
      public:
        /// Required element 'tptz:ProfileToken' of XML schema type 'tt:ReferenceToken'
        char *ProfileToken;
        /// Optional element 'tptz:PresetToken' of XML schema type 'tt:ReferenceToken'
        char *PresetToken;
        /// Optional element 'tptz:GeoLocation' of XML schema type 'tt:GeoLocation'
        tt__GeoLocation *GeoLocation;
        /// Optional element 'tptz:TargetPosition' of XML schema type 'tt:PTZVector'
        tt__PTZVector *TargetPosition;
        /// Optional element 'tptz:Speed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *Speed;
        /// Optional element 'tptz:ObjectID' of XML schema type 'xsd:integer'
        char *ObjectID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__MoveAndStartTracking
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__MoveAndStartTracking; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__MoveAndStartTracking, default initialized and not managed by a soap context
        virtual _tptz__MoveAndStartTracking *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__MoveAndStartTracking); }
      public:
        /// Constructor with default initializations
        _tptz__MoveAndStartTracking() : ProfileToken(), PresetToken(), GeoLocation(), TargetPosition(), Speed(), ObjectID(), soap() { }
        virtual ~_tptz__MoveAndStartTracking() { }
        /// Friend allocator used by soap_new__tptz__MoveAndStartTracking(struct soap*, int)
        friend SOAP_FMAC1 _tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2591 */
#ifndef SOAP_TYPE__tptz__MoveAndStartTrackingResponse
#define SOAP_TYPE__tptz__MoveAndStartTrackingResponse (1246)
/* complex XML schema type 'tptz:MoveAndStartTrackingResponse': */
class SOAP_CMAC _tptz__MoveAndStartTrackingResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tptz__MoveAndStartTrackingResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tptz__MoveAndStartTrackingResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tptz__MoveAndStartTrackingResponse, default initialized and not managed by a soap context
        virtual _tptz__MoveAndStartTrackingResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tptz__MoveAndStartTrackingResponse); }
      public:
        /// Constructor with default initializations
        _tptz__MoveAndStartTrackingResponse() : soap() { }
        virtual ~_tptz__MoveAndStartTrackingResponse() { }
        /// Friend allocator used by soap_new__tptz__MoveAndStartTrackingResponse(struct soap*, int)
        friend SOAP_FMAC1 _tptz__MoveAndStartTrackingResponse * SOAP_FMAC2 soap_instantiate__tptz__MoveAndStartTrackingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:466 */
#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (185)
/* Type tds__StorageConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tds:StorageConfiguration': */
class SOAP_CMAC tds__StorageConfiguration : public tt__DeviceEntity {
      public:
        /// Required element 'tds:Data' of XML schema type 'tds:StorageConfigurationData'
        tds__StorageConfigurationData *Data;
      public:
        /// Return unique type id SOAP_TYPE_tds__StorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tds__StorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__StorageConfiguration, default initialized and not managed by a soap context
        virtual tds__StorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__StorageConfiguration); }
      public:
        /// Constructor with default initializations
        tds__StorageConfiguration() : Data() { }
        virtual ~tds__StorageConfiguration() { }
        /// Friend allocator used by soap_new_tds__StorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tds__StorageConfiguration * SOAP_FMAC2 soap_instantiate_tds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:876 */
#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (390)
/* complex XML schema type 'tt:VideoSource': */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Framerate' of XML schema type 'xsd:float'
        float Framerate;
        /// Required element 'tt:Resolution' of XML schema type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Optional element 'tt:Imaging' of XML schema type 'tt:ImagingSettings'
        tt__ImagingSettings *Imaging;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceExtension'
        tt__VideoSourceExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSource, default initialized and not managed by a soap context
        virtual tt__VideoSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSource); }
      public:
        /// Constructor with default initializations
        tt__VideoSource() : Framerate(), Resolution(), Imaging(), Extension() { }
        virtual ~tt__VideoSource() { }
        /// Friend allocator used by soap_new_tt__VideoSource(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSource * SOAP_FMAC2 soap_instantiate_tt__VideoSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:882 */
#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (393)
/* complex XML schema type 'tt:AudioSource': */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Channels' of XML schema type 'xsd:int'
        int Channels;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSource
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSource, default initialized and not managed by a soap context
        virtual tt__AudioSource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSource); }
      public:
        /// Constructor with default initializations
        tt__AudioSource() : Channels() { }
        virtual ~tt__AudioSource() { }
        /// Friend allocator used by soap_new_tt__AudioSource(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSource * SOAP_FMAC2 soap_instantiate_tt__AudioSource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:892 */
#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (398)
/* complex XML schema type 'tt:VideoSourceConfiguration': */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceToken' of XML schema type 'tt:ReferenceToken'
        char *SourceToken;
        /// Required element 'tt:Bounds' of XML schema type 'tt:IntRectangle'
        tt__IntRectangle *Bounds;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoSourceConfigurationExtension'
        tt__VideoSourceConfigurationExtension *Extension;
        /// Optional attribute 'ViewMode' of XML schema type 'xsd:string'
        char *ViewMode;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoSourceConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoSourceConfiguration); }
      public:
        /// Constructor with default initializations
        tt__VideoSourceConfiguration() : SourceToken(), Bounds(), Extension(), ViewMode() { }
        virtual ~tt__VideoSourceConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:920 */
#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (412)
/* complex XML schema type 'tt:VideoEncoderConfiguration': */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'tt:VideoEncoding'
        enum tt__VideoEncoding Encoding;
        /// Required element 'tt:Resolution' of XML schema type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Required element 'tt:Quality' of XML schema type 'xsd:float'
        float Quality;
        /// Optional element 'tt:RateControl' of XML schema type 'tt:VideoRateControl'
        tt__VideoRateControl *RateControl;
        /// Optional element 'tt:MPEG4' of XML schema type 'tt:Mpeg4Configuration'
        tt__Mpeg4Configuration *MPEG4;
        /// Optional element 'tt:H264' of XML schema type 'tt:H264Configuration'
        tt__H264Configuration *H264;
        /// Required element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:SessionTimeout' of XML schema type 'xsd:duration'
        char *SessionTimeout;
        /// Optional attribute 'GuaranteedFrameRate' of XML schema type 'xsd:boolean'
        bool *GuaranteedFrameRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoderConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoderConfiguration() : Encoding(), Resolution(), Quality(), RateControl(), MPEG4(), H264(), Multicast(), SessionTimeout(), GuaranteedFrameRate() { }
        virtual ~tt__VideoEncoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:938 */
#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (421)
/* complex XML schema type 'tt:JpegOptions2': */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions {
      public:
        /// Required element 'tt:BitrateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *BitrateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__JpegOptions2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__JpegOptions2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__JpegOptions2, default initialized and not managed by a soap context
        virtual tt__JpegOptions2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__JpegOptions2); }
      public:
        /// Constructor with default initializations
        tt__JpegOptions2() : BitrateRange() { }
        virtual ~tt__JpegOptions2() { }
        /// Friend allocator used by soap_new_tt__JpegOptions2(struct soap*, int)
        friend SOAP_FMAC1 tt__JpegOptions2 * SOAP_FMAC2 soap_instantiate_tt__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:942 */
#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (423)
/* complex XML schema type 'tt:Mpeg4Options2': */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options {
      public:
        /// Required element 'tt:BitrateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *BitrateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__Mpeg4Options2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Mpeg4Options2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Mpeg4Options2, default initialized and not managed by a soap context
        virtual tt__Mpeg4Options2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Mpeg4Options2); }
      public:
        /// Constructor with default initializations
        tt__Mpeg4Options2() : BitrateRange() { }
        virtual ~tt__Mpeg4Options2() { }
        /// Friend allocator used by soap_new_tt__Mpeg4Options2(struct soap*, int)
        friend SOAP_FMAC1 tt__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:946 */
#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (425)
/* complex XML schema type 'tt:H264Options2': */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options {
      public:
        /// Required element 'tt:BitrateRange' of XML schema type 'tt:IntRange'
        tt__IntRange *BitrateRange;
      public:
        /// Return unique type id SOAP_TYPE_tt__H264Options2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__H264Options2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__H264Options2, default initialized and not managed by a soap context
        virtual tt__H264Options2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__H264Options2); }
      public:
        /// Constructor with default initializations
        tt__H264Options2() : BitrateRange() { }
        virtual ~tt__H264Options2() { }
        /// Friend allocator used by soap_new_tt__H264Options2(struct soap*, int)
        friend SOAP_FMAC1 tt__H264Options2 * SOAP_FMAC2 soap_instantiate_tt__H264Options2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:948 */
#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (426)
/* complex XML schema type 'tt:VideoEncoder2Configuration': */
class SOAP_CMAC tt__VideoEncoder2Configuration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Required element 'tt:Resolution' of XML schema type 'tt:VideoResolution2'
        tt__VideoResolution2 *Resolution;
        /// Optional element 'tt:RateControl' of XML schema type 'tt:VideoRateControl2'
        tt__VideoRateControl2 *RateControl;
        /// Optional element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Quality' of XML schema type 'xsd:float'
        float Quality;
        /// Optional attribute 'GovLength' of XML schema type 'xsd:int'
        int *GovLength;
        /// Optional attribute 'Profile' of XML schema type 'xsd:string'
        char *Profile;
        /// Optional attribute 'GuaranteedFrameRate' of XML schema type 'xsd:boolean'
        bool *GuaranteedFrameRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoEncoder2Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoEncoder2Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoEncoder2Configuration, default initialized and not managed by a soap context
        virtual tt__VideoEncoder2Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoEncoder2Configuration); }
      public:
        /// Constructor with default initializations
        tt__VideoEncoder2Configuration() : Encoding(), Resolution(), RateControl(), Multicast(), Quality(), GovLength(), Profile(), GuaranteedFrameRate() { }
        virtual ~tt__VideoEncoder2Configuration() { }
        /// Friend allocator used by soap_new_tt__VideoEncoder2Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:956 */
#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (430)
/* complex XML schema type 'tt:AudioSourceConfiguration': */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceToken' of XML schema type 'tt:ReferenceToken'
        char *SourceToken;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioSourceConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioSourceConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioSourceConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioSourceConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioSourceConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AudioSourceConfiguration() : SourceToken() { }
        virtual ~tt__AudioSourceConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioSourceConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:962 */
#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (433)
/* complex XML schema type 'tt:AudioEncoderConfiguration': */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'tt:AudioEncoding'
        enum tt__AudioEncoding Encoding;
        /// Required element 'tt:Bitrate' of XML schema type 'xsd:int'
        int Bitrate;
        /// Required element 'tt:SampleRate' of XML schema type 'xsd:int'
        int SampleRate;
        /// Required element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:SessionTimeout' of XML schema type 'xsd:duration'
        char *SessionTimeout;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoderConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioEncoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoderConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoderConfiguration() : Encoding(), Bitrate(), SampleRate(), Multicast(), SessionTimeout() { }
        virtual ~tt__AudioEncoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioEncoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:968 */
#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (436)
/* complex XML schema type 'tt:AudioEncoder2Configuration': */
class SOAP_CMAC tt__AudioEncoder2Configuration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:Encoding' of XML schema type 'xsd:string'
        char *Encoding;
        /// Optional element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Bitrate' of XML schema type 'xsd:int'
        int Bitrate;
        /// Required element 'tt:SampleRate' of XML schema type 'xsd:int'
        int SampleRate;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioEncoder2Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioEncoder2Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioEncoder2Configuration, default initialized and not managed by a soap context
        virtual tt__AudioEncoder2Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioEncoder2Configuration); }
      public:
        /// Constructor with default initializations
        tt__AudioEncoder2Configuration() : Encoding(), Multicast(), Bitrate(), SampleRate() { }
        virtual ~tt__AudioEncoder2Configuration() { }
        /// Friend allocator used by soap_new_tt__AudioEncoder2Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:972 */
#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (438)
/* complex XML schema type 'tt:VideoAnalyticsConfiguration': */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:AnalyticsEngineConfiguration' of XML schema type 'tt:AnalyticsEngineConfiguration'
        tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;
        /// Required element 'tt:RuleEngineConfiguration' of XML schema type 'tt:RuleEngineConfiguration'
        tt__RuleEngineConfiguration *RuleEngineConfiguration;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoAnalyticsConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoAnalyticsConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoAnalyticsConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoAnalyticsConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoAnalyticsConfiguration); }
      public:
        /// Constructor with default initializations
        tt__VideoAnalyticsConfiguration() : AnalyticsEngineConfiguration(), RuleEngineConfiguration() { }
        virtual ~tt__VideoAnalyticsConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoAnalyticsConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:974 */
#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (439)
/* complex XML schema type 'tt:MetadataConfiguration': */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity {
      public:
        /// Optional element 'tt:PTZStatus' of XML schema type 'tt:PTZFilter'
        tt__PTZFilter *PTZStatus;
        /// Optional element 'tt:Events' of XML schema type 'tt:EventSubscription'
        tt__EventSubscription *Events;
        /// Optional element 'tt:Analytics' of XML schema type 'xsd:boolean'
        bool *Analytics;
        /// Required element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:SessionTimeout' of XML schema type 'xsd:duration'
        char *SessionTimeout;
        /// Optional element 'tt:AnalyticsEngineConfiguration' of XML schema type 'tt:AnalyticsEngineConfiguration'
        tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MetadataConfigurationExtension'
        tt__MetadataConfigurationExtension *Extension;
        /// Optional attribute 'CompressionType' of XML schema type 'xsd:string'
        char *CompressionType;
        /// Optional attribute 'GeoLocation' of XML schema type 'xsd:boolean'
        bool *GeoLocation;
        /// Optional attribute 'ShapePolygon' of XML schema type 'xsd:boolean'
        bool *ShapePolygon;
      public:
        /// Return unique type id SOAP_TYPE_tt__MetadataConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MetadataConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MetadataConfiguration, default initialized and not managed by a soap context
        virtual tt__MetadataConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MetadataConfiguration); }
      public:
        /// Constructor with default initializations
        tt__MetadataConfiguration() : PTZStatus(), Events(), Analytics(), Multicast(), SessionTimeout(), AnalyticsEngineConfiguration(), Extension(), CompressionType(), GeoLocation(), ShapePolygon() { }
        virtual ~tt__MetadataConfiguration() { }
        /// Friend allocator used by soap_new_tt__MetadataConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_tt__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:992 */
#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (448)
/* Type tt__VideoOutput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:VideoOutput': */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Layout' of XML schema type 'tt:Layout'
        tt__Layout *Layout;
        /// Optional element 'tt:Resolution' of XML schema type 'tt:VideoResolution'
        tt__VideoResolution *Resolution;
        /// Optional element 'tt:RefreshRate' of XML schema type 'xsd:float'
        float *RefreshRate;
        /// Optional element 'tt:AspectRatio' of XML schema type 'xsd:float'
        float *AspectRatio;
        /// Optional element 'tt:Extension' of XML schema type 'tt:VideoOutputExtension'
        tt__VideoOutputExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutput, default initialized and not managed by a soap context
        virtual tt__VideoOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutput); }
      public:
        /// Constructor with default initializations
        tt__VideoOutput() : Layout(), Resolution(), RefreshRate(), AspectRatio(), Extension() { }
        virtual ~tt__VideoOutput() { }
        /// Friend allocator used by soap_new_tt__VideoOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutput * SOAP_FMAC2 soap_instantiate_tt__VideoOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:996 */
#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (450)
/* Type tt__VideoOutputConfiguration is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:VideoOutputConfiguration': */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:OutputToken' of XML schema type 'tt:ReferenceToken'
        char *OutputToken;
      public:
        /// Return unique type id SOAP_TYPE_tt__VideoOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__VideoOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__VideoOutputConfiguration, default initialized and not managed by a soap context
        virtual tt__VideoOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__VideoOutputConfiguration); }
      public:
        /// Constructor with default initializations
        tt__VideoOutputConfiguration() : OutputToken() { }
        virtual ~tt__VideoOutputConfiguration() { }
        /// Friend allocator used by soap_new_tt__VideoOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__VideoOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1010 */
#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (457)
/* simple XML schema type 'tt:AudioOutput': */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity {
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutput, default initialized and not managed by a soap context
        virtual tt__AudioOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutput); }
      public:
        /// Constructor with default initializations
        tt__AudioOutput() { }
        virtual ~tt__AudioOutput() { }
        /// Friend allocator used by soap_new_tt__AudioOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutput * SOAP_FMAC2 soap_instantiate_tt__AudioOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1012 */
#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (458)
/* complex XML schema type 'tt:AudioOutputConfiguration': */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:OutputToken' of XML schema type 'tt:ReferenceToken'
        char *OutputToken;
        /// Optional element 'tt:SendPrimacy' of XML schema type 'xsd:anyURI'
        char *SendPrimacy;
        /// Required element 'tt:OutputLevel' of XML schema type 'xsd:int'
        int OutputLevel;
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioOutputConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioOutputConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioOutputConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioOutputConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioOutputConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AudioOutputConfiguration() : OutputToken(), SendPrimacy(), OutputLevel() { }
        virtual ~tt__AudioOutputConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioOutputConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1016 */
#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (460)
/* complex XML schema type 'tt:AudioDecoderConfiguration': */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity {
      public:
        /// Return unique type id SOAP_TYPE_tt__AudioDecoderConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AudioDecoderConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AudioDecoderConfiguration, default initialized and not managed by a soap context
        virtual tt__AudioDecoderConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AudioDecoderConfiguration); }
      public:
        /// Constructor with default initializations
        tt__AudioDecoderConfiguration() { }
        virtual ~tt__AudioDecoderConfiguration() { }
        /// Friend allocator used by soap_new_tt__AudioDecoderConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1038 */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (471)
/* Type tt__NetworkInterface is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkInterface': */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Info' of XML schema type 'tt:NetworkInterfaceInfo'
        tt__NetworkInterfaceInfo *Info;
        /// Optional element 'tt:Link' of XML schema type 'tt:NetworkInterfaceLink'
        tt__NetworkInterfaceLink *Link;
        /// Optional element 'tt:IPv4' of XML schema type 'tt:IPv4NetworkInterface'
        tt__IPv4NetworkInterface *IPv4;
        /// Optional element 'tt:IPv6' of XML schema type 'tt:IPv6NetworkInterface'
        tt__IPv6NetworkInterface *IPv6;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceExtension'
        tt__NetworkInterfaceExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterface, default initialized and not managed by a soap context
        virtual tt__NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterface() : Enabled(), Info(), Link(), IPv4(), IPv6(), Extension() { }
        virtual ~tt__NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1246 */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (575)
/* Type tt__CertificateUsage is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:CertificateUsage': */
class SOAP_CMAC tt__CertificateUsage : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        char *__item;
        /// Required attribute 'Critical' of XML schema type 'xsd:boolean'
        bool Critical;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateUsage
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateUsage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateUsage, default initialized and not managed by a soap context
        virtual tt__CertificateUsage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateUsage); }
      public:
        /// Constructor with default initializations
        tt__CertificateUsage() : __item(), Critical() { }
        virtual ~tt__CertificateUsage() { }
        /// Friend allocator used by soap_new_tt__CertificateUsage(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1264 */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (584)
/* Type tt__RelayOutput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:RelayOutput': */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Properties' of XML schema type 'tt:RelayOutputSettings'
        tt__RelayOutputSettings *Properties;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutput, default initialized and not managed by a soap context
        virtual tt__RelayOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutput); }
      public:
        /// Constructor with default initializations
        tt__RelayOutput() : Properties() { }
        virtual ~tt__RelayOutput() { }
        /// Friend allocator used by soap_new_tt__RelayOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1266 */
#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (585)
/* Type tt__DigitalInput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:DigitalInput': */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity {
      public:
        /// Optional attribute 'IdleState' of XML schema type 'tt:DigitalIdleState'
        enum tt__DigitalIdleState *IdleState;
      public:
        /// Return unique type id SOAP_TYPE_tt__DigitalInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DigitalInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DigitalInput, default initialized and not managed by a soap context
        virtual tt__DigitalInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DigitalInput); }
      public:
        /// Constructor with default initializations
        tt__DigitalInput() : IdleState() { }
        virtual ~tt__DigitalInput() { }
        /// Friend allocator used by soap_new_tt__DigitalInput(struct soap*, int)
        friend SOAP_FMAC1 tt__DigitalInput * SOAP_FMAC2 soap_instantiate_tt__DigitalInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1268 */
#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (586)
/* complex XML schema type 'tt:PTZNode': */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity {
      public:
        /// Optional element 'tt:Name' of XML schema type 'tt:Name'
        char *Name;
        /// Required element 'tt:SupportedPTZSpaces' of XML schema type 'tt:PTZSpaces'
        tt__PTZSpaces *SupportedPTZSpaces;
        /// Required element 'tt:MaximumNumberOfPresets' of XML schema type 'xsd:int'
        int MaximumNumberOfPresets;
        /// Required element 'tt:HomeSupported' of XML schema type 'xsd:boolean'
        bool HomeSupported;
        /// Sequence of elements 'tt:AuxiliaryCommands' of XML schema type 'tt:AuxiliaryData' stored in dynamic array AuxiliaryCommands of length __sizeAuxiliaryCommands
        int __sizeAuxiliaryCommands;
        char **AuxiliaryCommands;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZNodeExtension'
        tt__PTZNodeExtension *Extension;
        /// Optional attribute 'FixedHomePosition' of XML schema type 'xsd:boolean'
        bool *FixedHomePosition;
        /// Optional attribute 'GeoMove' of XML schema type 'xsd:boolean'
        bool *GeoMove;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZNode
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZNode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZNode, default initialized and not managed by a soap context
        virtual tt__PTZNode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZNode); }
      public:
        /// Constructor with default initializations
        tt__PTZNode() : Name(), SupportedPTZSpaces(), MaximumNumberOfPresets(), HomeSupported(), __sizeAuxiliaryCommands(), AuxiliaryCommands(), Extension(), FixedHomePosition(), GeoMove() { }
        virtual ~tt__PTZNode() { }
        /// Friend allocator used by soap_new_tt__PTZNode(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1278 */
#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (591)
/* complex XML schema type 'tt:PTZConfiguration': */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:NodeToken' of XML schema type 'tt:ReferenceToken'
        char *NodeToken;
        /// Optional element 'tt:DefaultAbsolutePantTiltPositionSpace' of XML schema type 'xsd:anyURI'
        char *DefaultAbsolutePantTiltPositionSpace;
        /// Optional element 'tt:DefaultAbsoluteZoomPositionSpace' of XML schema type 'xsd:anyURI'
        char *DefaultAbsoluteZoomPositionSpace;
        /// Optional element 'tt:DefaultRelativePanTiltTranslationSpace' of XML schema type 'xsd:anyURI'
        char *DefaultRelativePanTiltTranslationSpace;
        /// Optional element 'tt:DefaultRelativeZoomTranslationSpace' of XML schema type 'xsd:anyURI'
        char *DefaultRelativeZoomTranslationSpace;
        /// Optional element 'tt:DefaultContinuousPanTiltVelocitySpace' of XML schema type 'xsd:anyURI'
        char *DefaultContinuousPanTiltVelocitySpace;
        /// Optional element 'tt:DefaultContinuousZoomVelocitySpace' of XML schema type 'xsd:anyURI'
        char *DefaultContinuousZoomVelocitySpace;
        /// Optional element 'tt:DefaultPTZSpeed' of XML schema type 'tt:PTZSpeed'
        tt__PTZSpeed *DefaultPTZSpeed;
        /// Optional element 'tt:DefaultPTZTimeout' of XML schema type 'xsd:duration'
        char *DefaultPTZTimeout;
        /// Optional element 'tt:PanTiltLimits' of XML schema type 'tt:PanTiltLimits'
        tt__PanTiltLimits *PanTiltLimits;
        /// Optional element 'tt:ZoomLimits' of XML schema type 'tt:ZoomLimits'
        tt__ZoomLimits *ZoomLimits;
        /// Optional element 'tt:Extension' of XML schema type 'tt:PTZConfigurationExtension'
        tt__PTZConfigurationExtension *Extension;
        /// Optional attribute 'MoveRamp' of XML schema type 'xsd:int'
        int *MoveRamp;
        /// Optional attribute 'PresetRamp' of XML schema type 'xsd:int'
        int *PresetRamp;
        /// Optional attribute 'PresetTourRamp' of XML schema type 'xsd:int'
        int *PresetTourRamp;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZConfiguration, default initialized and not managed by a soap context
        virtual tt__PTZConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZConfiguration); }
      public:
        /// Constructor with default initializations
        tt__PTZConfiguration() : NodeToken(), DefaultAbsolutePantTiltPositionSpace(), DefaultAbsoluteZoomPositionSpace(), DefaultRelativePanTiltTranslationSpace(), DefaultRelativeZoomTranslationSpace(), DefaultContinuousPanTiltVelocitySpace(), DefaultContinuousZoomVelocitySpace(), DefaultPTZSpeed(), DefaultPTZTimeout(), PanTiltLimits(), ZoomLimits(), Extension(), MoveRamp(), PresetRamp(), PresetTourRamp() { }
        virtual ~tt__PTZConfiguration() { }
        /// Friend allocator used by soap_new_tt__PTZConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1578 */
#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (741)
/* Type tt__EventFilter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XML schema type 'tt:EventFilter': */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType {
      public:
        /// Return unique type id SOAP_TYPE_tt__EventFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventFilter, default initialized and not managed by a soap context
        virtual tt__EventFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventFilter); }
      public:
        /// Constructor with default initializations
        tt__EventFilter() { }
        virtual ~tt__EventFilter() { }
        /// Friend allocator used by soap_new_tt__EventFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__EventFilter * SOAP_FMAC2 soap_instantiate_tt__EventFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1650 */
#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (777)
/* Type tt__AnalyticsEngine is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsEngine': */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:AnalyticsEngineConfiguration' of XML schema type 'tt:AnalyticsDeviceEngineConfiguration'
        tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngine
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngine; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngine, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngine *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngine); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngine() : AnalyticsEngineConfiguration() { }
        virtual ~tt__AnalyticsEngine() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngine(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngine * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngine(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1662 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (783)
/* Type tt__AnalyticsEngineInput is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsEngineInput': */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:SourceIdentification' of XML schema type 'tt:SourceIdentification'
        tt__SourceIdentification *SourceIdentification;
        /// Required element 'tt:VideoInput' of XML schema type 'tt:VideoEncoderConfiguration'
        tt__VideoEncoderConfiguration *VideoInput;
        /// Required element 'tt:MetadataInput' of XML schema type 'tt:MetadataInput'
        tt__MetadataInput *MetadataInput;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineInput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineInput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineInput, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineInput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineInput); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineInput() : SourceIdentification(), VideoInput(), MetadataInput() { }
        virtual ~tt__AnalyticsEngineInput() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineInput(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineInput * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1672 */
#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (788)
/* Type tt__AnalyticsEngineControl is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:AnalyticsEngineControl': */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity {
      public:
        /// Required element 'tt:EngineToken' of XML schema type 'tt:ReferenceToken'
        char *EngineToken;
        /// Required element 'tt:EngineConfigToken' of XML schema type 'tt:ReferenceToken'
        char *EngineConfigToken;
        /// Sequence of at least 1 elements 'tt:InputToken' of XML schema type 'tt:ReferenceToken' stored in dynamic array InputToken of length __sizeInputToken
        int __sizeInputToken;
        char **InputToken;
        /// Sequence of at least 1 elements 'tt:ReceiverToken' of XML schema type 'tt:ReferenceToken' stored in dynamic array ReceiverToken of length __sizeReceiverToken
        int __sizeReceiverToken;
        char **ReceiverToken;
        /// Optional element 'tt:Multicast' of XML schema type 'tt:MulticastConfiguration'
        tt__MulticastConfiguration *Multicast;
        /// Required element 'tt:Subscription' of XML schema type 'tt:Config'
        tt__Config *Subscription;
        /// Required element 'tt:Mode' of XML schema type 'tt:ModeOfOperation'
        enum tt__ModeOfOperation Mode;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsEngineControl
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsEngineControl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsEngineControl, default initialized and not managed by a soap context
        virtual tt__AnalyticsEngineControl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsEngineControl); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsEngineControl() : EngineToken(), EngineConfigToken(), __sizeInputToken(), InputToken(), __sizeReceiverToken(), ReceiverToken(), Multicast(), Subscription(), Mode() { }
        virtual ~tt__AnalyticsEngineControl() { }
        /// Friend allocator used by soap_new_tt__AnalyticsEngineControl(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsEngineControl * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineControl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1726 */
#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (815)
/* complex XML schema type 'tt:OSDConfiguration': */
class SOAP_CMAC tt__OSDConfiguration : public tt__DeviceEntity {
      public:
        /// Required element 'tt:VideoSourceConfigurationToken' of XML schema type 'tt:OSDReference'
        tt__OSDReference *VideoSourceConfigurationToken;
        /// Required element 'tt:Type' of XML schema type 'tt:OSDType'
        enum tt__OSDType Type;
        /// Required element 'tt:Position' of XML schema type 'tt:OSDPosConfiguration'
        tt__OSDPosConfiguration *Position;
        /// Optional element 'tt:TextString' of XML schema type 'tt:OSDTextConfiguration'
        tt__OSDTextConfiguration *TextString;
        /// Optional element 'tt:Image' of XML schema type 'tt:OSDImgConfiguration'
        tt__OSDImgConfiguration *Image;
        /// Optional element 'tt:Extension' of XML schema type 'tt:OSDConfigurationExtension'
        tt__OSDConfigurationExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDConfiguration, default initialized and not managed by a soap context
        virtual tt__OSDConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDConfiguration); }
      public:
        /// Constructor with default initializations
        tt__OSDConfiguration() : VideoSourceConfigurationToken(), Type(), Position(), TextString(), Image(), Extension() { }
        virtual ~tt__OSDConfiguration() { }
        /// Friend allocator used by soap_new_tt__OSDConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1800 */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (852)
/* complex XML schema type 'wsnt:SubscribeCreationFailedFaultType': */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__SubscribeCreationFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__SubscribeCreationFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__SubscribeCreationFailedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__SubscribeCreationFailedFaultType() { }
        virtual ~wsnt__SubscribeCreationFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1802 */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (853)
/* complex XML schema type 'wsnt:InvalidFilterFaultType': */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Sequence of at least 1 elements 'wsnt:UnknownFilter' of XML schema type 'xsd:QName' stored in dynamic array UnknownFilter of length __sizeUnknownFilter
        int __sizeUnknownFilter;
        char **UnknownFilter;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidFilterFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidFilterFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidFilterFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidFilterFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidFilterFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__InvalidFilterFaultType() : __sizeUnknownFilter(), UnknownFilter() { }
        virtual ~wsnt__InvalidFilterFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidFilterFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1804 */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (854)
/* complex XML schema type 'wsnt:TopicExpressionDialectUnknownFaultType': */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicExpressionDialectUnknownFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicExpressionDialectUnknownFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicExpressionDialectUnknownFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__TopicExpressionDialectUnknownFaultType() { }
        virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1806 */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (855)
/* complex XML schema type 'wsnt:InvalidTopicExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidTopicExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidTopicExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidTopicExpressionFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__InvalidTopicExpressionFaultType() { }
        virtual ~wsnt__InvalidTopicExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1808 */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (856)
/* complex XML schema type 'wsnt:TopicNotSupportedFaultType': */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__TopicNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__TopicNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__TopicNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__TopicNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__TopicNotSupportedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__TopicNotSupportedFaultType() { }
        virtual ~wsnt__TopicNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__TopicNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1810 */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (857)
/* complex XML schema type 'wsnt:MultipleTopicsSpecifiedFaultType': */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__MultipleTopicsSpecifiedFaultType, default initialized and not managed by a soap context
        virtual wsnt__MultipleTopicsSpecifiedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__MultipleTopicsSpecifiedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__MultipleTopicsSpecifiedFaultType() { }
        virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1812 */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (858)
/* complex XML schema type 'wsnt:InvalidProducerPropertiesExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidProducerPropertiesExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidProducerPropertiesExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidProducerPropertiesExpressionFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1814 */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (859)
/* complex XML schema type 'wsnt:InvalidMessageContentExpressionFaultType': */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__InvalidMessageContentExpressionFaultType, default initialized and not managed by a soap context
        virtual wsnt__InvalidMessageContentExpressionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__InvalidMessageContentExpressionFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__InvalidMessageContentExpressionFaultType() { }
        virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1816 */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (860)
/* complex XML schema type 'wsnt:UnrecognizedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Sequence of elements 'wsnt:UnrecognizedPolicy' of XML schema type 'xsd:QName' stored in dynamic array UnrecognizedPolicy of length __sizeUnrecognizedPolicy
        int __sizeUnrecognizedPolicy;
        char **UnrecognizedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnrecognizedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnrecognizedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnrecognizedPolicyRequestFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnrecognizedPolicyRequestFaultType() : __sizeUnrecognizedPolicy(), UnrecognizedPolicy() { }
        virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1818 */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (861)
/* complex XML schema type 'wsnt:UnsupportedPolicyRequestFaultType': */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Sequence of elements 'wsnt:UnsupportedPolicy' of XML schema type 'xsd:QName' stored in dynamic array UnsupportedPolicy of length __sizeUnsupportedPolicy
        int __sizeUnsupportedPolicy;
        char **UnsupportedPolicy;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnsupportedPolicyRequestFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnsupportedPolicyRequestFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnsupportedPolicyRequestFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnsupportedPolicyRequestFaultType() : __sizeUnsupportedPolicy(), UnsupportedPolicy() { }
        virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1820 */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (862)
/* complex XML schema type 'wsnt:NotifyMessageNotSupportedFaultType': */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NotifyMessageNotSupportedFaultType, default initialized and not managed by a soap context
        virtual wsnt__NotifyMessageNotSupportedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NotifyMessageNotSupportedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__NotifyMessageNotSupportedFaultType() { }
        virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1822 */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (863)
/* complex XML schema type 'wsnt:UnacceptableInitialTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XML schema type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XML schema type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableInitialTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableInitialTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableInitialTerminationTimeFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnacceptableInitialTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1824 */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (864)
/* complex XML schema type 'wsnt:NoCurrentMessageOnTopicFaultType': */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__NoCurrentMessageOnTopicFaultType, default initialized and not managed by a soap context
        virtual wsnt__NoCurrentMessageOnTopicFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__NoCurrentMessageOnTopicFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__NoCurrentMessageOnTopicFaultType() { }
        virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
        /// Friend allocator used by soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1826 */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (865)
/* complex XML schema type 'wsnt:UnableToGetMessagesFaultType': */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToGetMessagesFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToGetMessagesFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToGetMessagesFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToGetMessagesFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnableToGetMessagesFaultType() { }
        virtual ~wsnt__UnableToGetMessagesFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToGetMessagesFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1828 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (866)
/* complex XML schema type 'wsnt:UnableToDestroyPullPointFaultType': */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroyPullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroyPullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroyPullPointFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnableToDestroyPullPointFaultType() { }
        virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1830 */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (867)
/* complex XML schema type 'wsnt:UnableToCreatePullPointFaultType': */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToCreatePullPointFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToCreatePullPointFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToCreatePullPointFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnableToCreatePullPointFaultType() { }
        virtual ~wsnt__UnableToCreatePullPointFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1832 */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (868)
/* complex XML schema type 'wsnt:UnacceptableTerminationTimeFaultType': */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Required element 'wsnt:MinimumTime' of XML schema type 'xsd:dateTime'
        time_t MinimumTime;
        /// Optional element 'wsnt:MaximumTime' of XML schema type 'xsd:dateTime'
        time_t *MaximumTime;
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnacceptableTerminationTimeFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnacceptableTerminationTimeFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnacceptableTerminationTimeFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnacceptableTerminationTimeFaultType() : MinimumTime(), MaximumTime() { }
        virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1834 */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (869)
/* complex XML schema type 'wsnt:UnableToDestroySubscriptionFaultType': */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__UnableToDestroySubscriptionFaultType, default initialized and not managed by a soap context
        virtual wsnt__UnableToDestroySubscriptionFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__UnableToDestroySubscriptionFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__UnableToDestroySubscriptionFaultType() { }
        virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
        /// Friend allocator used by soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1836 */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (870)
/* complex XML schema type 'wsnt:PauseFailedFaultType': */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__PauseFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__PauseFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__PauseFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__PauseFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__PauseFailedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__PauseFailedFaultType() { }
        virtual ~wsnt__PauseFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__PauseFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1838 */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (871)
/* complex XML schema type 'wsnt:ResumeFailedFaultType': */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsnt__ResumeFailedFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsnt__ResumeFailedFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsnt__ResumeFailedFaultType, default initialized and not managed by a soap context
        virtual wsnt__ResumeFailedFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsnt__ResumeFailedFaultType); }
      public:
        /// Constructor with default initializations
        wsnt__ResumeFailedFaultType() { }
        virtual ~wsnt__ResumeFailedFaultType() { }
        /// Friend allocator used by soap_new_wsnt__ResumeFailedFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:40856 */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (2074)
/* complex XML schema type 'wstop:TopicNamespaceType-Topic': */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic {
      public:
        /// Optional element 'wstop:documentation' of XML schema type 'wstop:Documentation'
        wstop__Documentation *documentation;
        /// Optional element 'wstop:MessagePattern' of XML schema type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Sequence of elements 'wstop:Topic' of XML schema type 'wstop:TopicType' stored in dynamic array Topic of length __sizeTopic
        int __sizeTopic;
        wstop__TopicType **Topic;
        /// Required attribute 'name' of XML schema type 'xsd:NCName'
        char *name;
        /// Optional attribute 'messageTypes' of XML schema type 'xsd:QName'
        char **messageTypes;
        /// Optional attribute 'final' of XML schema type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
        /// Optional attribute 'parent' of XML schema type 'wstop:ConcreteTopicExpression'
        char *parent;
      public:
        /// Return unique type id SOAP_TYPE__wstop__TopicNamespaceType_Topic
        virtual long soap_type(void) const { return SOAP_TYPE__wstop__TopicNamespaceType_Topic; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _wstop__TopicNamespaceType_Topic, default initialized and not managed by a soap context
        virtual _wstop__TopicNamespaceType_Topic *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_wstop__TopicNamespaceType_Topic); }
      public:
        /// Constructor with default initializations
        _wstop__TopicNamespaceType_Topic() : documentation(), MessagePattern(), __sizeTopic(), Topic(), name(), messageTypes(), final_((bool)0), parent() { }
        virtual ~_wstop__TopicNamespaceType_Topic() { }
        /// Friend allocator used by soap_new__wstop__TopicNamespaceType_Topic(struct soap*, int)
        friend SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1892 */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (898)
/* complex XML schema type 'wstop:TopicNamespaceType': */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented {
      public:
        /// Sequence of elements 'wstop:Topic' of XML schema type 'wstop:TopicNamespaceType-Topic' stored in dynamic array Topic of length __sizeTopic
        int __sizeTopic;
        _wstop__TopicNamespaceType_Topic *Topic;
        /// Optional attribute 'name' of XML schema type 'xsd:NCName'
        char *name;
        /// Required attribute 'targetNamespace' of XML schema type 'xsd:anyURI'
        char *targetNamespace;
        /// Optional attribute 'final' of XML schema type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicNamespaceType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicNamespaceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicNamespaceType, default initialized and not managed by a soap context
        virtual wstop__TopicNamespaceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicNamespaceType); }
      public:
        /// Constructor with default initializations
        wstop__TopicNamespaceType() : __sizeTopic(), Topic(), name(), targetNamespace(), final_((bool)0) { }
        virtual ~wstop__TopicNamespaceType() { }
        /// Friend allocator used by soap_new_wstop__TopicNamespaceType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1894 */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (899)
/* Type wstop__TopicType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'wstop:TopicType': */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented {
      public:
        /// Optional element 'wstop:MessagePattern' of XML schema type 'wstop:QueryExpressionType'
        wstop__QueryExpressionType *MessagePattern;
        /// Sequence of elements 'wstop:Topic' of XML schema type 'wstop:TopicType' stored in dynamic array Topic of length __sizeTopic
        int __sizeTopic;
        wstop__TopicType **Topic;
        /// Required attribute 'name' of XML schema type 'xsd:NCName'
        char *name;
        /// Optional attribute 'messageTypes' of XML schema type 'xsd:QName'
        char **messageTypes;
        /// Optional attribute 'final' of XML schema type 'xsd:boolean'
        bool final_;	///< initialized with default value = (bool)0
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicType, default initialized and not managed by a soap context
        virtual wstop__TopicType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicType); }
      public:
        /// Constructor with default initializations
        wstop__TopicType() : MessagePattern(), __sizeTopic(), Topic(), name(), messageTypes(), final_((bool)0) { }
        virtual ~wstop__TopicType() { }
        /// Friend allocator used by soap_new_wstop__TopicType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1896 */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (900)
/* complex XML schema type 'wstop:TopicSetType': */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented {
      public:
        /// Return unique type id SOAP_TYPE_wstop__TopicSetType
        virtual long soap_type(void) const { return SOAP_TYPE_wstop__TopicSetType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wstop__TopicSetType, default initialized and not managed by a soap context
        virtual wstop__TopicSetType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wstop__TopicSetType); }
      public:
        /// Constructor with default initializations
        wstop__TopicSetType() { }
        virtual ~wstop__TopicSetType() { }
        /// Friend allocator used by soap_new_wstop__TopicSetType(struct soap*, int)
        friend SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2269 */
#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (1085)
/* complex XML schema type 'wsrfr:ResourceUnknownFaultType': */
class SOAP_CMAC wsrfr__ResourceUnknownFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsrfr__ResourceUnknownFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfr__ResourceUnknownFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfr__ResourceUnknownFaultType, default initialized and not managed by a soap context
        virtual wsrfr__ResourceUnknownFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfr__ResourceUnknownFaultType); }
      public:
        /// Constructor with default initializations
        wsrfr__ResourceUnknownFaultType() { }
        virtual ~wsrfr__ResourceUnknownFaultType() { }
        /// Friend allocator used by soap_new_wsrfr__ResourceUnknownFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfr__ResourceUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2271 */
#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (1086)
/* complex XML schema type 'wsrfr:ResourceUnavailableFaultType': */
class SOAP_CMAC wsrfr__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType {
      public:
        /// Return unique type id SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
        virtual long soap_type(void) const { return SOAP_TYPE_wsrfr__ResourceUnavailableFaultType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type wsrfr__ResourceUnavailableFaultType, default initialized and not managed by a soap context
        virtual wsrfr__ResourceUnavailableFaultType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(wsrfr__ResourceUnavailableFaultType); }
      public:
        /// Constructor with default initializations
        wsrfr__ResourceUnavailableFaultType() { }
        virtual ~wsrfr__ResourceUnavailableFaultType() { }
        /// Friend allocator used by soap_new_wsrfr__ResourceUnavailableFaultType(struct soap*, int)
        friend SOAP_FMAC1 wsrfr__ResourceUnavailableFaultType * SOAP_FMAC2 soap_instantiate_wsrfr__ResourceUnavailableFaultType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2329 */
#ifndef SOAP_TYPE_tr2__ReceiverConfiguration
#define SOAP_TYPE_tr2__ReceiverConfiguration (1115)
/* complex XML schema type 'tr2:ReceiverConfiguration': */
class SOAP_CMAC tr2__ReceiverConfiguration : public tt__ReceiverConfiguration {
      public:
        /// Optional attribute 'token' of XML schema type 'tt:ReferenceToken'
        char *token;
      public:
        /// Return unique type id SOAP_TYPE_tr2__ReceiverConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tr2__ReceiverConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tr2__ReceiverConfiguration, default initialized and not managed by a soap context
        virtual tr2__ReceiverConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tr2__ReceiverConfiguration); }
      public:
        /// Constructor with default initializations
        tr2__ReceiverConfiguration() : token() { }
        virtual ~tr2__ReceiverConfiguration() { }
        /// Friend allocator used by soap_new_tr2__ReceiverConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tr2__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_tr2__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1694 */
#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (799)
/* simple XML schema type 'tt:OSDReference': */
class SOAP_CMAC tt__OSDReference : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'tt:ReferenceToken' wrapped by this struct
        char *__item;
      public:
        /// Return unique type id SOAP_TYPE_tt__OSDReference
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OSDReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OSDReference, default initialized and not managed by a soap context
        virtual tt__OSDReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OSDReference); }
      public:
        /// Constructor with default initializations
        tt__OSDReference() : __item() { }
        virtual ~tt__OSDReference() { }
        /// Friend allocator used by soap_new_tt__OSDReference(struct soap*, int)
        friend SOAP_FMAC1 tt__OSDReference * SOAP_FMAC2 soap_instantiate_tt__OSDReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:283 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (127)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'wsnt:InvalidFilterFault' of XML schema type 'wsnt:InvalidFilterFaultType' */
        wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault;
        /** Optional element 'wsnt:InvalidMessageContentExpressionFault' of XML schema type 'wsnt:InvalidMessageContentExpressionFaultType' */
        wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault;
        /** Optional element 'wsnt:InvalidProducerPropertiesExpressionFault' of XML schema type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
        wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault;
        /** Optional element 'wsnt:InvalidTopicExpressionFault' of XML schema type 'wsnt:InvalidTopicExpressionFaultType' */
        wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault;
        /** Optional element 'wsnt:MultipleTopicsSpecifiedFault' of XML schema type 'wsnt:MultipleTopicsSpecifiedFaultType' */
        wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault;
        /** Optional element 'wsnt:NoCurrentMessageOnTopicFault' of XML schema type 'wsnt:NoCurrentMessageOnTopicFaultType' */
        wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault;
        /** Optional element 'wsnt:NotifyMessageNotSupportedFault' of XML schema type 'wsnt:NotifyMessageNotSupportedFaultType' */
        wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault;
        /** Optional element 'wsnt:PauseFailedFault' of XML schema type 'wsnt:PauseFailedFaultType' */
        wsnt__PauseFailedFaultType *wsnt__PauseFailedFault;
        /** Optional element 'tev:PullMessagesFaultResponse' of XML schema type 'tev:PullMessagesFaultResponse' */
        _tev__PullMessagesFaultResponse *tev__PullMessagesFaultResponse;
        /** Optional element 'wsrfr:ResourceUnknownFault' of XML schema type 'wsrfr:ResourceUnknownFaultType' */
        wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault;
        /** Optional element 'wsnt:ResumeFailedFault' of XML schema type 'wsnt:ResumeFailedFaultType' */
        wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault;
        /** Optional element 'wsnt:SubscribeCreationFailedFault' of XML schema type 'wsnt:SubscribeCreationFailedFaultType' */
        wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault;
        /** Optional element 'wsnt:TopicExpressionDialectUnknownFault' of XML schema type 'wsnt:TopicExpressionDialectUnknownFaultType' */
        wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault;
        /** Optional element 'wsnt:TopicNotSupportedFault' of XML schema type 'wsnt:TopicNotSupportedFaultType' */
        wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault;
        /** Optional element 'wsnt:UnableToCreatePullPointFault' of XML schema type 'wsnt:UnableToCreatePullPointFaultType' */
        wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault;
        /** Optional element 'wsnt:UnableToDestroyPullPointFault' of XML schema type 'wsnt:UnableToDestroyPullPointFaultType' */
        wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault;
        /** Optional element 'wsnt:UnableToDestroySubscriptionFault' of XML schema type 'wsnt:UnableToDestroySubscriptionFaultType' */
        wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault;
        /** Optional element 'wsnt:UnableToGetMessagesFault' of XML schema type 'wsnt:UnableToGetMessagesFaultType' */
        wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault;
        /** Optional element 'wsnt:UnacceptableInitialTerminationTimeFault' of XML schema type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
        wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault;
        /** Optional element 'wsnt:UnacceptableTerminationTimeFault' of XML schema type 'wsnt:UnacceptableTerminationTimeFaultType' */
        wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault;
        /** Optional element 'wsnt:UnrecognizedPolicyRequestFault' of XML schema type 'wsnt:UnrecognizedPolicyRequestFaultType' */
        wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault;
        /** Optional element 'wsnt:UnsupportedPolicyRequestFault' of XML schema type 'wsnt:UnsupportedPolicyRequestFaultType' */
        wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : wsnt__InvalidFilterFault(), wsnt__InvalidMessageContentExpressionFault(), wsnt__InvalidProducerPropertiesExpressionFault(), wsnt__InvalidTopicExpressionFault(), wsnt__MultipleTopicsSpecifiedFault(), wsnt__NoCurrentMessageOnTopicFault(), wsnt__NotifyMessageNotSupportedFault(), wsnt__PauseFailedFault(), tev__PullMessagesFaultResponse(), wsrfr__ResourceUnknownFault(), wsnt__ResumeFailedFault(), wsnt__SubscribeCreationFailedFault(), wsnt__TopicExpressionDialectUnknownFault(), wsnt__TopicNotSupportedFault(), wsnt__UnableToCreatePullPointFault(), wsnt__UnableToDestroyPullPointFault(), wsnt__UnableToDestroySubscriptionFault(), wsnt__UnableToGetMessagesFault(), wsnt__UnacceptableInitialTerminationTimeFault(), wsnt__UnacceptableTerminationTimeFault(), wsnt__UnrecognizedPolicyRequestFault(), wsnt__UnsupportedPolicyRequestFault(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:42658 */
#ifndef SOAP_TYPE___tdn__Hello
#define SOAP_TYPE___tdn__Hello (2104)
/* Wrapper: */
struct SOAP_CMAC __tdn__Hello {
      public:
        /** Required element 'tdn:Hello' of XML schema type 'wsdd:HelloType' */
        struct wsdd__HelloType tdn__Hello;
      public:
        /** Return unique type id SOAP_TYPE___tdn__Hello */
        long soap_type() const { return SOAP_TYPE___tdn__Hello; }
        /** Constructor with member initializations */
        __tdn__Hello() : tdn__Hello() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tdn__Hello * SOAP_FMAC2 soap_instantiate___tdn__Hello(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:42725 */
#ifndef SOAP_TYPE___tdn__Bye
#define SOAP_TYPE___tdn__Bye (2106)
/* Wrapper: */
struct SOAP_CMAC __tdn__Bye {
      public:
        /** Required element 'tdn:Bye' of XML schema type 'wsdd:ByeType' */
        struct wsdd__ByeType tdn__Bye;
      public:
        /** Return unique type id SOAP_TYPE___tdn__Bye */
        long soap_type() const { return SOAP_TYPE___tdn__Bye; }
        /** Constructor with member initializations */
        __tdn__Bye() : tdn__Bye() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tdn__Bye * SOAP_FMAC2 soap_instantiate___tdn__Bye(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:42792 */
#ifndef SOAP_TYPE___tdn__Probe
#define SOAP_TYPE___tdn__Probe (2109)
/* Wrapper: */
struct SOAP_CMAC __tdn__Probe {
      public:
        /** Required element 'tdn:Probe' of XML schema type 'wsdd:ProbeType' */
        struct wsdd__ProbeType tdn__Probe;
      public:
        /** Return unique type id SOAP_TYPE___tdn__Probe */
        long soap_type() const { return SOAP_TYPE___tdn__Probe; }
        /** Constructor with member initializations */
        __tdn__Probe() : tdn__Probe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tdn__Probe * SOAP_FMAC2 soap_instantiate___tdn__Probe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:42876 */
#ifndef SOAP_TYPE___tds__GetServices
#define SOAP_TYPE___tds__GetServices (2113)
/* Wrapper: */
struct SOAP_CMAC __tds__GetServices {
      public:
        /** Optional element 'tds:GetServices' of XML schema type 'tds:GetServices' */
        _tds__GetServices *tds__GetServices;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetServices */
        long soap_type() const { return SOAP_TYPE___tds__GetServices; }
        /** Constructor with member initializations */
        __tds__GetServices() : tds__GetServices() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetServices * SOAP_FMAC2 soap_instantiate___tds__GetServices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:42945 */
#ifndef SOAP_TYPE___tds__GetServiceCapabilities
#define SOAP_TYPE___tds__GetServiceCapabilities (2117)
/* Wrapper: */
struct SOAP_CMAC __tds__GetServiceCapabilities {
      public:
        /** Optional element 'tds:GetServiceCapabilities' of XML schema type 'tds:GetServiceCapabilities' */
        _tds__GetServiceCapabilities *tds__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tds__GetServiceCapabilities() : tds__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43013 */
#ifndef SOAP_TYPE___tds__GetDeviceInformation
#define SOAP_TYPE___tds__GetDeviceInformation (2121)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDeviceInformation {
      public:
        /** Optional element 'tds:GetDeviceInformation' of XML schema type 'tds:GetDeviceInformation' */
        _tds__GetDeviceInformation *tds__GetDeviceInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDeviceInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetDeviceInformation; }
        /** Constructor with member initializations */
        __tds__GetDeviceInformation() : tds__GetDeviceInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate___tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43095 */
#ifndef SOAP_TYPE___tds__SetSystemDateAndTime
#define SOAP_TYPE___tds__SetSystemDateAndTime (2125)
/* Wrapper: */
struct SOAP_CMAC __tds__SetSystemDateAndTime {
      public:
        /** Optional element 'tds:SetSystemDateAndTime' of XML schema type 'tds:SetSystemDateAndTime' */
        _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetSystemDateAndTime */
        long soap_type() const { return SOAP_TYPE___tds__SetSystemDateAndTime; }
        /** Constructor with member initializations */
        __tds__SetSystemDateAndTime() : tds__SetSystemDateAndTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43169 */
#ifndef SOAP_TYPE___tds__GetSystemDateAndTime
#define SOAP_TYPE___tds__GetSystemDateAndTime (2129)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemDateAndTime {
      public:
        /** Optional element 'tds:GetSystemDateAndTime' of XML schema type 'tds:GetSystemDateAndTime' */
        _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemDateAndTime */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemDateAndTime; }
        /** Constructor with member initializations */
        __tds__GetSystemDateAndTime() : tds__GetSystemDateAndTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43237 */
#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault
#define SOAP_TYPE___tds__SetSystemFactoryDefault (2133)
/* Wrapper: */
struct SOAP_CMAC __tds__SetSystemFactoryDefault {
      public:
        /** Optional element 'tds:SetSystemFactoryDefault' of XML schema type 'tds:SetSystemFactoryDefault' */
        _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetSystemFactoryDefault */
        long soap_type() const { return SOAP_TYPE___tds__SetSystemFactoryDefault; }
        /** Constructor with member initializations */
        __tds__SetSystemFactoryDefault() : tds__SetSystemFactoryDefault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate___tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43311 */
#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware
#define SOAP_TYPE___tds__UpgradeSystemFirmware (2137)
/* Wrapper: */
struct SOAP_CMAC __tds__UpgradeSystemFirmware {
      public:
        /** Optional element 'tds:UpgradeSystemFirmware' of XML schema type 'tds:UpgradeSystemFirmware' */
        _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;
      public:
        /** Return unique type id SOAP_TYPE___tds__UpgradeSystemFirmware */
        long soap_type() const { return SOAP_TYPE___tds__UpgradeSystemFirmware; }
        /** Constructor with member initializations */
        __tds__UpgradeSystemFirmware() : tds__UpgradeSystemFirmware() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate___tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43379 */
#ifndef SOAP_TYPE___tds__SystemReboot
#define SOAP_TYPE___tds__SystemReboot (2141)
/* Wrapper: */
struct SOAP_CMAC __tds__SystemReboot {
      public:
        /** Optional element 'tds:SystemReboot' of XML schema type 'tds:SystemReboot' */
        _tds__SystemReboot *tds__SystemReboot;
      public:
        /** Return unique type id SOAP_TYPE___tds__SystemReboot */
        long soap_type() const { return SOAP_TYPE___tds__SystemReboot; }
        /** Constructor with member initializations */
        __tds__SystemReboot() : tds__SystemReboot() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SystemReboot * SOAP_FMAC2 soap_instantiate___tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43455 */
#ifndef SOAP_TYPE___tds__RestoreSystem
#define SOAP_TYPE___tds__RestoreSystem (2145)
/* Wrapper: */
struct SOAP_CMAC __tds__RestoreSystem {
      public:
        /** Optional element 'tds:RestoreSystem' of XML schema type 'tds:RestoreSystem' */
        _tds__RestoreSystem *tds__RestoreSystem;
      public:
        /** Return unique type id SOAP_TYPE___tds__RestoreSystem */
        long soap_type() const { return SOAP_TYPE___tds__RestoreSystem; }
        /** Constructor with member initializations */
        __tds__RestoreSystem() : tds__RestoreSystem() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RestoreSystem * SOAP_FMAC2 soap_instantiate___tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43530 */
#ifndef SOAP_TYPE___tds__GetSystemBackup
#define SOAP_TYPE___tds__GetSystemBackup (2149)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemBackup {
      public:
        /** Optional element 'tds:GetSystemBackup' of XML schema type 'tds:GetSystemBackup' */
        _tds__GetSystemBackup *tds__GetSystemBackup;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemBackup */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemBackup; }
        /** Constructor with member initializations */
        __tds__GetSystemBackup() : tds__GetSystemBackup() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate___tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43599 */
#ifndef SOAP_TYPE___tds__GetSystemLog
#define SOAP_TYPE___tds__GetSystemLog (2153)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemLog {
      public:
        /** Optional element 'tds:GetSystemLog' of XML schema type 'tds:GetSystemLog' */
        _tds__GetSystemLog *tds__GetSystemLog;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemLog */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemLog; }
        /** Constructor with member initializations */
        __tds__GetSystemLog() : tds__GetSystemLog() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemLog * SOAP_FMAC2 soap_instantiate___tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43667 */
#ifndef SOAP_TYPE___tds__GetSystemSupportInformation
#define SOAP_TYPE___tds__GetSystemSupportInformation (2157)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemSupportInformation {
      public:
        /** Optional element 'tds:GetSystemSupportInformation' of XML schema type 'tds:GetSystemSupportInformation' */
        _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemSupportInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemSupportInformation; }
        /** Constructor with member initializations */
        __tds__GetSystemSupportInformation() : tds__GetSystemSupportInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate___tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43750 */
#ifndef SOAP_TYPE___tds__GetScopes
#define SOAP_TYPE___tds__GetScopes (2161)
/* Wrapper: */
struct SOAP_CMAC __tds__GetScopes {
      public:
        /** Optional element 'tds:GetScopes' of XML schema type 'tds:GetScopes' */
        _tds__GetScopes *tds__GetScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetScopes */
        long soap_type() const { return SOAP_TYPE___tds__GetScopes; }
        /** Constructor with member initializations */
        __tds__GetScopes() : tds__GetScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetScopes * SOAP_FMAC2 soap_instantiate___tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43826 */
#ifndef SOAP_TYPE___tds__SetScopes
#define SOAP_TYPE___tds__SetScopes (2165)
/* Wrapper: */
struct SOAP_CMAC __tds__SetScopes {
      public:
        /** Optional element 'tds:SetScopes' of XML schema type 'tds:SetScopes' */
        _tds__SetScopes *tds__SetScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetScopes */
        long soap_type() const { return SOAP_TYPE___tds__SetScopes; }
        /** Constructor with member initializations */
        __tds__SetScopes() : tds__SetScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetScopes * SOAP_FMAC2 soap_instantiate___tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43898 */
#ifndef SOAP_TYPE___tds__AddScopes
#define SOAP_TYPE___tds__AddScopes (2169)
/* Wrapper: */
struct SOAP_CMAC __tds__AddScopes {
      public:
        /** Optional element 'tds:AddScopes' of XML schema type 'tds:AddScopes' */
        _tds__AddScopes *tds__AddScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__AddScopes */
        long soap_type() const { return SOAP_TYPE___tds__AddScopes; }
        /** Constructor with member initializations */
        __tds__AddScopes() : tds__AddScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__AddScopes * SOAP_FMAC2 soap_instantiate___tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:43972 */
#ifndef SOAP_TYPE___tds__RemoveScopes
#define SOAP_TYPE___tds__RemoveScopes (2173)
/* Wrapper: */
struct SOAP_CMAC __tds__RemoveScopes {
      public:
        /** Optional element 'tds:RemoveScopes' of XML schema type 'tds:RemoveScopes' */
        _tds__RemoveScopes *tds__RemoveScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__RemoveScopes */
        long soap_type() const { return SOAP_TYPE___tds__RemoveScopes; }
        /** Constructor with member initializations */
        __tds__RemoveScopes() : tds__RemoveScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RemoveScopes * SOAP_FMAC2 soap_instantiate___tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44044 */
#ifndef SOAP_TYPE___tds__GetDiscoveryMode
#define SOAP_TYPE___tds__GetDiscoveryMode (2177)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDiscoveryMode {
      public:
        /** Optional element 'tds:GetDiscoveryMode' of XML schema type 'tds:GetDiscoveryMode' */
        _tds__GetDiscoveryMode *tds__GetDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__GetDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__GetDiscoveryMode() : tds__GetDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44117 */
#ifndef SOAP_TYPE___tds__SetDiscoveryMode
#define SOAP_TYPE___tds__SetDiscoveryMode (2181)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDiscoveryMode {
      public:
        /** Optional element 'tds:SetDiscoveryMode' of XML schema type 'tds:SetDiscoveryMode' */
        _tds__SetDiscoveryMode *tds__SetDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__SetDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__SetDiscoveryMode() : tds__SetDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44191 */
#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode (2185)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRemoteDiscoveryMode {
      public:
        /** Optional element 'tds:GetRemoteDiscoveryMode' of XML schema type 'tds:GetRemoteDiscoveryMode' */
        _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRemoteDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__GetRemoteDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__GetRemoteDiscoveryMode() : tds__GetRemoteDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44265 */
#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode (2189)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRemoteDiscoveryMode {
      public:
        /** Optional element 'tds:SetRemoteDiscoveryMode' of XML schema type 'tds:SetRemoteDiscoveryMode' */
        _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRemoteDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__SetRemoteDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__SetRemoteDiscoveryMode() : tds__SetRemoteDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44337 */
#ifndef SOAP_TYPE___tds__GetDPAddresses
#define SOAP_TYPE___tds__GetDPAddresses (2193)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDPAddresses {
      public:
        /** Optional element 'tds:GetDPAddresses' of XML schema type 'tds:GetDPAddresses' */
        _tds__GetDPAddresses *tds__GetDPAddresses;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDPAddresses */
        long soap_type() const { return SOAP_TYPE___tds__GetDPAddresses; }
        /** Constructor with member initializations */
        __tds__GetDPAddresses() : tds__GetDPAddresses() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44411 */
#ifndef SOAP_TYPE___tds__GetEndpointReference
#define SOAP_TYPE___tds__GetEndpointReference (2197)
/* Wrapper: */
struct SOAP_CMAC __tds__GetEndpointReference {
      public:
        /** Optional element 'tds:GetEndpointReference' of XML schema type 'tds:GetEndpointReference' */
        _tds__GetEndpointReference *tds__GetEndpointReference;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetEndpointReference */
        long soap_type() const { return SOAP_TYPE___tds__GetEndpointReference; }
        /** Constructor with member initializations */
        __tds__GetEndpointReference() : tds__GetEndpointReference() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate___tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44485 */
#ifndef SOAP_TYPE___tds__GetRemoteUser
#define SOAP_TYPE___tds__GetRemoteUser (2201)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRemoteUser {
      public:
        /** Optional element 'tds:GetRemoteUser' of XML schema type 'tds:GetRemoteUser' */
        _tds__GetRemoteUser *tds__GetRemoteUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRemoteUser */
        long soap_type() const { return SOAP_TYPE___tds__GetRemoteUser; }
        /** Constructor with member initializations */
        __tds__GetRemoteUser() : tds__GetRemoteUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44564 */
#ifndef SOAP_TYPE___tds__SetRemoteUser
#define SOAP_TYPE___tds__SetRemoteUser (2205)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRemoteUser {
      public:
        /** Optional element 'tds:SetRemoteUser' of XML schema type 'tds:SetRemoteUser' */
        _tds__SetRemoteUser *tds__SetRemoteUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRemoteUser */
        long soap_type() const { return SOAP_TYPE___tds__SetRemoteUser; }
        /** Constructor with member initializations */
        __tds__SetRemoteUser() : tds__SetRemoteUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44636 */
#ifndef SOAP_TYPE___tds__GetUsers
#define SOAP_TYPE___tds__GetUsers (2209)
/* Wrapper: */
struct SOAP_CMAC __tds__GetUsers {
      public:
        /** Optional element 'tds:GetUsers' of XML schema type 'tds:GetUsers' */
        _tds__GetUsers *tds__GetUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetUsers */
        long soap_type() const { return SOAP_TYPE___tds__GetUsers; }
        /** Constructor with member initializations */
        __tds__GetUsers() : tds__GetUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetUsers * SOAP_FMAC2 soap_instantiate___tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44716 */
#ifndef SOAP_TYPE___tds__CreateUsers
#define SOAP_TYPE___tds__CreateUsers (2213)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateUsers {
      public:
        /** Optional element 'tds:CreateUsers' of XML schema type 'tds:CreateUsers' */
        _tds__CreateUsers *tds__CreateUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateUsers */
        long soap_type() const { return SOAP_TYPE___tds__CreateUsers; }
        /** Constructor with member initializations */
        __tds__CreateUsers() : tds__CreateUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateUsers * SOAP_FMAC2 soap_instantiate___tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44791 */
#ifndef SOAP_TYPE___tds__DeleteUsers
#define SOAP_TYPE___tds__DeleteUsers (2217)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteUsers {
      public:
        /** Optional element 'tds:DeleteUsers' of XML schema type 'tds:DeleteUsers' */
        _tds__DeleteUsers *tds__DeleteUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteUsers */
        long soap_type() const { return SOAP_TYPE___tds__DeleteUsers; }
        /** Constructor with member initializations */
        __tds__DeleteUsers() : tds__DeleteUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteUsers * SOAP_FMAC2 soap_instantiate___tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44864 */
#ifndef SOAP_TYPE___tds__SetUser
#define SOAP_TYPE___tds__SetUser (2221)
/* Wrapper: */
struct SOAP_CMAC __tds__SetUser {
      public:
        /** Optional element 'tds:SetUser' of XML schema type 'tds:SetUser' */
        _tds__SetUser *tds__SetUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetUser */
        long soap_type() const { return SOAP_TYPE___tds__SetUser; }
        /** Constructor with member initializations */
        __tds__SetUser() : tds__SetUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetUser * SOAP_FMAC2 soap_instantiate___tds__SetUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:44933 */
#ifndef SOAP_TYPE___tds__GetWsdlUrl
#define SOAP_TYPE___tds__GetWsdlUrl (2225)
/* Wrapper: */
struct SOAP_CMAC __tds__GetWsdlUrl {
      public:
        /** Optional element 'tds:GetWsdlUrl' of XML schema type 'tds:GetWsdlUrl' */
        _tds__GetWsdlUrl *tds__GetWsdlUrl;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetWsdlUrl */
        long soap_type() const { return SOAP_TYPE___tds__GetWsdlUrl; }
        /** Constructor with member initializations */
        __tds__GetWsdlUrl() : tds__GetWsdlUrl() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate___tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45002 */
#ifndef SOAP_TYPE___tds__GetPasswordComplexityOptions
#define SOAP_TYPE___tds__GetPasswordComplexityOptions (2229)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordComplexityOptions {
      public:
        /** Optional element 'tds:GetPasswordComplexityOptions' of XML schema type 'tds:GetPasswordComplexityOptions' */
        _tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordComplexityOptions */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordComplexityOptions; }
        /** Constructor with member initializations */
        __tds__GetPasswordComplexityOptions() : tds__GetPasswordComplexityOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45070 */
#ifndef SOAP_TYPE___tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE___tds__GetPasswordComplexityConfiguration (2233)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordComplexityConfiguration {
      public:
        /** Optional element 'tds:GetPasswordComplexityConfiguration' of XML schema type 'tds:GetPasswordComplexityConfiguration' */
        _tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordComplexityConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordComplexityConfiguration; }
        /** Constructor with member initializations */
        __tds__GetPasswordComplexityConfiguration() : tds__GetPasswordComplexityConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45138 */
#ifndef SOAP_TYPE___tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE___tds__SetPasswordComplexityConfiguration (2237)
/* Wrapper: */
struct SOAP_CMAC __tds__SetPasswordComplexityConfiguration {
      public:
        /** Optional element 'tds:SetPasswordComplexityConfiguration' of XML schema type 'tds:SetPasswordComplexityConfiguration' */
        _tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetPasswordComplexityConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetPasswordComplexityConfiguration; }
        /** Constructor with member initializations */
        __tds__SetPasswordComplexityConfiguration() : tds__SetPasswordComplexityConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45206 */
#ifndef SOAP_TYPE___tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE___tds__GetPasswordHistoryConfiguration (2241)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordHistoryConfiguration {
      public:
        /** Optional element 'tds:GetPasswordHistoryConfiguration' of XML schema type 'tds:GetPasswordHistoryConfiguration' */
        _tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordHistoryConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordHistoryConfiguration; }
        /** Constructor with member initializations */
        __tds__GetPasswordHistoryConfiguration() : tds__GetPasswordHistoryConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45274 */
#ifndef SOAP_TYPE___tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE___tds__SetPasswordHistoryConfiguration (2245)
/* Wrapper: */
struct SOAP_CMAC __tds__SetPasswordHistoryConfiguration {
      public:
        /** Optional element 'tds:SetPasswordHistoryConfiguration' of XML schema type 'tds:SetPasswordHistoryConfiguration' */
        _tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetPasswordHistoryConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetPasswordHistoryConfiguration; }
        /** Constructor with member initializations */
        __tds__SetPasswordHistoryConfiguration() : tds__SetPasswordHistoryConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45343 */
#ifndef SOAP_TYPE___tds__GetAuthFailureWarningOptions
#define SOAP_TYPE___tds__GetAuthFailureWarningOptions (2249)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAuthFailureWarningOptions {
      public:
        /** Optional element 'tds:GetAuthFailureWarningOptions' of XML schema type 'tds:GetAuthFailureWarningOptions' */
        _tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAuthFailureWarningOptions */
        long soap_type() const { return SOAP_TYPE___tds__GetAuthFailureWarningOptions; }
        /** Constructor with member initializations */
        __tds__GetAuthFailureWarningOptions() : tds__GetAuthFailureWarningOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45412 */
#ifndef SOAP_TYPE___tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE___tds__GetAuthFailureWarningConfiguration (2253)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAuthFailureWarningConfiguration {
      public:
        /** Optional element 'tds:GetAuthFailureWarningConfiguration' of XML schema type 'tds:GetAuthFailureWarningConfiguration' */
        _tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAuthFailureWarningConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetAuthFailureWarningConfiguration; }
        /** Constructor with member initializations */
        __tds__GetAuthFailureWarningConfiguration() : tds__GetAuthFailureWarningConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45480 */
#ifndef SOAP_TYPE___tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE___tds__SetAuthFailureWarningConfiguration (2257)
/* Wrapper: */
struct SOAP_CMAC __tds__SetAuthFailureWarningConfiguration {
      public:
        /** Optional element 'tds:SetAuthFailureWarningConfiguration' of XML schema type 'tds:SetAuthFailureWarningConfiguration' */
        _tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetAuthFailureWarningConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetAuthFailureWarningConfiguration; }
        /** Constructor with member initializations */
        __tds__SetAuthFailureWarningConfiguration() : tds__SetAuthFailureWarningConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45550 */
#ifndef SOAP_TYPE___tds__GetCapabilities
#define SOAP_TYPE___tds__GetCapabilities (2261)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCapabilities {
      public:
        /** Optional element 'tds:GetCapabilities' of XML schema type 'tds:GetCapabilities' */
        _tds__GetCapabilities *tds__GetCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCapabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetCapabilities; }
        /** Constructor with member initializations */
        __tds__GetCapabilities() : tds__GetCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45623 */
#ifndef SOAP_TYPE___tds__SetDPAddresses
#define SOAP_TYPE___tds__SetDPAddresses (2265)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDPAddresses {
      public:
        /** Optional element 'tds:SetDPAddresses' of XML schema type 'tds:SetDPAddresses' */
        _tds__SetDPAddresses *tds__SetDPAddresses;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDPAddresses */
        long soap_type() const { return SOAP_TYPE___tds__SetDPAddresses; }
        /** Constructor with member initializations */
        __tds__SetDPAddresses() : tds__SetDPAddresses() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45694 */
#ifndef SOAP_TYPE___tds__GetHostname
#define SOAP_TYPE___tds__GetHostname (2269)
/* Wrapper: */
struct SOAP_CMAC __tds__GetHostname {
      public:
        /** Optional element 'tds:GetHostname' of XML schema type 'tds:GetHostname' */
        _tds__GetHostname *tds__GetHostname;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetHostname */
        long soap_type() const { return SOAP_TYPE___tds__GetHostname; }
        /** Constructor with member initializations */
        __tds__GetHostname() : tds__GetHostname() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetHostname * SOAP_FMAC2 soap_instantiate___tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45769 */
#ifndef SOAP_TYPE___tds__SetHostname
#define SOAP_TYPE___tds__SetHostname (2273)
/* Wrapper: */
struct SOAP_CMAC __tds__SetHostname {
      public:
        /** Optional element 'tds:SetHostname' of XML schema type 'tds:SetHostname' */
        _tds__SetHostname *tds__SetHostname;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetHostname */
        long soap_type() const { return SOAP_TYPE___tds__SetHostname; }
        /** Constructor with member initializations */
        __tds__SetHostname() : tds__SetHostname() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetHostname * SOAP_FMAC2 soap_instantiate___tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45837 */
#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP
#define SOAP_TYPE___tds__SetHostnameFromDHCP (2277)
/* Wrapper: */
struct SOAP_CMAC __tds__SetHostnameFromDHCP {
      public:
        /** Optional element 'tds:SetHostnameFromDHCP' of XML schema type 'tds:SetHostnameFromDHCP' */
        _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetHostnameFromDHCP */
        long soap_type() const { return SOAP_TYPE___tds__SetHostnameFromDHCP; }
        /** Constructor with member initializations */
        __tds__SetHostnameFromDHCP() : tds__SetHostnameFromDHCP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate___tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45907 */
#ifndef SOAP_TYPE___tds__GetDNS
#define SOAP_TYPE___tds__GetDNS (2281)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDNS {
      public:
        /** Optional element 'tds:GetDNS' of XML schema type 'tds:GetDNS' */
        _tds__GetDNS *tds__GetDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDNS */
        long soap_type() const { return SOAP_TYPE___tds__GetDNS; }
        /** Constructor with member initializations */
        __tds__GetDNS() : tds__GetDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDNS * SOAP_FMAC2 soap_instantiate___tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:45977 */
#ifndef SOAP_TYPE___tds__SetDNS
#define SOAP_TYPE___tds__SetDNS (2285)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDNS {
      public:
        /** Optional element 'tds:SetDNS' of XML schema type 'tds:SetDNS' */
        _tds__SetDNS *tds__SetDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDNS */
        long soap_type() const { return SOAP_TYPE___tds__SetDNS; }
        /** Constructor with member initializations */
        __tds__SetDNS() : tds__SetDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDNS * SOAP_FMAC2 soap_instantiate___tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46048 */
#ifndef SOAP_TYPE___tds__GetNTP
#define SOAP_TYPE___tds__GetNTP (2289)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNTP {
      public:
        /** Optional element 'tds:GetNTP' of XML schema type 'tds:GetNTP' */
        _tds__GetNTP *tds__GetNTP;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNTP */
        long soap_type() const { return SOAP_TYPE___tds__GetNTP; }
        /** Constructor with member initializations */
        __tds__GetNTP() : tds__GetNTP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNTP * SOAP_FMAC2 soap_instantiate___tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46126 */
#ifndef SOAP_TYPE___tds__SetNTP
#define SOAP_TYPE___tds__SetNTP (2293)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNTP {
      public:
        /** Optional element 'tds:SetNTP' of XML schema type 'tds:SetNTP' */
        _tds__SetNTP *tds__SetNTP;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNTP */
        long soap_type() const { return SOAP_TYPE___tds__SetNTP; }
        /** Constructor with member initializations */
        __tds__SetNTP() : tds__SetNTP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNTP * SOAP_FMAC2 soap_instantiate___tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46198 */
#ifndef SOAP_TYPE___tds__GetDynamicDNS
#define SOAP_TYPE___tds__GetDynamicDNS (2297)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDynamicDNS {
      public:
        /** Optional element 'tds:GetDynamicDNS' of XML schema type 'tds:GetDynamicDNS' */
        _tds__GetDynamicDNS *tds__GetDynamicDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDynamicDNS */
        long soap_type() const { return SOAP_TYPE___tds__GetDynamicDNS; }
        /** Constructor with member initializations */
        __tds__GetDynamicDNS() : tds__GetDynamicDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46270 */
#ifndef SOAP_TYPE___tds__SetDynamicDNS
#define SOAP_TYPE___tds__SetDynamicDNS (2301)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDynamicDNS {
      public:
        /** Optional element 'tds:SetDynamicDNS' of XML schema type 'tds:SetDynamicDNS' */
        _tds__SetDynamicDNS *tds__SetDynamicDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDynamicDNS */
        long soap_type() const { return SOAP_TYPE___tds__SetDynamicDNS; }
        /** Constructor with member initializations */
        __tds__SetDynamicDNS() : tds__SetDynamicDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46342 */
#ifndef SOAP_TYPE___tds__GetNetworkInterfaces
#define SOAP_TYPE___tds__GetNetworkInterfaces (2305)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkInterfaces {
      public:
        /** Optional element 'tds:GetNetworkInterfaces' of XML schema type 'tds:GetNetworkInterfaces' */
        _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkInterfaces */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkInterfaces; }
        /** Constructor with member initializations */
        __tds__GetNetworkInterfaces() : tds__GetNetworkInterfaces() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46419 */
#ifndef SOAP_TYPE___tds__SetNetworkInterfaces
#define SOAP_TYPE___tds__SetNetworkInterfaces (2309)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkInterfaces {
      public:
        /** Optional element 'tds:SetNetworkInterfaces' of XML schema type 'tds:SetNetworkInterfaces' */
        _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkInterfaces */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkInterfaces; }
        /** Constructor with member initializations */
        __tds__SetNetworkInterfaces() : tds__SetNetworkInterfaces() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46490 */
#ifndef SOAP_TYPE___tds__GetNetworkProtocols
#define SOAP_TYPE___tds__GetNetworkProtocols (2313)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkProtocols {
      public:
        /** Optional element 'tds:GetNetworkProtocols' of XML schema type 'tds:GetNetworkProtocols' */
        _tds__GetNetworkProtocols *tds__GetNetworkProtocols;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkProtocols */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkProtocols; }
        /** Constructor with member initializations */
        __tds__GetNetworkProtocols() : tds__GetNetworkProtocols() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46561 */
#ifndef SOAP_TYPE___tds__SetNetworkProtocols
#define SOAP_TYPE___tds__SetNetworkProtocols (2317)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkProtocols {
      public:
        /** Optional element 'tds:SetNetworkProtocols' of XML schema type 'tds:SetNetworkProtocols' */
        _tds__SetNetworkProtocols *tds__SetNetworkProtocols;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkProtocols */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkProtocols; }
        /** Constructor with member initializations */
        __tds__SetNetworkProtocols() : tds__SetNetworkProtocols() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46632 */
#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway
#define SOAP_TYPE___tds__GetNetworkDefaultGateway (2321)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkDefaultGateway {
      public:
        /** Optional element 'tds:GetNetworkDefaultGateway' of XML schema type 'tds:GetNetworkDefaultGateway' */
        _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkDefaultGateway */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkDefaultGateway; }
        /** Constructor with member initializations */
        __tds__GetNetworkDefaultGateway() : tds__GetNetworkDefaultGateway() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46702 */
#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway
#define SOAP_TYPE___tds__SetNetworkDefaultGateway (2325)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkDefaultGateway {
      public:
        /** Optional element 'tds:SetNetworkDefaultGateway' of XML schema type 'tds:SetNetworkDefaultGateway' */
        _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkDefaultGateway */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkDefaultGateway; }
        /** Constructor with member initializations */
        __tds__SetNetworkDefaultGateway() : tds__SetNetworkDefaultGateway() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46777 */
#ifndef SOAP_TYPE___tds__GetZeroConfiguration
#define SOAP_TYPE___tds__GetZeroConfiguration (2329)
/* Wrapper: */
struct SOAP_CMAC __tds__GetZeroConfiguration {
      public:
        /** Optional element 'tds:GetZeroConfiguration' of XML schema type 'tds:GetZeroConfiguration' */
        _tds__GetZeroConfiguration *tds__GetZeroConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetZeroConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetZeroConfiguration; }
        /** Constructor with member initializations */
        __tds__GetZeroConfiguration() : tds__GetZeroConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46846 */
#ifndef SOAP_TYPE___tds__SetZeroConfiguration
#define SOAP_TYPE___tds__SetZeroConfiguration (2333)
/* Wrapper: */
struct SOAP_CMAC __tds__SetZeroConfiguration {
      public:
        /** Optional element 'tds:SetZeroConfiguration' of XML schema type 'tds:SetZeroConfiguration' */
        _tds__SetZeroConfiguration *tds__SetZeroConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetZeroConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetZeroConfiguration; }
        /** Constructor with member initializations */
        __tds__SetZeroConfiguration() : tds__SetZeroConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46918 */
#ifndef SOAP_TYPE___tds__GetIPAddressFilter
#define SOAP_TYPE___tds__GetIPAddressFilter (2337)
/* Wrapper: */
struct SOAP_CMAC __tds__GetIPAddressFilter {
      public:
        /** Optional element 'tds:GetIPAddressFilter' of XML schema type 'tds:GetIPAddressFilter' */
        _tds__GetIPAddressFilter *tds__GetIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__GetIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__GetIPAddressFilter() : tds__GetIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:46992 */
#ifndef SOAP_TYPE___tds__SetIPAddressFilter
#define SOAP_TYPE___tds__SetIPAddressFilter (2341)
/* Wrapper: */
struct SOAP_CMAC __tds__SetIPAddressFilter {
      public:
        /** Optional element 'tds:SetIPAddressFilter' of XML schema type 'tds:SetIPAddressFilter' */
        _tds__SetIPAddressFilter *tds__SetIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__SetIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__SetIPAddressFilter() : tds__SetIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47065 */
#ifndef SOAP_TYPE___tds__AddIPAddressFilter
#define SOAP_TYPE___tds__AddIPAddressFilter (2345)
/* Wrapper: */
struct SOAP_CMAC __tds__AddIPAddressFilter {
      public:
        /** Optional element 'tds:AddIPAddressFilter' of XML schema type 'tds:AddIPAddressFilter' */
        _tds__AddIPAddressFilter *tds__AddIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__AddIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__AddIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__AddIPAddressFilter() : tds__AddIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47138 */
#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter
#define SOAP_TYPE___tds__RemoveIPAddressFilter (2349)
/* Wrapper: */
struct SOAP_CMAC __tds__RemoveIPAddressFilter {
      public:
        /** Optional element 'tds:RemoveIPAddressFilter' of XML schema type 'tds:RemoveIPAddressFilter' */
        _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__RemoveIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__RemoveIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__RemoveIPAddressFilter() : tds__RemoveIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47220 */
#ifndef SOAP_TYPE___tds__GetAccessPolicy
#define SOAP_TYPE___tds__GetAccessPolicy (2353)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAccessPolicy {
      public:
        /** Optional element 'tds:GetAccessPolicy' of XML schema type 'tds:GetAccessPolicy' */
        _tds__GetAccessPolicy *tds__GetAccessPolicy;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAccessPolicy */
        long soap_type() const { return SOAP_TYPE___tds__GetAccessPolicy; }
        /** Constructor with member initializations */
        __tds__GetAccessPolicy() : tds__GetAccessPolicy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47293 */
#ifndef SOAP_TYPE___tds__SetAccessPolicy
#define SOAP_TYPE___tds__SetAccessPolicy (2357)
/* Wrapper: */
struct SOAP_CMAC __tds__SetAccessPolicy {
      public:
        /** Optional element 'tds:SetAccessPolicy' of XML schema type 'tds:SetAccessPolicy' */
        _tds__SetAccessPolicy *tds__SetAccessPolicy;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetAccessPolicy */
        long soap_type() const { return SOAP_TYPE___tds__SetAccessPolicy; }
        /** Constructor with member initializations */
        __tds__SetAccessPolicy() : tds__SetAccessPolicy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47360 */
#ifndef SOAP_TYPE___tds__CreateCertificate
#define SOAP_TYPE___tds__CreateCertificate (2361)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateCertificate {
      public:
        /** Optional element 'tds:CreateCertificate' of XML schema type 'tds:CreateCertificate' */
        _tds__CreateCertificate *tds__CreateCertificate;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateCertificate */
        long soap_type() const { return SOAP_TYPE___tds__CreateCertificate; }
        /** Constructor with member initializations */
        __tds__CreateCertificate() : tds__CreateCertificate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateCertificate * SOAP_FMAC2 soap_instantiate___tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47427 */
#ifndef SOAP_TYPE___tds__GetCertificates
#define SOAP_TYPE___tds__GetCertificates (2365)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificates {
      public:
        /** Optional element 'tds:GetCertificates' of XML schema type 'tds:GetCertificates' */
        _tds__GetCertificates *tds__GetCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificates */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificates; }
        /** Constructor with member initializations */
        __tds__GetCertificates() : tds__GetCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificates * SOAP_FMAC2 soap_instantiate___tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47494 */
#ifndef SOAP_TYPE___tds__GetCertificatesStatus
#define SOAP_TYPE___tds__GetCertificatesStatus (2369)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificatesStatus {
      public:
        /** Optional element 'tds:GetCertificatesStatus' of XML schema type 'tds:GetCertificatesStatus' */
        _tds__GetCertificatesStatus *tds__GetCertificatesStatus;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificatesStatus */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificatesStatus; }
        /** Constructor with member initializations */
        __tds__GetCertificatesStatus() : tds__GetCertificatesStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47561 */
#ifndef SOAP_TYPE___tds__SetCertificatesStatus
#define SOAP_TYPE___tds__SetCertificatesStatus (2373)
/* Wrapper: */
struct SOAP_CMAC __tds__SetCertificatesStatus {
      public:
        /** Optional element 'tds:SetCertificatesStatus' of XML schema type 'tds:SetCertificatesStatus' */
        _tds__SetCertificatesStatus *tds__SetCertificatesStatus;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetCertificatesStatus */
        long soap_type() const { return SOAP_TYPE___tds__SetCertificatesStatus; }
        /** Constructor with member initializations */
        __tds__SetCertificatesStatus() : tds__SetCertificatesStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47628 */
#ifndef SOAP_TYPE___tds__DeleteCertificates
#define SOAP_TYPE___tds__DeleteCertificates (2377)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteCertificates {
      public:
        /** Optional element 'tds:DeleteCertificates' of XML schema type 'tds:DeleteCertificates' */
        _tds__DeleteCertificates *tds__DeleteCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteCertificates */
        long soap_type() const { return SOAP_TYPE___tds__DeleteCertificates; }
        /** Constructor with member initializations */
        __tds__DeleteCertificates() : tds__DeleteCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate___tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47695 */
#ifndef SOAP_TYPE___tds__GetPkcs10Request
#define SOAP_TYPE___tds__GetPkcs10Request (2381)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPkcs10Request {
      public:
        /** Optional element 'tds:GetPkcs10Request' of XML schema type 'tds:GetPkcs10Request' */
        _tds__GetPkcs10Request *tds__GetPkcs10Request;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPkcs10Request */
        long soap_type() const { return SOAP_TYPE___tds__GetPkcs10Request; }
        /** Constructor with member initializations */
        __tds__GetPkcs10Request() : tds__GetPkcs10Request() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate___tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47762 */
#ifndef SOAP_TYPE___tds__LoadCertificates
#define SOAP_TYPE___tds__LoadCertificates (2385)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCertificates {
      public:
        /** Optional element 'tds:LoadCertificates' of XML schema type 'tds:LoadCertificates' */
        _tds__LoadCertificates *tds__LoadCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCertificates */
        long soap_type() const { return SOAP_TYPE___tds__LoadCertificates; }
        /** Constructor with member initializations */
        __tds__LoadCertificates() : tds__LoadCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47829 */
#ifndef SOAP_TYPE___tds__GetClientCertificateMode
#define SOAP_TYPE___tds__GetClientCertificateMode (2389)
/* Wrapper: */
struct SOAP_CMAC __tds__GetClientCertificateMode {
      public:
        /** Optional element 'tds:GetClientCertificateMode' of XML schema type 'tds:GetClientCertificateMode' */
        _tds__GetClientCertificateMode *tds__GetClientCertificateMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetClientCertificateMode */
        long soap_type() const { return SOAP_TYPE___tds__GetClientCertificateMode; }
        /** Constructor with member initializations */
        __tds__GetClientCertificateMode() : tds__GetClientCertificateMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47896 */
#ifndef SOAP_TYPE___tds__SetClientCertificateMode
#define SOAP_TYPE___tds__SetClientCertificateMode (2393)
/* Wrapper: */
struct SOAP_CMAC __tds__SetClientCertificateMode {
      public:
        /** Optional element 'tds:SetClientCertificateMode' of XML schema type 'tds:SetClientCertificateMode' */
        _tds__SetClientCertificateMode *tds__SetClientCertificateMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetClientCertificateMode */
        long soap_type() const { return SOAP_TYPE___tds__SetClientCertificateMode; }
        /** Constructor with member initializations */
        __tds__SetClientCertificateMode() : tds__SetClientCertificateMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:47966 */
#ifndef SOAP_TYPE___tds__GetRelayOutputs
#define SOAP_TYPE___tds__GetRelayOutputs (2397)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRelayOutputs {
      public:
        /** Optional element 'tds:GetRelayOutputs' of XML schema type 'tds:GetRelayOutputs' */
        _tds__GetRelayOutputs *tds__GetRelayOutputs;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRelayOutputs */
        long soap_type() const { return SOAP_TYPE___tds__GetRelayOutputs; }
        /** Constructor with member initializations */
        __tds__GetRelayOutputs() : tds__GetRelayOutputs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate___tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48036 */
#ifndef SOAP_TYPE___tds__SetRelayOutputSettings
#define SOAP_TYPE___tds__SetRelayOutputSettings (2401)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRelayOutputSettings {
      public:
        /** Optional element 'tds:SetRelayOutputSettings' of XML schema type 'tds:SetRelayOutputSettings' */
        _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRelayOutputSettings */
        long soap_type() const { return SOAP_TYPE___tds__SetRelayOutputSettings; }
        /** Constructor with member initializations */
        __tds__SetRelayOutputSettings() : tds__SetRelayOutputSettings() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48106 */
#ifndef SOAP_TYPE___tds__SetRelayOutputState
#define SOAP_TYPE___tds__SetRelayOutputState (2405)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRelayOutputState {
      public:
        /** Optional element 'tds:SetRelayOutputState' of XML schema type 'tds:SetRelayOutputState' */
        _tds__SetRelayOutputState *tds__SetRelayOutputState;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRelayOutputState */
        long soap_type() const { return SOAP_TYPE___tds__SetRelayOutputState; }
        /** Constructor with member initializations */
        __tds__SetRelayOutputState() : tds__SetRelayOutputState() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48205 */
#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand
#define SOAP_TYPE___tds__SendAuxiliaryCommand (2409)
/* Wrapper: */
struct SOAP_CMAC __tds__SendAuxiliaryCommand {
      public:
        /** Optional element 'tds:SendAuxiliaryCommand' of XML schema type 'tds:SendAuxiliaryCommand' */
        _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;
      public:
        /** Return unique type id SOAP_TYPE___tds__SendAuxiliaryCommand */
        long soap_type() const { return SOAP_TYPE___tds__SendAuxiliaryCommand; }
        /** Constructor with member initializations */
        __tds__SendAuxiliaryCommand() : tds__SendAuxiliaryCommand() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48272 */
#ifndef SOAP_TYPE___tds__GetCACertificates
#define SOAP_TYPE___tds__GetCACertificates (2413)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCACertificates {
      public:
        /** Optional element 'tds:GetCACertificates' of XML schema type 'tds:GetCACertificates' */
        _tds__GetCACertificates *tds__GetCACertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCACertificates */
        long soap_type() const { return SOAP_TYPE___tds__GetCACertificates; }
        /** Constructor with member initializations */
        __tds__GetCACertificates() : tds__GetCACertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCACertificates * SOAP_FMAC2 soap_instantiate___tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48339 */
#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey (2417)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCertificateWithPrivateKey {
      public:
        /** Optional element 'tds:LoadCertificateWithPrivateKey' of XML schema type 'tds:LoadCertificateWithPrivateKey' */
        _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCertificateWithPrivateKey */
        long soap_type() const { return SOAP_TYPE___tds__LoadCertificateWithPrivateKey; }
        /** Constructor with member initializations */
        __tds__LoadCertificateWithPrivateKey() : tds__LoadCertificateWithPrivateKey() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate___tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48406 */
#ifndef SOAP_TYPE___tds__GetCertificateInformation
#define SOAP_TYPE___tds__GetCertificateInformation (2421)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificateInformation {
      public:
        /** Optional element 'tds:GetCertificateInformation' of XML schema type 'tds:GetCertificateInformation' */
        _tds__GetCertificateInformation *tds__GetCertificateInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificateInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificateInformation; }
        /** Constructor with member initializations */
        __tds__GetCertificateInformation() : tds__GetCertificateInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate___tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48473 */
#ifndef SOAP_TYPE___tds__LoadCACertificates
#define SOAP_TYPE___tds__LoadCACertificates (2425)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCACertificates {
      public:
        /** Optional element 'tds:LoadCACertificates' of XML schema type 'tds:LoadCACertificates' */
        _tds__LoadCACertificates *tds__LoadCACertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCACertificates */
        long soap_type() const { return SOAP_TYPE___tds__LoadCACertificates; }
        /** Constructor with member initializations */
        __tds__LoadCACertificates() : tds__LoadCACertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48540 */
#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration
#define SOAP_TYPE___tds__CreateDot1XConfiguration (2429)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateDot1XConfiguration {
      public:
        /** Optional element 'tds:CreateDot1XConfiguration' of XML schema type 'tds:CreateDot1XConfiguration' */
        _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__CreateDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__CreateDot1XConfiguration() : tds__CreateDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48607 */
#ifndef SOAP_TYPE___tds__SetDot1XConfiguration
#define SOAP_TYPE___tds__SetDot1XConfiguration (2433)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDot1XConfiguration {
      public:
        /** Optional element 'tds:SetDot1XConfiguration' of XML schema type 'tds:SetDot1XConfiguration' */
        _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__SetDot1XConfiguration() : tds__SetDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48674 */
#ifndef SOAP_TYPE___tds__GetDot1XConfiguration
#define SOAP_TYPE___tds__GetDot1XConfiguration (2437)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot1XConfiguration {
      public:
        /** Optional element 'tds:GetDot1XConfiguration' of XML schema type 'tds:GetDot1XConfiguration' */
        _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__GetDot1XConfiguration() : tds__GetDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48741 */
#ifndef SOAP_TYPE___tds__GetDot1XConfigurations
#define SOAP_TYPE___tds__GetDot1XConfigurations (2441)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot1XConfigurations {
      public:
        /** Optional element 'tds:GetDot1XConfigurations' of XML schema type 'tds:GetDot1XConfigurations' */
        _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot1XConfigurations */
        long soap_type() const { return SOAP_TYPE___tds__GetDot1XConfigurations; }
        /** Constructor with member initializations */
        __tds__GetDot1XConfigurations() : tds__GetDot1XConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48808 */
#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration
#define SOAP_TYPE___tds__DeleteDot1XConfiguration (2445)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteDot1XConfiguration {
      public:
        /** Optional element 'tds:DeleteDot1XConfiguration' of XML schema type 'tds:DeleteDot1XConfiguration' */
        _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__DeleteDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__DeleteDot1XConfiguration() : tds__DeleteDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48877 */
#ifndef SOAP_TYPE___tds__GetDot11Capabilities
#define SOAP_TYPE___tds__GetDot11Capabilities (2449)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot11Capabilities {
      public:
        /** Optional element 'tds:GetDot11Capabilities' of XML schema type 'tds:GetDot11Capabilities' */
        _tds__GetDot11Capabilities *tds__GetDot11Capabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot11Capabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetDot11Capabilities; }
        /** Constructor with member initializations */
        __tds__GetDot11Capabilities() : tds__GetDot11Capabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate___tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:48947 */
#ifndef SOAP_TYPE___tds__GetDot11Status
#define SOAP_TYPE___tds__GetDot11Status (2453)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot11Status {
      public:
        /** Optional element 'tds:GetDot11Status' of XML schema type 'tds:GetDot11Status' */
        _tds__GetDot11Status *tds__GetDot11Status;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot11Status */
        long soap_type() const { return SOAP_TYPE___tds__GetDot11Status; }
        /** Constructor with member initializations */
        __tds__GetDot11Status() : tds__GetDot11Status() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot11Status * SOAP_FMAC2 soap_instantiate___tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49017 */
#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks
#define SOAP_TYPE___tds__ScanAvailableDot11Networks (2457)
/* Wrapper: */
struct SOAP_CMAC __tds__ScanAvailableDot11Networks {
      public:
        /** Optional element 'tds:ScanAvailableDot11Networks' of XML schema type 'tds:ScanAvailableDot11Networks' */
        _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;
      public:
        /** Return unique type id SOAP_TYPE___tds__ScanAvailableDot11Networks */
        long soap_type() const { return SOAP_TYPE___tds__ScanAvailableDot11Networks; }
        /** Constructor with member initializations */
        __tds__ScanAvailableDot11Networks() : tds__ScanAvailableDot11Networks() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate___tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49104 */
#ifndef SOAP_TYPE___tds__GetSystemUris
#define SOAP_TYPE___tds__GetSystemUris (2461)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemUris {
      public:
        /** Optional element 'tds:GetSystemUris' of XML schema type 'tds:GetSystemUris' */
        _tds__GetSystemUris *tds__GetSystemUris;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemUris */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemUris; }
        /** Constructor with member initializations */
        __tds__GetSystemUris() : tds__GetSystemUris() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemUris * SOAP_FMAC2 soap_instantiate___tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49200 */
#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade
#define SOAP_TYPE___tds__StartFirmwareUpgrade (2465)
/* Wrapper: */
struct SOAP_CMAC __tds__StartFirmwareUpgrade {
      public:
        /** Optional element 'tds:StartFirmwareUpgrade' of XML schema type 'tds:StartFirmwareUpgrade' */
        _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;
      public:
        /** Return unique type id SOAP_TYPE___tds__StartFirmwareUpgrade */
        long soap_type() const { return SOAP_TYPE___tds__StartFirmwareUpgrade; }
        /** Constructor with member initializations */
        __tds__StartFirmwareUpgrade() : tds__StartFirmwareUpgrade() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate___tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49295 */
#ifndef SOAP_TYPE___tds__StartSystemRestore
#define SOAP_TYPE___tds__StartSystemRestore (2469)
/* Wrapper: */
struct SOAP_CMAC __tds__StartSystemRestore {
      public:
        /** Optional element 'tds:StartSystemRestore' of XML schema type 'tds:StartSystemRestore' */
        _tds__StartSystemRestore *tds__StartSystemRestore;
      public:
        /** Return unique type id SOAP_TYPE___tds__StartSystemRestore */
        long soap_type() const { return SOAP_TYPE___tds__StartSystemRestore; }
        /** Constructor with member initializations */
        __tds__StartSystemRestore() : tds__StartSystemRestore() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate___tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49365 */
#ifndef SOAP_TYPE___tds__GetStorageConfigurations
#define SOAP_TYPE___tds__GetStorageConfigurations (2473)
/* Wrapper: */
struct SOAP_CMAC __tds__GetStorageConfigurations {
      public:
        /** Optional element 'tds:GetStorageConfigurations' of XML schema type 'tds:GetStorageConfigurations' */
        _tds__GetStorageConfigurations *tds__GetStorageConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetStorageConfigurations */
        long soap_type() const { return SOAP_TYPE___tds__GetStorageConfigurations; }
        /** Constructor with member initializations */
        __tds__GetStorageConfigurations() : tds__GetStorageConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49436 */
#ifndef SOAP_TYPE___tds__CreateStorageConfiguration
#define SOAP_TYPE___tds__CreateStorageConfiguration (2477)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateStorageConfiguration {
      public:
        /** Optional element 'tds:CreateStorageConfiguration' of XML schema type 'tds:CreateStorageConfiguration' */
        _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__CreateStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__CreateStorageConfiguration() : tds__CreateStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49506 */
#ifndef SOAP_TYPE___tds__GetStorageConfiguration
#define SOAP_TYPE___tds__GetStorageConfiguration (2481)
/* Wrapper: */
struct SOAP_CMAC __tds__GetStorageConfiguration {
      public:
        /** Optional element 'tds:GetStorageConfiguration' of XML schema type 'tds:GetStorageConfiguration' */
        _tds__GetStorageConfiguration *tds__GetStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__GetStorageConfiguration() : tds__GetStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49575 */
#ifndef SOAP_TYPE___tds__SetStorageConfiguration
#define SOAP_TYPE___tds__SetStorageConfiguration (2485)
/* Wrapper: */
struct SOAP_CMAC __tds__SetStorageConfiguration {
      public:
        /** Optional element 'tds:SetStorageConfiguration' of XML schema type 'tds:SetStorageConfiguration' */
        _tds__SetStorageConfiguration *tds__SetStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__SetStorageConfiguration() : tds__SetStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49645 */
#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration
#define SOAP_TYPE___tds__DeleteStorageConfiguration (2489)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteStorageConfiguration {
      public:
        /** Optional element 'tds:DeleteStorageConfiguration' of XML schema type 'tds:DeleteStorageConfiguration' */
        _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__DeleteStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__DeleteStorageConfiguration() : tds__DeleteStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49715 */
#ifndef SOAP_TYPE___tds__GetGeoLocation
#define SOAP_TYPE___tds__GetGeoLocation (2493)
/* Wrapper: */
struct SOAP_CMAC __tds__GetGeoLocation {
      public:
        /** Optional element 'tds:GetGeoLocation' of XML schema type 'tds:GetGeoLocation' */
        _tds__GetGeoLocation *tds__GetGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__GetGeoLocation; }
        /** Constructor with member initializations */
        __tds__GetGeoLocation() : tds__GetGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49785 */
#ifndef SOAP_TYPE___tds__SetGeoLocation
#define SOAP_TYPE___tds__SetGeoLocation (2497)
/* Wrapper: */
struct SOAP_CMAC __tds__SetGeoLocation {
      public:
        /** Optional element 'tds:SetGeoLocation' of XML schema type 'tds:SetGeoLocation' */
        _tds__SetGeoLocation *tds__SetGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__SetGeoLocation; }
        /** Constructor with member initializations */
        __tds__SetGeoLocation() : tds__SetGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49854 */
#ifndef SOAP_TYPE___tds__DeleteGeoLocation
#define SOAP_TYPE___tds__DeleteGeoLocation (2501)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteGeoLocation {
      public:
        /** Optional element 'tds:DeleteGeoLocation' of XML schema type 'tds:DeleteGeoLocation' */
        _tds__DeleteGeoLocation *tds__DeleteGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__DeleteGeoLocation; }
        /** Constructor with member initializations */
        __tds__DeleteGeoLocation() : tds__DeleteGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate___tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:49953 */
#ifndef SOAP_TYPE___tev__PullMessages
#define SOAP_TYPE___tev__PullMessages (2505)
/* Wrapper: */
struct SOAP_CMAC __tev__PullMessages {
      public:
        /** Optional element 'tev:PullMessages' of XML schema type 'tev:PullMessages' */
        _tev__PullMessages *tev__PullMessages;
      public:
        /** Return unique type id SOAP_TYPE___tev__PullMessages */
        long soap_type() const { return SOAP_TYPE___tev__PullMessages; }
        /** Constructor with member initializations */
        __tev__PullMessages() : tev__PullMessages() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__PullMessages * SOAP_FMAC2 soap_instantiate___tev__PullMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50034 */
#ifndef SOAP_TYPE___tev__Seek
#define SOAP_TYPE___tev__Seek (2509)
/* Wrapper: */
struct SOAP_CMAC __tev__Seek {
      public:
        /** Optional element 'tev:Seek' of XML schema type 'tev:Seek' */
        _tev__Seek *tev__Seek;
      public:
        /** Return unique type id SOAP_TYPE___tev__Seek */
        long soap_type() const { return SOAP_TYPE___tev__Seek; }
        /** Constructor with member initializations */
        __tev__Seek() : tev__Seek() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Seek * SOAP_FMAC2 soap_instantiate___tev__Seek(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50117 */
#ifndef SOAP_TYPE___tev__SetSynchronizationPoint
#define SOAP_TYPE___tev__SetSynchronizationPoint (2513)
/* Wrapper: */
struct SOAP_CMAC __tev__SetSynchronizationPoint {
      public:
        /** Optional element 'tev:SetSynchronizationPoint' of XML schema type 'tev:SetSynchronizationPoint' */
        _tev__SetSynchronizationPoint *tev__SetSynchronizationPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__SetSynchronizationPoint */
        long soap_type() const { return SOAP_TYPE___tev__SetSynchronizationPoint; }
        /** Constructor with member initializations */
        __tev__SetSynchronizationPoint() : tev__SetSynchronizationPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___tev__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50195 */
#ifndef SOAP_TYPE___tev__Unsubscribe
#define SOAP_TYPE___tev__Unsubscribe (2517)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XML schema type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe; }
        /** Constructor with member initializations */
        __tev__Unsubscribe() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50264 */
#ifndef SOAP_TYPE___tev__GetServiceCapabilities
#define SOAP_TYPE___tev__GetServiceCapabilities (2521)
/* Wrapper: */
struct SOAP_CMAC __tev__GetServiceCapabilities {
      public:
        /** Optional element 'tev:GetServiceCapabilities' of XML schema type 'tev:GetServiceCapabilities' */
        _tev__GetServiceCapabilities *tev__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tev__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tev__GetServiceCapabilities() : tev__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tev__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50374 */
#ifndef SOAP_TYPE___tev__CreatePullPointSubscription
#define SOAP_TYPE___tev__CreatePullPointSubscription (2525)
/* Wrapper: */
struct SOAP_CMAC __tev__CreatePullPointSubscription {
      public:
        /** Optional element 'tev:CreatePullPointSubscription' of XML schema type 'tev:CreatePullPointSubscription' */
        _tev__CreatePullPointSubscription *tev__CreatePullPointSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__CreatePullPointSubscription */
        long soap_type() const { return SOAP_TYPE___tev__CreatePullPointSubscription; }
        /** Constructor with member initializations */
        __tev__CreatePullPointSubscription() : tev__CreatePullPointSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__CreatePullPointSubscription * SOAP_FMAC2 soap_instantiate___tev__CreatePullPointSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50449 */
#ifndef SOAP_TYPE___tev__GetEventProperties
#define SOAP_TYPE___tev__GetEventProperties (2529)
/* Wrapper: */
struct SOAP_CMAC __tev__GetEventProperties {
      public:
        /** Optional element 'tev:GetEventProperties' of XML schema type 'tev:GetEventProperties' */
        _tev__GetEventProperties *tev__GetEventProperties;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetEventProperties */
        long soap_type() const { return SOAP_TYPE___tev__GetEventProperties; }
        /** Constructor with member initializations */
        __tev__GetEventProperties() : tev__GetEventProperties() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetEventProperties * SOAP_FMAC2 soap_instantiate___tev__GetEventProperties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50520 */
#ifndef SOAP_TYPE___tev__AddEventBroker
#define SOAP_TYPE___tev__AddEventBroker (2533)
/* Wrapper: */
struct SOAP_CMAC __tev__AddEventBroker {
      public:
        /** Optional element 'tev:AddEventBroker' of XML schema type 'tev:AddEventBroker' */
        _tev__AddEventBroker *tev__AddEventBroker;
      public:
        /** Return unique type id SOAP_TYPE___tev__AddEventBroker */
        long soap_type() const { return SOAP_TYPE___tev__AddEventBroker; }
        /** Constructor with member initializations */
        __tev__AddEventBroker() : tev__AddEventBroker() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__AddEventBroker * SOAP_FMAC2 soap_instantiate___tev__AddEventBroker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50589 */
#ifndef SOAP_TYPE___tev__DeleteEventBroker
#define SOAP_TYPE___tev__DeleteEventBroker (2537)
/* Wrapper: */
struct SOAP_CMAC __tev__DeleteEventBroker {
      public:
        /** Optional element 'tev:DeleteEventBroker' of XML schema type 'tev:DeleteEventBroker' */
        _tev__DeleteEventBroker *tev__DeleteEventBroker;
      public:
        /** Return unique type id SOAP_TYPE___tev__DeleteEventBroker */
        long soap_type() const { return SOAP_TYPE___tev__DeleteEventBroker; }
        /** Constructor with member initializations */
        __tev__DeleteEventBroker() : tev__DeleteEventBroker() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__DeleteEventBroker * SOAP_FMAC2 soap_instantiate___tev__DeleteEventBroker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50658 */
#ifndef SOAP_TYPE___tev__GetEventBrokers
#define SOAP_TYPE___tev__GetEventBrokers (2541)
/* Wrapper: */
struct SOAP_CMAC __tev__GetEventBrokers {
      public:
        /** Optional element 'tev:GetEventBrokers' of XML schema type 'tev:GetEventBrokers' */
        _tev__GetEventBrokers *tev__GetEventBrokers;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetEventBrokers */
        long soap_type() const { return SOAP_TYPE___tev__GetEventBrokers; }
        /** Constructor with member initializations */
        __tev__GetEventBrokers() : tev__GetEventBrokers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetEventBrokers * SOAP_FMAC2 soap_instantiate___tev__GetEventBrokers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50731 */
#ifndef SOAP_TYPE___tev__Renew
#define SOAP_TYPE___tev__Renew (2545)
/* Wrapper: */
struct SOAP_CMAC __tev__Renew {
      public:
        /** Optional element 'wsnt:Renew' of XML schema type 'wsnt:Renew' */
        _wsnt__Renew *wsnt__Renew;
      public:
        /** Return unique type id SOAP_TYPE___tev__Renew */
        long soap_type() const { return SOAP_TYPE___tev__Renew; }
        /** Constructor with member initializations */
        __tev__Renew() : wsnt__Renew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Renew * SOAP_FMAC2 soap_instantiate___tev__Renew(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50804 */
#ifndef SOAP_TYPE___tev__Unsubscribe_
#define SOAP_TYPE___tev__Unsubscribe_ (2547)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe_ {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XML schema type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe_ */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe_; }
        /** Constructor with member initializations */
        __tev__Unsubscribe_() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe_ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50907 */
#ifndef SOAP_TYPE___tev__Subscribe
#define SOAP_TYPE___tev__Subscribe (2551)
/* Wrapper: */
struct SOAP_CMAC __tev__Subscribe {
      public:
        /** Optional element 'wsnt:Subscribe' of XML schema type 'wsnt:Subscribe' */
        _wsnt__Subscribe *wsnt__Subscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Subscribe */
        long soap_type() const { return SOAP_TYPE___tev__Subscribe; }
        /** Constructor with member initializations */
        __tev__Subscribe() : wsnt__Subscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Subscribe * SOAP_FMAC2 soap_instantiate___tev__Subscribe(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:50992 */
#ifndef SOAP_TYPE___tev__GetCurrentMessage
#define SOAP_TYPE___tev__GetCurrentMessage (2555)
/* Wrapper: */
struct SOAP_CMAC __tev__GetCurrentMessage {
      public:
        /** Optional element 'wsnt:GetCurrentMessage' of XML schema type 'wsnt:GetCurrentMessage' */
        _wsnt__GetCurrentMessage *wsnt__GetCurrentMessage;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetCurrentMessage */
        long soap_type() const { return SOAP_TYPE___tev__GetCurrentMessage; }
        /** Constructor with member initializations */
        __tev__GetCurrentMessage() : wsnt__GetCurrentMessage() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetCurrentMessage * SOAP_FMAC2 soap_instantiate___tev__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51055 */
#ifndef SOAP_TYPE___tev__Notify
#define SOAP_TYPE___tev__Notify (2558)
/* Wrapper: */
struct SOAP_CMAC __tev__Notify {
      public:
        /** Optional element 'wsnt:Notify' of XML schema type 'wsnt:Notify' */
        _wsnt__Notify *wsnt__Notify;
      public:
        /** Return unique type id SOAP_TYPE___tev__Notify */
        long soap_type() const { return SOAP_TYPE___tev__Notify; }
        /** Constructor with member initializations */
        __tev__Notify() : wsnt__Notify() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Notify * SOAP_FMAC2 soap_instantiate___tev__Notify(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51128 */
#ifndef SOAP_TYPE___tev__GetMessages
#define SOAP_TYPE___tev__GetMessages (2562)
/* Wrapper: */
struct SOAP_CMAC __tev__GetMessages {
      public:
        /** Optional element 'wsnt:GetMessages' of XML schema type 'wsnt:GetMessages' */
        _wsnt__GetMessages *wsnt__GetMessages;
      public:
        /** Return unique type id SOAP_TYPE___tev__GetMessages */
        long soap_type() const { return SOAP_TYPE___tev__GetMessages; }
        /** Constructor with member initializations */
        __tev__GetMessages() : wsnt__GetMessages() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__GetMessages * SOAP_FMAC2 soap_instantiate___tev__GetMessages(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51201 */
#ifndef SOAP_TYPE___tev__DestroyPullPoint
#define SOAP_TYPE___tev__DestroyPullPoint (2566)
/* Wrapper: */
struct SOAP_CMAC __tev__DestroyPullPoint {
      public:
        /** Optional element 'wsnt:DestroyPullPoint' of XML schema type 'wsnt:DestroyPullPoint' */
        _wsnt__DestroyPullPoint *wsnt__DestroyPullPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__DestroyPullPoint */
        long soap_type() const { return SOAP_TYPE___tev__DestroyPullPoint; }
        /** Constructor with member initializations */
        __tev__DestroyPullPoint() : wsnt__DestroyPullPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__DestroyPullPoint * SOAP_FMAC2 soap_instantiate___tev__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51264 */
#ifndef SOAP_TYPE___tev__Notify_
#define SOAP_TYPE___tev__Notify_ (2568)
/* Wrapper: */
struct SOAP_CMAC __tev__Notify_ {
      public:
        /** Optional element 'wsnt:Notify' of XML schema type 'wsnt:Notify' */
        _wsnt__Notify *wsnt__Notify;
      public:
        /** Return unique type id SOAP_TYPE___tev__Notify_ */
        long soap_type() const { return SOAP_TYPE___tev__Notify_; }
        /** Constructor with member initializations */
        __tev__Notify_() : wsnt__Notify() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Notify_ * SOAP_FMAC2 soap_instantiate___tev__Notify_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51334 */
#ifndef SOAP_TYPE___tev__CreatePullPoint
#define SOAP_TYPE___tev__CreatePullPoint (2572)
/* Wrapper: */
struct SOAP_CMAC __tev__CreatePullPoint {
      public:
        /** Optional element 'wsnt:CreatePullPoint' of XML schema type 'wsnt:CreatePullPoint' */
        _wsnt__CreatePullPoint *wsnt__CreatePullPoint;
      public:
        /** Return unique type id SOAP_TYPE___tev__CreatePullPoint */
        long soap_type() const { return SOAP_TYPE___tev__CreatePullPoint; }
        /** Constructor with member initializations */
        __tev__CreatePullPoint() : wsnt__CreatePullPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__CreatePullPoint * SOAP_FMAC2 soap_instantiate___tev__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51407 */
#ifndef SOAP_TYPE___tev__Renew_
#define SOAP_TYPE___tev__Renew_ (2574)
/* Wrapper: */
struct SOAP_CMAC __tev__Renew_ {
      public:
        /** Optional element 'wsnt:Renew' of XML schema type 'wsnt:Renew' */
        _wsnt__Renew *wsnt__Renew;
      public:
        /** Return unique type id SOAP_TYPE___tev__Renew_ */
        long soap_type() const { return SOAP_TYPE___tev__Renew_; }
        /** Constructor with member initializations */
        __tev__Renew_() : wsnt__Renew() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Renew_ * SOAP_FMAC2 soap_instantiate___tev__Renew_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51480 */
#ifndef SOAP_TYPE___tev__Unsubscribe__
#define SOAP_TYPE___tev__Unsubscribe__ (2576)
/* Wrapper: */
struct SOAP_CMAC __tev__Unsubscribe__ {
      public:
        /** Optional element 'wsnt:Unsubscribe' of XML schema type 'wsnt:Unsubscribe' */
        _wsnt__Unsubscribe *wsnt__Unsubscribe;
      public:
        /** Return unique type id SOAP_TYPE___tev__Unsubscribe__ */
        long soap_type() const { return SOAP_TYPE___tev__Unsubscribe__; }
        /** Constructor with member initializations */
        __tev__Unsubscribe__() : wsnt__Unsubscribe() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__Unsubscribe__ * SOAP_FMAC2 soap_instantiate___tev__Unsubscribe__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51553 */
#ifndef SOAP_TYPE___tev__PauseSubscription
#define SOAP_TYPE___tev__PauseSubscription (2580)
/* Wrapper: */
struct SOAP_CMAC __tev__PauseSubscription {
      public:
        /** Optional element 'wsnt:PauseSubscription' of XML schema type 'wsnt:PauseSubscription' */
        _wsnt__PauseSubscription *wsnt__PauseSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__PauseSubscription */
        long soap_type() const { return SOAP_TYPE___tev__PauseSubscription; }
        /** Constructor with member initializations */
        __tev__PauseSubscription() : wsnt__PauseSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__PauseSubscription * SOAP_FMAC2 soap_instantiate___tev__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51626 */
#ifndef SOAP_TYPE___tev__ResumeSubscription
#define SOAP_TYPE___tev__ResumeSubscription (2584)
/* Wrapper: */
struct SOAP_CMAC __tev__ResumeSubscription {
      public:
        /** Optional element 'wsnt:ResumeSubscription' of XML schema type 'wsnt:ResumeSubscription' */
        _wsnt__ResumeSubscription *wsnt__ResumeSubscription;
      public:
        /** Return unique type id SOAP_TYPE___tev__ResumeSubscription */
        long soap_type() const { return SOAP_TYPE___tev__ResumeSubscription; }
        /** Constructor with member initializations */
        __tev__ResumeSubscription() : wsnt__ResumeSubscription() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tev__ResumeSubscription * SOAP_FMAC2 soap_instantiate___tev__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51711 */
#ifndef SOAP_TYPE___timg__GetServiceCapabilities
#define SOAP_TYPE___timg__GetServiceCapabilities (2588)
/* Wrapper: */
struct SOAP_CMAC __timg__GetServiceCapabilities {
      public:
        /** Optional element 'timg:GetServiceCapabilities' of XML schema type 'timg:GetServiceCapabilities' */
        _timg__GetServiceCapabilities *timg__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___timg__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __timg__GetServiceCapabilities() : timg__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___timg__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51779 */
#ifndef SOAP_TYPE___timg__GetImagingSettings
#define SOAP_TYPE___timg__GetImagingSettings (2592)
/* Wrapper: */
struct SOAP_CMAC __timg__GetImagingSettings {
      public:
        /** Optional element 'timg:GetImagingSettings' of XML schema type 'timg:GetImagingSettings' */
        _timg__GetImagingSettings *timg__GetImagingSettings;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetImagingSettings */
        long soap_type() const { return SOAP_TYPE___timg__GetImagingSettings; }
        /** Constructor with member initializations */
        __timg__GetImagingSettings() : timg__GetImagingSettings() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetImagingSettings * SOAP_FMAC2 soap_instantiate___timg__GetImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51847 */
#ifndef SOAP_TYPE___timg__SetImagingSettings
#define SOAP_TYPE___timg__SetImagingSettings (2596)
/* Wrapper: */
struct SOAP_CMAC __timg__SetImagingSettings {
      public:
        /** Optional element 'timg:SetImagingSettings' of XML schema type 'timg:SetImagingSettings' */
        _timg__SetImagingSettings *timg__SetImagingSettings;
      public:
        /** Return unique type id SOAP_TYPE___timg__SetImagingSettings */
        long soap_type() const { return SOAP_TYPE___timg__SetImagingSettings; }
        /** Constructor with member initializations */
        __timg__SetImagingSettings() : timg__SetImagingSettings() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__SetImagingSettings * SOAP_FMAC2 soap_instantiate___timg__SetImagingSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:51925 */
#ifndef SOAP_TYPE___timg__GetOptions
#define SOAP_TYPE___timg__GetOptions (2600)
/* Wrapper: */
struct SOAP_CMAC __timg__GetOptions {
      public:
        /** Optional element 'timg:GetOptions' of XML schema type 'timg:GetOptions' */
        _timg__GetOptions *timg__GetOptions;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetOptions */
        long soap_type() const { return SOAP_TYPE___timg__GetOptions; }
        /** Constructor with member initializations */
        __timg__GetOptions() : timg__GetOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetOptions * SOAP_FMAC2 soap_instantiate___timg__GetOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52015 */
#ifndef SOAP_TYPE___timg__Move
#define SOAP_TYPE___timg__Move (2604)
/* Wrapper: */
struct SOAP_CMAC __timg__Move {
      public:
        /** Optional element 'timg:Move' of XML schema type 'timg:Move' */
        _timg__Move *timg__Move;
      public:
        /** Return unique type id SOAP_TYPE___timg__Move */
        long soap_type() const { return SOAP_TYPE___timg__Move; }
        /** Constructor with member initializations */
        __timg__Move() : timg__Move() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__Move * SOAP_FMAC2 soap_instantiate___timg__Move(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52086 */
#ifndef SOAP_TYPE___timg__Stop
#define SOAP_TYPE___timg__Stop (2608)
/* Wrapper: */
struct SOAP_CMAC __timg__Stop {
      public:
        /** Optional element 'timg:Stop' of XML schema type 'timg:Stop' */
        _timg__Stop *timg__Stop;
      public:
        /** Return unique type id SOAP_TYPE___timg__Stop */
        long soap_type() const { return SOAP_TYPE___timg__Stop; }
        /** Constructor with member initializations */
        __timg__Stop() : timg__Stop() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__Stop * SOAP_FMAC2 soap_instantiate___timg__Stop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52156 */
#ifndef SOAP_TYPE___timg__GetStatus
#define SOAP_TYPE___timg__GetStatus (2612)
/* Wrapper: */
struct SOAP_CMAC __timg__GetStatus {
      public:
        /** Optional element 'timg:GetStatus' of XML schema type 'timg:GetStatus' */
        _timg__GetStatus *timg__GetStatus;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetStatus */
        long soap_type() const { return SOAP_TYPE___timg__GetStatus; }
        /** Constructor with member initializations */
        __timg__GetStatus() : timg__GetStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetStatus * SOAP_FMAC2 soap_instantiate___timg__GetStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52224 */
#ifndef SOAP_TYPE___timg__GetMoveOptions
#define SOAP_TYPE___timg__GetMoveOptions (2616)
/* Wrapper: */
struct SOAP_CMAC __timg__GetMoveOptions {
      public:
        /** Optional element 'timg:GetMoveOptions' of XML schema type 'timg:GetMoveOptions' */
        _timg__GetMoveOptions *timg__GetMoveOptions;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetMoveOptions */
        long soap_type() const { return SOAP_TYPE___timg__GetMoveOptions; }
        /** Constructor with member initializations */
        __timg__GetMoveOptions() : timg__GetMoveOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetMoveOptions * SOAP_FMAC2 soap_instantiate___timg__GetMoveOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52292 */
#ifndef SOAP_TYPE___timg__GetPresets
#define SOAP_TYPE___timg__GetPresets (2620)
/* Wrapper: */
struct SOAP_CMAC __timg__GetPresets {
      public:
        /** Optional element 'timg:GetPresets' of XML schema type 'timg:GetPresets' */
        _timg__GetPresets *timg__GetPresets;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetPresets */
        long soap_type() const { return SOAP_TYPE___timg__GetPresets; }
        /** Constructor with member initializations */
        __timg__GetPresets() : timg__GetPresets() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetPresets * SOAP_FMAC2 soap_instantiate___timg__GetPresets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52364 */
#ifndef SOAP_TYPE___timg__GetCurrentPreset
#define SOAP_TYPE___timg__GetCurrentPreset (2624)
/* Wrapper: */
struct SOAP_CMAC __timg__GetCurrentPreset {
      public:
        /** Optional element 'timg:GetCurrentPreset' of XML schema type 'timg:GetCurrentPreset' */
        _timg__GetCurrentPreset *timg__GetCurrentPreset;
      public:
        /** Return unique type id SOAP_TYPE___timg__GetCurrentPreset */
        long soap_type() const { return SOAP_TYPE___timg__GetCurrentPreset; }
        /** Constructor with member initializations */
        __timg__GetCurrentPreset() : timg__GetCurrentPreset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__GetCurrentPreset * SOAP_FMAC2 soap_instantiate___timg__GetCurrentPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52440 */
#ifndef SOAP_TYPE___timg__SetCurrentPreset
#define SOAP_TYPE___timg__SetCurrentPreset (2628)
/* Wrapper: */
struct SOAP_CMAC __timg__SetCurrentPreset {
      public:
        /** Optional element 'timg:SetCurrentPreset' of XML schema type 'timg:SetCurrentPreset' */
        _timg__SetCurrentPreset *timg__SetCurrentPreset;
      public:
        /** Return unique type id SOAP_TYPE___timg__SetCurrentPreset */
        long soap_type() const { return SOAP_TYPE___timg__SetCurrentPreset; }
        /** Constructor with member initializations */
        __timg__SetCurrentPreset() : timg__SetCurrentPreset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __timg__SetCurrentPreset * SOAP_FMAC2 soap_instantiate___timg__SetCurrentPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52524 */
#ifndef SOAP_TYPE___tptz__GetServiceCapabilities
#define SOAP_TYPE___tptz__GetServiceCapabilities (2632)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetServiceCapabilities {
      public:
        /** Optional element 'tptz:GetServiceCapabilities' of XML schema type 'tptz:GetServiceCapabilities' */
        _tptz__GetServiceCapabilities *tptz__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tptz__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tptz__GetServiceCapabilities() : tptz__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52620 */
#ifndef SOAP_TYPE___tptz__GetConfigurations
#define SOAP_TYPE___tptz__GetConfigurations (2636)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetConfigurations {
      public:
        /** Optional element 'tptz:GetConfigurations' of XML schema type 'tptz:GetConfigurations' */
        _tptz__GetConfigurations *tptz__GetConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetConfigurations */
        long soap_type() const { return SOAP_TYPE___tptz__GetConfigurations; }
        /** Constructor with member initializations */
        __tptz__GetConfigurations() : tptz__GetConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52690 */
#ifndef SOAP_TYPE___tptz__GetPresets
#define SOAP_TYPE___tptz__GetPresets (2640)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetPresets {
      public:
        /** Optional element 'tptz:GetPresets' of XML schema type 'tptz:GetPresets' */
        _tptz__GetPresets *tptz__GetPresets;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetPresets */
        long soap_type() const { return SOAP_TYPE___tptz__GetPresets; }
        /** Constructor with member initializations */
        __tptz__GetPresets() : tptz__GetPresets() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetPresets * SOAP_FMAC2 soap_instantiate___tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52775 */
#ifndef SOAP_TYPE___tptz__SetPreset
#define SOAP_TYPE___tptz__SetPreset (2644)
/* Wrapper: */
struct SOAP_CMAC __tptz__SetPreset {
      public:
        /** Optional element 'tptz:SetPreset' of XML schema type 'tptz:SetPreset' */
        _tptz__SetPreset *tptz__SetPreset;
      public:
        /** Return unique type id SOAP_TYPE___tptz__SetPreset */
        long soap_type() const { return SOAP_TYPE___tptz__SetPreset; }
        /** Constructor with member initializations */
        __tptz__SetPreset() : tptz__SetPreset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__SetPreset * SOAP_FMAC2 soap_instantiate___tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52849 */
#ifndef SOAP_TYPE___tptz__RemovePreset
#define SOAP_TYPE___tptz__RemovePreset (2648)
/* Wrapper: */
struct SOAP_CMAC __tptz__RemovePreset {
      public:
        /** Optional element 'tptz:RemovePreset' of XML schema type 'tptz:RemovePreset' */
        _tptz__RemovePreset *tptz__RemovePreset;
      public:
        /** Return unique type id SOAP_TYPE___tptz__RemovePreset */
        long soap_type() const { return SOAP_TYPE___tptz__RemovePreset; }
        /** Constructor with member initializations */
        __tptz__RemovePreset() : tptz__RemovePreset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__RemovePreset * SOAP_FMAC2 soap_instantiate___tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52919 */
#ifndef SOAP_TYPE___tptz__GotoPreset
#define SOAP_TYPE___tptz__GotoPreset (2652)
/* Wrapper: */
struct SOAP_CMAC __tptz__GotoPreset {
      public:
        /** Optional element 'tptz:GotoPreset' of XML schema type 'tptz:GotoPreset' */
        _tptz__GotoPreset *tptz__GotoPreset;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GotoPreset */
        long soap_type() const { return SOAP_TYPE___tptz__GotoPreset; }
        /** Constructor with member initializations */
        __tptz__GotoPreset() : tptz__GotoPreset() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GotoPreset * SOAP_FMAC2 soap_instantiate___tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:52989 */
#ifndef SOAP_TYPE___tptz__GetStatus
#define SOAP_TYPE___tptz__GetStatus (2656)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetStatus {
      public:
        /** Optional element 'tptz:GetStatus' of XML schema type 'tptz:GetStatus' */
        _tptz__GetStatus *tptz__GetStatus;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetStatus */
        long soap_type() const { return SOAP_TYPE___tptz__GetStatus; }
        /** Constructor with member initializations */
        __tptz__GetStatus() : tptz__GetStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetStatus * SOAP_FMAC2 soap_instantiate___tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53086 */
#ifndef SOAP_TYPE___tptz__GetConfiguration
#define SOAP_TYPE___tptz__GetConfiguration (2660)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetConfiguration {
      public:
        /** Optional element 'tptz:GetConfiguration' of XML schema type 'tptz:GetConfiguration' */
        _tptz__GetConfiguration *tptz__GetConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetConfiguration */
        long soap_type() const { return SOAP_TYPE___tptz__GetConfiguration; }
        /** Constructor with member initializations */
        __tptz__GetConfiguration() : tptz__GetConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53164 */
#ifndef SOAP_TYPE___tptz__GetNodes
#define SOAP_TYPE___tptz__GetNodes (2664)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetNodes {
      public:
        /** Optional element 'tptz:GetNodes' of XML schema type 'tptz:GetNodes' */
        _tptz__GetNodes *tptz__GetNodes;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetNodes */
        long soap_type() const { return SOAP_TYPE___tptz__GetNodes; }
        /** Constructor with member initializations */
        __tptz__GetNodes() : tptz__GetNodes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetNodes * SOAP_FMAC2 soap_instantiate___tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53234 */
#ifndef SOAP_TYPE___tptz__GetNode
#define SOAP_TYPE___tptz__GetNode (2668)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetNode {
      public:
        /** Optional element 'tptz:GetNode' of XML schema type 'tptz:GetNode' */
        _tptz__GetNode *tptz__GetNode;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetNode */
        long soap_type() const { return SOAP_TYPE___tptz__GetNode; }
        /** Constructor with member initializations */
        __tptz__GetNode() : tptz__GetNode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetNode * SOAP_FMAC2 soap_instantiate___tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53303 */
#ifndef SOAP_TYPE___tptz__SetConfiguration
#define SOAP_TYPE___tptz__SetConfiguration (2672)
/* Wrapper: */
struct SOAP_CMAC __tptz__SetConfiguration {
      public:
        /** Optional element 'tptz:SetConfiguration' of XML schema type 'tptz:SetConfiguration' */
        _tptz__SetConfiguration *tptz__SetConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tptz__SetConfiguration */
        long soap_type() const { return SOAP_TYPE___tptz__SetConfiguration; }
        /** Constructor with member initializations */
        __tptz__SetConfiguration() : tptz__SetConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53382 */
#ifndef SOAP_TYPE___tptz__GetConfigurationOptions
#define SOAP_TYPE___tptz__GetConfigurationOptions (2676)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetConfigurationOptions {
      public:
        /** Optional element 'tptz:GetConfigurationOptions' of XML schema type 'tptz:GetConfigurationOptions' */
        _tptz__GetConfigurationOptions *tptz__GetConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tptz__GetConfigurationOptions; }
        /** Constructor with member initializations */
        __tptz__GetConfigurationOptions() : tptz__GetConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53451 */
#ifndef SOAP_TYPE___tptz__GotoHomePosition
#define SOAP_TYPE___tptz__GotoHomePosition (2680)
/* Wrapper: */
struct SOAP_CMAC __tptz__GotoHomePosition {
      public:
        /** Optional element 'tptz:GotoHomePosition' of XML schema type 'tptz:GotoHomePosition' */
        _tptz__GotoHomePosition *tptz__GotoHomePosition;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GotoHomePosition */
        long soap_type() const { return SOAP_TYPE___tptz__GotoHomePosition; }
        /** Constructor with member initializations */
        __tptz__GotoHomePosition() : tptz__GotoHomePosition() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate___tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53524 */
#ifndef SOAP_TYPE___tptz__SetHomePosition
#define SOAP_TYPE___tptz__SetHomePosition (2684)
/* Wrapper: */
struct SOAP_CMAC __tptz__SetHomePosition {
      public:
        /** Optional element 'tptz:SetHomePosition' of XML schema type 'tptz:SetHomePosition' */
        _tptz__SetHomePosition *tptz__SetHomePosition;
      public:
        /** Return unique type id SOAP_TYPE___tptz__SetHomePosition */
        long soap_type() const { return SOAP_TYPE___tptz__SetHomePosition; }
        /** Constructor with member initializations */
        __tptz__SetHomePosition() : tptz__SetHomePosition() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate___tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53595 */
#ifndef SOAP_TYPE___tptz__ContinuousMove
#define SOAP_TYPE___tptz__ContinuousMove (2688)
/* Wrapper: */
struct SOAP_CMAC __tptz__ContinuousMove {
      public:
        /** Optional element 'tptz:ContinuousMove' of XML schema type 'tptz:ContinuousMove' */
        _tptz__ContinuousMove *tptz__ContinuousMove;
      public:
        /** Return unique type id SOAP_TYPE___tptz__ContinuousMove */
        long soap_type() const { return SOAP_TYPE___tptz__ContinuousMove; }
        /** Constructor with member initializations */
        __tptz__ContinuousMove() : tptz__ContinuousMove() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate___tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53671 */
#ifndef SOAP_TYPE___tptz__RelativeMove
#define SOAP_TYPE___tptz__RelativeMove (2692)
/* Wrapper: */
struct SOAP_CMAC __tptz__RelativeMove {
      public:
        /** Optional element 'tptz:RelativeMove' of XML schema type 'tptz:RelativeMove' */
        _tptz__RelativeMove *tptz__RelativeMove;
      public:
        /** Return unique type id SOAP_TYPE___tptz__RelativeMove */
        long soap_type() const { return SOAP_TYPE___tptz__RelativeMove; }
        /** Constructor with member initializations */
        __tptz__RelativeMove() : tptz__RelativeMove() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__RelativeMove * SOAP_FMAC2 soap_instantiate___tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53743 */
#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand
#define SOAP_TYPE___tptz__SendAuxiliaryCommand (2696)
/* Wrapper: */
struct SOAP_CMAC __tptz__SendAuxiliaryCommand {
      public:
        /** Optional element 'tptz:SendAuxiliaryCommand' of XML schema type 'tptz:SendAuxiliaryCommand' */
        _tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand;
      public:
        /** Return unique type id SOAP_TYPE___tptz__SendAuxiliaryCommand */
        long soap_type() const { return SOAP_TYPE___tptz__SendAuxiliaryCommand; }
        /** Constructor with member initializations */
        __tptz__SendAuxiliaryCommand() : tptz__SendAuxiliaryCommand() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53818 */
#ifndef SOAP_TYPE___tptz__AbsoluteMove
#define SOAP_TYPE___tptz__AbsoluteMove (2700)
/* Wrapper: */
struct SOAP_CMAC __tptz__AbsoluteMove {
      public:
        /** Optional element 'tptz:AbsoluteMove' of XML schema type 'tptz:AbsoluteMove' */
        _tptz__AbsoluteMove *tptz__AbsoluteMove;
      public:
        /** Return unique type id SOAP_TYPE___tptz__AbsoluteMove */
        long soap_type() const { return SOAP_TYPE___tptz__AbsoluteMove; }
        /** Constructor with member initializations */
        __tptz__AbsoluteMove() : tptz__AbsoluteMove() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate___tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53898 */
#ifndef SOAP_TYPE___tptz__GeoMove
#define SOAP_TYPE___tptz__GeoMove (2704)
/* Wrapper: */
struct SOAP_CMAC __tptz__GeoMove {
      public:
        /** Optional element 'tptz:GeoMove' of XML schema type 'tptz:GeoMove' */
        _tptz__GeoMove *tptz__GeoMove;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GeoMove */
        long soap_type() const { return SOAP_TYPE___tptz__GeoMove; }
        /** Constructor with member initializations */
        __tptz__GeoMove() : tptz__GeoMove() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GeoMove * SOAP_FMAC2 soap_instantiate___tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:53969 */
#ifndef SOAP_TYPE___tptz__Stop
#define SOAP_TYPE___tptz__Stop (2708)
/* Wrapper: */
struct SOAP_CMAC __tptz__Stop {
      public:
        /** Optional element 'tptz:Stop' of XML schema type 'tptz:Stop' */
        _tptz__Stop *tptz__Stop;
      public:
        /** Return unique type id SOAP_TYPE___tptz__Stop */
        long soap_type() const { return SOAP_TYPE___tptz__Stop; }
        /** Constructor with member initializations */
        __tptz__Stop() : tptz__Stop() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__Stop * SOAP_FMAC2 soap_instantiate___tptz__Stop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54037 */
#ifndef SOAP_TYPE___tptz__GetPresetTours
#define SOAP_TYPE___tptz__GetPresetTours (2712)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetPresetTours {
      public:
        /** Optional element 'tptz:GetPresetTours' of XML schema type 'tptz:GetPresetTours' */
        _tptz__GetPresetTours *tptz__GetPresetTours;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetPresetTours */
        long soap_type() const { return SOAP_TYPE___tptz__GetPresetTours; }
        /** Constructor with member initializations */
        __tptz__GetPresetTours() : tptz__GetPresetTours() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54105 */
#ifndef SOAP_TYPE___tptz__GetPresetTour
#define SOAP_TYPE___tptz__GetPresetTour (2716)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetPresetTour {
      public:
        /** Optional element 'tptz:GetPresetTour' of XML schema type 'tptz:GetPresetTour' */
        _tptz__GetPresetTour *tptz__GetPresetTour;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetPresetTour */
        long soap_type() const { return SOAP_TYPE___tptz__GetPresetTour; }
        /** Constructor with member initializations */
        __tptz__GetPresetTour() : tptz__GetPresetTour() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54173 */
#ifndef SOAP_TYPE___tptz__GetPresetTourOptions
#define SOAP_TYPE___tptz__GetPresetTourOptions (2720)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetPresetTourOptions {
      public:
        /** Optional element 'tptz:GetPresetTourOptions' of XML schema type 'tptz:GetPresetTourOptions' */
        _tptz__GetPresetTourOptions *tptz__GetPresetTourOptions;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetPresetTourOptions */
        long soap_type() const { return SOAP_TYPE___tptz__GetPresetTourOptions; }
        /** Constructor with member initializations */
        __tptz__GetPresetTourOptions() : tptz__GetPresetTourOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54241 */
#ifndef SOAP_TYPE___tptz__CreatePresetTour
#define SOAP_TYPE___tptz__CreatePresetTour (2724)
/* Wrapper: */
struct SOAP_CMAC __tptz__CreatePresetTour {
      public:
        /** Optional element 'tptz:CreatePresetTour' of XML schema type 'tptz:CreatePresetTour' */
        _tptz__CreatePresetTour *tptz__CreatePresetTour;
      public:
        /** Return unique type id SOAP_TYPE___tptz__CreatePresetTour */
        long soap_type() const { return SOAP_TYPE___tptz__CreatePresetTour; }
        /** Constructor with member initializations */
        __tptz__CreatePresetTour() : tptz__CreatePresetTour() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54309 */
#ifndef SOAP_TYPE___tptz__ModifyPresetTour
#define SOAP_TYPE___tptz__ModifyPresetTour (2728)
/* Wrapper: */
struct SOAP_CMAC __tptz__ModifyPresetTour {
      public:
        /** Optional element 'tptz:ModifyPresetTour' of XML schema type 'tptz:ModifyPresetTour' */
        _tptz__ModifyPresetTour *tptz__ModifyPresetTour;
      public:
        /** Return unique type id SOAP_TYPE___tptz__ModifyPresetTour */
        long soap_type() const { return SOAP_TYPE___tptz__ModifyPresetTour; }
        /** Constructor with member initializations */
        __tptz__ModifyPresetTour() : tptz__ModifyPresetTour() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate___tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54377 */
#ifndef SOAP_TYPE___tptz__OperatePresetTour
#define SOAP_TYPE___tptz__OperatePresetTour (2732)
/* Wrapper: */
struct SOAP_CMAC __tptz__OperatePresetTour {
      public:
        /** Optional element 'tptz:OperatePresetTour' of XML schema type 'tptz:OperatePresetTour' */
        _tptz__OperatePresetTour *tptz__OperatePresetTour;
      public:
        /** Return unique type id SOAP_TYPE___tptz__OperatePresetTour */
        long soap_type() const { return SOAP_TYPE___tptz__OperatePresetTour; }
        /** Constructor with member initializations */
        __tptz__OperatePresetTour() : tptz__OperatePresetTour() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54445 */
#ifndef SOAP_TYPE___tptz__RemovePresetTour
#define SOAP_TYPE___tptz__RemovePresetTour (2736)
/* Wrapper: */
struct SOAP_CMAC __tptz__RemovePresetTour {
      public:
        /** Optional element 'tptz:RemovePresetTour' of XML schema type 'tptz:RemovePresetTour' */
        _tptz__RemovePresetTour *tptz__RemovePresetTour;
      public:
        /** Return unique type id SOAP_TYPE___tptz__RemovePresetTour */
        long soap_type() const { return SOAP_TYPE___tptz__RemovePresetTour; }
        /** Constructor with member initializations */
        __tptz__RemovePresetTour() : tptz__RemovePresetTour() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate___tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54521 */
#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations
#define SOAP_TYPE___tptz__GetCompatibleConfigurations (2740)
/* Wrapper: */
struct SOAP_CMAC __tptz__GetCompatibleConfigurations {
      public:
        /** Optional element 'tptz:GetCompatibleConfigurations' of XML schema type 'tptz:GetCompatibleConfigurations' */
        _tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tptz__GetCompatibleConfigurations */
        long soap_type() const { return SOAP_TYPE___tptz__GetCompatibleConfigurations; }
        /** Constructor with member initializations */
        __tptz__GetCompatibleConfigurations() : tptz__GetCompatibleConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54600 */
#ifndef SOAP_TYPE___tptz__MoveAndStartTracking
#define SOAP_TYPE___tptz__MoveAndStartTracking (2744)
/* Wrapper: */
struct SOAP_CMAC __tptz__MoveAndStartTracking {
      public:
        /** Optional element 'tptz:MoveAndStartTracking' of XML schema type 'tptz:MoveAndStartTracking' */
        _tptz__MoveAndStartTracking *tptz__MoveAndStartTracking;
      public:
        /** Return unique type id SOAP_TYPE___tptz__MoveAndStartTracking */
        long soap_type() const { return SOAP_TYPE___tptz__MoveAndStartTracking; }
        /** Constructor with member initializations */
        __tptz__MoveAndStartTracking() : tptz__MoveAndStartTracking() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tptz__MoveAndStartTracking * SOAP_FMAC2 soap_instantiate___tptz__MoveAndStartTracking(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54685 */
#ifndef SOAP_TYPE___tr2__GetServiceCapabilities
#define SOAP_TYPE___tr2__GetServiceCapabilities (2748)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetServiceCapabilities {
      public:
        /** Optional element 'tr2:GetServiceCapabilities' of XML schema type 'tr2:GetServiceCapabilities' */
        _tr2__GetServiceCapabilities *tr2__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tr2__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tr2__GetServiceCapabilities() : tr2__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tr2__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54759 */
#ifndef SOAP_TYPE___tr2__CreateProfile
#define SOAP_TYPE___tr2__CreateProfile (2752)
/* Wrapper: */
struct SOAP_CMAC __tr2__CreateProfile {
      public:
        /** Optional element 'tr2:CreateProfile' of XML schema type 'tr2:CreateProfile' */
        _tr2__CreateProfile *tr2__CreateProfile;
      public:
        /** Return unique type id SOAP_TYPE___tr2__CreateProfile */
        long soap_type() const { return SOAP_TYPE___tr2__CreateProfile; }
        /** Constructor with member initializations */
        __tr2__CreateProfile() : tr2__CreateProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__CreateProfile * SOAP_FMAC2 soap_instantiate___tr2__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54836 */
#ifndef SOAP_TYPE___tr2__GetProfiles
#define SOAP_TYPE___tr2__GetProfiles (2756)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetProfiles {
      public:
        /** Optional element 'tr2:GetProfiles' of XML schema type 'tr2:GetProfiles' */
        _tr2__GetProfiles *tr2__GetProfiles;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetProfiles */
        long soap_type() const { return SOAP_TYPE___tr2__GetProfiles; }
        /** Constructor with member initializations */
        __tr2__GetProfiles() : tr2__GetProfiles() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetProfiles * SOAP_FMAC2 soap_instantiate___tr2__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54912 */
#ifndef SOAP_TYPE___tr2__AddConfiguration
#define SOAP_TYPE___tr2__AddConfiguration (2760)
/* Wrapper: */
struct SOAP_CMAC __tr2__AddConfiguration {
      public:
        /** Optional element 'tr2:AddConfiguration' of XML schema type 'tr2:AddConfiguration' */
        _tr2__AddConfiguration *tr2__AddConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__AddConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__AddConfiguration; }
        /** Constructor with member initializations */
        __tr2__AddConfiguration() : tr2__AddConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__AddConfiguration * SOAP_FMAC2 soap_instantiate___tr2__AddConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:54983 */
#ifndef SOAP_TYPE___tr2__RemoveConfiguration
#define SOAP_TYPE___tr2__RemoveConfiguration (2764)
/* Wrapper: */
struct SOAP_CMAC __tr2__RemoveConfiguration {
      public:
        /** Optional element 'tr2:RemoveConfiguration' of XML schema type 'tr2:RemoveConfiguration' */
        _tr2__RemoveConfiguration *tr2__RemoveConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__RemoveConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__RemoveConfiguration; }
        /** Constructor with member initializations */
        __tr2__RemoveConfiguration() : tr2__RemoveConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__RemoveConfiguration * SOAP_FMAC2 soap_instantiate___tr2__RemoveConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55052 */
#ifndef SOAP_TYPE___tr2__DeleteProfile
#define SOAP_TYPE___tr2__DeleteProfile (2768)
/* Wrapper: */
struct SOAP_CMAC __tr2__DeleteProfile {
      public:
        /** Optional element 'tr2:DeleteProfile' of XML schema type 'tr2:DeleteProfile' */
        _tr2__DeleteProfile *tr2__DeleteProfile;
      public:
        /** Return unique type id SOAP_TYPE___tr2__DeleteProfile */
        long soap_type() const { return SOAP_TYPE___tr2__DeleteProfile; }
        /** Constructor with member initializations */
        __tr2__DeleteProfile() : tr2__DeleteProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__DeleteProfile * SOAP_FMAC2 soap_instantiate___tr2__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55123 */
#ifndef SOAP_TYPE___tr2__GetVideoSourceConfigurations
#define SOAP_TYPE___tr2__GetVideoSourceConfigurations (2772)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoSourceConfigurations {
      public:
        /** Optional element 'tr2:GetVideoSourceConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetVideoSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoSourceConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetVideoSourceConfigurations() : tr2__GetVideoSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55194 */
#ifndef SOAP_TYPE___tr2__GetVideoEncoderConfigurations
#define SOAP_TYPE___tr2__GetVideoEncoderConfigurations (2775)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoEncoderConfigurations {
      public:
        /** Optional element 'tr2:GetVideoEncoderConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetVideoEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoEncoderConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetVideoEncoderConfigurations() : tr2__GetVideoEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55265 */
#ifndef SOAP_TYPE___tr2__GetAudioSourceConfigurations
#define SOAP_TYPE___tr2__GetAudioSourceConfigurations (2778)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioSourceConfigurations {
      public:
        /** Optional element 'tr2:GetAudioSourceConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioSourceConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetAudioSourceConfigurations() : tr2__GetAudioSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55336 */
#ifndef SOAP_TYPE___tr2__GetAudioEncoderConfigurations
#define SOAP_TYPE___tr2__GetAudioEncoderConfigurations (2781)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioEncoderConfigurations {
      public:
        /** Optional element 'tr2:GetAudioEncoderConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioEncoderConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetAudioEncoderConfigurations() : tr2__GetAudioEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55407 */
#ifndef SOAP_TYPE___tr2__GetAnalyticsConfigurations
#define SOAP_TYPE___tr2__GetAnalyticsConfigurations (2784)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAnalyticsConfigurations {
      public:
        /** Optional element 'tr2:GetAnalyticsConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAnalyticsConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAnalyticsConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetAnalyticsConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetAnalyticsConfigurations() : tr2__GetAnalyticsConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55478 */
#ifndef SOAP_TYPE___tr2__GetMetadataConfigurations
#define SOAP_TYPE___tr2__GetMetadataConfigurations (2787)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetMetadataConfigurations {
      public:
        /** Optional element 'tr2:GetMetadataConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetMetadataConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetMetadataConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetMetadataConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetMetadataConfigurations() : tr2__GetMetadataConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55549 */
#ifndef SOAP_TYPE___tr2__GetAudioOutputConfigurations
#define SOAP_TYPE___tr2__GetAudioOutputConfigurations (2790)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioOutputConfigurations {
      public:
        /** Optional element 'tr2:GetAudioOutputConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioOutputConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioOutputConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioOutputConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetAudioOutputConfigurations() : tr2__GetAudioOutputConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55620 */
#ifndef SOAP_TYPE___tr2__GetAudioDecoderConfigurations
#define SOAP_TYPE___tr2__GetAudioDecoderConfigurations (2793)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioDecoderConfigurations {
      public:
        /** Optional element 'tr2:GetAudioDecoderConfigurations' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioDecoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioDecoderConfigurations */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioDecoderConfigurations; }
        /** Constructor with member initializations */
        __tr2__GetAudioDecoderConfigurations() : tr2__GetAudioDecoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___tr2__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55692 */
#ifndef SOAP_TYPE___tr2__SetVideoSourceConfigurationResponse
#define SOAP_TYPE___tr2__SetVideoSourceConfigurationResponse (2797)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetVideoSourceConfigurationResponse {
      public:
        /** Required element 'tr2:SetVideoSourceConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetVideoSourceConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetVideoSourceConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetVideoSourceConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetVideoSourceConfigurationResponse() : tr2__SetVideoSourceConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55692 */
#ifndef SOAP_TYPE___tr2__SetVideoSourceConfiguration
#define SOAP_TYPE___tr2__SetVideoSourceConfiguration (2798)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetVideoSourceConfiguration {
      public:
        /** Optional element 'tr2:SetVideoSourceConfiguration' of XML schema type 'tr2:SetVideoSourceConfiguration' */
        _tr2__SetVideoSourceConfiguration *tr2__SetVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetVideoSourceConfiguration() : tr2__SetVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55767 */
#ifndef SOAP_TYPE___tr2__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE___tr2__SetVideoEncoderConfigurationResponse (2801)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetVideoEncoderConfigurationResponse {
      public:
        /** Required element 'tr2:SetVideoEncoderConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetVideoEncoderConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetVideoEncoderConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetVideoEncoderConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetVideoEncoderConfigurationResponse() : tr2__SetVideoEncoderConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55767 */
#ifndef SOAP_TYPE___tr2__SetVideoEncoderConfiguration
#define SOAP_TYPE___tr2__SetVideoEncoderConfiguration (2802)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetVideoEncoderConfiguration {
      public:
        /** Optional element 'tr2:SetVideoEncoderConfiguration' of XML schema type 'tr2:SetVideoEncoderConfiguration' */
        _tr2__SetVideoEncoderConfiguration *tr2__SetVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetVideoEncoderConfiguration() : tr2__SetVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55842 */
#ifndef SOAP_TYPE___tr2__SetAudioSourceConfigurationResponse
#define SOAP_TYPE___tr2__SetAudioSourceConfigurationResponse (2805)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioSourceConfigurationResponse {
      public:
        /** Required element 'tr2:SetAudioSourceConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetAudioSourceConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioSourceConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioSourceConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetAudioSourceConfigurationResponse() : tr2__SetAudioSourceConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55842 */
#ifndef SOAP_TYPE___tr2__SetAudioSourceConfiguration
#define SOAP_TYPE___tr2__SetAudioSourceConfiguration (2806)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioSourceConfiguration {
      public:
        /** Optional element 'tr2:SetAudioSourceConfiguration' of XML schema type 'tr2:SetAudioSourceConfiguration' */
        _tr2__SetAudioSourceConfiguration *tr2__SetAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetAudioSourceConfiguration() : tr2__SetAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55916 */
#ifndef SOAP_TYPE___tr2__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE___tr2__SetAudioEncoderConfigurationResponse (2809)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioEncoderConfigurationResponse {
      public:
        /** Required element 'tr2:SetAudioEncoderConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetAudioEncoderConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioEncoderConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioEncoderConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetAudioEncoderConfigurationResponse() : tr2__SetAudioEncoderConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55916 */
#ifndef SOAP_TYPE___tr2__SetAudioEncoderConfiguration
#define SOAP_TYPE___tr2__SetAudioEncoderConfiguration (2810)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioEncoderConfiguration {
      public:
        /** Optional element 'tr2:SetAudioEncoderConfiguration' of XML schema type 'tr2:SetAudioEncoderConfiguration' */
        _tr2__SetAudioEncoderConfiguration *tr2__SetAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetAudioEncoderConfiguration() : tr2__SetAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55990 */
#ifndef SOAP_TYPE___tr2__SetMetadataConfigurationResponse
#define SOAP_TYPE___tr2__SetMetadataConfigurationResponse (2813)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetMetadataConfigurationResponse {
      public:
        /** Required element 'tr2:SetMetadataConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetMetadataConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetMetadataConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetMetadataConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetMetadataConfigurationResponse() : tr2__SetMetadataConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:55990 */
#ifndef SOAP_TYPE___tr2__SetMetadataConfiguration
#define SOAP_TYPE___tr2__SetMetadataConfiguration (2814)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetMetadataConfiguration {
      public:
        /** Optional element 'tr2:SetMetadataConfiguration' of XML schema type 'tr2:SetMetadataConfiguration' */
        _tr2__SetMetadataConfiguration *tr2__SetMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetMetadataConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetMetadataConfiguration() : tr2__SetMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56058 */
#ifndef SOAP_TYPE___tr2__SetAudioOutputConfigurationResponse
#define SOAP_TYPE___tr2__SetAudioOutputConfigurationResponse (2817)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioOutputConfigurationResponse {
      public:
        /** Required element 'tr2:SetAudioOutputConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetAudioOutputConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioOutputConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioOutputConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetAudioOutputConfigurationResponse() : tr2__SetAudioOutputConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56058 */
#ifndef SOAP_TYPE___tr2__SetAudioOutputConfiguration
#define SOAP_TYPE___tr2__SetAudioOutputConfiguration (2818)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioOutputConfiguration {
      public:
        /** Optional element 'tr2:SetAudioOutputConfiguration' of XML schema type 'tr2:SetAudioOutputConfiguration' */
        _tr2__SetAudioOutputConfiguration *tr2__SetAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetAudioOutputConfiguration() : tr2__SetAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56126 */
#ifndef SOAP_TYPE___tr2__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE___tr2__SetAudioDecoderConfigurationResponse (2821)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioDecoderConfigurationResponse {
      public:
        /** Required element 'tr2:SetAudioDecoderConfigurationResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetAudioDecoderConfigurationResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioDecoderConfigurationResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioDecoderConfigurationResponse; }
        /** Constructor with member initializations */
        __tr2__SetAudioDecoderConfigurationResponse() : tr2__SetAudioDecoderConfigurationResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___tr2__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56126 */
#ifndef SOAP_TYPE___tr2__SetAudioDecoderConfiguration
#define SOAP_TYPE___tr2__SetAudioDecoderConfiguration (2822)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetAudioDecoderConfiguration {
      public:
        /** Optional element 'tr2:SetAudioDecoderConfiguration' of XML schema type 'tr2:SetAudioDecoderConfiguration' */
        _tr2__SetAudioDecoderConfiguration *tr2__SetAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___tr2__SetAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __tr2__SetAudioDecoderConfiguration() : tr2__SetAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___tr2__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56200 */
#ifndef SOAP_TYPE___tr2__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___tr2__GetVideoSourceConfigurationOptions (2825)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoSourceConfigurationOptions {
      public:
        /** Optional element 'tr2:GetVideoSourceConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetVideoSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetVideoSourceConfigurationOptions() : tr2__GetVideoSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56278 */
#ifndef SOAP_TYPE___tr2__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___tr2__GetVideoEncoderConfigurationOptions (2828)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoEncoderConfigurationOptions {
      public:
        /** Optional element 'tr2:GetVideoEncoderConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetVideoEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetVideoEncoderConfigurationOptions() : tr2__GetVideoEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56352 */
#ifndef SOAP_TYPE___tr2__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___tr2__GetAudioSourceConfigurationOptions (2831)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioSourceConfigurationOptions {
      public:
        /** Optional element 'tr2:GetAudioSourceConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetAudioSourceConfigurationOptions() : tr2__GetAudioSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56422 */
#ifndef SOAP_TYPE___tr2__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___tr2__GetAudioEncoderConfigurationOptions (2834)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioEncoderConfigurationOptions {
      public:
        /** Optional element 'tr2:GetAudioEncoderConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetAudioEncoderConfigurationOptions() : tr2__GetAudioEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56491 */
#ifndef SOAP_TYPE___tr2__GetMetadataConfigurationOptions
#define SOAP_TYPE___tr2__GetMetadataConfigurationOptions (2837)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetMetadataConfigurationOptions {
      public:
        /** Optional element 'tr2:GetMetadataConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetMetadataConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetMetadataConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetMetadataConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetMetadataConfigurationOptions() : tr2__GetMetadataConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56560 */
#ifndef SOAP_TYPE___tr2__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___tr2__GetAudioOutputConfigurationOptions (2840)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioOutputConfigurationOptions {
      public:
        /** Optional element 'tr2:GetAudioOutputConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioOutputConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioOutputConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioOutputConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetAudioOutputConfigurationOptions() : tr2__GetAudioOutputConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56630 */
#ifndef SOAP_TYPE___tr2__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___tr2__GetAudioDecoderConfigurationOptions (2843)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetAudioDecoderConfigurationOptions {
      public:
        /** Optional element 'tr2:GetAudioDecoderConfigurationOptions' of XML schema type 'tr2:GetConfiguration' */
        tr2__GetConfiguration *tr2__GetAudioDecoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetAudioDecoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetAudioDecoderConfigurationOptions; }
        /** Constructor with member initializations */
        __tr2__GetAudioDecoderConfigurationOptions() : tr2__GetAudioDecoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___tr2__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56701 */
#ifndef SOAP_TYPE___tr2__GetVideoEncoderInstances
#define SOAP_TYPE___tr2__GetVideoEncoderInstances (2847)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoEncoderInstances {
      public:
        /** Optional element 'tr2:GetVideoEncoderInstances' of XML schema type 'tr2:GetVideoEncoderInstances' */
        _tr2__GetVideoEncoderInstances *tr2__GetVideoEncoderInstances;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoEncoderInstances */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoEncoderInstances; }
        /** Constructor with member initializations */
        __tr2__GetVideoEncoderInstances() : tr2__GetVideoEncoderInstances() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___tr2__GetVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56789 */
#ifndef SOAP_TYPE___tr2__GetStreamUri
#define SOAP_TYPE___tr2__GetStreamUri (2851)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetStreamUri {
      public:
        /** Optional element 'tr2:GetStreamUri' of XML schema type 'tr2:GetStreamUri' */
        _tr2__GetStreamUri *tr2__GetStreamUri;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetStreamUri */
        long soap_type() const { return SOAP_TYPE___tr2__GetStreamUri; }
        /** Constructor with member initializations */
        __tr2__GetStreamUri() : tr2__GetStreamUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetStreamUri * SOAP_FMAC2 soap_instantiate___tr2__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56866 */
#ifndef SOAP_TYPE___tr2__StartMulticastStreamingResponse
#define SOAP_TYPE___tr2__StartMulticastStreamingResponse (2854)
/* Wrapper: */
struct SOAP_CMAC __tr2__StartMulticastStreamingResponse {
      public:
        /** Required element 'tr2:StartMulticastStreamingResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__StartMulticastStreamingResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__StartMulticastStreamingResponse */
        long soap_type() const { return SOAP_TYPE___tr2__StartMulticastStreamingResponse; }
        /** Constructor with member initializations */
        __tr2__StartMulticastStreamingResponse() : tr2__StartMulticastStreamingResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate___tr2__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56866 */
#ifndef SOAP_TYPE___tr2__StartMulticastStreaming
#define SOAP_TYPE___tr2__StartMulticastStreaming (2855)
/* Wrapper: */
struct SOAP_CMAC __tr2__StartMulticastStreaming {
      public:
        /** Optional element 'tr2:StartMulticastStreaming' of XML schema type 'tr2:StartStopMulticastStreaming' */
        tr2__StartStopMulticastStreaming *tr2__StartMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___tr2__StartMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___tr2__StartMulticastStreaming; }
        /** Constructor with member initializations */
        __tr2__StartMulticastStreaming() : tr2__StartMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___tr2__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56934 */
#ifndef SOAP_TYPE___tr2__StopMulticastStreamingResponse
#define SOAP_TYPE___tr2__StopMulticastStreamingResponse (2857)
/* Wrapper: */
struct SOAP_CMAC __tr2__StopMulticastStreamingResponse {
      public:
        /** Required element 'tr2:StopMulticastStreamingResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__StopMulticastStreamingResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__StopMulticastStreamingResponse */
        long soap_type() const { return SOAP_TYPE___tr2__StopMulticastStreamingResponse; }
        /** Constructor with member initializations */
        __tr2__StopMulticastStreamingResponse() : tr2__StopMulticastStreamingResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate___tr2__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:56934 */
#ifndef SOAP_TYPE___tr2__StopMulticastStreaming
#define SOAP_TYPE___tr2__StopMulticastStreaming (2858)
/* Wrapper: */
struct SOAP_CMAC __tr2__StopMulticastStreaming {
      public:
        /** Optional element 'tr2:StopMulticastStreaming' of XML schema type 'tr2:StartStopMulticastStreaming' */
        tr2__StartStopMulticastStreaming *tr2__StopMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___tr2__StopMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___tr2__StopMulticastStreaming; }
        /** Constructor with member initializations */
        __tr2__StopMulticastStreaming() : tr2__StopMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___tr2__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57019 */
#ifndef SOAP_TYPE___tr2__SetSynchronizationPoint
#define SOAP_TYPE___tr2__SetSynchronizationPoint (2862)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetSynchronizationPoint {
      public:
        /** Optional element 'tr2:SetSynchronizationPoint' of XML schema type 'tr2:SetSynchronizationPoint' */
        _tr2__SetSynchronizationPoint *tr2__SetSynchronizationPoint;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetSynchronizationPoint */
        long soap_type() const { return SOAP_TYPE___tr2__SetSynchronizationPoint; }
        /** Constructor with member initializations */
        __tr2__SetSynchronizationPoint() : tr2__SetSynchronizationPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___tr2__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57097 */
#ifndef SOAP_TYPE___tr2__GetSnapshotUri
#define SOAP_TYPE___tr2__GetSnapshotUri (2866)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetSnapshotUri {
      public:
        /** Optional element 'tr2:GetSnapshotUri' of XML schema type 'tr2:GetSnapshotUri' */
        _tr2__GetSnapshotUri *tr2__GetSnapshotUri;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetSnapshotUri */
        long soap_type() const { return SOAP_TYPE___tr2__GetSnapshotUri; }
        /** Constructor with member initializations */
        __tr2__GetSnapshotUri() : tr2__GetSnapshotUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___tr2__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57167 */
#ifndef SOAP_TYPE___tr2__GetVideoSourceModes
#define SOAP_TYPE___tr2__GetVideoSourceModes (2870)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetVideoSourceModes {
      public:
        /** Optional element 'tr2:GetVideoSourceModes' of XML schema type 'tr2:GetVideoSourceModes' */
        _tr2__GetVideoSourceModes *tr2__GetVideoSourceModes;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetVideoSourceModes */
        long soap_type() const { return SOAP_TYPE___tr2__GetVideoSourceModes; }
        /** Constructor with member initializations */
        __tr2__GetVideoSourceModes() : tr2__GetVideoSourceModes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___tr2__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57238 */
#ifndef SOAP_TYPE___tr2__SetVideoSourceMode
#define SOAP_TYPE___tr2__SetVideoSourceMode (2874)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetVideoSourceMode {
      public:
        /** Optional element 'tr2:SetVideoSourceMode' of XML schema type 'tr2:SetVideoSourceMode' */
        _tr2__SetVideoSourceMode *tr2__SetVideoSourceMode;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetVideoSourceMode */
        long soap_type() const { return SOAP_TYPE___tr2__SetVideoSourceMode; }
        /** Constructor with member initializations */
        __tr2__SetVideoSourceMode() : tr2__SetVideoSourceMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___tr2__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57317 */
#ifndef SOAP_TYPE___tr2__GetOSDs
#define SOAP_TYPE___tr2__GetOSDs (2878)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetOSDs {
      public:
        /** Optional element 'tr2:GetOSDs' of XML schema type 'tr2:GetOSDs' */
        _tr2__GetOSDs *tr2__GetOSDs;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetOSDs */
        long soap_type() const { return SOAP_TYPE___tr2__GetOSDs; }
        /** Constructor with member initializations */
        __tr2__GetOSDs() : tr2__GetOSDs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetOSDs * SOAP_FMAC2 soap_instantiate___tr2__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57385 */
#ifndef SOAP_TYPE___tr2__GetOSDOptions
#define SOAP_TYPE___tr2__GetOSDOptions (2882)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetOSDOptions {
      public:
        /** Optional element 'tr2:GetOSDOptions' of XML schema type 'tr2:GetOSDOptions' */
        _tr2__GetOSDOptions *tr2__GetOSDOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetOSDOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetOSDOptions; }
        /** Constructor with member initializations */
        __tr2__GetOSDOptions() : tr2__GetOSDOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetOSDOptions * SOAP_FMAC2 soap_instantiate___tr2__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57453 */
#ifndef SOAP_TYPE___tr2__SetOSDResponse
#define SOAP_TYPE___tr2__SetOSDResponse (2885)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetOSDResponse {
      public:
        /** Required element 'tr2:SetOSDResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetOSDResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetOSDResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetOSDResponse; }
        /** Constructor with member initializations */
        __tr2__SetOSDResponse() : tr2__SetOSDResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetOSDResponse * SOAP_FMAC2 soap_instantiate___tr2__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57453 */
#ifndef SOAP_TYPE___tr2__SetOSD
#define SOAP_TYPE___tr2__SetOSD (2886)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetOSD {
      public:
        /** Optional element 'tr2:SetOSD' of XML schema type 'tr2:SetOSD' */
        _tr2__SetOSD *tr2__SetOSD;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetOSD */
        long soap_type() const { return SOAP_TYPE___tr2__SetOSD; }
        /** Constructor with member initializations */
        __tr2__SetOSD() : tr2__SetOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetOSD * SOAP_FMAC2 soap_instantiate___tr2__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57521 */
#ifndef SOAP_TYPE___tr2__CreateOSD
#define SOAP_TYPE___tr2__CreateOSD (2890)
/* Wrapper: */
struct SOAP_CMAC __tr2__CreateOSD {
      public:
        /** Optional element 'tr2:CreateOSD' of XML schema type 'tr2:CreateOSD' */
        _tr2__CreateOSD *tr2__CreateOSD;
      public:
        /** Return unique type id SOAP_TYPE___tr2__CreateOSD */
        long soap_type() const { return SOAP_TYPE___tr2__CreateOSD; }
        /** Constructor with member initializations */
        __tr2__CreateOSD() : tr2__CreateOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__CreateOSD * SOAP_FMAC2 soap_instantiate___tr2__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57589 */
#ifndef SOAP_TYPE___tr2__DeleteOSDResponse
#define SOAP_TYPE___tr2__DeleteOSDResponse (2893)
/* Wrapper: */
struct SOAP_CMAC __tr2__DeleteOSDResponse {
      public:
        /** Required element 'tr2:DeleteOSDResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__DeleteOSDResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__DeleteOSDResponse */
        long soap_type() const { return SOAP_TYPE___tr2__DeleteOSDResponse; }
        /** Constructor with member initializations */
        __tr2__DeleteOSDResponse() : tr2__DeleteOSDResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate___tr2__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57589 */
#ifndef SOAP_TYPE___tr2__DeleteOSD
#define SOAP_TYPE___tr2__DeleteOSD (2894)
/* Wrapper: */
struct SOAP_CMAC __tr2__DeleteOSD {
      public:
        /** Optional element 'tr2:DeleteOSD' of XML schema type 'tr2:DeleteOSD' */
        _tr2__DeleteOSD *tr2__DeleteOSD;
      public:
        /** Return unique type id SOAP_TYPE___tr2__DeleteOSD */
        long soap_type() const { return SOAP_TYPE___tr2__DeleteOSD; }
        /** Constructor with member initializations */
        __tr2__DeleteOSD() : tr2__DeleteOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__DeleteOSD * SOAP_FMAC2 soap_instantiate___tr2__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57668 */
#ifndef SOAP_TYPE___tr2__GetMasks
#define SOAP_TYPE___tr2__GetMasks (2898)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetMasks {
      public:
        /** Optional element 'tr2:GetMasks' of XML schema type 'tr2:GetMasks' */
        _tr2__GetMasks *tr2__GetMasks;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetMasks */
        long soap_type() const { return SOAP_TYPE___tr2__GetMasks; }
        /** Constructor with member initializations */
        __tr2__GetMasks() : tr2__GetMasks() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetMasks * SOAP_FMAC2 soap_instantiate___tr2__GetMasks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57736 */
#ifndef SOAP_TYPE___tr2__GetMaskOptions
#define SOAP_TYPE___tr2__GetMaskOptions (2902)
/* Wrapper: */
struct SOAP_CMAC __tr2__GetMaskOptions {
      public:
        /** Optional element 'tr2:GetMaskOptions' of XML schema type 'tr2:GetMaskOptions' */
        _tr2__GetMaskOptions *tr2__GetMaskOptions;
      public:
        /** Return unique type id SOAP_TYPE___tr2__GetMaskOptions */
        long soap_type() const { return SOAP_TYPE___tr2__GetMaskOptions; }
        /** Constructor with member initializations */
        __tr2__GetMaskOptions() : tr2__GetMaskOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__GetMaskOptions * SOAP_FMAC2 soap_instantiate___tr2__GetMaskOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57804 */
#ifndef SOAP_TYPE___tr2__SetMaskResponse
#define SOAP_TYPE___tr2__SetMaskResponse (2905)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetMaskResponse {
      public:
        /** Required element 'tr2:SetMaskResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__SetMaskResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetMaskResponse */
        long soap_type() const { return SOAP_TYPE___tr2__SetMaskResponse; }
        /** Constructor with member initializations */
        __tr2__SetMaskResponse() : tr2__SetMaskResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetMaskResponse * SOAP_FMAC2 soap_instantiate___tr2__SetMaskResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57804 */
#ifndef SOAP_TYPE___tr2__SetMask
#define SOAP_TYPE___tr2__SetMask (2906)
/* Wrapper: */
struct SOAP_CMAC __tr2__SetMask {
      public:
        /** Optional element 'tr2:SetMask' of XML schema type 'tr2:SetMask' */
        _tr2__SetMask *tr2__SetMask;
      public:
        /** Return unique type id SOAP_TYPE___tr2__SetMask */
        long soap_type() const { return SOAP_TYPE___tr2__SetMask; }
        /** Constructor with member initializations */
        __tr2__SetMask() : tr2__SetMask() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__SetMask * SOAP_FMAC2 soap_instantiate___tr2__SetMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57872 */
#ifndef SOAP_TYPE___tr2__CreateMask
#define SOAP_TYPE___tr2__CreateMask (2910)
/* Wrapper: */
struct SOAP_CMAC __tr2__CreateMask {
      public:
        /** Optional element 'tr2:CreateMask' of XML schema type 'tr2:CreateMask' */
        _tr2__CreateMask *tr2__CreateMask;
      public:
        /** Return unique type id SOAP_TYPE___tr2__CreateMask */
        long soap_type() const { return SOAP_TYPE___tr2__CreateMask; }
        /** Constructor with member initializations */
        __tr2__CreateMask() : tr2__CreateMask() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__CreateMask * SOAP_FMAC2 soap_instantiate___tr2__CreateMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57940 */
#ifndef SOAP_TYPE___tr2__DeleteMaskResponse
#define SOAP_TYPE___tr2__DeleteMaskResponse (2913)
/* Wrapper: */
struct SOAP_CMAC __tr2__DeleteMaskResponse {
      public:
        /** Required element 'tr2:DeleteMaskResponse' of XML schema type 'tr2:SetConfigurationResponse' */
        tr2__SetConfigurationResponse tr2__DeleteMaskResponse;
      public:
        /** Return unique type id SOAP_TYPE___tr2__DeleteMaskResponse */
        long soap_type() const { return SOAP_TYPE___tr2__DeleteMaskResponse; }
        /** Constructor with member initializations */
        __tr2__DeleteMaskResponse() : tr2__DeleteMaskResponse() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__DeleteMaskResponse * SOAP_FMAC2 soap_instantiate___tr2__DeleteMaskResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:57940 */
#ifndef SOAP_TYPE___tr2__DeleteMask
#define SOAP_TYPE___tr2__DeleteMask (2914)
/* Wrapper: */
struct SOAP_CMAC __tr2__DeleteMask {
      public:
        /** Optional element 'tr2:DeleteMask' of XML schema type 'tr2:DeleteMask' */
        _tr2__DeleteMask *tr2__DeleteMask;
      public:
        /** Return unique type id SOAP_TYPE___tr2__DeleteMask */
        long soap_type() const { return SOAP_TYPE___tr2__DeleteMask; }
        /** Constructor with member initializations */
        __tr2__DeleteMask() : tr2__DeleteMask() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tr2__DeleteMask * SOAP_FMAC2 soap_instantiate___tr2__DeleteMask(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58025 */
#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (2918)
/* Wrapper: */
struct SOAP_CMAC __trt__GetServiceCapabilities {
      public:
        /** Optional element 'trt:GetServiceCapabilities' of XML schema type 'trt:GetServiceCapabilities' */
        _trt__GetServiceCapabilities *trt__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___trt__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __trt__GetServiceCapabilities() : trt__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___trt__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58093 */
#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (2922)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSources {
      public:
        /** Optional element 'trt:GetVideoSources' of XML schema type 'trt:GetVideoSources' */
        _trt__GetVideoSources *trt__GetVideoSources;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSources */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSources; }
        /** Constructor with member initializations */
        __trt__GetVideoSources() : trt__GetVideoSources() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSources * SOAP_FMAC2 soap_instantiate___trt__GetVideoSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58161 */
#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (2926)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSources {
      public:
        /** Optional element 'trt:GetAudioSources' of XML schema type 'trt:GetAudioSources' */
        _trt__GetAudioSources *trt__GetAudioSources;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSources */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSources; }
        /** Constructor with member initializations */
        __trt__GetAudioSources() : trt__GetAudioSources() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSources * SOAP_FMAC2 soap_instantiate___trt__GetAudioSources(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58229 */
#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (2930)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputs {
      public:
        /** Optional element 'trt:GetAudioOutputs' of XML schema type 'trt:GetAudioOutputs' */
        _trt__GetAudioOutputs *trt__GetAudioOutputs;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputs */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputs; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputs() : trt__GetAudioOutputs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputs * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58301 */
#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (2934)
/* Wrapper: */
struct SOAP_CMAC __trt__CreateProfile {
      public:
        /** Optional element 'trt:CreateProfile' of XML schema type 'trt:CreateProfile' */
        _trt__CreateProfile *trt__CreateProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__CreateProfile */
        long soap_type() const { return SOAP_TYPE___trt__CreateProfile; }
        /** Constructor with member initializations */
        __trt__CreateProfile() : trt__CreateProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__CreateProfile * SOAP_FMAC2 soap_instantiate___trt__CreateProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58370 */
#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (2938)
/* Wrapper: */
struct SOAP_CMAC __trt__GetProfile {
      public:
        /** Optional element 'trt:GetProfile' of XML schema type 'trt:GetProfile' */
        _trt__GetProfile *trt__GetProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetProfile */
        long soap_type() const { return SOAP_TYPE___trt__GetProfile; }
        /** Constructor with member initializations */
        __trt__GetProfile() : trt__GetProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetProfile * SOAP_FMAC2 soap_instantiate___trt__GetProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58443 */
#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (2942)
/* Wrapper: */
struct SOAP_CMAC __trt__GetProfiles {
      public:
        /** Optional element 'trt:GetProfiles' of XML schema type 'trt:GetProfiles' */
        _trt__GetProfiles *trt__GetProfiles;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetProfiles */
        long soap_type() const { return SOAP_TYPE___trt__GetProfiles; }
        /** Constructor with member initializations */
        __trt__GetProfiles() : trt__GetProfiles() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetProfiles * SOAP_FMAC2 soap_instantiate___trt__GetProfiles(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58518 */
#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (2946)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:AddVideoEncoderConfiguration' of XML schema type 'trt:AddVideoEncoderConfiguration' */
        _trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoEncoderConfiguration() : trt__AddVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58589 */
#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (2950)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoSourceConfiguration {
      public:
        /** Optional element 'trt:AddVideoSourceConfiguration' of XML schema type 'trt:AddVideoSourceConfiguration' */
        _trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoSourceConfiguration() : trt__AddVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58664 */
#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (2954)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:AddAudioEncoderConfiguration' of XML schema type 'trt:AddAudioEncoderConfiguration' */
        _trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioEncoderConfiguration() : trt__AddAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58735 */
#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (2958)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioSourceConfiguration {
      public:
        /** Optional element 'trt:AddAudioSourceConfiguration' of XML schema type 'trt:AddAudioSourceConfiguration' */
        _trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioSourceConfiguration() : trt__AddAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58810 */
#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (2962)
/* Wrapper: */
struct SOAP_CMAC __trt__AddPTZConfiguration {
      public:
        /** Optional element 'trt:AddPTZConfiguration' of XML schema type 'trt:AddPTZConfiguration' */
        _trt__AddPTZConfiguration *trt__AddPTZConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddPTZConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddPTZConfiguration; }
        /** Constructor with member initializations */
        __trt__AddPTZConfiguration() : trt__AddPTZConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddPTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddPTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58888 */
#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (2966)
/* Wrapper: */
struct SOAP_CMAC __trt__AddVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:AddVideoAnalyticsConfiguration' of XML schema type 'trt:AddVideoAnalyticsConfiguration' */
        _trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__AddVideoAnalyticsConfiguration() : trt__AddVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:58960 */
#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (2970)
/* Wrapper: */
struct SOAP_CMAC __trt__AddMetadataConfiguration {
      public:
        /** Optional element 'trt:AddMetadataConfiguration' of XML schema type 'trt:AddMetadataConfiguration' */
        _trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__AddMetadataConfiguration() : trt__AddMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59030 */
#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (2974)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioOutputConfiguration {
      public:
        /** Optional element 'trt:AddAudioOutputConfiguration' of XML schema type 'trt:AddAudioOutputConfiguration' */
        _trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioOutputConfiguration() : trt__AddAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59100 */
#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (2978)
/* Wrapper: */
struct SOAP_CMAC __trt__AddAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:AddAudioDecoderConfiguration' of XML schema type 'trt:AddAudioDecoderConfiguration' */
        _trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__AddAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__AddAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__AddAudioDecoderConfiguration() : trt__AddAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__AddAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__AddAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59171 */
#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (2982)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoEncoderConfiguration' of XML schema type 'trt:RemoveVideoEncoderConfiguration' */
        _trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoEncoderConfiguration() : trt__RemoveVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59244 */
#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (2986)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoSourceConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoSourceConfiguration' of XML schema type 'trt:RemoveVideoSourceConfiguration' */
        _trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoSourceConfiguration() : trt__RemoveVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59316 */
#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (2990)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioEncoderConfiguration' of XML schema type 'trt:RemoveAudioEncoderConfiguration' */
        _trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioEncoderConfiguration() : trt__RemoveAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59390 */
#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (2994)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioSourceConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioSourceConfiguration' of XML schema type 'trt:RemoveAudioSourceConfiguration' */
        _trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioSourceConfiguration() : trt__RemoveAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59461 */
#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (2998)
/* Wrapper: */
struct SOAP_CMAC __trt__RemovePTZConfiguration {
      public:
        /** Optional element 'trt:RemovePTZConfiguration' of XML schema type 'trt:RemovePTZConfiguration' */
        _trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemovePTZConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemovePTZConfiguration; }
        /** Constructor with member initializations */
        __trt__RemovePTZConfiguration() : trt__RemovePTZConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemovePTZConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemovePTZConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59532 */
#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (3002)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:RemoveVideoAnalyticsConfiguration' of XML schema type 'trt:RemoveVideoAnalyticsConfiguration' */
        _trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveVideoAnalyticsConfiguration() : trt__RemoveVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59602 */
#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (3006)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveMetadataConfiguration {
      public:
        /** Optional element 'trt:RemoveMetadataConfiguration' of XML schema type 'trt:RemoveMetadataConfiguration' */
        _trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveMetadataConfiguration() : trt__RemoveMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59672 */
#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (3010)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioOutputConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioOutputConfiguration' of XML schema type 'trt:RemoveAudioOutputConfiguration' */
        _trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioOutputConfiguration() : trt__RemoveAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59742 */
#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (3014)
/* Wrapper: */
struct SOAP_CMAC __trt__RemoveAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:RemoveAudioDecoderConfiguration' of XML schema type 'trt:RemoveAudioDecoderConfiguration' */
        _trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__RemoveAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__RemoveAudioDecoderConfiguration() : trt__RemoveAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__RemoveAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__RemoveAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59811 */
#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (3018)
/* Wrapper: */
struct SOAP_CMAC __trt__DeleteProfile {
      public:
        /** Optional element 'trt:DeleteProfile' of XML schema type 'trt:DeleteProfile' */
        _trt__DeleteProfile *trt__DeleteProfile;
      public:
        /** Return unique type id SOAP_TYPE___trt__DeleteProfile */
        long soap_type() const { return SOAP_TYPE___trt__DeleteProfile; }
        /** Constructor with member initializations */
        __trt__DeleteProfile() : trt__DeleteProfile() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__DeleteProfile * SOAP_FMAC2 soap_instantiate___trt__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59881 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (3022)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfigurations {
      public:
        /** Optional element 'trt:GetVideoSourceConfigurations' of XML schema type 'trt:GetVideoSourceConfigurations' */
        _trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfigurations() : trt__GetVideoSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:59952 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (3026)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfigurations {
      public:
        /** Optional element 'trt:GetVideoEncoderConfigurations' of XML schema type 'trt:GetVideoEncoderConfigurations' */
        _trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfigurations() : trt__GetVideoEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60023 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (3030)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfigurations {
      public:
        /** Optional element 'trt:GetAudioSourceConfigurations' of XML schema type 'trt:GetAudioSourceConfigurations' */
        _trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfigurations() : trt__GetAudioSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60093 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (3034)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfigurations {
      public:
        /** Optional element 'trt:GetAudioEncoderConfigurations' of XML schema type 'trt:GetAudioEncoderConfigurations' */
        _trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfigurations() : trt__GetAudioEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60163 */
#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (3038)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoAnalyticsConfigurations {
      public:
        /** Optional element 'trt:GetVideoAnalyticsConfigurations' of XML schema type 'trt:GetVideoAnalyticsConfigurations' */
        _trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoAnalyticsConfigurations; }
        /** Constructor with member initializations */
        __trt__GetVideoAnalyticsConfigurations() : trt__GetVideoAnalyticsConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60232 */
#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (3042)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfigurations {
      public:
        /** Optional element 'trt:GetMetadataConfigurations' of XML schema type 'trt:GetMetadataConfigurations' */
        _trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfigurations; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfigurations() : trt__GetMetadataConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60301 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (3046)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfigurations {
      public:
        /** Optional element 'trt:GetAudioOutputConfigurations' of XML schema type 'trt:GetAudioOutputConfigurations' */
        _trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfigurations() : trt__GetAudioOutputConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60372 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (3050)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfigurations {
      public:
        /** Optional element 'trt:GetAudioDecoderConfigurations' of XML schema type 'trt:GetAudioDecoderConfigurations' */
        _trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfigurations() : trt__GetAudioDecoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60441 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (3054)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfiguration {
      public:
        /** Optional element 'trt:GetVideoSourceConfiguration' of XML schema type 'trt:GetVideoSourceConfiguration' */
        _trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfiguration() : trt__GetVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60510 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (3058)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:GetVideoEncoderConfiguration' of XML schema type 'trt:GetVideoEncoderConfiguration' */
        _trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfiguration() : trt__GetVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60579 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (3062)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfiguration {
      public:
        /** Optional element 'trt:GetAudioSourceConfiguration' of XML schema type 'trt:GetAudioSourceConfiguration' */
        _trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfiguration() : trt__GetAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60648 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (3066)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:GetAudioEncoderConfiguration' of XML schema type 'trt:GetAudioEncoderConfiguration' */
        _trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfiguration() : trt__GetAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60717 */
#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (3070)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:GetVideoAnalyticsConfiguration' of XML schema type 'trt:GetVideoAnalyticsConfiguration' */
        _trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__GetVideoAnalyticsConfiguration() : trt__GetVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60786 */
#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (3074)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfiguration {
      public:
        /** Optional element 'trt:GetMetadataConfiguration' of XML schema type 'trt:GetMetadataConfiguration' */
        _trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfiguration() : trt__GetMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60855 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (3078)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfiguration {
      public:
        /** Optional element 'trt:GetAudioOutputConfiguration' of XML schema type 'trt:GetAudioOutputConfiguration' */
        _trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfiguration() : trt__GetAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60924 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (3082)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:GetAudioDecoderConfiguration' of XML schema type 'trt:GetAudioDecoderConfiguration' */
        _trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfiguration() : trt__GetAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:60996 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (3086)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoEncoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoEncoderConfigurations' of XML schema type 'trt:GetCompatibleVideoEncoderConfigurations' */
        _trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoEncoderConfigurations() : trt__GetCompatibleVideoEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61070 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (3090)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoSourceConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoSourceConfigurations' of XML schema type 'trt:GetCompatibleVideoSourceConfigurations' */
        _trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoSourceConfigurations() : trt__GetCompatibleVideoSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61142 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (3094)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioEncoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioEncoderConfigurations' of XML schema type 'trt:GetCompatibleAudioEncoderConfigurations' */
        _trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioEncoderConfigurations() : trt__GetCompatibleAudioEncoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61214 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (3098)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioSourceConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioSourceConfigurations' of XML schema type 'trt:GetCompatibleAudioSourceConfigurations' */
        _trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioSourceConfigurations() : trt__GetCompatibleAudioSourceConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61286 */
#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (3102)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleVideoAnalyticsConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleVideoAnalyticsConfigurations' of XML schema type 'trt:GetCompatibleVideoAnalyticsConfigurations' */
        _trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleVideoAnalyticsConfigurations() : trt__GetCompatibleVideoAnalyticsConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleVideoAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleVideoAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61358 */
#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (3106)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleMetadataConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleMetadataConfigurations' of XML schema type 'trt:GetCompatibleMetadataConfigurations' */
        _trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleMetadataConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleMetadataConfigurations() : trt__GetCompatibleMetadataConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleMetadataConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61429 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (3110)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioOutputConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioOutputConfigurations' of XML schema type 'trt:GetCompatibleAudioOutputConfigurations' */
        _trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioOutputConfigurations() : trt__GetCompatibleAudioOutputConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61500 */
#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (3114)
/* Wrapper: */
struct SOAP_CMAC __trt__GetCompatibleAudioDecoderConfigurations {
      public:
        /** Optional element 'trt:GetCompatibleAudioDecoderConfigurations' of XML schema type 'trt:GetCompatibleAudioDecoderConfigurations' */
        _trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations */
        long soap_type() const { return SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations; }
        /** Constructor with member initializations */
        __trt__GetCompatibleAudioDecoderConfigurations() : trt__GetCompatibleAudioDecoderConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetCompatibleAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___trt__GetCompatibleAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61573 */
#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (3118)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoSourceConfiguration {
      public:
        /** Optional element 'trt:SetVideoSourceConfiguration' of XML schema type 'trt:SetVideoSourceConfiguration' */
        _trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoSourceConfiguration() : trt__SetVideoSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61650 */
#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (3122)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoEncoderConfiguration {
      public:
        /** Optional element 'trt:SetVideoEncoderConfiguration' of XML schema type 'trt:SetVideoEncoderConfiguration' */
        _trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoEncoderConfiguration() : trt__SetVideoEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61725 */
#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (3126)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioSourceConfiguration {
      public:
        /** Optional element 'trt:SetAudioSourceConfiguration' of XML schema type 'trt:SetAudioSourceConfiguration' */
        _trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioSourceConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioSourceConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioSourceConfiguration() : trt__SetAudioSourceConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61801 */
#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (3130)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioEncoderConfiguration {
      public:
        /** Optional element 'trt:SetAudioEncoderConfiguration' of XML schema type 'trt:SetAudioEncoderConfiguration' */
        _trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioEncoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioEncoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioEncoderConfiguration() : trt__SetAudioEncoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61879 */
#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (3134)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoAnalyticsConfiguration {
      public:
        /** Optional element 'trt:SetVideoAnalyticsConfiguration' of XML schema type 'trt:SetVideoAnalyticsConfiguration' */
        _trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoAnalyticsConfiguration; }
        /** Constructor with member initializations */
        __trt__SetVideoAnalyticsConfiguration() : trt__SetVideoAnalyticsConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetVideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:61956 */
#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (3138)
/* Wrapper: */
struct SOAP_CMAC __trt__SetMetadataConfiguration {
      public:
        /** Optional element 'trt:SetMetadataConfiguration' of XML schema type 'trt:SetMetadataConfiguration' */
        _trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetMetadataConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetMetadataConfiguration; }
        /** Constructor with member initializations */
        __trt__SetMetadataConfiguration() : trt__SetMetadataConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62026 */
#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (3142)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioOutputConfiguration {
      public:
        /** Optional element 'trt:SetAudioOutputConfiguration' of XML schema type 'trt:SetAudioOutputConfiguration' */
        _trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioOutputConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioOutputConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioOutputConfiguration() : trt__SetAudioOutputConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62096 */
#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (3146)
/* Wrapper: */
struct SOAP_CMAC __trt__SetAudioDecoderConfiguration {
      public:
        /** Optional element 'trt:SetAudioDecoderConfiguration' of XML schema type 'trt:SetAudioDecoderConfiguration' */
        _trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetAudioDecoderConfiguration */
        long soap_type() const { return SOAP_TYPE___trt__SetAudioDecoderConfiguration; }
        /** Constructor with member initializations */
        __trt__SetAudioDecoderConfiguration() : trt__SetAudioDecoderConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___trt__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62170 */
#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (3150)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceConfigurationOptions {
      public:
        /** Optional element 'trt:GetVideoSourceConfigurationOptions' of XML schema type 'trt:GetVideoSourceConfigurationOptions' */
        _trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceConfigurationOptions() : trt__GetVideoSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62252 */
#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (3154)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoEncoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetVideoEncoderConfigurationOptions' of XML schema type 'trt:GetVideoEncoderConfigurationOptions' */
        _trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetVideoEncoderConfigurationOptions() : trt__GetVideoEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62326 */
#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (3158)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioSourceConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioSourceConfigurationOptions' of XML schema type 'trt:GetAudioSourceConfigurationOptions' */
        _trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioSourceConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioSourceConfigurationOptions() : trt__GetAudioSourceConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62396 */
#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (3162)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioEncoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioEncoderConfigurationOptions' of XML schema type 'trt:GetAudioEncoderConfigurationOptions' */
        _trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioEncoderConfigurationOptions() : trt__GetAudioEncoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62465 */
#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (3166)
/* Wrapper: */
struct SOAP_CMAC __trt__GetMetadataConfigurationOptions {
      public:
        /** Optional element 'trt:GetMetadataConfigurationOptions' of XML schema type 'trt:GetMetadataConfigurationOptions' */
        _trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetMetadataConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetMetadataConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetMetadataConfigurationOptions() : trt__GetMetadataConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62534 */
#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (3170)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioOutputConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioOutputConfigurationOptions' of XML schema type 'trt:GetAudioOutputConfigurationOptions' */
        _trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioOutputConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioOutputConfigurationOptions() : trt__GetAudioOutputConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62604 */
#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (3174)
/* Wrapper: */
struct SOAP_CMAC __trt__GetAudioDecoderConfigurationOptions {
      public:
        /** Optional element 'trt:GetAudioDecoderConfigurationOptions' of XML schema type 'trt:GetAudioDecoderConfigurationOptions' */
        _trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions; }
        /** Constructor with member initializations */
        __trt__GetAudioDecoderConfigurationOptions() : trt__GetAudioDecoderConfigurationOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___trt__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62674 */
#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (3178)
/* Wrapper: */
struct SOAP_CMAC __trt__GetGuaranteedNumberOfVideoEncoderInstances {
      public:
        /** Optional element 'trt:GetGuaranteedNumberOfVideoEncoderInstances' of XML schema type 'trt:GetGuaranteedNumberOfVideoEncoderInstances' */
        _trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances */
        long soap_type() const { return SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances; }
        /** Constructor with member initializations */
        __trt__GetGuaranteedNumberOfVideoEncoderInstances() : trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetGuaranteedNumberOfVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___trt__GetGuaranteedNumberOfVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62765 */
#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (3182)
/* Wrapper: */
struct SOAP_CMAC __trt__GetStreamUri {
      public:
        /** Optional element 'trt:GetStreamUri' of XML schema type 'trt:GetStreamUri' */
        _trt__GetStreamUri *trt__GetStreamUri;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetStreamUri */
        long soap_type() const { return SOAP_TYPE___trt__GetStreamUri; }
        /** Constructor with member initializations */
        __trt__GetStreamUri() : trt__GetStreamUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetStreamUri * SOAP_FMAC2 soap_instantiate___trt__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62840 */
#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (3186)
/* Wrapper: */
struct SOAP_CMAC __trt__StartMulticastStreaming {
      public:
        /** Optional element 'trt:StartMulticastStreaming' of XML schema type 'trt:StartMulticastStreaming' */
        _trt__StartMulticastStreaming *trt__StartMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___trt__StartMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___trt__StartMulticastStreaming; }
        /** Constructor with member initializations */
        __trt__StartMulticastStreaming() : trt__StartMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62908 */
#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (3190)
/* Wrapper: */
struct SOAP_CMAC __trt__StopMulticastStreaming {
      public:
        /** Optional element 'trt:StopMulticastStreaming' of XML schema type 'trt:StopMulticastStreaming' */
        _trt__StopMulticastStreaming *trt__StopMulticastStreaming;
      public:
        /** Return unique type id SOAP_TYPE___trt__StopMulticastStreaming */
        long soap_type() const { return SOAP_TYPE___trt__StopMulticastStreaming; }
        /** Constructor with member initializations */
        __trt__StopMulticastStreaming() : trt__StopMulticastStreaming() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___trt__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:62993 */
#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (3194)
/* Wrapper: */
struct SOAP_CMAC __trt__SetSynchronizationPoint {
      public:
        /** Optional element 'trt:SetSynchronizationPoint' of XML schema type 'trt:SetSynchronizationPoint' */
        _trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetSynchronizationPoint */
        long soap_type() const { return SOAP_TYPE___trt__SetSynchronizationPoint; }
        /** Constructor with member initializations */
        __trt__SetSynchronizationPoint() : trt__SetSynchronizationPoint() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___trt__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63071 */
#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (3198)
/* Wrapper: */
struct SOAP_CMAC __trt__GetSnapshotUri {
      public:
        /** Optional element 'trt:GetSnapshotUri' of XML schema type 'trt:GetSnapshotUri' */
        _trt__GetSnapshotUri *trt__GetSnapshotUri;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetSnapshotUri */
        long soap_type() const { return SOAP_TYPE___trt__GetSnapshotUri; }
        /** Constructor with member initializations */
        __trt__GetSnapshotUri() : trt__GetSnapshotUri() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___trt__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63141 */
#ifndef SOAP_TYPE___trt__GetVideoSourceModes
#define SOAP_TYPE___trt__GetVideoSourceModes (3202)
/* Wrapper: */
struct SOAP_CMAC __trt__GetVideoSourceModes {
      public:
        /** Optional element 'trt:GetVideoSourceModes' of XML schema type 'trt:GetVideoSourceModes' */
        _trt__GetVideoSourceModes *trt__GetVideoSourceModes;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetVideoSourceModes */
        long soap_type() const { return SOAP_TYPE___trt__GetVideoSourceModes; }
        /** Constructor with member initializations */
        __trt__GetVideoSourceModes() : trt__GetVideoSourceModes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___trt__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63212 */
#ifndef SOAP_TYPE___trt__SetVideoSourceMode
#define SOAP_TYPE___trt__SetVideoSourceMode (3206)
/* Wrapper: */
struct SOAP_CMAC __trt__SetVideoSourceMode {
      public:
        /** Optional element 'trt:SetVideoSourceMode' of XML schema type 'trt:SetVideoSourceMode' */
        _trt__SetVideoSourceMode *trt__SetVideoSourceMode;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetVideoSourceMode */
        long soap_type() const { return SOAP_TYPE___trt__SetVideoSourceMode; }
        /** Constructor with member initializations */
        __trt__SetVideoSourceMode() : trt__SetVideoSourceMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___trt__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63280 */
#ifndef SOAP_TYPE___trt__GetOSDs
#define SOAP_TYPE___trt__GetOSDs (3210)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSDs {
      public:
        /** Optional element 'trt:GetOSDs' of XML schema type 'trt:GetOSDs' */
        _trt__GetOSDs *trt__GetOSDs;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSDs */
        long soap_type() const { return SOAP_TYPE___trt__GetOSDs; }
        /** Constructor with member initializations */
        __trt__GetOSDs() : trt__GetOSDs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSDs * SOAP_FMAC2 soap_instantiate___trt__GetOSDs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63348 */
#ifndef SOAP_TYPE___trt__GetOSD
#define SOAP_TYPE___trt__GetOSD (3214)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSD {
      public:
        /** Optional element 'trt:GetOSD' of XML schema type 'trt:GetOSD' */
        _trt__GetOSD *trt__GetOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSD */
        long soap_type() const { return SOAP_TYPE___trt__GetOSD; }
        /** Constructor with member initializations */
        __trt__GetOSD() : trt__GetOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSD * SOAP_FMAC2 soap_instantiate___trt__GetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63416 */
#ifndef SOAP_TYPE___trt__GetOSDOptions
#define SOAP_TYPE___trt__GetOSDOptions (3218)
/* Wrapper: */
struct SOAP_CMAC __trt__GetOSDOptions {
      public:
        /** Optional element 'trt:GetOSDOptions' of XML schema type 'trt:GetOSDOptions' */
        _trt__GetOSDOptions *trt__GetOSDOptions;
      public:
        /** Return unique type id SOAP_TYPE___trt__GetOSDOptions */
        long soap_type() const { return SOAP_TYPE___trt__GetOSDOptions; }
        /** Constructor with member initializations */
        __trt__GetOSDOptions() : trt__GetOSDOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__GetOSDOptions * SOAP_FMAC2 soap_instantiate___trt__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63484 */
#ifndef SOAP_TYPE___trt__SetOSD
#define SOAP_TYPE___trt__SetOSD (3222)
/* Wrapper: */
struct SOAP_CMAC __trt__SetOSD {
      public:
        /** Optional element 'trt:SetOSD' of XML schema type 'trt:SetOSD' */
        _trt__SetOSD *trt__SetOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__SetOSD */
        long soap_type() const { return SOAP_TYPE___trt__SetOSD; }
        /** Constructor with member initializations */
        __trt__SetOSD() : trt__SetOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__SetOSD * SOAP_FMAC2 soap_instantiate___trt__SetOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63552 */
#ifndef SOAP_TYPE___trt__CreateOSD
#define SOAP_TYPE___trt__CreateOSD (3226)
/* Wrapper: */
struct SOAP_CMAC __trt__CreateOSD {
      public:
        /** Optional element 'trt:CreateOSD' of XML schema type 'trt:CreateOSD' */
        _trt__CreateOSD *trt__CreateOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__CreateOSD */
        long soap_type() const { return SOAP_TYPE___trt__CreateOSD; }
        /** Constructor with member initializations */
        __trt__CreateOSD() : trt__CreateOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__CreateOSD * SOAP_FMAC2 soap_instantiate___trt__CreateOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:63620 */
#ifndef SOAP_TYPE___trt__DeleteOSD
#define SOAP_TYPE___trt__DeleteOSD (3230)
/* Wrapper: */
struct SOAP_CMAC __trt__DeleteOSD {
      public:
        /** Optional element 'trt:DeleteOSD' of XML schema type 'trt:DeleteOSD' */
        _trt__DeleteOSD *trt__DeleteOSD;
      public:
        /** Return unique type id SOAP_TYPE___trt__DeleteOSD */
        long soap_type() const { return SOAP_TYPE___trt__DeleteOSD; }
        /** Constructor with member initializations */
        __trt__DeleteOSD() : trt__DeleteOSD() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __trt__DeleteOSD * SOAP_FMAC2 soap_instantiate___trt__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* wsa.h:225 */
#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (19)
typedef struct wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

/* wsa.h:228 */
#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (20)
typedef char *_wsa__MessageID;
#endif

/* wsa.h:231 */
#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (21)
typedef struct wsa__Relationship _wsa__RelatesTo;
#endif

/* wsa.h:234 */
#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (22)
typedef char *_wsa__To;
#endif

/* wsa.h:237 */
#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (23)
typedef char *_wsa__Action;
#endif

/* wsa.h:240 */
#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (24)
typedef struct wsa__EndpointReferenceType _wsa__From;
#endif

/* wsa.h:243 */
#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (25)
typedef struct wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

/* wsa.h:246 */
#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (26)
typedef struct wsa__EndpointReferenceType _wsa__FaultTo;
#endif

/* wsa.h:249 */
#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (28)
typedef unsigned int _wsa__ReplyAfter;
#endif

/* wsdd10.h:97 */
#ifndef SOAP_TYPE_wsdd__QNameListType
#define SOAP_TYPE_wsdd__QNameListType (46)
typedef _QName wsdd__QNameListType;
#endif

/* wsdd10.h:101 */
#ifndef SOAP_TYPE_wsdd__UriListType
#define SOAP_TYPE_wsdd__UriListType (47)
typedef char *wsdd__UriListType;
#endif

/* wsdd10.h:104 */
#ifndef SOAP_TYPE_wsdd__FaultCodeOpenType
#define SOAP_TYPE_wsdd__FaultCodeOpenType (48)
typedef char *wsdd__FaultCodeOpenType;
#endif

/* wsdd10.h:474 */
#ifndef SOAP_TYPE__wsdd__Hello
#define SOAP_TYPE__wsdd__Hello (55)
typedef struct wsdd__HelloType _wsdd__Hello;
#endif

/* wsdd10.h:477 */
#ifndef SOAP_TYPE__wsdd__Bye
#define SOAP_TYPE__wsdd__Bye (56)
typedef struct wsdd__ByeType _wsdd__Bye;
#endif

/* wsdd10.h:480 */
#ifndef SOAP_TYPE__wsdd__Probe
#define SOAP_TYPE__wsdd__Probe (57)
typedef struct wsdd__ProbeType _wsdd__Probe;
#endif

/* wsdd10.h:483 */
#ifndef SOAP_TYPE__wsdd__ProbeMatches
#define SOAP_TYPE__wsdd__ProbeMatches (58)
typedef struct wsdd__ProbeMatchesType _wsdd__ProbeMatches;
#endif

/* wsdd10.h:486 */
#ifndef SOAP_TYPE__wsdd__Resolve
#define SOAP_TYPE__wsdd__Resolve (59)
typedef struct wsdd__ResolveType _wsdd__Resolve;
#endif

/* wsdd10.h:489 */
#ifndef SOAP_TYPE__wsdd__ResolveMatches
#define SOAP_TYPE__wsdd__ResolveMatches (60)
typedef struct wsdd__ResolveMatchesType _wsdd__ResolveMatches;
#endif

/* wsdd10.h:492 */
#ifndef SOAP_TYPE__wsdd__Types
#define SOAP_TYPE__wsdd__Types (61)
typedef wsdd__QNameListType _wsdd__Types;
#endif

/* wsdd10.h:495 */
#ifndef SOAP_TYPE__wsdd__Scopes
#define SOAP_TYPE__wsdd__Scopes (62)
typedef struct wsdd__ScopesType _wsdd__Scopes;
#endif

/* wsdd10.h:498 */
#ifndef SOAP_TYPE__wsdd__XAddrs
#define SOAP_TYPE__wsdd__XAddrs (63)
typedef wsdd__UriListType _wsdd__XAddrs;
#endif

/* wsdd10.h:501 */
#ifndef SOAP_TYPE__wsdd__MetadataVersion
#define SOAP_TYPE__wsdd__MetadataVersion (64)
typedef unsigned int _wsdd__MetadataVersion;
#endif

/* wsdd10.h:504 */
#ifndef SOAP_TYPE__wsdd__SupportedMatchingRules
#define SOAP_TYPE__wsdd__SupportedMatchingRules (65)
typedef wsdd__UriListType _wsdd__SupportedMatchingRules;
#endif

/* wsdd10.h:507 */
#ifndef SOAP_TYPE__wsdd__Security
#define SOAP_TYPE__wsdd__Security (66)
typedef struct wsdd__SecurityType _wsdd__Security;
#endif

/* wsdd10.h:510 */
#ifndef SOAP_TYPE__wsdd__Sig
#define SOAP_TYPE__wsdd__Sig (67)
typedef struct wsdd__SigType _wsdd__Sig;
#endif

/* wsdd10.h:513 */
#ifndef SOAP_TYPE__wsdd__AppSequence
#define SOAP_TYPE__wsdd__AppSequence (68)
typedef struct wsdd__AppSequenceType _wsdd__AppSequence;
#endif

/* wsdd10.h:524 */
#ifndef SOAP_TYPE__wsdd__Id
#define SOAP_TYPE__wsdd__Id (69)
typedef char *_wsdd__Id;
#endif

/* wsa5.h:89 */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (98)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

/* wsa5.h:92 */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (99)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

/* wsa5.h:211 */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (105)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

/* wsa5.h:214 */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (106)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

/* wsa5.h:217 */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (107)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

/* wsa5.h:220 */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (108)
typedef char *_wsa5__MessageID;
#endif

/* wsa5.h:223 */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (109)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

/* wsa5.h:226 */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (110)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

/* wsa5.h:229 */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (111)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

/* wsa5.h:232 */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (112)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

/* wsa5.h:235 */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (113)
typedef char *_wsa5__To;
#endif

/* wsa5.h:238 */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (114)
typedef char *_wsa5__Action;
#endif

/* wsa5.h:241 */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (116)
typedef ULONG64 _wsa5__RetryAfter;
#endif

/* wsa5.h:244 */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (117)
typedef _QName _wsa5__ProblemHeaderQName;
#endif

/* wsa5.h:247 */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (118)
typedef char *_wsa5__ProblemIRI;
#endif

/* wsa5.h:250 */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (119)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

/* onvif.h:305 */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (149)
typedef char *xsd__NCName;
#endif

/* onvif.h:322 */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (152)
typedef char *xsd__anySimpleType;
#endif

/* onvif.h:332 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (154)
typedef char *xsd__anyURI;
#endif

/* onvif.h:370 */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (163)
typedef char *xsd__duration;
#endif

/* onvif.h:401 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (169)
typedef char *xsd__integer;
#endif

/* onvif.h:411 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (171)
typedef char *xsd__nonNegativeInteger;
#endif

/* onvif.h:428 */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (174)
typedef char *xsd__token;
#endif

/* onvif.h:440 */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (176)
typedef char *_xml__lang;
#endif

/* onvif.h:2611 */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (1247)
typedef char *tt__IntList;
#endif

/* onvif.h:2615 */
#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (1248)
typedef char *tt__FloatList;
#endif

/* onvif.h:2619 */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (1249)
typedef char *tt__StringAttrList;
#endif

/* onvif.h:2623 */
#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (1250)
typedef char *tt__StringList;
#endif

/* onvif.h:2627 */
#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (1251)
typedef char *tt__ReferenceTokenList;
#endif

/* onvif.h:2638 */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (1252)
typedef char *wsnt__AbsoluteOrRelativeTimeType;
#endif

/* onvif.h:2808 */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (1257)
typedef char *tt__Name;
#endif

/* onvif.h:3185 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (1291)
typedef xsd__integer tt__NetworkInterfaceConfigPriority;
#endif

/* onvif.h:3218 */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (1295)
typedef int tt__IANA_IfTypes;
#endif

/* onvif.h:3285 */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (1303)
typedef xsd__token tt__IPv4Address;
#endif

/* onvif.h:3297 */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (1305)
typedef xsd__token tt__IPv6Address;
#endif

/* onvif.h:3309 */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (1307)
typedef xsd__token tt__HwAddress;
#endif

/* onvif.h:3338 */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (1311)
typedef xsd__token tt__DNSName;
#endif

/* onvif.h:3350 */
#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (1313)
typedef xsd__token tt__Domain;
#endif

/* onvif.h:3398 */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (1319)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

/* onvif.h:3468 */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (1327)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

/* onvif.h:3481 */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (1329)
typedef char *tt__Dot11PSKPassphrase;
#endif

/* onvif.h:3764 */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (1357)
typedef char *tt__AuxiliaryData;
#endif

/* onvif.h:4226 */
#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (1403)
typedef char *tt__Description;
#endif

/* onvif.h:4238 */
#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (1405)
typedef char *tt__XPathExpression;
#endif

/* onvif.h:4333 */
#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (1413)
typedef char *tt__RecordingJobMode;
#endif

/* onvif.h:4345 */
#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (1415)
typedef char *tt__RecordingJobState;
#endif

/* onvif.h:4429 */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (1423)
typedef char *tt__ReferenceToken;
#endif

/* onvif.h:4506 */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (1429)
typedef char *wstop__FullTopicExpression;
#endif

/* onvif.h:4524 */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (1431)
typedef char *wstop__ConcreteTopicExpression;
#endif

/* onvif.h:4541 */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (1433)
typedef _QName wstop__SimpleTopicExpression;
#endif

/* onvif.h:4768 */
#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (1447)
typedef tt__ReferenceToken tt__ReceiverReference;
#endif

/* onvif.h:4780 */
#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (1449)
typedef tt__ReferenceToken tt__RecordingReference;
#endif

/* onvif.h:4792 */
#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (1451)
typedef tt__ReferenceToken tt__TrackReference;
#endif

/* onvif.h:4804 */
#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (1453)
typedef tt__ReferenceToken tt__JobToken;
#endif

/* onvif.h:4816 */
#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (1455)
typedef tt__ReferenceToken tt__RecordingJobReference;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* tt__IANA_IfTypes has binding name 'tt__IANA_IfTypes' for type 'tt:IANA-IfTypes' */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (1295)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (166)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (162)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (91)
#endif

/* _wsdd__MetadataVersion has binding name '_wsdd__MetadataVersion' for type '' */
#ifndef SOAP_TYPE__wsdd__MetadataVersion
#define SOAP_TYPE__wsdd__MetadataVersion (64)
#endif

/* _wsa__ReplyAfter has binding name '_wsa__ReplyAfter' for type '' */
#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (28)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (27)
#endif

/* _wsa5__RetryAfter has binding name '_wsa5__RetryAfter' for type '' */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (116)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (115)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (160)
#endif

/* enum tr2__MaskType has binding name 'tr2__MaskType' for type 'tr2:MaskType' */
#ifndef SOAP_TYPE_tr2__MaskType
#define SOAP_TYPE_tr2__MaskType (1445)
#endif

/* enum tr2__TransportProtocol has binding name 'tr2__TransportProtocol' for type 'tr2:TransportProtocol' */
#ifndef SOAP_TYPE_tr2__TransportProtocol
#define SOAP_TYPE_tr2__TransportProtocol (1443)
#endif

/* enum tr2__ConfigurationEnumeration has binding name 'tr2__ConfigurationEnumeration' for type 'tr2:ConfigurationEnumeration' */
#ifndef SOAP_TYPE_tr2__ConfigurationEnumeration
#define SOAP_TYPE_tr2__ConfigurationEnumeration (1441)
#endif

/* enum timg__ImagingPresetType has binding name 'timg__ImagingPresetType' for type 'timg:ImagingPresetType' */
#ifndef SOAP_TYPE_timg__ImagingPresetType
#define SOAP_TYPE_timg__ImagingPresetType (1439)
#endif

/* enum tev__ConnectionStatus has binding name 'tev__ConnectionStatus' for type 'tev:ConnectionStatus' */
#ifndef SOAP_TYPE_tev__ConnectionStatus
#define SOAP_TYPE_tev__ConnectionStatus (1437)
#endif

/* enum tev__EventBrokerProtocol has binding name 'tev__EventBrokerProtocol' for type 'tev:EventBrokerProtocol' */
#ifndef SOAP_TYPE_tev__EventBrokerProtocol
#define SOAP_TYPE_tev__EventBrokerProtocol (1435)
#endif

/* enum tt__Entity has binding name 'tt__Entity' for type 'tt:Entity' */
#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (1427)
#endif

/* enum tt__MoveStatus has binding name 'tt__MoveStatus' for type 'tt:MoveStatus' */
#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (1425)
#endif

/* enum tt__OSDType has binding name 'tt__OSDType' for type 'tt:OSDType' */
#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (1421)
#endif

/* enum tt__AudioClassType has binding name 'tt__AudioClassType' for type 'tt:AudioClassType' */
#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (1419)
#endif

/* enum tt__ModeOfOperation has binding name 'tt__ModeOfOperation' for type 'tt:ModeOfOperation' */
#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (1417)
#endif

/* enum tt__TrackType has binding name 'tt__TrackType' for type 'tt:TrackType' */
#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (1411)
#endif

/* enum tt__RecordingStatus has binding name 'tt__RecordingStatus' for type 'tt:RecordingStatus' */
#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (1409)
#endif

/* enum tt__SearchState has binding name 'tt__SearchState' for type 'tt:SearchState' */
#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (1407)
#endif

/* enum tt__ReceiverState has binding name 'tt__ReceiverState' for type 'tt:ReceiverState' */
#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (1401)
#endif

/* enum tt__ReceiverMode has binding name 'tt__ReceiverMode' for type 'tt:ReceiverMode' */
#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (1399)
#endif

/* enum tt__Direction has binding name 'tt__Direction' for type 'tt:Direction' */
#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (1397)
#endif

/* enum tt__PropertyOperation has binding name 'tt__PropertyOperation' for type 'tt:PropertyOperation' */
#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (1395)
#endif

/* enum tt__ImageSendingType has binding name 'tt__ImageSendingType' for type 'tt:ImageSendingType' */
#ifndef SOAP_TYPE_tt__ImageSendingType
#define SOAP_TYPE_tt__ImageSendingType (1393)
#endif

/* enum tt__DefoggingMode has binding name 'tt__DefoggingMode' for type 'tt:DefoggingMode' */
#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (1391)
#endif

/* enum tt__ToneCompensationMode has binding name 'tt__ToneCompensationMode' for type 'tt:ToneCompensationMode' */
#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (1389)
#endif

/* enum tt__IrCutFilterAutoBoundaryType has binding name 'tt__IrCutFilterAutoBoundaryType' for type 'tt:IrCutFilterAutoBoundaryType' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (1387)
#endif

/* enum tt__ImageStabilizationMode has binding name 'tt__ImageStabilizationMode' for type 'tt:ImageStabilizationMode' */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (1385)
#endif

/* enum tt__IrCutFilterMode has binding name 'tt__IrCutFilterMode' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (1383)
#endif

/* enum tt__WhiteBalanceMode has binding name 'tt__WhiteBalanceMode' for type 'tt:WhiteBalanceMode' */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (1381)
#endif

/* enum tt__Enabled has binding name 'tt__Enabled' for type 'tt:Enabled' */
#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (1379)
#endif

/* enum tt__ExposureMode has binding name 'tt__ExposureMode' for type 'tt:ExposureMode' */
#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (1377)
#endif

/* enum tt__ExposurePriority has binding name 'tt__ExposurePriority' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (1375)
#endif

/* enum tt__BacklightCompensationMode has binding name 'tt__BacklightCompensationMode' for type 'tt:BacklightCompensationMode' */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (1373)
#endif

/* enum tt__WideDynamicMode has binding name 'tt__WideDynamicMode' for type 'tt:WideDynamicMode' */
#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (1371)
#endif

/* enum tt__AFModes has binding name 'tt__AFModes' for type 'tt:AFModes' */
#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (1369)
#endif

/* enum tt__AutoFocusMode has binding name 'tt__AutoFocusMode' for type 'tt:AutoFocusMode' */
#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (1367)
#endif

/* enum tt__MoveAndTrackMethod has binding name 'tt__MoveAndTrackMethod' for type 'tt:MoveAndTrackMethod' */
#ifndef SOAP_TYPE_tt__MoveAndTrackMethod
#define SOAP_TYPE_tt__MoveAndTrackMethod (1365)
#endif

/* enum tt__PTZPresetTourOperation has binding name 'tt__PTZPresetTourOperation' for type 'tt:PTZPresetTourOperation' */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (1363)
#endif

/* enum tt__PTZPresetTourDirection has binding name 'tt__PTZPresetTourDirection' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (1361)
#endif

/* enum tt__PTZPresetTourState has binding name 'tt__PTZPresetTourState' for type 'tt:PTZPresetTourState' */
#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (1359)
#endif

/* enum tt__ReverseMode has binding name 'tt__ReverseMode' for type 'tt:ReverseMode' */
#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (1355)
#endif

/* enum tt__EFlipMode has binding name 'tt__EFlipMode' for type 'tt:EFlipMode' */
#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (1353)
#endif

/* enum tt__DigitalIdleState has binding name 'tt__DigitalIdleState' for type 'tt:DigitalIdleState' */
#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (1351)
#endif

/* enum tt__RelayMode has binding name 'tt__RelayMode' for type 'tt:RelayMode' */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (1349)
#endif

/* enum tt__RelayIdleState has binding name 'tt__RelayIdleState' for type 'tt:RelayIdleState' */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (1347)
#endif

/* enum tt__RelayLogicalState has binding name 'tt__RelayLogicalState' for type 'tt:RelayLogicalState' */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (1345)
#endif

/* enum tt__UserLevel has binding name 'tt__UserLevel' for type 'tt:UserLevel' */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (1343)
#endif

/* enum tt__SetDateTimeType has binding name 'tt__SetDateTimeType' for type 'tt:SetDateTimeType' */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (1341)
#endif

/* enum tt__FactoryDefaultType has binding name 'tt__FactoryDefaultType' for type 'tt:FactoryDefaultType' */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (1339)
#endif

/* enum tt__SystemLogType has binding name 'tt__SystemLogType' for type 'tt:SystemLogType' */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (1337)
#endif

/* enum tt__CapabilityCategory has binding name 'tt__CapabilityCategory' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (1335)
#endif

/* enum tt__Dot11AuthAndMangementSuite has binding name 'tt__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (1333)
#endif

/* enum tt__Dot11SignalStrength has binding name 'tt__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (1331)
#endif

/* enum tt__Dot11Cipher has binding name 'tt__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (1325)
#endif

/* enum tt__Dot11SecurityMode has binding name 'tt__Dot11SecurityMode' for type 'tt:Dot11SecurityMode' */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (1323)
#endif

/* enum tt__Dot11StationMode has binding name 'tt__Dot11StationMode' for type 'tt:Dot11StationMode' */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (1321)
#endif

/* enum tt__DynamicDNSType has binding name 'tt__DynamicDNSType' for type 'tt:DynamicDNSType' */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (1317)
#endif

/* enum tt__IPAddressFilterType has binding name 'tt__IPAddressFilterType' for type 'tt:IPAddressFilterType' */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (1315)
#endif

/* enum tt__IPType has binding name 'tt__IPType' for type 'tt:IPType' */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (1309)
#endif

/* enum tt__NetworkHostType has binding name 'tt__NetworkHostType' for type 'tt:NetworkHostType' */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (1301)
#endif

/* enum tt__NetworkProtocolType has binding name 'tt__NetworkProtocolType' for type 'tt:NetworkProtocolType' */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (1299)
#endif

/* enum tt__IPv6DHCPConfiguration has binding name 'tt__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (1297)
#endif

/* enum tt__Duplex has binding name 'tt__Duplex' for type 'tt:Duplex' */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (1293)
#endif

/* enum tt__DiscoveryMode has binding name 'tt__DiscoveryMode' for type 'tt:DiscoveryMode' */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (1289)
#endif

/* enum tt__ScopeDefinition has binding name 'tt__ScopeDefinition' for type 'tt:ScopeDefinition' */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (1287)
#endif

/* enum tt__TransportProtocol has binding name 'tt__TransportProtocol' for type 'tt:TransportProtocol' */
#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (1285)
#endif

/* enum tt__StreamType has binding name 'tt__StreamType' for type 'tt:StreamType' */
#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (1283)
#endif

/* enum tt__MetadataCompressionType has binding name 'tt__MetadataCompressionType' for type 'tt:MetadataCompressionType' */
#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (1281)
#endif

/* enum tt__AudioEncodingMimeNames has binding name 'tt__AudioEncodingMimeNames' for type 'tt:AudioEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (1279)
#endif

/* enum tt__AudioEncoding has binding name 'tt__AudioEncoding' for type 'tt:AudioEncoding' */
#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (1277)
#endif

/* enum tt__VideoEncodingProfiles has binding name 'tt__VideoEncodingProfiles' for type 'tt:VideoEncodingProfiles' */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (1275)
#endif

/* enum tt__VideoEncodingMimeNames has binding name 'tt__VideoEncodingMimeNames' for type 'tt:VideoEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (1273)
#endif

/* enum tt__H264Profile has binding name 'tt__H264Profile' for type 'tt:H264Profile' */
#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (1271)
#endif

/* enum tt__Mpeg4Profile has binding name 'tt__Mpeg4Profile' for type 'tt:Mpeg4Profile' */
#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (1269)
#endif

/* enum tt__VideoEncoding has binding name 'tt__VideoEncoding' for type 'tt:VideoEncoding' */
#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (1267)
#endif

/* enum tt__ViewModes has binding name 'tt__ViewModes' for type 'tt:ViewModes' */
#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (1265)
#endif

/* enum tt__SceneOrientationOption has binding name 'tt__SceneOrientationOption' for type 'tt:SceneOrientationOption' */
#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (1263)
#endif

/* enum tt__SceneOrientationMode has binding name 'tt__SceneOrientationMode' for type 'tt:SceneOrientationMode' */
#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (1261)
#endif

/* enum tt__RotateMode has binding name 'tt__RotateMode' for type 'tt:RotateMode' */
#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (1259)
#endif

/* enum tds__StorageType has binding name 'tds__StorageType' for type 'tds:StorageType' */
#ifndef SOAP_TYPE_tds__StorageType
#define SOAP_TYPE_tds__StorageType (1255)
#endif

/* enum tds__AutoGeoModes has binding name 'tds__AutoGeoModes' for type 'tds:AutoGeoModes' */
#ifndef SOAP_TYPE_tds__AutoGeoModes
#define SOAP_TYPE_tds__AutoGeoModes (1253)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (158)
#endif

/* enum _wsa5__IsReferenceParameter has binding name '_wsa5__IsReferenceParameter' for type 'wsa5:IsReferenceParameter' */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (120)
#endif

/* enum wsa5__FaultCodesType has binding name 'wsa5__FaultCodesType' for type 'wsa5:FaultCodesType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (101)
#endif

/* enum wsa5__RelationshipType has binding name 'wsa5__RelationshipType' for type 'wsa5:RelationshipType' */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (100)
#endif

/* enum wsdd__FaultCodeType has binding name 'wsdd__FaultCodeType' for type 'wsdd:FaultCodeType' */
#ifndef SOAP_TYPE_wsdd__FaultCodeType
#define SOAP_TYPE_wsdd__FaultCodeType (49)
#endif

/* enum wsa__FaultSubcodeValues has binding name 'wsa__FaultSubcodeValues' for type 'wsa:FaultSubcodeValues' */
#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (13)
#endif

/* enum wsa__RelationshipTypeValues has binding name 'wsa__RelationshipTypeValues' for type 'wsa:RelationshipTypeValues' */
#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (12)
#endif

/* _wstop__TopicNamespaceType_Topic has binding name '_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (2074)
#endif

/* _tev__CreatePullPointSubscription_SubscriptionPolicy has binding name '_tev__CreatePullPointSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (1990)
#endif

/* _wsrfbf__BaseFaultType_FaultCause has binding name '_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1955)
#endif

/* _wsrfbf__BaseFaultType_Description has binding name '_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1953)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode has binding name '_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1951)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy has binding name '_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1949)
#endif

/* _wsnt__NotificationMessageHolderType_Message has binding name '_wsnt__NotificationMessageHolderType_Message' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1944)
#endif

/* _tt__ColorDescriptor_ColorCluster has binding name '_tt__ColorDescriptor_ColorCluster' for type '' */
#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1930)
#endif

/* _tt__ConfigDescription_Messages has binding name '_tt__ConfigDescription_Messages' for type '' */
#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1823)
#endif

/* _tt__ItemListDescription_ElementItemDescription has binding name '_tt__ItemListDescription_ElementItemDescription' for type '' */
#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1813)
#endif

/* _tt__ItemListDescription_SimpleItemDescription has binding name '_tt__ItemListDescription_SimpleItemDescription' for type '' */
#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1811)
#endif

/* _tt__ItemList_ElementItem has binding name '_tt__ItemList_ElementItem' for type '' */
#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1806)
#endif

/* _tt__ItemList_SimpleItem has binding name '_tt__ItemList_SimpleItem' for type '' */
#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1804)
#endif

/* _tt__EventSubscription_SubscriptionPolicy has binding name '_tt__EventSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1587)
#endif

/* _tds__GetSystemUrisResponse_Extension has binding name '_tds__GetSystemUrisResponse_Extension' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (1530)
#endif

/* _tds__StorageConfigurationData_Extension has binding name '_tds__StorageConfigurationData_Extension' for type '' */
#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (1468)
#endif

/* _tds__UserCredential_Extension has binding name '_tds__UserCredential_Extension' for type '' */
#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (1465)
#endif

/* _tds__Service_Capabilities has binding name '_tds__Service_Capabilities' for type '' */
#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (1457)
#endif

/* tt__RecordingJobReference__ has binding name 'tt__RecordingJobReference__' for type 'tt:RecordingJobReference' */
#ifndef SOAP_TYPE_tt__RecordingJobReference__
#define SOAP_TYPE_tt__RecordingJobReference__ (1456)
#endif

/* tt__JobToken__ has binding name 'tt__JobToken__' for type 'tt:JobToken' */
#ifndef SOAP_TYPE_tt__JobToken__
#define SOAP_TYPE_tt__JobToken__ (1454)
#endif

/* tt__TrackReference__ has binding name 'tt__TrackReference__' for type 'tt:TrackReference' */
#ifndef SOAP_TYPE_tt__TrackReference__
#define SOAP_TYPE_tt__TrackReference__ (1452)
#endif

/* tt__RecordingReference__ has binding name 'tt__RecordingReference__' for type 'tt:RecordingReference' */
#ifndef SOAP_TYPE_tt__RecordingReference__
#define SOAP_TYPE_tt__RecordingReference__ (1450)
#endif

/* tt__ReceiverReference__ has binding name 'tt__ReceiverReference__' for type 'tt:ReceiverReference' */
#ifndef SOAP_TYPE_tt__ReceiverReference__
#define SOAP_TYPE_tt__ReceiverReference__ (1448)
#endif

/* tr2__MaskType_ has binding name 'tr2__MaskType_' for type 'tr2:MaskType' */
#ifndef SOAP_TYPE_tr2__MaskType_
#define SOAP_TYPE_tr2__MaskType_ (1446)
#endif

/* tr2__TransportProtocol_ has binding name 'tr2__TransportProtocol_' for type 'tr2:TransportProtocol' */
#ifndef SOAP_TYPE_tr2__TransportProtocol_
#define SOAP_TYPE_tr2__TransportProtocol_ (1444)
#endif

/* tr2__ConfigurationEnumeration_ has binding name 'tr2__ConfigurationEnumeration_' for type 'tr2:ConfigurationEnumeration' */
#ifndef SOAP_TYPE_tr2__ConfigurationEnumeration_
#define SOAP_TYPE_tr2__ConfigurationEnumeration_ (1442)
#endif

/* timg__ImagingPresetType_ has binding name 'timg__ImagingPresetType_' for type 'timg:ImagingPresetType' */
#ifndef SOAP_TYPE_timg__ImagingPresetType_
#define SOAP_TYPE_timg__ImagingPresetType_ (1440)
#endif

/* tev__ConnectionStatus_ has binding name 'tev__ConnectionStatus_' for type 'tev:ConnectionStatus' */
#ifndef SOAP_TYPE_tev__ConnectionStatus_
#define SOAP_TYPE_tev__ConnectionStatus_ (1438)
#endif

/* tev__EventBrokerProtocol_ has binding name 'tev__EventBrokerProtocol_' for type 'tev:EventBrokerProtocol' */
#ifndef SOAP_TYPE_tev__EventBrokerProtocol_
#define SOAP_TYPE_tev__EventBrokerProtocol_ (1436)
#endif

/* wstop__SimpleTopicExpression__ has binding name 'wstop__SimpleTopicExpression__' for type 'wstop:SimpleTopicExpression' */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression__
#define SOAP_TYPE_wstop__SimpleTopicExpression__ (1434)
#endif

/* wstop__ConcreteTopicExpression__ has binding name 'wstop__ConcreteTopicExpression__' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_wstop__ConcreteTopicExpression__ (1432)
#endif

/* wstop__FullTopicExpression__ has binding name 'wstop__FullTopicExpression__' for type 'wstop:FullTopicExpression' */
#ifndef SOAP_TYPE_wstop__FullTopicExpression__
#define SOAP_TYPE_wstop__FullTopicExpression__ (1430)
#endif

/* tt__Entity_ has binding name 'tt__Entity_' for type 'tt:Entity' */
#ifndef SOAP_TYPE_tt__Entity_
#define SOAP_TYPE_tt__Entity_ (1428)
#endif

/* tt__MoveStatus_ has binding name 'tt__MoveStatus_' for type 'tt:MoveStatus' */
#ifndef SOAP_TYPE_tt__MoveStatus_
#define SOAP_TYPE_tt__MoveStatus_ (1426)
#endif

/* tt__ReferenceToken__ has binding name 'tt__ReferenceToken__' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_tt__ReferenceToken__
#define SOAP_TYPE_tt__ReferenceToken__ (1424)
#endif

/* tt__OSDType_ has binding name 'tt__OSDType_' for type 'tt:OSDType' */
#ifndef SOAP_TYPE_tt__OSDType_
#define SOAP_TYPE_tt__OSDType_ (1422)
#endif

/* tt__AudioClassType_ has binding name 'tt__AudioClassType_' for type 'tt:AudioClassType' */
#ifndef SOAP_TYPE_tt__AudioClassType_
#define SOAP_TYPE_tt__AudioClassType_ (1420)
#endif

/* tt__ModeOfOperation_ has binding name 'tt__ModeOfOperation_' for type 'tt:ModeOfOperation' */
#ifndef SOAP_TYPE_tt__ModeOfOperation_
#define SOAP_TYPE_tt__ModeOfOperation_ (1418)
#endif

/* tt__RecordingJobState__ has binding name 'tt__RecordingJobState__' for type 'tt:RecordingJobState' */
#ifndef SOAP_TYPE_tt__RecordingJobState__
#define SOAP_TYPE_tt__RecordingJobState__ (1416)
#endif

/* tt__RecordingJobMode__ has binding name 'tt__RecordingJobMode__' for type 'tt:RecordingJobMode' */
#ifndef SOAP_TYPE_tt__RecordingJobMode__
#define SOAP_TYPE_tt__RecordingJobMode__ (1414)
#endif

/* tt__TrackType_ has binding name 'tt__TrackType_' for type 'tt:TrackType' */
#ifndef SOAP_TYPE_tt__TrackType_
#define SOAP_TYPE_tt__TrackType_ (1412)
#endif

/* tt__RecordingStatus_ has binding name 'tt__RecordingStatus_' for type 'tt:RecordingStatus' */
#ifndef SOAP_TYPE_tt__RecordingStatus_
#define SOAP_TYPE_tt__RecordingStatus_ (1410)
#endif

/* tt__SearchState_ has binding name 'tt__SearchState_' for type 'tt:SearchState' */
#ifndef SOAP_TYPE_tt__SearchState_
#define SOAP_TYPE_tt__SearchState_ (1408)
#endif

/* tt__XPathExpression__ has binding name 'tt__XPathExpression__' for type 'tt:XPathExpression' */
#ifndef SOAP_TYPE_tt__XPathExpression__
#define SOAP_TYPE_tt__XPathExpression__ (1406)
#endif

/* tt__Description__ has binding name 'tt__Description__' for type 'tt:Description' */
#ifndef SOAP_TYPE_tt__Description__
#define SOAP_TYPE_tt__Description__ (1404)
#endif

/* tt__ReceiverState_ has binding name 'tt__ReceiverState_' for type 'tt:ReceiverState' */
#ifndef SOAP_TYPE_tt__ReceiverState_
#define SOAP_TYPE_tt__ReceiverState_ (1402)
#endif

/* tt__ReceiverMode_ has binding name 'tt__ReceiverMode_' for type 'tt:ReceiverMode' */
#ifndef SOAP_TYPE_tt__ReceiverMode_
#define SOAP_TYPE_tt__ReceiverMode_ (1400)
#endif

/* tt__Direction_ has binding name 'tt__Direction_' for type 'tt:Direction' */
#ifndef SOAP_TYPE_tt__Direction_
#define SOAP_TYPE_tt__Direction_ (1398)
#endif

/* tt__PropertyOperation_ has binding name 'tt__PropertyOperation_' for type 'tt:PropertyOperation' */
#ifndef SOAP_TYPE_tt__PropertyOperation_
#define SOAP_TYPE_tt__PropertyOperation_ (1396)
#endif

/* tt__ImageSendingType_ has binding name 'tt__ImageSendingType_' for type 'tt:ImageSendingType' */
#ifndef SOAP_TYPE_tt__ImageSendingType_
#define SOAP_TYPE_tt__ImageSendingType_ (1394)
#endif

/* tt__DefoggingMode_ has binding name 'tt__DefoggingMode_' for type 'tt:DefoggingMode' */
#ifndef SOAP_TYPE_tt__DefoggingMode_
#define SOAP_TYPE_tt__DefoggingMode_ (1392)
#endif

/* tt__ToneCompensationMode_ has binding name 'tt__ToneCompensationMode_' for type 'tt:ToneCompensationMode' */
#ifndef SOAP_TYPE_tt__ToneCompensationMode_
#define SOAP_TYPE_tt__ToneCompensationMode_ (1390)
#endif

/* tt__IrCutFilterAutoBoundaryType_ has binding name 'tt__IrCutFilterAutoBoundaryType_' for type 'tt:IrCutFilterAutoBoundaryType' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_ (1388)
#endif

/* tt__ImageStabilizationMode_ has binding name 'tt__ImageStabilizationMode_' for type 'tt:ImageStabilizationMode' */
#ifndef SOAP_TYPE_tt__ImageStabilizationMode_
#define SOAP_TYPE_tt__ImageStabilizationMode_ (1386)
#endif

/* tt__IrCutFilterMode_ has binding name 'tt__IrCutFilterMode_' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_tt__IrCutFilterMode_
#define SOAP_TYPE_tt__IrCutFilterMode_ (1384)
#endif

/* tt__WhiteBalanceMode_ has binding name 'tt__WhiteBalanceMode_' for type 'tt:WhiteBalanceMode' */
#ifndef SOAP_TYPE_tt__WhiteBalanceMode_
#define SOAP_TYPE_tt__WhiteBalanceMode_ (1382)
#endif

/* tt__Enabled_ has binding name 'tt__Enabled_' for type 'tt:Enabled' */
#ifndef SOAP_TYPE_tt__Enabled_
#define SOAP_TYPE_tt__Enabled_ (1380)
#endif

/* tt__ExposureMode_ has binding name 'tt__ExposureMode_' for type 'tt:ExposureMode' */
#ifndef SOAP_TYPE_tt__ExposureMode_
#define SOAP_TYPE_tt__ExposureMode_ (1378)
#endif

/* tt__ExposurePriority_ has binding name 'tt__ExposurePriority_' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_tt__ExposurePriority_
#define SOAP_TYPE_tt__ExposurePriority_ (1376)
#endif

/* tt__BacklightCompensationMode_ has binding name 'tt__BacklightCompensationMode_' for type 'tt:BacklightCompensationMode' */
#ifndef SOAP_TYPE_tt__BacklightCompensationMode_
#define SOAP_TYPE_tt__BacklightCompensationMode_ (1374)
#endif

/* tt__WideDynamicMode_ has binding name 'tt__WideDynamicMode_' for type 'tt:WideDynamicMode' */
#ifndef SOAP_TYPE_tt__WideDynamicMode_
#define SOAP_TYPE_tt__WideDynamicMode_ (1372)
#endif

/* tt__AFModes_ has binding name 'tt__AFModes_' for type 'tt:AFModes' */
#ifndef SOAP_TYPE_tt__AFModes_
#define SOAP_TYPE_tt__AFModes_ (1370)
#endif

/* tt__AutoFocusMode_ has binding name 'tt__AutoFocusMode_' for type 'tt:AutoFocusMode' */
#ifndef SOAP_TYPE_tt__AutoFocusMode_
#define SOAP_TYPE_tt__AutoFocusMode_ (1368)
#endif

/* tt__MoveAndTrackMethod_ has binding name 'tt__MoveAndTrackMethod_' for type 'tt:MoveAndTrackMethod' */
#ifndef SOAP_TYPE_tt__MoveAndTrackMethod_
#define SOAP_TYPE_tt__MoveAndTrackMethod_ (1366)
#endif

/* tt__PTZPresetTourOperation_ has binding name 'tt__PTZPresetTourOperation_' for type 'tt:PTZPresetTourOperation' */
#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_
#define SOAP_TYPE_tt__PTZPresetTourOperation_ (1364)
#endif

/* tt__PTZPresetTourDirection_ has binding name 'tt__PTZPresetTourDirection_' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_
#define SOAP_TYPE_tt__PTZPresetTourDirection_ (1362)
#endif

/* tt__PTZPresetTourState_ has binding name 'tt__PTZPresetTourState_' for type 'tt:PTZPresetTourState' */
#ifndef SOAP_TYPE_tt__PTZPresetTourState_
#define SOAP_TYPE_tt__PTZPresetTourState_ (1360)
#endif

/* tt__AuxiliaryData__ has binding name 'tt__AuxiliaryData__' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_tt__AuxiliaryData__
#define SOAP_TYPE_tt__AuxiliaryData__ (1358)
#endif

/* tt__ReverseMode_ has binding name 'tt__ReverseMode_' for type 'tt:ReverseMode' */
#ifndef SOAP_TYPE_tt__ReverseMode_
#define SOAP_TYPE_tt__ReverseMode_ (1356)
#endif

/* tt__EFlipMode_ has binding name 'tt__EFlipMode_' for type 'tt:EFlipMode' */
#ifndef SOAP_TYPE_tt__EFlipMode_
#define SOAP_TYPE_tt__EFlipMode_ (1354)
#endif

/* tt__DigitalIdleState_ has binding name 'tt__DigitalIdleState_' for type 'tt:DigitalIdleState' */
#ifndef SOAP_TYPE_tt__DigitalIdleState_
#define SOAP_TYPE_tt__DigitalIdleState_ (1352)
#endif

/* tt__RelayMode_ has binding name 'tt__RelayMode_' for type 'tt:RelayMode' */
#ifndef SOAP_TYPE_tt__RelayMode_
#define SOAP_TYPE_tt__RelayMode_ (1350)
#endif

/* tt__RelayIdleState_ has binding name 'tt__RelayIdleState_' for type 'tt:RelayIdleState' */
#ifndef SOAP_TYPE_tt__RelayIdleState_
#define SOAP_TYPE_tt__RelayIdleState_ (1348)
#endif

/* tt__RelayLogicalState_ has binding name 'tt__RelayLogicalState_' for type 'tt:RelayLogicalState' */
#ifndef SOAP_TYPE_tt__RelayLogicalState_
#define SOAP_TYPE_tt__RelayLogicalState_ (1346)
#endif

/* tt__UserLevel_ has binding name 'tt__UserLevel_' for type 'tt:UserLevel' */
#ifndef SOAP_TYPE_tt__UserLevel_
#define SOAP_TYPE_tt__UserLevel_ (1344)
#endif

/* tt__SetDateTimeType_ has binding name 'tt__SetDateTimeType_' for type 'tt:SetDateTimeType' */
#ifndef SOAP_TYPE_tt__SetDateTimeType_
#define SOAP_TYPE_tt__SetDateTimeType_ (1342)
#endif

/* tt__FactoryDefaultType_ has binding name 'tt__FactoryDefaultType_' for type 'tt:FactoryDefaultType' */
#ifndef SOAP_TYPE_tt__FactoryDefaultType_
#define SOAP_TYPE_tt__FactoryDefaultType_ (1340)
#endif

/* tt__SystemLogType_ has binding name 'tt__SystemLogType_' for type 'tt:SystemLogType' */
#ifndef SOAP_TYPE_tt__SystemLogType_
#define SOAP_TYPE_tt__SystemLogType_ (1338)
#endif

/* tt__CapabilityCategory_ has binding name 'tt__CapabilityCategory_' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_tt__CapabilityCategory_
#define SOAP_TYPE_tt__CapabilityCategory_ (1336)
#endif

/* tt__Dot11AuthAndMangementSuite_ has binding name 'tt__Dot11AuthAndMangementSuite_' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_ (1334)
#endif

/* tt__Dot11SignalStrength_ has binding name 'tt__Dot11SignalStrength_' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength_
#define SOAP_TYPE_tt__Dot11SignalStrength_ (1332)
#endif

/* tt__Dot11PSKPassphrase__ has binding name 'tt__Dot11PSKPassphrase__' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase__
#define SOAP_TYPE_tt__Dot11PSKPassphrase__ (1330)
#endif

/* tt__Dot11PSK__ has binding name 'tt__Dot11PSK__' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_tt__Dot11PSK__
#define SOAP_TYPE_tt__Dot11PSK__ (1328)
#endif

/* tt__Dot11PSK has binding name 'tt__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (1327)
#endif

/* tt__Dot11Cipher_ has binding name 'tt__Dot11Cipher_' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_tt__Dot11Cipher_
#define SOAP_TYPE_tt__Dot11Cipher_ (1326)
#endif

/* tt__Dot11SecurityMode_ has binding name 'tt__Dot11SecurityMode_' for type 'tt:Dot11SecurityMode' */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode_
#define SOAP_TYPE_tt__Dot11SecurityMode_ (1324)
#endif

/* tt__Dot11StationMode_ has binding name 'tt__Dot11StationMode_' for type 'tt:Dot11StationMode' */
#ifndef SOAP_TYPE_tt__Dot11StationMode_
#define SOAP_TYPE_tt__Dot11StationMode_ (1322)
#endif

/* tt__Dot11SSIDType__ has binding name 'tt__Dot11SSIDType__' for type 'tt:Dot11SSIDType' */
#ifndef SOAP_TYPE_tt__Dot11SSIDType__
#define SOAP_TYPE_tt__Dot11SSIDType__ (1320)
#endif

/* tt__Dot11SSIDType has binding name 'tt__Dot11SSIDType' for type 'tt:Dot11SSIDType' */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (1319)
#endif

/* tt__DynamicDNSType_ has binding name 'tt__DynamicDNSType_' for type 'tt:DynamicDNSType' */
#ifndef SOAP_TYPE_tt__DynamicDNSType_
#define SOAP_TYPE_tt__DynamicDNSType_ (1318)
#endif

/* tt__IPAddressFilterType_ has binding name 'tt__IPAddressFilterType_' for type 'tt:IPAddressFilterType' */
#ifndef SOAP_TYPE_tt__IPAddressFilterType_
#define SOAP_TYPE_tt__IPAddressFilterType_ (1316)
#endif

/* tt__Domain__ has binding name 'tt__Domain__' for type 'tt:Domain' */
#ifndef SOAP_TYPE_tt__Domain__
#define SOAP_TYPE_tt__Domain__ (1314)
#endif

/* tt__DNSName__ has binding name 'tt__DNSName__' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_tt__DNSName__
#define SOAP_TYPE_tt__DNSName__ (1312)
#endif

/* tt__IPType_ has binding name 'tt__IPType_' for type 'tt:IPType' */
#ifndef SOAP_TYPE_tt__IPType_
#define SOAP_TYPE_tt__IPType_ (1310)
#endif

/* tt__HwAddress__ has binding name 'tt__HwAddress__' for type 'tt:HwAddress' */
#ifndef SOAP_TYPE_tt__HwAddress__
#define SOAP_TYPE_tt__HwAddress__ (1308)
#endif

/* tt__IPv6Address__ has binding name 'tt__IPv6Address__' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_tt__IPv6Address__
#define SOAP_TYPE_tt__IPv6Address__ (1306)
#endif

/* tt__IPv4Address__ has binding name 'tt__IPv4Address__' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_tt__IPv4Address__
#define SOAP_TYPE_tt__IPv4Address__ (1304)
#endif

/* tt__NetworkHostType_ has binding name 'tt__NetworkHostType_' for type 'tt:NetworkHostType' */
#ifndef SOAP_TYPE_tt__NetworkHostType_
#define SOAP_TYPE_tt__NetworkHostType_ (1302)
#endif

/* tt__NetworkProtocolType_ has binding name 'tt__NetworkProtocolType_' for type 'tt:NetworkProtocolType' */
#ifndef SOAP_TYPE_tt__NetworkProtocolType_
#define SOAP_TYPE_tt__NetworkProtocolType_ (1300)
#endif

/* tt__IPv6DHCPConfiguration_ has binding name 'tt__IPv6DHCPConfiguration_' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_ (1298)
#endif

/* tt__IANA_IfTypes__ has binding name 'tt__IANA_IfTypes__' for type 'tt:IANA-IfTypes' */
#ifndef SOAP_TYPE_tt__IANA_IfTypes__
#define SOAP_TYPE_tt__IANA_IfTypes__ (1296)
#endif

/* tt__Duplex_ has binding name 'tt__Duplex_' for type 'tt:Duplex' */
#ifndef SOAP_TYPE_tt__Duplex_
#define SOAP_TYPE_tt__Duplex_ (1294)
#endif

/* tt__NetworkInterfaceConfigPriority__ has binding name 'tt__NetworkInterfaceConfigPriority__' for type 'tt:NetworkInterfaceConfigPriority' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority__ (1292)
#endif

/* tt__DiscoveryMode_ has binding name 'tt__DiscoveryMode_' for type 'tt:DiscoveryMode' */
#ifndef SOAP_TYPE_tt__DiscoveryMode_
#define SOAP_TYPE_tt__DiscoveryMode_ (1290)
#endif

/* tt__ScopeDefinition_ has binding name 'tt__ScopeDefinition_' for type 'tt:ScopeDefinition' */
#ifndef SOAP_TYPE_tt__ScopeDefinition_
#define SOAP_TYPE_tt__ScopeDefinition_ (1288)
#endif

/* tt__TransportProtocol_ has binding name 'tt__TransportProtocol_' for type 'tt:TransportProtocol' */
#ifndef SOAP_TYPE_tt__TransportProtocol_
#define SOAP_TYPE_tt__TransportProtocol_ (1286)
#endif

/* tt__StreamType_ has binding name 'tt__StreamType_' for type 'tt:StreamType' */
#ifndef SOAP_TYPE_tt__StreamType_
#define SOAP_TYPE_tt__StreamType_ (1284)
#endif

/* tt__MetadataCompressionType_ has binding name 'tt__MetadataCompressionType_' for type 'tt:MetadataCompressionType' */
#ifndef SOAP_TYPE_tt__MetadataCompressionType_
#define SOAP_TYPE_tt__MetadataCompressionType_ (1282)
#endif

/* tt__AudioEncodingMimeNames_ has binding name 'tt__AudioEncodingMimeNames_' for type 'tt:AudioEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames_
#define SOAP_TYPE_tt__AudioEncodingMimeNames_ (1280)
#endif

/* tt__AudioEncoding_ has binding name 'tt__AudioEncoding_' for type 'tt:AudioEncoding' */
#ifndef SOAP_TYPE_tt__AudioEncoding_
#define SOAP_TYPE_tt__AudioEncoding_ (1278)
#endif

/* tt__VideoEncodingProfiles_ has binding name 'tt__VideoEncodingProfiles_' for type 'tt:VideoEncodingProfiles' */
#ifndef SOAP_TYPE_tt__VideoEncodingProfiles_
#define SOAP_TYPE_tt__VideoEncodingProfiles_ (1276)
#endif

/* tt__VideoEncodingMimeNames_ has binding name 'tt__VideoEncodingMimeNames_' for type 'tt:VideoEncodingMimeNames' */
#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames_
#define SOAP_TYPE_tt__VideoEncodingMimeNames_ (1274)
#endif

/* tt__H264Profile_ has binding name 'tt__H264Profile_' for type 'tt:H264Profile' */
#ifndef SOAP_TYPE_tt__H264Profile_
#define SOAP_TYPE_tt__H264Profile_ (1272)
#endif

/* tt__Mpeg4Profile_ has binding name 'tt__Mpeg4Profile_' for type 'tt:Mpeg4Profile' */
#ifndef SOAP_TYPE_tt__Mpeg4Profile_
#define SOAP_TYPE_tt__Mpeg4Profile_ (1270)
#endif

/* tt__VideoEncoding_ has binding name 'tt__VideoEncoding_' for type 'tt:VideoEncoding' */
#ifndef SOAP_TYPE_tt__VideoEncoding_
#define SOAP_TYPE_tt__VideoEncoding_ (1268)
#endif

/* tt__ViewModes_ has binding name 'tt__ViewModes_' for type 'tt:ViewModes' */
#ifndef SOAP_TYPE_tt__ViewModes_
#define SOAP_TYPE_tt__ViewModes_ (1266)
#endif

/* tt__SceneOrientationOption_ has binding name 'tt__SceneOrientationOption_' for type 'tt:SceneOrientationOption' */
#ifndef SOAP_TYPE_tt__SceneOrientationOption_
#define SOAP_TYPE_tt__SceneOrientationOption_ (1264)
#endif

/* tt__SceneOrientationMode_ has binding name 'tt__SceneOrientationMode_' for type 'tt:SceneOrientationMode' */
#ifndef SOAP_TYPE_tt__SceneOrientationMode_
#define SOAP_TYPE_tt__SceneOrientationMode_ (1262)
#endif

/* tt__RotateMode_ has binding name 'tt__RotateMode_' for type 'tt:RotateMode' */
#ifndef SOAP_TYPE_tt__RotateMode_
#define SOAP_TYPE_tt__RotateMode_ (1260)
#endif

/* tt__Name__ has binding name 'tt__Name__' for type 'tt:Name' */
#ifndef SOAP_TYPE_tt__Name__
#define SOAP_TYPE_tt__Name__ (1258)
#endif

/* tds__StorageType_ has binding name 'tds__StorageType_' for type 'tds:StorageType' */
#ifndef SOAP_TYPE_tds__StorageType_
#define SOAP_TYPE_tds__StorageType_ (1256)
#endif

/* tds__AutoGeoModes_ has binding name 'tds__AutoGeoModes_' for type 'tds:AutoGeoModes' */
#ifndef SOAP_TYPE_tds__AutoGeoModes_
#define SOAP_TYPE_tds__AutoGeoModes_ (1254)
#endif

/* _tptz__MoveAndStartTrackingResponse has binding name '_tptz__MoveAndStartTrackingResponse' for type '' */
#ifndef SOAP_TYPE__tptz__MoveAndStartTrackingResponse
#define SOAP_TYPE__tptz__MoveAndStartTrackingResponse (1246)
#endif

/* _tptz__MoveAndStartTracking has binding name '_tptz__MoveAndStartTracking' for type '' */
#ifndef SOAP_TYPE__tptz__MoveAndStartTracking
#define SOAP_TYPE__tptz__MoveAndStartTracking (1245)
#endif

/* _tptz__GetCompatibleConfigurationsResponse has binding name '_tptz__GetCompatibleConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse (1244)
#endif

/* _tptz__GetCompatibleConfigurations has binding name '_tptz__GetCompatibleConfigurations' for type '' */
#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations
#define SOAP_TYPE__tptz__GetCompatibleConfigurations (1243)
#endif

/* _tptz__RemovePresetTourResponse has binding name '_tptz__RemovePresetTourResponse' for type '' */
#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse
#define SOAP_TYPE__tptz__RemovePresetTourResponse (1242)
#endif

/* _tptz__RemovePresetTour has binding name '_tptz__RemovePresetTour' for type '' */
#ifndef SOAP_TYPE__tptz__RemovePresetTour
#define SOAP_TYPE__tptz__RemovePresetTour (1241)
#endif

/* _tptz__OperatePresetTourResponse has binding name '_tptz__OperatePresetTourResponse' for type '' */
#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse
#define SOAP_TYPE__tptz__OperatePresetTourResponse (1240)
#endif

/* _tptz__OperatePresetTour has binding name '_tptz__OperatePresetTour' for type '' */
#ifndef SOAP_TYPE__tptz__OperatePresetTour
#define SOAP_TYPE__tptz__OperatePresetTour (1239)
#endif

/* _tptz__ModifyPresetTourResponse has binding name '_tptz__ModifyPresetTourResponse' for type '' */
#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse
#define SOAP_TYPE__tptz__ModifyPresetTourResponse (1238)
#endif

/* _tptz__ModifyPresetTour has binding name '_tptz__ModifyPresetTour' for type '' */
#ifndef SOAP_TYPE__tptz__ModifyPresetTour
#define SOAP_TYPE__tptz__ModifyPresetTour (1237)
#endif

/* _tptz__CreatePresetTourResponse has binding name '_tptz__CreatePresetTourResponse' for type '' */
#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse
#define SOAP_TYPE__tptz__CreatePresetTourResponse (1236)
#endif

/* _tptz__CreatePresetTour has binding name '_tptz__CreatePresetTour' for type '' */
#ifndef SOAP_TYPE__tptz__CreatePresetTour
#define SOAP_TYPE__tptz__CreatePresetTour (1235)
#endif

/* _tptz__GetPresetTourOptionsResponse has binding name '_tptz__GetPresetTourOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse (1234)
#endif

/* _tptz__GetPresetTourOptions has binding name '_tptz__GetPresetTourOptions' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetTourOptions
#define SOAP_TYPE__tptz__GetPresetTourOptions (1233)
#endif

/* _tptz__GetPresetTourResponse has binding name '_tptz__GetPresetTourResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetTourResponse
#define SOAP_TYPE__tptz__GetPresetTourResponse (1232)
#endif

/* _tptz__GetPresetTour has binding name '_tptz__GetPresetTour' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetTour
#define SOAP_TYPE__tptz__GetPresetTour (1231)
#endif

/* _tptz__GetPresetToursResponse has binding name '_tptz__GetPresetToursResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetToursResponse
#define SOAP_TYPE__tptz__GetPresetToursResponse (1230)
#endif

/* _tptz__GetPresetTours has binding name '_tptz__GetPresetTours' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetTours
#define SOAP_TYPE__tptz__GetPresetTours (1229)
#endif

/* _tptz__StopResponse has binding name '_tptz__StopResponse' for type '' */
#ifndef SOAP_TYPE__tptz__StopResponse
#define SOAP_TYPE__tptz__StopResponse (1228)
#endif

/* _tptz__Stop has binding name '_tptz__Stop' for type '' */
#ifndef SOAP_TYPE__tptz__Stop
#define SOAP_TYPE__tptz__Stop (1227)
#endif

/* _tptz__GeoMoveResponse has binding name '_tptz__GeoMoveResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GeoMoveResponse
#define SOAP_TYPE__tptz__GeoMoveResponse (1226)
#endif

/* _tptz__GeoMove has binding name '_tptz__GeoMove' for type '' */
#ifndef SOAP_TYPE__tptz__GeoMove
#define SOAP_TYPE__tptz__GeoMove (1225)
#endif

/* _tptz__AbsoluteMoveResponse has binding name '_tptz__AbsoluteMoveResponse' for type '' */
#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse
#define SOAP_TYPE__tptz__AbsoluteMoveResponse (1224)
#endif

/* _tptz__AbsoluteMove has binding name '_tptz__AbsoluteMove' for type '' */
#ifndef SOAP_TYPE__tptz__AbsoluteMove
#define SOAP_TYPE__tptz__AbsoluteMove (1223)
#endif

/* _tptz__RelativeMoveResponse has binding name '_tptz__RelativeMoveResponse' for type '' */
#ifndef SOAP_TYPE__tptz__RelativeMoveResponse
#define SOAP_TYPE__tptz__RelativeMoveResponse (1222)
#endif

/* _tptz__RelativeMove has binding name '_tptz__RelativeMove' for type '' */
#ifndef SOAP_TYPE__tptz__RelativeMove
#define SOAP_TYPE__tptz__RelativeMove (1221)
#endif

/* _tptz__ContinuousMoveResponse has binding name '_tptz__ContinuousMoveResponse' for type '' */
#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse
#define SOAP_TYPE__tptz__ContinuousMoveResponse (1220)
#endif

/* _tptz__ContinuousMove has binding name '_tptz__ContinuousMove' for type '' */
#ifndef SOAP_TYPE__tptz__ContinuousMove
#define SOAP_TYPE__tptz__ContinuousMove (1219)
#endif

/* _tptz__SetHomePositionResponse has binding name '_tptz__SetHomePositionResponse' for type '' */
#ifndef SOAP_TYPE__tptz__SetHomePositionResponse
#define SOAP_TYPE__tptz__SetHomePositionResponse (1218)
#endif

/* _tptz__SetHomePosition has binding name '_tptz__SetHomePosition' for type '' */
#ifndef SOAP_TYPE__tptz__SetHomePosition
#define SOAP_TYPE__tptz__SetHomePosition (1217)
#endif

/* _tptz__GotoHomePositionResponse has binding name '_tptz__GotoHomePositionResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse
#define SOAP_TYPE__tptz__GotoHomePositionResponse (1216)
#endif

/* _tptz__GotoHomePosition has binding name '_tptz__GotoHomePosition' for type '' */
#ifndef SOAP_TYPE__tptz__GotoHomePosition
#define SOAP_TYPE__tptz__GotoHomePosition (1215)
#endif

/* _tptz__GetStatusResponse has binding name '_tptz__GetStatusResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetStatusResponse
#define SOAP_TYPE__tptz__GetStatusResponse (1214)
#endif

/* _tptz__GetStatus has binding name '_tptz__GetStatus' for type '' */
#ifndef SOAP_TYPE__tptz__GetStatus
#define SOAP_TYPE__tptz__GetStatus (1213)
#endif

/* _tptz__GotoPresetResponse has binding name '_tptz__GotoPresetResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GotoPresetResponse
#define SOAP_TYPE__tptz__GotoPresetResponse (1212)
#endif

/* _tptz__GotoPreset has binding name '_tptz__GotoPreset' for type '' */
#ifndef SOAP_TYPE__tptz__GotoPreset
#define SOAP_TYPE__tptz__GotoPreset (1211)
#endif

/* _tptz__RemovePresetResponse has binding name '_tptz__RemovePresetResponse' for type '' */
#ifndef SOAP_TYPE__tptz__RemovePresetResponse
#define SOAP_TYPE__tptz__RemovePresetResponse (1210)
#endif

/* _tptz__RemovePreset has binding name '_tptz__RemovePreset' for type '' */
#ifndef SOAP_TYPE__tptz__RemovePreset
#define SOAP_TYPE__tptz__RemovePreset (1209)
#endif

/* _tptz__SetPresetResponse has binding name '_tptz__SetPresetResponse' for type '' */
#ifndef SOAP_TYPE__tptz__SetPresetResponse
#define SOAP_TYPE__tptz__SetPresetResponse (1208)
#endif

/* _tptz__SetPreset has binding name '_tptz__SetPreset' for type '' */
#ifndef SOAP_TYPE__tptz__SetPreset
#define SOAP_TYPE__tptz__SetPreset (1207)
#endif

/* _tptz__GetPresetsResponse has binding name '_tptz__GetPresetsResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresetsResponse
#define SOAP_TYPE__tptz__GetPresetsResponse (1206)
#endif

/* _tptz__GetPresets has binding name '_tptz__GetPresets' for type '' */
#ifndef SOAP_TYPE__tptz__GetPresets
#define SOAP_TYPE__tptz__GetPresets (1205)
#endif

/* _tptz__SendAuxiliaryCommandResponse has binding name '_tptz__SendAuxiliaryCommandResponse' for type '' */
#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse (1204)
#endif

/* _tptz__SendAuxiliaryCommand has binding name '_tptz__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand
#define SOAP_TYPE__tptz__SendAuxiliaryCommand (1203)
#endif

/* _tptz__GetConfigurationOptionsResponse has binding name '_tptz__GetConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse (1202)
#endif

/* _tptz__GetConfigurationOptions has binding name '_tptz__GetConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfigurationOptions
#define SOAP_TYPE__tptz__GetConfigurationOptions (1201)
#endif

/* _tptz__SetConfigurationResponse has binding name '_tptz__SetConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tptz__SetConfigurationResponse
#define SOAP_TYPE__tptz__SetConfigurationResponse (1200)
#endif

/* _tptz__SetConfiguration has binding name '_tptz__SetConfiguration' for type '' */
#ifndef SOAP_TYPE__tptz__SetConfiguration
#define SOAP_TYPE__tptz__SetConfiguration (1199)
#endif

/* _tptz__GetConfigurationResponse has binding name '_tptz__GetConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfigurationResponse
#define SOAP_TYPE__tptz__GetConfigurationResponse (1198)
#endif

/* _tptz__GetConfiguration has binding name '_tptz__GetConfiguration' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfiguration
#define SOAP_TYPE__tptz__GetConfiguration (1197)
#endif

/* _tptz__GetConfigurationsResponse has binding name '_tptz__GetConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse
#define SOAP_TYPE__tptz__GetConfigurationsResponse (1196)
#endif

/* _tptz__GetConfigurations has binding name '_tptz__GetConfigurations' for type '' */
#ifndef SOAP_TYPE__tptz__GetConfigurations
#define SOAP_TYPE__tptz__GetConfigurations (1195)
#endif

/* _tptz__GetNodeResponse has binding name '_tptz__GetNodeResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetNodeResponse
#define SOAP_TYPE__tptz__GetNodeResponse (1194)
#endif

/* _tptz__GetNode has binding name '_tptz__GetNode' for type '' */
#ifndef SOAP_TYPE__tptz__GetNode
#define SOAP_TYPE__tptz__GetNode (1193)
#endif

/* _tptz__GetNodesResponse has binding name '_tptz__GetNodesResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetNodesResponse
#define SOAP_TYPE__tptz__GetNodesResponse (1192)
#endif

/* _tptz__GetNodes has binding name '_tptz__GetNodes' for type '' */
#ifndef SOAP_TYPE__tptz__GetNodes
#define SOAP_TYPE__tptz__GetNodes (1191)
#endif

/* _tptz__GetServiceCapabilitiesResponse has binding name '_tptz__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse (1190)
#endif

/* _tptz__GetServiceCapabilities has binding name '_tptz__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tptz__GetServiceCapabilities
#define SOAP_TYPE__tptz__GetServiceCapabilities (1189)
#endif

/* tptz__Capabilities has binding name 'tptz__Capabilities' for type 'tptz:Capabilities' */
#ifndef SOAP_TYPE_tptz__Capabilities
#define SOAP_TYPE_tptz__Capabilities (1188)
#endif

/* _tr2__DeleteMask has binding name '_tr2__DeleteMask' for type '' */
#ifndef SOAP_TYPE__tr2__DeleteMask
#define SOAP_TYPE__tr2__DeleteMask (1187)
#endif

/* _tr2__CreateMaskResponse has binding name '_tr2__CreateMaskResponse' for type '' */
#ifndef SOAP_TYPE__tr2__CreateMaskResponse
#define SOAP_TYPE__tr2__CreateMaskResponse (1186)
#endif

/* _tr2__CreateMask has binding name '_tr2__CreateMask' for type '' */
#ifndef SOAP_TYPE__tr2__CreateMask
#define SOAP_TYPE__tr2__CreateMask (1185)
#endif

/* _tr2__GetMaskOptionsResponse has binding name '_tr2__GetMaskOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetMaskOptionsResponse
#define SOAP_TYPE__tr2__GetMaskOptionsResponse (1184)
#endif

/* _tr2__GetMaskOptions has binding name '_tr2__GetMaskOptions' for type '' */
#ifndef SOAP_TYPE__tr2__GetMaskOptions
#define SOAP_TYPE__tr2__GetMaskOptions (1183)
#endif

/* _tr2__SetMask has binding name '_tr2__SetMask' for type '' */
#ifndef SOAP_TYPE__tr2__SetMask
#define SOAP_TYPE__tr2__SetMask (1182)
#endif

/* _tr2__GetMasksResponse has binding name '_tr2__GetMasksResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetMasksResponse
#define SOAP_TYPE__tr2__GetMasksResponse (1181)
#endif

/* _tr2__GetMasks has binding name '_tr2__GetMasks' for type '' */
#ifndef SOAP_TYPE__tr2__GetMasks
#define SOAP_TYPE__tr2__GetMasks (1180)
#endif

/* _tr2__DeleteOSD has binding name '_tr2__DeleteOSD' for type '' */
#ifndef SOAP_TYPE__tr2__DeleteOSD
#define SOAP_TYPE__tr2__DeleteOSD (1179)
#endif

/* _tr2__CreateOSDResponse has binding name '_tr2__CreateOSDResponse' for type '' */
#ifndef SOAP_TYPE__tr2__CreateOSDResponse
#define SOAP_TYPE__tr2__CreateOSDResponse (1178)
#endif

/* _tr2__CreateOSD has binding name '_tr2__CreateOSD' for type '' */
#ifndef SOAP_TYPE__tr2__CreateOSD
#define SOAP_TYPE__tr2__CreateOSD (1177)
#endif

/* _tr2__GetOSDOptionsResponse has binding name '_tr2__GetOSDOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetOSDOptionsResponse
#define SOAP_TYPE__tr2__GetOSDOptionsResponse (1176)
#endif

/* _tr2__GetOSDOptions has binding name '_tr2__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE__tr2__GetOSDOptions
#define SOAP_TYPE__tr2__GetOSDOptions (1175)
#endif

/* _tr2__SetOSD has binding name '_tr2__SetOSD' for type '' */
#ifndef SOAP_TYPE__tr2__SetOSD
#define SOAP_TYPE__tr2__SetOSD (1174)
#endif

/* _tr2__GetOSDsResponse has binding name '_tr2__GetOSDsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetOSDsResponse
#define SOAP_TYPE__tr2__GetOSDsResponse (1173)
#endif

/* _tr2__GetOSDs has binding name '_tr2__GetOSDs' for type '' */
#ifndef SOAP_TYPE__tr2__GetOSDs
#define SOAP_TYPE__tr2__GetOSDs (1172)
#endif

/* _tr2__SetVideoSourceModeResponse has binding name '_tr2__SetVideoSourceModeResponse' for type '' */
#ifndef SOAP_TYPE__tr2__SetVideoSourceModeResponse
#define SOAP_TYPE__tr2__SetVideoSourceModeResponse (1171)
#endif

/* _tr2__SetVideoSourceMode has binding name '_tr2__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE__tr2__SetVideoSourceMode
#define SOAP_TYPE__tr2__SetVideoSourceMode (1170)
#endif

/* _tr2__GetVideoSourceModesResponse has binding name '_tr2__GetVideoSourceModesResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoSourceModesResponse
#define SOAP_TYPE__tr2__GetVideoSourceModesResponse (1169)
#endif

/* _tr2__GetVideoSourceModes has binding name '_tr2__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoSourceModes
#define SOAP_TYPE__tr2__GetVideoSourceModes (1168)
#endif

/* _tr2__GetSnapshotUriResponse has binding name '_tr2__GetSnapshotUriResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetSnapshotUriResponse
#define SOAP_TYPE__tr2__GetSnapshotUriResponse (1167)
#endif

/* _tr2__GetSnapshotUri has binding name '_tr2__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE__tr2__GetSnapshotUri
#define SOAP_TYPE__tr2__GetSnapshotUri (1166)
#endif

/* _tr2__SetSynchronizationPointResponse has binding name '_tr2__SetSynchronizationPointResponse' for type '' */
#ifndef SOAP_TYPE__tr2__SetSynchronizationPointResponse
#define SOAP_TYPE__tr2__SetSynchronizationPointResponse (1165)
#endif

/* _tr2__SetSynchronizationPoint has binding name '_tr2__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE__tr2__SetSynchronizationPoint
#define SOAP_TYPE__tr2__SetSynchronizationPoint (1164)
#endif

/* _tr2__GetStreamUriResponse has binding name '_tr2__GetStreamUriResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetStreamUriResponse
#define SOAP_TYPE__tr2__GetStreamUriResponse (1163)
#endif

/* _tr2__GetStreamUri has binding name '_tr2__GetStreamUri' for type '' */
#ifndef SOAP_TYPE__tr2__GetStreamUri
#define SOAP_TYPE__tr2__GetStreamUri (1162)
#endif

/* _tr2__GetVideoEncoderInstancesResponse has binding name '_tr2__GetVideoEncoderInstancesResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse
#define SOAP_TYPE__tr2__GetVideoEncoderInstancesResponse (1161)
#endif

/* _tr2__GetVideoEncoderInstances has binding name '_tr2__GetVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderInstances
#define SOAP_TYPE__tr2__GetVideoEncoderInstances (1160)
#endif

/* _tr2__GetAudioDecoderConfigurationOptionsResponse has binding name '_tr2__GetAudioDecoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioDecoderConfigurationOptionsResponse (1159)
#endif

/* _tr2__GetAudioOutputConfigurationOptionsResponse has binding name '_tr2__GetAudioOutputConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioOutputConfigurationOptionsResponse (1158)
#endif

/* _tr2__GetMetadataConfigurationOptionsResponse has binding name '_tr2__GetMetadataConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetMetadataConfigurationOptionsResponse (1157)
#endif

/* _tr2__GetAudioEncoderConfigurationOptionsResponse has binding name '_tr2__GetAudioEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioEncoderConfigurationOptionsResponse (1156)
#endif

/* _tr2__GetAudioSourceConfigurationOptionsResponse has binding name '_tr2__GetAudioSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetAudioSourceConfigurationOptionsResponse (1155)
#endif

/* _tr2__GetVideoEncoderConfigurationOptionsResponse has binding name '_tr2__GetVideoEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetVideoEncoderConfigurationOptionsResponse (1154)
#endif

/* _tr2__GetVideoSourceConfigurationOptionsResponse has binding name '_tr2__GetVideoSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__tr2__GetVideoSourceConfigurationOptionsResponse (1153)
#endif

/* _tr2__SetAudioDecoderConfiguration has binding name '_tr2__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetAudioDecoderConfiguration
#define SOAP_TYPE__tr2__SetAudioDecoderConfiguration (1152)
#endif

/* _tr2__SetAudioOutputConfiguration has binding name '_tr2__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetAudioOutputConfiguration
#define SOAP_TYPE__tr2__SetAudioOutputConfiguration (1151)
#endif

/* _tr2__SetMetadataConfiguration has binding name '_tr2__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetMetadataConfiguration
#define SOAP_TYPE__tr2__SetMetadataConfiguration (1150)
#endif

/* _tr2__SetAudioSourceConfiguration has binding name '_tr2__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetAudioSourceConfiguration
#define SOAP_TYPE__tr2__SetAudioSourceConfiguration (1149)
#endif

/* _tr2__SetAudioEncoderConfiguration has binding name '_tr2__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetAudioEncoderConfiguration
#define SOAP_TYPE__tr2__SetAudioEncoderConfiguration (1148)
#endif

/* _tr2__SetVideoSourceConfiguration has binding name '_tr2__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetVideoSourceConfiguration
#define SOAP_TYPE__tr2__SetVideoSourceConfiguration (1147)
#endif

/* _tr2__SetVideoEncoderConfiguration has binding name '_tr2__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__SetVideoEncoderConfiguration
#define SOAP_TYPE__tr2__SetVideoEncoderConfiguration (1146)
#endif

/* _tr2__GetAudioDecoderConfigurationsResponse has binding name '_tr2__GetAudioDecoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioDecoderConfigurationsResponse (1145)
#endif

/* _tr2__GetAudioOutputConfigurationsResponse has binding name '_tr2__GetAudioOutputConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioOutputConfigurationsResponse (1144)
#endif

/* _tr2__GetMetadataConfigurationsResponse has binding name '_tr2__GetMetadataConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetMetadataConfigurationsResponse
#define SOAP_TYPE__tr2__GetMetadataConfigurationsResponse (1143)
#endif

/* _tr2__GetAnalyticsConfigurationsResponse has binding name '_tr2__GetAnalyticsConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse
#define SOAP_TYPE__tr2__GetAnalyticsConfigurationsResponse (1142)
#endif

/* _tr2__GetAudioSourceConfigurationsResponse has binding name '_tr2__GetAudioSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioSourceConfigurationsResponse (1141)
#endif

/* _tr2__GetAudioEncoderConfigurationsResponse has binding name '_tr2__GetAudioEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetAudioEncoderConfigurationsResponse (1140)
#endif

/* _tr2__GetVideoSourceConfigurationsResponse has binding name '_tr2__GetVideoSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__tr2__GetVideoSourceConfigurationsResponse (1139)
#endif

/* _tr2__GetVideoEncoderConfigurationsResponse has binding name '_tr2__GetVideoEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__tr2__GetVideoEncoderConfigurationsResponse (1138)
#endif

/* _tr2__DeleteProfileResponse has binding name '_tr2__DeleteProfileResponse' for type '' */
#ifndef SOAP_TYPE__tr2__DeleteProfileResponse
#define SOAP_TYPE__tr2__DeleteProfileResponse (1137)
#endif

/* _tr2__DeleteProfile has binding name '_tr2__DeleteProfile' for type '' */
#ifndef SOAP_TYPE__tr2__DeleteProfile
#define SOAP_TYPE__tr2__DeleteProfile (1136)
#endif

/* _tr2__RemoveConfigurationResponse has binding name '_tr2__RemoveConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tr2__RemoveConfigurationResponse
#define SOAP_TYPE__tr2__RemoveConfigurationResponse (1135)
#endif

/* _tr2__RemoveConfiguration has binding name '_tr2__RemoveConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__RemoveConfiguration
#define SOAP_TYPE__tr2__RemoveConfiguration (1134)
#endif

/* _tr2__AddConfigurationResponse has binding name '_tr2__AddConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tr2__AddConfigurationResponse
#define SOAP_TYPE__tr2__AddConfigurationResponse (1133)
#endif

/* _tr2__AddConfiguration has binding name '_tr2__AddConfiguration' for type '' */
#ifndef SOAP_TYPE__tr2__AddConfiguration
#define SOAP_TYPE__tr2__AddConfiguration (1132)
#endif

/* _tr2__GetProfilesResponse has binding name '_tr2__GetProfilesResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetProfilesResponse
#define SOAP_TYPE__tr2__GetProfilesResponse (1131)
#endif

/* _tr2__GetProfiles has binding name '_tr2__GetProfiles' for type '' */
#ifndef SOAP_TYPE__tr2__GetProfiles
#define SOAP_TYPE__tr2__GetProfiles (1130)
#endif

/* _tr2__CreateProfileResponse has binding name '_tr2__CreateProfileResponse' for type '' */
#ifndef SOAP_TYPE__tr2__CreateProfileResponse
#define SOAP_TYPE__tr2__CreateProfileResponse (1129)
#endif

/* _tr2__CreateProfile has binding name '_tr2__CreateProfile' for type '' */
#ifndef SOAP_TYPE__tr2__CreateProfile
#define SOAP_TYPE__tr2__CreateProfile (1128)
#endif

/* _tr2__GetServiceCapabilitiesResponse has binding name '_tr2__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tr2__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tr2__GetServiceCapabilitiesResponse (1127)
#endif

/* _tr2__GetServiceCapabilities has binding name '_tr2__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tr2__GetServiceCapabilities
#define SOAP_TYPE__tr2__GetServiceCapabilities (1126)
#endif

/* tr2__MaskOptions has binding name 'tr2__MaskOptions' for type 'tr2:MaskOptions' */
#ifndef SOAP_TYPE_tr2__MaskOptions
#define SOAP_TYPE_tr2__MaskOptions (1125)
#endif

/* tr2__Mask has binding name 'tr2__Mask' for type 'tr2:Mask' */
#ifndef SOAP_TYPE_tr2__Mask
#define SOAP_TYPE_tr2__Mask (1124)
#endif

/* tr2__VideoSourceMode has binding name 'tr2__VideoSourceMode' for type 'tr2:VideoSourceMode' */
#ifndef SOAP_TYPE_tr2__VideoSourceMode
#define SOAP_TYPE_tr2__VideoSourceMode (1123)
#endif

/* tr2__StartStopMulticastStreaming has binding name 'tr2__StartStopMulticastStreaming' for type 'tr2:StartStopMulticastStreaming' */
#ifndef SOAP_TYPE_tr2__StartStopMulticastStreaming
#define SOAP_TYPE_tr2__StartStopMulticastStreaming (1122)
#endif

/* tr2__EncoderInstanceInfo has binding name 'tr2__EncoderInstanceInfo' for type 'tr2:EncoderInstanceInfo' */
#ifndef SOAP_TYPE_tr2__EncoderInstanceInfo
#define SOAP_TYPE_tr2__EncoderInstanceInfo (1121)
#endif

/* tr2__EncoderInstance has binding name 'tr2__EncoderInstance' for type 'tr2:EncoderInstance' */
#ifndef SOAP_TYPE_tr2__EncoderInstance
#define SOAP_TYPE_tr2__EncoderInstance (1120)
#endif

/* tr2__SetConfigurationResponse has binding name 'tr2__SetConfigurationResponse' for type 'tr2:SetConfigurationResponse' */
#ifndef SOAP_TYPE_tr2__SetConfigurationResponse
#define SOAP_TYPE_tr2__SetConfigurationResponse (1119)
#endif

/* tr2__GetConfiguration has binding name 'tr2__GetConfiguration' for type 'tr2:GetConfiguration' */
#ifndef SOAP_TYPE_tr2__GetConfiguration
#define SOAP_TYPE_tr2__GetConfiguration (1118)
#endif

/* tr2__MediaProfile has binding name 'tr2__MediaProfile' for type 'tr2:MediaProfile' */
#ifndef SOAP_TYPE_tr2__MediaProfile
#define SOAP_TYPE_tr2__MediaProfile (1117)
#endif

/* tr2__ConfigurationSet has binding name 'tr2__ConfigurationSet' for type 'tr2:ConfigurationSet' */
#ifndef SOAP_TYPE_tr2__ConfigurationSet
#define SOAP_TYPE_tr2__ConfigurationSet (1116)
#endif

/* tr2__ReceiverConfiguration has binding name 'tr2__ReceiverConfiguration' for type 'tr2:ReceiverConfiguration' */
#ifndef SOAP_TYPE_tr2__ReceiverConfiguration
#define SOAP_TYPE_tr2__ReceiverConfiguration (1115)
#endif

/* tr2__ConfigurationRef has binding name 'tr2__ConfigurationRef' for type 'tr2:ConfigurationRef' */
#ifndef SOAP_TYPE_tr2__ConfigurationRef
#define SOAP_TYPE_tr2__ConfigurationRef (1114)
#endif

/* tr2__StreamingCapabilities has binding name 'tr2__StreamingCapabilities' for type 'tr2:StreamingCapabilities' */
#ifndef SOAP_TYPE_tr2__StreamingCapabilities
#define SOAP_TYPE_tr2__StreamingCapabilities (1113)
#endif

/* tr2__ProfileCapabilities has binding name 'tr2__ProfileCapabilities' for type 'tr2:ProfileCapabilities' */
#ifndef SOAP_TYPE_tr2__ProfileCapabilities
#define SOAP_TYPE_tr2__ProfileCapabilities (1112)
#endif

/* tr2__Capabilities2 has binding name 'tr2__Capabilities2' for type 'tr2:Capabilities2' */
#ifndef SOAP_TYPE_tr2__Capabilities2
#define SOAP_TYPE_tr2__Capabilities2 (1111)
#endif

/* _timg__SetCurrentPresetResponse has binding name '_timg__SetCurrentPresetResponse' for type '' */
#ifndef SOAP_TYPE__timg__SetCurrentPresetResponse
#define SOAP_TYPE__timg__SetCurrentPresetResponse (1110)
#endif

/* _timg__SetCurrentPreset has binding name '_timg__SetCurrentPreset' for type '' */
#ifndef SOAP_TYPE__timg__SetCurrentPreset
#define SOAP_TYPE__timg__SetCurrentPreset (1109)
#endif

/* _timg__GetCurrentPresetResponse has binding name '_timg__GetCurrentPresetResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetCurrentPresetResponse
#define SOAP_TYPE__timg__GetCurrentPresetResponse (1108)
#endif

/* _timg__GetCurrentPreset has binding name '_timg__GetCurrentPreset' for type '' */
#ifndef SOAP_TYPE__timg__GetCurrentPreset
#define SOAP_TYPE__timg__GetCurrentPreset (1107)
#endif

/* _timg__GetPresetsResponse has binding name '_timg__GetPresetsResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetPresetsResponse
#define SOAP_TYPE__timg__GetPresetsResponse (1106)
#endif

/* _timg__GetPresets has binding name '_timg__GetPresets' for type '' */
#ifndef SOAP_TYPE__timg__GetPresets
#define SOAP_TYPE__timg__GetPresets (1105)
#endif

/* _timg__GetStatusResponse has binding name '_timg__GetStatusResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetStatusResponse
#define SOAP_TYPE__timg__GetStatusResponse (1104)
#endif

/* _timg__GetStatus has binding name '_timg__GetStatus' for type '' */
#ifndef SOAP_TYPE__timg__GetStatus
#define SOAP_TYPE__timg__GetStatus (1103)
#endif

/* _timg__StopResponse has binding name '_timg__StopResponse' for type '' */
#ifndef SOAP_TYPE__timg__StopResponse
#define SOAP_TYPE__timg__StopResponse (1102)
#endif

/* _timg__Stop has binding name '_timg__Stop' for type '' */
#ifndef SOAP_TYPE__timg__Stop
#define SOAP_TYPE__timg__Stop (1101)
#endif

/* _timg__GetMoveOptionsResponse has binding name '_timg__GetMoveOptionsResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetMoveOptionsResponse
#define SOAP_TYPE__timg__GetMoveOptionsResponse (1100)
#endif

/* _timg__GetMoveOptions has binding name '_timg__GetMoveOptions' for type '' */
#ifndef SOAP_TYPE__timg__GetMoveOptions
#define SOAP_TYPE__timg__GetMoveOptions (1099)
#endif

/* _timg__MoveResponse has binding name '_timg__MoveResponse' for type '' */
#ifndef SOAP_TYPE__timg__MoveResponse
#define SOAP_TYPE__timg__MoveResponse (1098)
#endif

/* _timg__Move has binding name '_timg__Move' for type '' */
#ifndef SOAP_TYPE__timg__Move
#define SOAP_TYPE__timg__Move (1097)
#endif

/* _timg__GetOptionsResponse has binding name '_timg__GetOptionsResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetOptionsResponse
#define SOAP_TYPE__timg__GetOptionsResponse (1096)
#endif

/* _timg__GetOptions has binding name '_timg__GetOptions' for type '' */
#ifndef SOAP_TYPE__timg__GetOptions
#define SOAP_TYPE__timg__GetOptions (1095)
#endif

/* _timg__SetImagingSettingsResponse has binding name '_timg__SetImagingSettingsResponse' for type '' */
#ifndef SOAP_TYPE__timg__SetImagingSettingsResponse
#define SOAP_TYPE__timg__SetImagingSettingsResponse (1094)
#endif

/* _timg__SetImagingSettings has binding name '_timg__SetImagingSettings' for type '' */
#ifndef SOAP_TYPE__timg__SetImagingSettings
#define SOAP_TYPE__timg__SetImagingSettings (1093)
#endif

/* _timg__GetImagingSettingsResponse has binding name '_timg__GetImagingSettingsResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetImagingSettingsResponse
#define SOAP_TYPE__timg__GetImagingSettingsResponse (1092)
#endif

/* _timg__GetImagingSettings has binding name '_timg__GetImagingSettings' for type '' */
#ifndef SOAP_TYPE__timg__GetImagingSettings
#define SOAP_TYPE__timg__GetImagingSettings (1091)
#endif

/* _timg__GetServiceCapabilitiesResponse has binding name '_timg__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__timg__GetServiceCapabilitiesResponse
#define SOAP_TYPE__timg__GetServiceCapabilitiesResponse (1090)
#endif

/* _timg__GetServiceCapabilities has binding name '_timg__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__timg__GetServiceCapabilities
#define SOAP_TYPE__timg__GetServiceCapabilities (1089)
#endif

/* timg__ImagingPreset has binding name 'timg__ImagingPreset' for type 'timg:ImagingPreset' */
#ifndef SOAP_TYPE_timg__ImagingPreset
#define SOAP_TYPE_timg__ImagingPreset (1088)
#endif

/* timg__Capabilities has binding name 'timg__Capabilities' for type 'timg:Capabilities' */
#ifndef SOAP_TYPE_timg__Capabilities
#define SOAP_TYPE_timg__Capabilities (1087)
#endif

/* wsrfr__ResourceUnavailableFaultType has binding name 'wsrfr__ResourceUnavailableFaultType' for type 'wsrfr:ResourceUnavailableFaultType' */
#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (1086)
#endif

/* wsrfr__ResourceUnknownFaultType has binding name 'wsrfr__ResourceUnknownFaultType' for type 'wsrfr:ResourceUnknownFaultType' */
#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (1085)
#endif

/* _tev__GetEventBrokersResponse has binding name '_tev__GetEventBrokersResponse' for type '' */
#ifndef SOAP_TYPE__tev__GetEventBrokersResponse
#define SOAP_TYPE__tev__GetEventBrokersResponse (1084)
#endif

/* _tev__GetEventBrokers has binding name '_tev__GetEventBrokers' for type '' */
#ifndef SOAP_TYPE__tev__GetEventBrokers
#define SOAP_TYPE__tev__GetEventBrokers (1083)
#endif

/* _tev__DeleteEventBrokerResponse has binding name '_tev__DeleteEventBrokerResponse' for type '' */
#ifndef SOAP_TYPE__tev__DeleteEventBrokerResponse
#define SOAP_TYPE__tev__DeleteEventBrokerResponse (1082)
#endif

/* _tev__DeleteEventBroker has binding name '_tev__DeleteEventBroker' for type '' */
#ifndef SOAP_TYPE__tev__DeleteEventBroker
#define SOAP_TYPE__tev__DeleteEventBroker (1081)
#endif

/* _tev__AddEventBrokerResponse has binding name '_tev__AddEventBrokerResponse' for type '' */
#ifndef SOAP_TYPE__tev__AddEventBrokerResponse
#define SOAP_TYPE__tev__AddEventBrokerResponse (1080)
#endif

/* _tev__AddEventBroker has binding name '_tev__AddEventBroker' for type '' */
#ifndef SOAP_TYPE__tev__AddEventBroker
#define SOAP_TYPE__tev__AddEventBroker (1079)
#endif

/* _tev__GetEventPropertiesResponse has binding name '_tev__GetEventPropertiesResponse' for type '' */
#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (1078)
#endif

/* _tev__GetEventProperties has binding name '_tev__GetEventProperties' for type '' */
#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (1077)
#endif

/* _tev__SetSynchronizationPointResponse has binding name '_tev__SetSynchronizationPointResponse' for type '' */
#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (1076)
#endif

/* _tev__SetSynchronizationPoint has binding name '_tev__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (1075)
#endif

/* _tev__SeekResponse has binding name '_tev__SeekResponse' for type '' */
#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (1074)
#endif

/* _tev__Seek has binding name '_tev__Seek' for type '' */
#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (1073)
#endif

/* _tev__PullMessagesFaultResponse has binding name '_tev__PullMessagesFaultResponse' for type '' */
#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (1072)
#endif

/* _tev__PullMessagesResponse has binding name '_tev__PullMessagesResponse' for type '' */
#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (1071)
#endif

/* _tev__PullMessages has binding name '_tev__PullMessages' for type '' */
#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (1070)
#endif

/* _tev__CreatePullPointSubscriptionResponse has binding name '_tev__CreatePullPointSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (1069)
#endif

/* _tev__CreatePullPointSubscription has binding name '_tev__CreatePullPointSubscription' for type '' */
#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (1068)
#endif

/* _tev__GetServiceCapabilitiesResponse has binding name '_tev__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (1067)
#endif

/* _tev__GetServiceCapabilities has binding name '_tev__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (1066)
#endif

/* tev__EventBrokerConfig has binding name 'tev__EventBrokerConfig' for type 'tev:EventBrokerConfig' */
#ifndef SOAP_TYPE_tev__EventBrokerConfig
#define SOAP_TYPE_tev__EventBrokerConfig (1065)
#endif

/* tev__Capabilities has binding name 'tev__Capabilities' for type 'tev:Capabilities' */
#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (1064)
#endif

/* _trt__DeleteOSDResponse has binding name '_trt__DeleteOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (1063)
#endif

/* _trt__DeleteOSD has binding name '_trt__DeleteOSD' for type '' */
#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (1062)
#endif

/* _trt__CreateOSDResponse has binding name '_trt__CreateOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (1061)
#endif

/* _trt__CreateOSD has binding name '_trt__CreateOSD' for type '' */
#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (1060)
#endif

/* _trt__GetOSDOptionsResponse has binding name '_trt__GetOSDOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (1059)
#endif

/* _trt__GetOSDOptions has binding name '_trt__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (1058)
#endif

/* _trt__SetOSDResponse has binding name '_trt__SetOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (1057)
#endif

/* _trt__SetOSD has binding name '_trt__SetOSD' for type '' */
#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (1056)
#endif

/* _trt__GetOSDResponse has binding name '_trt__GetOSDResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (1055)
#endif

/* _trt__GetOSD has binding name '_trt__GetOSD' for type '' */
#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (1054)
#endif

/* _trt__GetOSDsResponse has binding name '_trt__GetOSDsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (1053)
#endif

/* _trt__GetOSDs has binding name '_trt__GetOSDs' for type '' */
#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (1052)
#endif

/* _trt__SetVideoSourceModeResponse has binding name '_trt__SetVideoSourceModeResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (1051)
#endif

/* _trt__SetVideoSourceMode has binding name '_trt__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (1050)
#endif

/* _trt__GetVideoSourceModesResponse has binding name '_trt__GetVideoSourceModesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (1049)
#endif

/* _trt__GetVideoSourceModes has binding name '_trt__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (1048)
#endif

/* _trt__GetSnapshotUriResponse has binding name '_trt__GetSnapshotUriResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (1047)
#endif

/* _trt__GetSnapshotUri has binding name '_trt__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (1046)
#endif

/* _trt__SetSynchronizationPointResponse has binding name '_trt__SetSynchronizationPointResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (1045)
#endif

/* _trt__SetSynchronizationPoint has binding name '_trt__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (1044)
#endif

/* _trt__StopMulticastStreamingResponse has binding name '_trt__StopMulticastStreamingResponse' for type '' */
#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (1043)
#endif

/* _trt__StopMulticastStreaming has binding name '_trt__StopMulticastStreaming' for type '' */
#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (1042)
#endif

/* _trt__StartMulticastStreamingResponse has binding name '_trt__StartMulticastStreamingResponse' for type '' */
#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (1041)
#endif

/* _trt__StartMulticastStreaming has binding name '_trt__StartMulticastStreaming' for type '' */
#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (1040)
#endif

/* _trt__GetStreamUriResponse has binding name '_trt__GetStreamUriResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (1039)
#endif

/* _trt__GetStreamUri has binding name '_trt__GetStreamUri' for type '' */
#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (1038)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse has binding name '_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (1037)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstances has binding name '_trt__GetGuaranteedNumberOfVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (1036)
#endif

/* _trt__GetAudioDecoderConfigurationOptionsResponse has binding name '_trt__GetAudioDecoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (1035)
#endif

/* _trt__GetAudioDecoderConfigurationOptions has binding name '_trt__GetAudioDecoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (1034)
#endif

/* _trt__GetAudioOutputConfigurationOptionsResponse has binding name '_trt__GetAudioOutputConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (1033)
#endif

/* _trt__GetAudioOutputConfigurationOptions has binding name '_trt__GetAudioOutputConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (1032)
#endif

/* _trt__GetMetadataConfigurationOptionsResponse has binding name '_trt__GetMetadataConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (1031)
#endif

/* _trt__GetMetadataConfigurationOptions has binding name '_trt__GetMetadataConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (1030)
#endif

/* _trt__GetAudioEncoderConfigurationOptionsResponse has binding name '_trt__GetAudioEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (1029)
#endif

/* _trt__GetAudioEncoderConfigurationOptions has binding name '_trt__GetAudioEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (1028)
#endif

/* _trt__GetAudioSourceConfigurationOptionsResponse has binding name '_trt__GetAudioSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (1027)
#endif

/* _trt__GetAudioSourceConfigurationOptions has binding name '_trt__GetAudioSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (1026)
#endif

/* _trt__GetVideoEncoderConfigurationOptionsResponse has binding name '_trt__GetVideoEncoderConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (1025)
#endif

/* _trt__GetVideoEncoderConfigurationOptions has binding name '_trt__GetVideoEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (1024)
#endif

/* _trt__GetVideoSourceConfigurationOptionsResponse has binding name '_trt__GetVideoSourceConfigurationOptionsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (1023)
#endif

/* _trt__GetVideoSourceConfigurationOptions has binding name '_trt__GetVideoSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (1022)
#endif

/* _trt__SetAudioDecoderConfigurationResponse has binding name '_trt__SetAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (1021)
#endif

/* _trt__SetAudioDecoderConfiguration has binding name '_trt__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (1020)
#endif

/* _trt__SetAudioOutputConfigurationResponse has binding name '_trt__SetAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (1019)
#endif

/* _trt__SetAudioOutputConfiguration has binding name '_trt__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (1018)
#endif

/* _trt__SetMetadataConfigurationResponse has binding name '_trt__SetMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (1017)
#endif

/* _trt__SetMetadataConfiguration has binding name '_trt__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (1016)
#endif

/* _trt__SetVideoAnalyticsConfigurationResponse has binding name '_trt__SetVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (1015)
#endif

/* _trt__SetVideoAnalyticsConfiguration has binding name '_trt__SetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (1014)
#endif

/* _trt__SetAudioSourceConfigurationResponse has binding name '_trt__SetAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (1013)
#endif

/* _trt__SetAudioSourceConfiguration has binding name '_trt__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (1012)
#endif

/* _trt__SetAudioEncoderConfigurationResponse has binding name '_trt__SetAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (1011)
#endif

/* _trt__SetAudioEncoderConfiguration has binding name '_trt__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (1010)
#endif

/* _trt__SetVideoSourceConfigurationResponse has binding name '_trt__SetVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (1009)
#endif

/* _trt__SetVideoSourceConfiguration has binding name '_trt__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (1008)
#endif

/* _trt__SetVideoEncoderConfigurationResponse has binding name '_trt__SetVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (1007)
#endif

/* _trt__SetVideoEncoderConfiguration has binding name '_trt__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (1006)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurationsResponse has binding name '_trt__GetCompatibleAudioDecoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (1005)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurations has binding name '_trt__GetCompatibleAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (1004)
#endif

/* _trt__GetCompatibleAudioOutputConfigurationsResponse has binding name '_trt__GetCompatibleAudioOutputConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (1003)
#endif

/* _trt__GetCompatibleAudioOutputConfigurations has binding name '_trt__GetCompatibleAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (1002)
#endif

/* _trt__GetCompatibleMetadataConfigurationsResponse has binding name '_trt__GetCompatibleMetadataConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (1001)
#endif

/* _trt__GetCompatibleMetadataConfigurations has binding name '_trt__GetCompatibleMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (1000)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurationsResponse has binding name '_trt__GetCompatibleVideoAnalyticsConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (999)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurations has binding name '_trt__GetCompatibleVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (998)
#endif

/* _trt__GetCompatibleAudioSourceConfigurationsResponse has binding name '_trt__GetCompatibleAudioSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (997)
#endif

/* _trt__GetCompatibleAudioSourceConfigurations has binding name '_trt__GetCompatibleAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (996)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurationsResponse has binding name '_trt__GetCompatibleAudioEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (995)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurations has binding name '_trt__GetCompatibleAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (994)
#endif

/* _trt__GetCompatibleVideoSourceConfigurationsResponse has binding name '_trt__GetCompatibleVideoSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (993)
#endif

/* _trt__GetCompatibleVideoSourceConfigurations has binding name '_trt__GetCompatibleVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (992)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurationsResponse has binding name '_trt__GetCompatibleVideoEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (991)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurations has binding name '_trt__GetCompatibleVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (990)
#endif

/* _trt__GetAudioDecoderConfigurationResponse has binding name '_trt__GetAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (989)
#endif

/* _trt__GetAudioDecoderConfiguration has binding name '_trt__GetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (988)
#endif

/* _trt__GetAudioOutputConfigurationResponse has binding name '_trt__GetAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (987)
#endif

/* _trt__GetAudioOutputConfiguration has binding name '_trt__GetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (986)
#endif

/* _trt__GetMetadataConfigurationResponse has binding name '_trt__GetMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (985)
#endif

/* _trt__GetMetadataConfiguration has binding name '_trt__GetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (984)
#endif

/* _trt__GetVideoAnalyticsConfigurationResponse has binding name '_trt__GetVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (983)
#endif

/* _trt__GetVideoAnalyticsConfiguration has binding name '_trt__GetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (982)
#endif

/* _trt__GetAudioEncoderConfigurationResponse has binding name '_trt__GetAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (981)
#endif

/* _trt__GetAudioEncoderConfiguration has binding name '_trt__GetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (980)
#endif

/* _trt__GetAudioSourceConfigurationResponse has binding name '_trt__GetAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (979)
#endif

/* _trt__GetAudioSourceConfiguration has binding name '_trt__GetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (978)
#endif

/* _trt__GetVideoEncoderConfigurationResponse has binding name '_trt__GetVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (977)
#endif

/* _trt__GetVideoEncoderConfiguration has binding name '_trt__GetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (976)
#endif

/* _trt__GetVideoSourceConfigurationResponse has binding name '_trt__GetVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (975)
#endif

/* _trt__GetVideoSourceConfiguration has binding name '_trt__GetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (974)
#endif

/* _trt__GetAudioDecoderConfigurationsResponse has binding name '_trt__GetAudioDecoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (973)
#endif

/* _trt__GetAudioDecoderConfigurations has binding name '_trt__GetAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (972)
#endif

/* _trt__GetAudioOutputConfigurationsResponse has binding name '_trt__GetAudioOutputConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (971)
#endif

/* _trt__GetAudioOutputConfigurations has binding name '_trt__GetAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (970)
#endif

/* _trt__GetMetadataConfigurationsResponse has binding name '_trt__GetMetadataConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (969)
#endif

/* _trt__GetMetadataConfigurations has binding name '_trt__GetMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (968)
#endif

/* _trt__GetVideoAnalyticsConfigurationsResponse has binding name '_trt__GetVideoAnalyticsConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (967)
#endif

/* _trt__GetVideoAnalyticsConfigurations has binding name '_trt__GetVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (966)
#endif

/* _trt__GetAudioSourceConfigurationsResponse has binding name '_trt__GetAudioSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (965)
#endif

/* _trt__GetAudioSourceConfigurations has binding name '_trt__GetAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (964)
#endif

/* _trt__GetAudioEncoderConfigurationsResponse has binding name '_trt__GetAudioEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (963)
#endif

/* _trt__GetAudioEncoderConfigurations has binding name '_trt__GetAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (962)
#endif

/* _trt__GetVideoSourceConfigurationsResponse has binding name '_trt__GetVideoSourceConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (961)
#endif

/* _trt__GetVideoSourceConfigurations has binding name '_trt__GetVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (960)
#endif

/* _trt__GetVideoEncoderConfigurationsResponse has binding name '_trt__GetVideoEncoderConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (959)
#endif

/* _trt__GetVideoEncoderConfigurations has binding name '_trt__GetVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (958)
#endif

/* _trt__DeleteProfileResponse has binding name '_trt__DeleteProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (957)
#endif

/* _trt__DeleteProfile has binding name '_trt__DeleteProfile' for type '' */
#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (956)
#endif

/* _trt__RemoveAudioDecoderConfigurationResponse has binding name '_trt__RemoveAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (955)
#endif

/* _trt__RemoveAudioDecoderConfiguration has binding name '_trt__RemoveAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (954)
#endif

/* _trt__AddAudioDecoderConfigurationResponse has binding name '_trt__AddAudioDecoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (953)
#endif

/* _trt__AddAudioDecoderConfiguration has binding name '_trt__AddAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (952)
#endif

/* _trt__RemoveAudioOutputConfigurationResponse has binding name '_trt__RemoveAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (951)
#endif

/* _trt__RemoveAudioOutputConfiguration has binding name '_trt__RemoveAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (950)
#endif

/* _trt__AddAudioOutputConfigurationResponse has binding name '_trt__AddAudioOutputConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (949)
#endif

/* _trt__AddAudioOutputConfiguration has binding name '_trt__AddAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (948)
#endif

/* _trt__RemoveMetadataConfigurationResponse has binding name '_trt__RemoveMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (947)
#endif

/* _trt__RemoveMetadataConfiguration has binding name '_trt__RemoveMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (946)
#endif

/* _trt__AddMetadataConfigurationResponse has binding name '_trt__AddMetadataConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (945)
#endif

/* _trt__AddMetadataConfiguration has binding name '_trt__AddMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (944)
#endif

/* _trt__RemoveVideoAnalyticsConfigurationResponse has binding name '_trt__RemoveVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (943)
#endif

/* _trt__RemoveVideoAnalyticsConfiguration has binding name '_trt__RemoveVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (942)
#endif

/* _trt__AddVideoAnalyticsConfigurationResponse has binding name '_trt__AddVideoAnalyticsConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (941)
#endif

/* _trt__AddVideoAnalyticsConfiguration has binding name '_trt__AddVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (940)
#endif

/* _trt__RemovePTZConfigurationResponse has binding name '_trt__RemovePTZConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (939)
#endif

/* _trt__RemovePTZConfiguration has binding name '_trt__RemovePTZConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (938)
#endif

/* _trt__AddPTZConfigurationResponse has binding name '_trt__AddPTZConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (937)
#endif

/* _trt__AddPTZConfiguration has binding name '_trt__AddPTZConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (936)
#endif

/* _trt__RemoveAudioSourceConfigurationResponse has binding name '_trt__RemoveAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (935)
#endif

/* _trt__RemoveAudioSourceConfiguration has binding name '_trt__RemoveAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (934)
#endif

/* _trt__AddAudioSourceConfigurationResponse has binding name '_trt__AddAudioSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (933)
#endif

/* _trt__AddAudioSourceConfiguration has binding name '_trt__AddAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (932)
#endif

/* _trt__RemoveAudioEncoderConfigurationResponse has binding name '_trt__RemoveAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (931)
#endif

/* _trt__RemoveAudioEncoderConfiguration has binding name '_trt__RemoveAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (930)
#endif

/* _trt__AddAudioEncoderConfigurationResponse has binding name '_trt__AddAudioEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (929)
#endif

/* _trt__AddAudioEncoderConfiguration has binding name '_trt__AddAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (928)
#endif

/* _trt__RemoveVideoSourceConfigurationResponse has binding name '_trt__RemoveVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (927)
#endif

/* _trt__RemoveVideoSourceConfiguration has binding name '_trt__RemoveVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (926)
#endif

/* _trt__AddVideoSourceConfigurationResponse has binding name '_trt__AddVideoSourceConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (925)
#endif

/* _trt__AddVideoSourceConfiguration has binding name '_trt__AddVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (924)
#endif

/* _trt__RemoveVideoEncoderConfigurationResponse has binding name '_trt__RemoveVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (923)
#endif

/* _trt__RemoveVideoEncoderConfiguration has binding name '_trt__RemoveVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (922)
#endif

/* _trt__AddVideoEncoderConfigurationResponse has binding name '_trt__AddVideoEncoderConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (921)
#endif

/* _trt__AddVideoEncoderConfiguration has binding name '_trt__AddVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (920)
#endif

/* _trt__GetProfilesResponse has binding name '_trt__GetProfilesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (919)
#endif

/* _trt__GetProfiles has binding name '_trt__GetProfiles' for type '' */
#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (918)
#endif

/* _trt__GetProfileResponse has binding name '_trt__GetProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (917)
#endif

/* _trt__GetProfile has binding name '_trt__GetProfile' for type '' */
#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (916)
#endif

/* _trt__CreateProfileResponse has binding name '_trt__CreateProfileResponse' for type '' */
#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (915)
#endif

/* _trt__CreateProfile has binding name '_trt__CreateProfile' for type '' */
#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (914)
#endif

/* _trt__GetAudioOutputsResponse has binding name '_trt__GetAudioOutputsResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (913)
#endif

/* _trt__GetAudioOutputs has binding name '_trt__GetAudioOutputs' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (912)
#endif

/* _trt__GetAudioSourcesResponse has binding name '_trt__GetAudioSourcesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (911)
#endif

/* _trt__GetAudioSources has binding name '_trt__GetAudioSources' for type '' */
#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (910)
#endif

/* _trt__GetVideoSourcesResponse has binding name '_trt__GetVideoSourcesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (909)
#endif

/* _trt__GetVideoSources has binding name '_trt__GetVideoSources' for type '' */
#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (908)
#endif

/* _trt__GetServiceCapabilitiesResponse has binding name '_trt__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (907)
#endif

/* _trt__GetServiceCapabilities has binding name '_trt__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (906)
#endif

/* trt__VideoSourceModeExtension has binding name 'trt__VideoSourceModeExtension' for type 'trt:VideoSourceModeExtension' */
#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (905)
#endif

/* trt__VideoSourceMode has binding name 'trt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (904)
#endif

/* trt__StreamingCapabilities has binding name 'trt__StreamingCapabilities' for type 'trt:StreamingCapabilities' */
#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (903)
#endif

/* trt__ProfileCapabilities has binding name 'trt__ProfileCapabilities' for type 'trt:ProfileCapabilities' */
#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (902)
#endif

/* trt__Capabilities has binding name 'trt__Capabilities' for type 'trt:Capabilities' */
#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (901)
#endif

/* wstop__TopicSetType has binding name 'wstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (900)
#endif

/* wstop__TopicType has binding name 'wstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (899)
#endif

/* wstop__TopicNamespaceType has binding name 'wstop__TopicNamespaceType' for type 'wstop:TopicNamespaceType' */
#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (898)
#endif

/* wstop__QueryExpressionType has binding name 'wstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (897)
#endif

/* wstop__ExtensibleDocumented has binding name 'wstop__ExtensibleDocumented' for type 'wstop:ExtensibleDocumented' */
#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (896)
#endif

/* wstop__Documentation has binding name 'wstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (895)
#endif

/* wsrfbf__BaseFaultType has binding name 'wsrfbf__BaseFaultType' for type 'wsrfbf:BaseFaultType' */
#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (894)
#endif

/* _wsnt__ResumeSubscriptionResponse has binding name '_wsnt__ResumeSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (893)
#endif

/* _wsnt__ResumeSubscription has binding name '_wsnt__ResumeSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (892)
#endif

/* _wsnt__PauseSubscriptionResponse has binding name '_wsnt__PauseSubscriptionResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (891)
#endif

/* _wsnt__PauseSubscription has binding name '_wsnt__PauseSubscription' for type '' */
#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (890)
#endif

/* _wsnt__UnsubscribeResponse has binding name '_wsnt__UnsubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (889)
#endif

/* _wsnt__Unsubscribe has binding name '_wsnt__Unsubscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (888)
#endif

/* _wsnt__RenewResponse has binding name '_wsnt__RenewResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (887)
#endif

/* _wsnt__Renew has binding name '_wsnt__Renew' for type '' */
#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (886)
#endif

/* _wsnt__CreatePullPointResponse has binding name '_wsnt__CreatePullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (885)
#endif

/* _wsnt__CreatePullPoint has binding name '_wsnt__CreatePullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (884)
#endif

/* _wsnt__DestroyPullPointResponse has binding name '_wsnt__DestroyPullPointResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (883)
#endif

/* _wsnt__DestroyPullPoint has binding name '_wsnt__DestroyPullPoint' for type '' */
#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (882)
#endif

/* _wsnt__GetMessagesResponse has binding name '_wsnt__GetMessagesResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (881)
#endif

/* _wsnt__GetMessages has binding name '_wsnt__GetMessages' for type '' */
#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (880)
#endif

/* _wsnt__GetCurrentMessageResponse has binding name '_wsnt__GetCurrentMessageResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (879)
#endif

/* _wsnt__GetCurrentMessage has binding name '_wsnt__GetCurrentMessage' for type '' */
#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (878)
#endif

/* _wsnt__SubscribeResponse has binding name '_wsnt__SubscribeResponse' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (877)
#endif

/* _wsnt__Subscribe has binding name '_wsnt__Subscribe' for type '' */
#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (876)
#endif

/* _wsnt__UseRaw has binding name '_wsnt__UseRaw' for type '' */
#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (875)
#endif

/* _wsnt__Notify has binding name '_wsnt__Notify' for type '' */
#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (874)
#endif

/* _wsnt__SubscriptionManagerRP has binding name '_wsnt__SubscriptionManagerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (873)
#endif

/* _wsnt__NotificationProducerRP has binding name '_wsnt__NotificationProducerRP' for type '' */
#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (872)
#endif

/* wsnt__ResumeFailedFaultType has binding name 'wsnt__ResumeFailedFaultType' for type 'wsnt:ResumeFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (871)
#endif

/* wsnt__PauseFailedFaultType has binding name 'wsnt__PauseFailedFaultType' for type 'wsnt:PauseFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (870)
#endif

/* wsnt__UnableToDestroySubscriptionFaultType has binding name 'wsnt__UnableToDestroySubscriptionFaultType' for type 'wsnt:UnableToDestroySubscriptionFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (869)
#endif

/* wsnt__UnacceptableTerminationTimeFaultType has binding name 'wsnt__UnacceptableTerminationTimeFaultType' for type 'wsnt:UnacceptableTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (868)
#endif

/* wsnt__UnableToCreatePullPointFaultType has binding name 'wsnt__UnableToCreatePullPointFaultType' for type 'wsnt:UnableToCreatePullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (867)
#endif

/* wsnt__UnableToDestroyPullPointFaultType has binding name 'wsnt__UnableToDestroyPullPointFaultType' for type 'wsnt:UnableToDestroyPullPointFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (866)
#endif

/* wsnt__UnableToGetMessagesFaultType has binding name 'wsnt__UnableToGetMessagesFaultType' for type 'wsnt:UnableToGetMessagesFaultType' */
#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (865)
#endif

/* wsnt__NoCurrentMessageOnTopicFaultType has binding name 'wsnt__NoCurrentMessageOnTopicFaultType' for type 'wsnt:NoCurrentMessageOnTopicFaultType' */
#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (864)
#endif

/* wsnt__UnacceptableInitialTerminationTimeFaultType has binding name 'wsnt__UnacceptableInitialTerminationTimeFaultType' for type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (863)
#endif

/* wsnt__NotifyMessageNotSupportedFaultType has binding name 'wsnt__NotifyMessageNotSupportedFaultType' for type 'wsnt:NotifyMessageNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (862)
#endif

/* wsnt__UnsupportedPolicyRequestFaultType has binding name 'wsnt__UnsupportedPolicyRequestFaultType' for type 'wsnt:UnsupportedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (861)
#endif

/* wsnt__UnrecognizedPolicyRequestFaultType has binding name 'wsnt__UnrecognizedPolicyRequestFaultType' for type 'wsnt:UnrecognizedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (860)
#endif

/* wsnt__InvalidMessageContentExpressionFaultType has binding name 'wsnt__InvalidMessageContentExpressionFaultType' for type 'wsnt:InvalidMessageContentExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (859)
#endif

/* wsnt__InvalidProducerPropertiesExpressionFaultType has binding name 'wsnt__InvalidProducerPropertiesExpressionFaultType' for type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (858)
#endif

/* wsnt__MultipleTopicsSpecifiedFaultType has binding name 'wsnt__MultipleTopicsSpecifiedFaultType' for type 'wsnt:MultipleTopicsSpecifiedFaultType' */
#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (857)
#endif

/* wsnt__TopicNotSupportedFaultType has binding name 'wsnt__TopicNotSupportedFaultType' for type 'wsnt:TopicNotSupportedFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (856)
#endif

/* wsnt__InvalidTopicExpressionFaultType has binding name 'wsnt__InvalidTopicExpressionFaultType' for type 'wsnt:InvalidTopicExpressionFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (855)
#endif

/* wsnt__TopicExpressionDialectUnknownFaultType has binding name 'wsnt__TopicExpressionDialectUnknownFaultType' for type 'wsnt:TopicExpressionDialectUnknownFaultType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (854)
#endif

/* wsnt__InvalidFilterFaultType has binding name 'wsnt__InvalidFilterFaultType' for type 'wsnt:InvalidFilterFaultType' */
#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (853)
#endif

/* wsnt__SubscribeCreationFailedFaultType has binding name 'wsnt__SubscribeCreationFailedFaultType' for type 'wsnt:SubscribeCreationFailedFaultType' */
#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (852)
#endif

/* wsnt__NotificationMessageHolderType has binding name 'wsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (851)
#endif

/* wsnt__SubscriptionPolicyType has binding name 'wsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (850)
#endif

/* wsnt__FilterType has binding name 'wsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (849)
#endif

/* wsnt__TopicExpressionType has binding name 'wsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (848)
#endif

/* wsnt__QueryExpressionType has binding name 'wsnt__QueryExpressionType' for type 'wsnt:QueryExpressionType' */
#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (847)
#endif

/* _tt__Message has binding name '_tt__Message' for type '' */
#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (846)
#endif

/* _tt__StringItems has binding name '_tt__StringItems' for type '' */
#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (845)
#endif

/* tt__LocationEntity has binding name 'tt__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (844)
#endif

/* tt__LocalOrientation has binding name 'tt__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (843)
#endif

/* tt__LocalLocation has binding name 'tt__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (842)
#endif

/* tt__GeoOrientation has binding name 'tt__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (841)
#endif

/* tt__GeoLocation has binding name 'tt__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (840)
#endif

/* tt__TransformationExtension has binding name 'tt__TransformationExtension' for type 'tt:TransformationExtension' */
#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (839)
#endif

/* tt__Transformation has binding name 'tt__Transformation' for type 'tt:Transformation' */
#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (838)
#endif

/* tt__ColorDescriptor has binding name 'tt__ColorDescriptor' for type 'tt:ColorDescriptor' */
#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (837)
#endif

/* tt__ColorCovariance has binding name 'tt__ColorCovariance' for type 'tt:ColorCovariance' */
#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (836)
#endif

/* tt__Color has binding name 'tt__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (835)
#endif

/* tt__Polygon has binding name 'tt__Polygon' for type 'tt:Polygon' */
#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (834)
#endif

/* tt__Rectangle has binding name 'tt__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (833)
#endif

/* tt__Vector has binding name 'tt__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (832)
#endif

/* tt__PTZMoveStatus has binding name 'tt__PTZMoveStatus' for type 'tt:PTZMoveStatus' */
#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (831)
#endif

/* tt__PTZStatus has binding name 'tt__PTZStatus' for type 'tt:PTZStatus' */
#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (830)
#endif

/* tt__PTZVector has binding name 'tt__PTZVector' for type 'tt:PTZVector' */
#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (829)
#endif

/* tt__Vector1D has binding name 'tt__Vector1D' for type 'tt:Vector1D' */
#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (828)
#endif

/* tt__Vector2D has binding name 'tt__Vector2D' for type 'tt:Vector2D' */
#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (827)
#endif

/* tt__IntRange has binding name 'tt__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (826)
#endif

/* tt__PolygonOptions has binding name 'tt__PolygonOptions' for type 'tt:PolygonOptions' */
#ifndef SOAP_TYPE_tt__PolygonOptions
#define SOAP_TYPE_tt__PolygonOptions (825)
#endif

/* tt__StorageReferencePathExtension has binding name 'tt__StorageReferencePathExtension' for type 'tt:StorageReferencePathExtension' */
#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (824)
#endif

/* tt__StorageReferencePath has binding name 'tt__StorageReferencePath' for type 'tt:StorageReferencePath' */
#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (823)
#endif

/* tt__ArrayOfFileProgressExtension has binding name 'tt__ArrayOfFileProgressExtension' for type 'tt:ArrayOfFileProgressExtension' */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (822)
#endif

/* tt__ArrayOfFileProgress has binding name 'tt__ArrayOfFileProgress' for type 'tt:ArrayOfFileProgress' */
#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (821)
#endif

/* tt__FileProgress has binding name 'tt__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (820)
#endif

/* tt__OSDConfigurationOptionsExtension has binding name 'tt__OSDConfigurationOptionsExtension' for type 'tt:OSDConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (819)
#endif

/* tt__OSDConfigurationOptions has binding name 'tt__OSDConfigurationOptions' for type 'tt:OSDConfigurationOptions' */
#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (818)
#endif

/* tt__MaximumNumberOfOSDs has binding name 'tt__MaximumNumberOfOSDs' for type 'tt:MaximumNumberOfOSDs' */
#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (817)
#endif

/* tt__OSDConfigurationExtension has binding name 'tt__OSDConfigurationExtension' for type 'tt:OSDConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (816)
#endif

/* tt__OSDConfiguration has binding name 'tt__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (815)
#endif

/* tt__OSDImgOptionsExtension has binding name 'tt__OSDImgOptionsExtension' for type 'tt:OSDImgOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (814)
#endif

/* tt__OSDImgOptions has binding name 'tt__OSDImgOptions' for type 'tt:OSDImgOptions' */
#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (813)
#endif

/* tt__OSDTextOptionsExtension has binding name 'tt__OSDTextOptionsExtension' for type 'tt:OSDTextOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (812)
#endif

/* tt__OSDTextOptions has binding name 'tt__OSDTextOptions' for type 'tt:OSDTextOptions' */
#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (811)
#endif

/* tt__OSDColorOptionsExtension has binding name 'tt__OSDColorOptionsExtension' for type 'tt:OSDColorOptionsExtension' */
#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (810)
#endif

/* tt__OSDColorOptions has binding name 'tt__OSDColorOptions' for type 'tt:OSDColorOptions' */
#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (809)
#endif

/* tt__ColorOptions has binding name 'tt__ColorOptions' for type 'tt:ColorOptions' */
#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (808)
#endif

/* tt__ColorspaceRange has binding name 'tt__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (807)
#endif

/* tt__OSDImgConfigurationExtension has binding name 'tt__OSDImgConfigurationExtension' for type 'tt:OSDImgConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (806)
#endif

/* tt__OSDImgConfiguration has binding name 'tt__OSDImgConfiguration' for type 'tt:OSDImgConfiguration' */
#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (805)
#endif

/* tt__OSDTextConfigurationExtension has binding name 'tt__OSDTextConfigurationExtension' for type 'tt:OSDTextConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (804)
#endif

/* tt__OSDTextConfiguration has binding name 'tt__OSDTextConfiguration' for type 'tt:OSDTextConfiguration' */
#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (803)
#endif

/* tt__OSDColor has binding name 'tt__OSDColor' for type 'tt:OSDColor' */
#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (802)
#endif

/* tt__OSDPosConfigurationExtension has binding name 'tt__OSDPosConfigurationExtension' for type 'tt:OSDPosConfigurationExtension' */
#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (801)
#endif

/* tt__OSDPosConfiguration has binding name 'tt__OSDPosConfiguration' for type 'tt:OSDPosConfiguration' */
#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (800)
#endif

/* tt__OSDReference has binding name 'tt__OSDReference' for type 'tt:OSDReference' */
#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (799)
#endif

/* tt__ProfileStatusExtension has binding name 'tt__ProfileStatusExtension' for type 'tt:ProfileStatusExtension' */
#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (798)
#endif

/* tt__ProfileStatus has binding name 'tt__ProfileStatus' for type 'tt:ProfileStatus' */
#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (797)
#endif

/* tt__ActiveConnection has binding name 'tt__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (796)
#endif

/* tt__AudioClassDescriptorExtension has binding name 'tt__AudioClassDescriptorExtension' for type 'tt:AudioClassDescriptorExtension' */
#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (795)
#endif

/* tt__AudioClassDescriptor has binding name 'tt__AudioClassDescriptor' for type 'tt:AudioClassDescriptor' */
#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (794)
#endif

/* tt__AudioClassCandidate has binding name 'tt__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (793)
#endif

/* tt__ActionEngineEventPayloadExtension has binding name 'tt__ActionEngineEventPayloadExtension' for type 'tt:ActionEngineEventPayloadExtension' */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (792)
#endif

/* tt__ActionEngineEventPayload has binding name 'tt__ActionEngineEventPayload' for type 'tt:ActionEngineEventPayload' */
#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (791)
#endif

/* tt__AnalyticsState has binding name 'tt__AnalyticsState' for type 'tt:AnalyticsState' */
#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (790)
#endif

/* tt__AnalyticsStateInformation has binding name 'tt__AnalyticsStateInformation' for type 'tt:AnalyticsStateInformation' */
#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (789)
#endif

/* tt__AnalyticsEngineControl has binding name 'tt__AnalyticsEngineControl' for type 'tt:AnalyticsEngineControl' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (788)
#endif

/* tt__MetadataInputExtension has binding name 'tt__MetadataInputExtension' for type 'tt:MetadataInputExtension' */
#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (787)
#endif

/* tt__MetadataInput has binding name 'tt__MetadataInput' for type 'tt:MetadataInput' */
#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (786)
#endif

/* tt__SourceIdentificationExtension has binding name 'tt__SourceIdentificationExtension' for type 'tt:SourceIdentificationExtension' */
#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (785)
#endif

/* tt__SourceIdentification has binding name 'tt__SourceIdentification' for type 'tt:SourceIdentification' */
#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (784)
#endif

/* tt__AnalyticsEngineInput has binding name 'tt__AnalyticsEngineInput' for type 'tt:AnalyticsEngineInput' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (783)
#endif

/* tt__AnalyticsEngineInputInfoExtension has binding name 'tt__AnalyticsEngineInputInfoExtension' for type 'tt:AnalyticsEngineInputInfoExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (782)
#endif

/* tt__AnalyticsEngineInputInfo has binding name 'tt__AnalyticsEngineInputInfo' for type 'tt:AnalyticsEngineInputInfo' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (781)
#endif

/* tt__EngineConfiguration has binding name 'tt__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (780)
#endif

/* tt__AnalyticsDeviceEngineConfigurationExtension has binding name 'tt__AnalyticsDeviceEngineConfigurationExtension' for type 'tt:AnalyticsDeviceEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (779)
#endif

/* tt__AnalyticsDeviceEngineConfiguration has binding name 'tt__AnalyticsDeviceEngineConfiguration' for type 'tt:AnalyticsDeviceEngineConfiguration' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (778)
#endif

/* tt__AnalyticsEngine has binding name 'tt__AnalyticsEngine' for type 'tt:AnalyticsEngine' */
#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (777)
#endif

/* tt__ReplayConfiguration has binding name 'tt__ReplayConfiguration' for type 'tt:ReplayConfiguration' */
#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (776)
#endif

/* tt__GetRecordingJobsResponseItem has binding name 'tt__GetRecordingJobsResponseItem' for type 'tt:GetRecordingJobsResponseItem' */
#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (775)
#endif

/* tt__RecordingJobStateTrack has binding name 'tt__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (774)
#endif

/* tt__RecordingJobStateTracks has binding name 'tt__RecordingJobStateTracks' for type 'tt:RecordingJobStateTracks' */
#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (773)
#endif

/* tt__RecordingJobStateSource has binding name 'tt__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (772)
#endif

/* tt__RecordingJobStateInformationExtension has binding name 'tt__RecordingJobStateInformationExtension' for type 'tt:RecordingJobStateInformationExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (771)
#endif

/* tt__RecordingJobStateInformation has binding name 'tt__RecordingJobStateInformation' for type 'tt:RecordingJobStateInformation' */
#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (770)
#endif

/* tt__RecordingJobTrack has binding name 'tt__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (769)
#endif

/* tt__RecordingJobSourceExtension has binding name 'tt__RecordingJobSourceExtension' for type 'tt:RecordingJobSourceExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (768)
#endif

/* tt__RecordingJobSource has binding name 'tt__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (767)
#endif

/* tt__RecordingJobConfigurationExtension has binding name 'tt__RecordingJobConfigurationExtension' for type 'tt:RecordingJobConfigurationExtension' */
#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (766)
#endif

/* tt__RecordingJobConfiguration has binding name 'tt__RecordingJobConfiguration' for type 'tt:RecordingJobConfiguration' */
#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (765)
#endif

/* tt__GetTracksResponseItem has binding name 'tt__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (764)
#endif

/* tt__GetTracksResponseList has binding name 'tt__GetTracksResponseList' for type 'tt:GetTracksResponseList' */
#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (763)
#endif

/* tt__GetRecordingsResponseItem has binding name 'tt__GetRecordingsResponseItem' for type 'tt:GetRecordingsResponseItem' */
#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (762)
#endif

/* tt__TrackConfiguration has binding name 'tt__TrackConfiguration' for type 'tt:TrackConfiguration' */
#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (761)
#endif

/* tt__RecordingConfiguration has binding name 'tt__RecordingConfiguration' for type 'tt:RecordingConfiguration' */
#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (760)
#endif

/* tt__MetadataAttributes has binding name 'tt__MetadataAttributes' for type 'tt:MetadataAttributes' */
#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (759)
#endif

/* tt__AudioAttributes has binding name 'tt__AudioAttributes' for type 'tt:AudioAttributes' */
#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (758)
#endif

/* tt__VideoAttributes has binding name 'tt__VideoAttributes' for type 'tt:VideoAttributes' */
#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (757)
#endif

/* tt__TrackAttributesExtension has binding name 'tt__TrackAttributesExtension' for type 'tt:TrackAttributesExtension' */
#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (756)
#endif

/* tt__TrackAttributes has binding name 'tt__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (755)
#endif

/* tt__MediaAttributes has binding name 'tt__MediaAttributes' for type 'tt:MediaAttributes' */
#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (754)
#endif

/* tt__TrackInformation has binding name 'tt__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (753)
#endif

/* tt__RecordingSourceInformation has binding name 'tt__RecordingSourceInformation' for type 'tt:RecordingSourceInformation' */
#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (752)
#endif

/* tt__RecordingInformation has binding name 'tt__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (751)
#endif

/* tt__FindMetadataResult has binding name 'tt__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (750)
#endif

/* tt__FindMetadataResultList has binding name 'tt__FindMetadataResultList' for type 'tt:FindMetadataResultList' */
#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (749)
#endif

/* tt__FindPTZPositionResult has binding name 'tt__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (748)
#endif

/* tt__FindPTZPositionResultList has binding name 'tt__FindPTZPositionResultList' for type 'tt:FindPTZPositionResultList' */
#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (747)
#endif

/* tt__FindEventResult has binding name 'tt__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (746)
#endif

/* tt__FindEventResultList has binding name 'tt__FindEventResultList' for type 'tt:FindEventResultList' */
#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (745)
#endif

/* tt__FindRecordingResultList has binding name 'tt__FindRecordingResultList' for type 'tt:FindRecordingResultList' */
#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (744)
#endif

/* tt__MetadataFilter has binding name 'tt__MetadataFilter' for type 'tt:MetadataFilter' */
#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (743)
#endif

/* tt__PTZPositionFilter has binding name 'tt__PTZPositionFilter' for type 'tt:PTZPositionFilter' */
#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (742)
#endif

/* tt__EventFilter has binding name 'tt__EventFilter' for type 'tt:EventFilter' */
#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (741)
#endif

/* tt__SearchScopeExtension has binding name 'tt__SearchScopeExtension' for type 'tt:SearchScopeExtension' */
#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (740)
#endif

/* tt__SearchScope has binding name 'tt__SearchScope' for type 'tt:SearchScope' */
#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (739)
#endif

/* tt__RecordingSummary has binding name 'tt__RecordingSummary' for type 'tt:RecordingSummary' */
#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (738)
#endif

/* tt__DateTimeRange has binding name 'tt__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (737)
#endif

/* tt__SourceReference has binding name 'tt__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (736)
#endif

/* tt__ReceiverStateInformation has binding name 'tt__ReceiverStateInformation' for type 'tt:ReceiverStateInformation' */
#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (735)
#endif

/* tt__ReceiverConfiguration has binding name 'tt__ReceiverConfiguration' for type 'tt:ReceiverConfiguration' */
#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (734)
#endif

/* tt__Receiver has binding name 'tt__Receiver' for type 'tt:Receiver' */
#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (733)
#endif

/* tt__PaneOptionExtension has binding name 'tt__PaneOptionExtension' for type 'tt:PaneOptionExtension' */
#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (732)
#endif

/* tt__PaneLayoutOptions has binding name 'tt__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (731)
#endif

/* tt__LayoutOptionsExtension has binding name 'tt__LayoutOptionsExtension' for type 'tt:LayoutOptionsExtension' */
#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (730)
#endif

/* tt__LayoutOptions has binding name 'tt__LayoutOptions' for type 'tt:LayoutOptions' */
#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (729)
#endif

/* tt__CodingCapabilities has binding name 'tt__CodingCapabilities' for type 'tt:CodingCapabilities' */
#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (728)
#endif

/* tt__LayoutExtension has binding name 'tt__LayoutExtension' for type 'tt:LayoutExtension' */
#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (727)
#endif

/* tt__Layout has binding name 'tt__Layout' for type 'tt:Layout' */
#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (726)
#endif

/* tt__PaneLayout has binding name 'tt__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (725)
#endif

/* tt__PaneConfiguration has binding name 'tt__PaneConfiguration' for type 'tt:PaneConfiguration' */
#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (724)
#endif

/* tt__CellLayout has binding name 'tt__CellLayout' for type 'tt:CellLayout' */
#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (723)
#endif

/* tt__MotionExpressionConfiguration has binding name 'tt__MotionExpressionConfiguration' for type 'tt:MotionExpressionConfiguration' */
#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (722)
#endif

/* tt__MotionExpression has binding name 'tt__MotionExpression' for type 'tt:MotionExpression' */
#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (721)
#endif

/* tt__PolylineArrayConfiguration has binding name 'tt__PolylineArrayConfiguration' for type 'tt:PolylineArrayConfiguration' */
#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (720)
#endif

/* tt__PolylineArrayExtension has binding name 'tt__PolylineArrayExtension' for type 'tt:PolylineArrayExtension' */
#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (719)
#endif

/* tt__PolylineArray has binding name 'tt__PolylineArray' for type 'tt:PolylineArray' */
#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (718)
#endif

/* tt__SupportedAnalyticsModulesExtension has binding name 'tt__SupportedAnalyticsModulesExtension' for type 'tt:SupportedAnalyticsModulesExtension' */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (717)
#endif

/* tt__SupportedAnalyticsModules has binding name 'tt__SupportedAnalyticsModules' for type 'tt:SupportedAnalyticsModules' */
#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (716)
#endif

/* tt__SupportedRulesExtension has binding name 'tt__SupportedRulesExtension' for type 'tt:SupportedRulesExtension' */
#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (715)
#endif

/* tt__SupportedRules has binding name 'tt__SupportedRules' for type 'tt:SupportedRules' */
#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (714)
#endif

/* tt__ConfigDescriptionExtension has binding name 'tt__ConfigDescriptionExtension' for type 'tt:ConfigDescriptionExtension' */
#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (713)
#endif

/* tt__ConfigDescription has binding name 'tt__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (712)
#endif

/* tt__Config has binding name 'tt__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (711)
#endif

/* tt__RuleEngineConfigurationExtension has binding name 'tt__RuleEngineConfigurationExtension' for type 'tt:RuleEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (710)
#endif

/* tt__RuleEngineConfiguration has binding name 'tt__RuleEngineConfiguration' for type 'tt:RuleEngineConfiguration' */
#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (709)
#endif

/* tt__AnalyticsEngineConfigurationExtension has binding name 'tt__AnalyticsEngineConfigurationExtension' for type 'tt:AnalyticsEngineConfigurationExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (708)
#endif

/* tt__AnalyticsEngineConfiguration has binding name 'tt__AnalyticsEngineConfiguration' for type 'tt:AnalyticsEngineConfiguration' */
#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (707)
#endif

/* tt__Polyline has binding name 'tt__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (706)
#endif

/* tt__ItemListDescriptionExtension has binding name 'tt__ItemListDescriptionExtension' for type 'tt:ItemListDescriptionExtension' */
#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (705)
#endif

/* tt__ItemListDescription has binding name 'tt__ItemListDescription' for type 'tt:ItemListDescription' */
#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (704)
#endif

/* tt__MessageDescriptionExtension has binding name 'tt__MessageDescriptionExtension' for type 'tt:MessageDescriptionExtension' */
#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (703)
#endif

/* tt__MessageDescription has binding name 'tt__MessageDescription' for type 'tt:MessageDescription' */
#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (702)
#endif

/* tt__ItemListExtension has binding name 'tt__ItemListExtension' for type 'tt:ItemListExtension' */
#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (701)
#endif

/* tt__ItemList has binding name 'tt__ItemList' for type 'tt:ItemList' */
#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (700)
#endif

/* tt__MessageExtension has binding name 'tt__MessageExtension' for type 'tt:MessageExtension' */
#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (699)
#endif

/* tt__NoiseReductionOptions has binding name 'tt__NoiseReductionOptions' for type 'tt:NoiseReductionOptions' */
#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (698)
#endif

/* tt__DefoggingOptions has binding name 'tt__DefoggingOptions' for type 'tt:DefoggingOptions' */
#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (697)
#endif

/* tt__ToneCompensationOptions has binding name 'tt__ToneCompensationOptions' for type 'tt:ToneCompensationOptions' */
#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (696)
#endif

/* tt__FocusOptions20Extension has binding name 'tt__FocusOptions20Extension' for type 'tt:FocusOptions20Extension' */
#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (695)
#endif

/* tt__FocusOptions20 has binding name 'tt__FocusOptions20' for type 'tt:FocusOptions20' */
#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (694)
#endif

/* tt__WhiteBalanceOptions20Extension has binding name 'tt__WhiteBalanceOptions20Extension' for type 'tt:WhiteBalanceOptions20Extension' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (693)
#endif

/* tt__WhiteBalanceOptions20 has binding name 'tt__WhiteBalanceOptions20' for type 'tt:WhiteBalanceOptions20' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (692)
#endif

/* tt__FocusConfiguration20Extension has binding name 'tt__FocusConfiguration20Extension' for type 'tt:FocusConfiguration20Extension' */
#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (691)
#endif

/* tt__FocusConfiguration20 has binding name 'tt__FocusConfiguration20' for type 'tt:FocusConfiguration20' */
#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (690)
#endif

/* tt__WhiteBalance20Extension has binding name 'tt__WhiteBalance20Extension' for type 'tt:WhiteBalance20Extension' */
#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (689)
#endif

/* tt__WhiteBalance20 has binding name 'tt__WhiteBalance20' for type 'tt:WhiteBalance20' */
#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (688)
#endif

/* tt__RelativeFocusOptions20 has binding name 'tt__RelativeFocusOptions20' for type 'tt:RelativeFocusOptions20' */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (687)
#endif

/* tt__MoveOptions20 has binding name 'tt__MoveOptions20' for type 'tt:MoveOptions20' */
#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (686)
#endif

/* tt__ExposureOptions20 has binding name 'tt__ExposureOptions20' for type 'tt:ExposureOptions20' */
#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (685)
#endif

/* tt__BacklightCompensationOptions20 has binding name 'tt__BacklightCompensationOptions20' for type 'tt:BacklightCompensationOptions20' */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (684)
#endif

/* tt__WideDynamicRangeOptions20 has binding name 'tt__WideDynamicRangeOptions20' for type 'tt:WideDynamicRangeOptions20' */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (683)
#endif

/* tt__IrCutFilterAutoAdjustmentOptionsExtension has binding name 'tt__IrCutFilterAutoAdjustmentOptionsExtension' for type 'tt:IrCutFilterAutoAdjustmentOptionsExtension' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (682)
#endif

/* tt__IrCutFilterAutoAdjustmentOptions has binding name 'tt__IrCutFilterAutoAdjustmentOptions' for type 'tt:IrCutFilterAutoAdjustmentOptions' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (681)
#endif

/* tt__ImageStabilizationOptionsExtension has binding name 'tt__ImageStabilizationOptionsExtension' for type 'tt:ImageStabilizationOptionsExtension' */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (680)
#endif

/* tt__ImageStabilizationOptions has binding name 'tt__ImageStabilizationOptions' for type 'tt:ImageStabilizationOptions' */
#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (679)
#endif

/* tt__ImagingOptions20Extension4 has binding name 'tt__ImagingOptions20Extension4' for type 'tt:ImagingOptions20Extension4' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (678)
#endif

/* tt__ImagingOptions20Extension3 has binding name 'tt__ImagingOptions20Extension3' for type 'tt:ImagingOptions20Extension3' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (677)
#endif

/* tt__ImagingOptions20Extension2 has binding name 'tt__ImagingOptions20Extension2' for type 'tt:ImagingOptions20Extension2' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (676)
#endif

/* tt__ImagingOptions20Extension has binding name 'tt__ImagingOptions20Extension' for type 'tt:ImagingOptions20Extension' */
#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (675)
#endif

/* tt__ImagingOptions20 has binding name 'tt__ImagingOptions20' for type 'tt:ImagingOptions20' */
#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (674)
#endif

/* tt__NoiseReduction has binding name 'tt__NoiseReduction' for type 'tt:NoiseReduction' */
#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (673)
#endif

/* tt__DefoggingExtension has binding name 'tt__DefoggingExtension' for type 'tt:DefoggingExtension' */
#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (672)
#endif

/* tt__Defogging has binding name 'tt__Defogging' for type 'tt:Defogging' */
#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (671)
#endif

/* tt__ToneCompensationExtension has binding name 'tt__ToneCompensationExtension' for type 'tt:ToneCompensationExtension' */
#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (670)
#endif

/* tt__ToneCompensation has binding name 'tt__ToneCompensation' for type 'tt:ToneCompensation' */
#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (669)
#endif

/* tt__Exposure20 has binding name 'tt__Exposure20' for type 'tt:Exposure20' */
#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (668)
#endif

/* tt__BacklightCompensation20 has binding name 'tt__BacklightCompensation20' for type 'tt:BacklightCompensation20' */
#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (667)
#endif

/* tt__WideDynamicRange20 has binding name 'tt__WideDynamicRange20' for type 'tt:WideDynamicRange20' */
#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (666)
#endif

/* tt__IrCutFilterAutoAdjustmentExtension has binding name 'tt__IrCutFilterAutoAdjustmentExtension' for type 'tt:IrCutFilterAutoAdjustmentExtension' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (665)
#endif

/* tt__IrCutFilterAutoAdjustment has binding name 'tt__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (664)
#endif

/* tt__ImageStabilizationExtension has binding name 'tt__ImageStabilizationExtension' for type 'tt:ImageStabilizationExtension' */
#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (663)
#endif

/* tt__ImageStabilization has binding name 'tt__ImageStabilization' for type 'tt:ImageStabilization' */
#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (662)
#endif

/* tt__ImagingSettingsExtension204 has binding name 'tt__ImagingSettingsExtension204' for type 'tt:ImagingSettingsExtension204' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (661)
#endif

/* tt__ImagingSettingsExtension203 has binding name 'tt__ImagingSettingsExtension203' for type 'tt:ImagingSettingsExtension203' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (660)
#endif

/* tt__ImagingSettingsExtension202 has binding name 'tt__ImagingSettingsExtension202' for type 'tt:ImagingSettingsExtension202' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (659)
#endif

/* tt__ImagingSettingsExtension20 has binding name 'tt__ImagingSettingsExtension20' for type 'tt:ImagingSettingsExtension20' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (658)
#endif

/* tt__ImagingSettings20 has binding name 'tt__ImagingSettings20' for type 'tt:ImagingSettings20' */
#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (657)
#endif

/* tt__FocusStatus20Extension has binding name 'tt__FocusStatus20Extension' for type 'tt:FocusStatus20Extension' */
#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (656)
#endif

/* tt__FocusStatus20 has binding name 'tt__FocusStatus20' for type 'tt:FocusStatus20' */
#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (655)
#endif

/* tt__ImagingStatus20Extension has binding name 'tt__ImagingStatus20Extension' for type 'tt:ImagingStatus20Extension' */
#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (654)
#endif

/* tt__ImagingStatus20 has binding name 'tt__ImagingStatus20' for type 'tt:ImagingStatus20' */
#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (653)
#endif

/* tt__WhiteBalance has binding name 'tt__WhiteBalance' for type 'tt:WhiteBalance' */
#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (652)
#endif

/* tt__ContinuousFocusOptions has binding name 'tt__ContinuousFocusOptions' for type 'tt:ContinuousFocusOptions' */
#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (651)
#endif

/* tt__RelativeFocusOptions has binding name 'tt__RelativeFocusOptions' for type 'tt:RelativeFocusOptions' */
#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (650)
#endif

/* tt__AbsoluteFocusOptions has binding name 'tt__AbsoluteFocusOptions' for type 'tt:AbsoluteFocusOptions' */
#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (649)
#endif

/* tt__MoveOptions has binding name 'tt__MoveOptions' for type 'tt:MoveOptions' */
#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (648)
#endif

/* tt__ContinuousFocus has binding name 'tt__ContinuousFocus' for type 'tt:ContinuousFocus' */
#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (647)
#endif

/* tt__RelativeFocus has binding name 'tt__RelativeFocus' for type 'tt:RelativeFocus' */
#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (646)
#endif

/* tt__AbsoluteFocus has binding name 'tt__AbsoluteFocus' for type 'tt:AbsoluteFocus' */
#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (645)
#endif

/* tt__FocusMove has binding name 'tt__FocusMove' for type 'tt:FocusMove' */
#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (644)
#endif

/* tt__WhiteBalanceOptions has binding name 'tt__WhiteBalanceOptions' for type 'tt:WhiteBalanceOptions' */
#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (643)
#endif

/* tt__ExposureOptions has binding name 'tt__ExposureOptions' for type 'tt:ExposureOptions' */
#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (642)
#endif

/* tt__FocusOptions has binding name 'tt__FocusOptions' for type 'tt:FocusOptions' */
#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (641)
#endif

/* tt__BacklightCompensationOptions has binding name 'tt__BacklightCompensationOptions' for type 'tt:BacklightCompensationOptions' */
#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (640)
#endif

/* tt__WideDynamicRangeOptions has binding name 'tt__WideDynamicRangeOptions' for type 'tt:WideDynamicRangeOptions' */
#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (639)
#endif

/* tt__ImagingOptions has binding name 'tt__ImagingOptions' for type 'tt:ImagingOptions' */
#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (638)
#endif

/* tt__BacklightCompensation has binding name 'tt__BacklightCompensation' for type 'tt:BacklightCompensation' */
#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (637)
#endif

/* tt__WideDynamicRange has binding name 'tt__WideDynamicRange' for type 'tt:WideDynamicRange' */
#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (636)
#endif

/* tt__Exposure has binding name 'tt__Exposure' for type 'tt:Exposure' */
#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (635)
#endif

/* tt__ImagingSettingsExtension has binding name 'tt__ImagingSettingsExtension' for type 'tt:ImagingSettingsExtension' */
#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (634)
#endif

/* tt__ImagingSettings has binding name 'tt__ImagingSettings' for type 'tt:ImagingSettings' */
#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (633)
#endif

/* tt__FocusConfiguration has binding name 'tt__FocusConfiguration' for type 'tt:FocusConfiguration' */
#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (632)
#endif

/* tt__FocusStatus has binding name 'tt__FocusStatus' for type 'tt:FocusStatus' */
#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (631)
#endif

/* tt__ImagingStatus has binding name 'tt__ImagingStatus' for type 'tt:ImagingStatus' */
#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (630)
#endif

/* tt__PTZPresetTourStartingConditionOptionsExtension has binding name 'tt__PTZPresetTourStartingConditionOptionsExtension' for type 'tt:PTZPresetTourStartingConditionOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (629)
#endif

/* tt__PTZPresetTourStartingConditionOptions has binding name 'tt__PTZPresetTourStartingConditionOptions' for type 'tt:PTZPresetTourStartingConditionOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (628)
#endif

/* tt__PTZPresetTourPresetDetailOptionsExtension has binding name 'tt__PTZPresetTourPresetDetailOptionsExtension' for type 'tt:PTZPresetTourPresetDetailOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (627)
#endif

/* tt__PTZPresetTourPresetDetailOptions has binding name 'tt__PTZPresetTourPresetDetailOptions' for type 'tt:PTZPresetTourPresetDetailOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (626)
#endif

/* tt__PTZPresetTourSpotOptions has binding name 'tt__PTZPresetTourSpotOptions' for type 'tt:PTZPresetTourSpotOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (625)
#endif

/* tt__PTZPresetTourOptions has binding name 'tt__PTZPresetTourOptions' for type 'tt:PTZPresetTourOptions' */
#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (624)
#endif

/* tt__PTZPresetTourStartingConditionExtension has binding name 'tt__PTZPresetTourStartingConditionExtension' for type 'tt:PTZPresetTourStartingConditionExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (623)
#endif

/* tt__PTZPresetTourStartingCondition has binding name 'tt__PTZPresetTourStartingCondition' for type 'tt:PTZPresetTourStartingCondition' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (622)
#endif

/* tt__PTZPresetTourStatusExtension has binding name 'tt__PTZPresetTourStatusExtension' for type 'tt:PTZPresetTourStatusExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (621)
#endif

/* tt__PTZPresetTourStatus has binding name 'tt__PTZPresetTourStatus' for type 'tt:PTZPresetTourStatus' */
#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (620)
#endif

/* tt__PTZPresetTourTypeExtension has binding name 'tt__PTZPresetTourTypeExtension' for type 'tt:PTZPresetTourTypeExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (619)
#endif

/* tt__PTZPresetTourPresetDetail has binding name 'tt__PTZPresetTourPresetDetail' for type 'tt:PTZPresetTourPresetDetail' */
#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (618)
#endif

/* tt__PTZPresetTourSpotExtension has binding name 'tt__PTZPresetTourSpotExtension' for type 'tt:PTZPresetTourSpotExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (617)
#endif

/* tt__PTZPresetTourSpot has binding name 'tt__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (616)
#endif

/* tt__PTZPresetTourExtension has binding name 'tt__PTZPresetTourExtension' for type 'tt:PTZPresetTourExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (615)
#endif

/* tt__PresetTour has binding name 'tt__PresetTour' for type 'tt:PresetTour' */
#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (614)
#endif

/* tt__PTZPreset has binding name 'tt__PTZPreset' for type 'tt:PTZPreset' */
#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (613)
#endif

/* tt__PTZSpeed has binding name 'tt__PTZSpeed' for type 'tt:PTZSpeed' */
#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (612)
#endif

/* tt__Space1DDescription has binding name 'tt__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (611)
#endif

/* tt__Space2DDescription has binding name 'tt__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (610)
#endif

/* tt__PTZSpacesExtension has binding name 'tt__PTZSpacesExtension' for type 'tt:PTZSpacesExtension' */
#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (609)
#endif

/* tt__PTZSpaces has binding name 'tt__PTZSpaces' for type 'tt:PTZSpaces' */
#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (608)
#endif

/* tt__ZoomLimits has binding name 'tt__ZoomLimits' for type 'tt:ZoomLimits' */
#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (607)
#endif

/* tt__PanTiltLimits has binding name 'tt__PanTiltLimits' for type 'tt:PanTiltLimits' */
#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (606)
#endif

/* tt__ReverseOptionsExtension has binding name 'tt__ReverseOptionsExtension' for type 'tt:ReverseOptionsExtension' */
#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (605)
#endif

/* tt__ReverseOptions has binding name 'tt__ReverseOptions' for type 'tt:ReverseOptions' */
#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (604)
#endif

/* tt__EFlipOptionsExtension has binding name 'tt__EFlipOptionsExtension' for type 'tt:EFlipOptionsExtension' */
#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (603)
#endif

/* tt__EFlipOptions has binding name 'tt__EFlipOptions' for type 'tt:EFlipOptions' */
#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (602)
#endif

/* tt__PTControlDirectionOptionsExtension has binding name 'tt__PTControlDirectionOptionsExtension' for type 'tt:PTControlDirectionOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (601)
#endif

/* tt__PTControlDirectionOptions has binding name 'tt__PTControlDirectionOptions' for type 'tt:PTControlDirectionOptions' */
#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (600)
#endif

/* tt__PTZConfigurationOptions2 has binding name 'tt__PTZConfigurationOptions2' for type 'tt:PTZConfigurationOptions2' */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (599)
#endif

/* tt__PTZConfigurationOptions has binding name 'tt__PTZConfigurationOptions' for type 'tt:PTZConfigurationOptions' */
#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (598)
#endif

/* tt__Reverse has binding name 'tt__Reverse' for type 'tt:Reverse' */
#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (597)
#endif

/* tt__EFlip has binding name 'tt__EFlip' for type 'tt:EFlip' */
#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (596)
#endif

/* tt__PTControlDirectionExtension has binding name 'tt__PTControlDirectionExtension' for type 'tt:PTControlDirectionExtension' */
#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (595)
#endif

/* tt__PTControlDirection has binding name 'tt__PTControlDirection' for type 'tt:PTControlDirection' */
#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (594)
#endif

/* tt__PTZConfigurationExtension2 has binding name 'tt__PTZConfigurationExtension2' for type 'tt:PTZConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (593)
#endif

/* tt__PTZConfigurationExtension has binding name 'tt__PTZConfigurationExtension' for type 'tt:PTZConfigurationExtension' */
#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (592)
#endif

/* tt__PTZConfiguration has binding name 'tt__PTZConfiguration' for type 'tt:PTZConfiguration' */
#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (591)
#endif

/* tt__PTZPresetTourSupportedExtension has binding name 'tt__PTZPresetTourSupportedExtension' for type 'tt:PTZPresetTourSupportedExtension' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (590)
#endif

/* tt__PTZPresetTourSupported has binding name 'tt__PTZPresetTourSupported' for type 'tt:PTZPresetTourSupported' */
#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (589)
#endif

/* tt__PTZNodeExtension2 has binding name 'tt__PTZNodeExtension2' for type 'tt:PTZNodeExtension2' */
#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (588)
#endif

/* tt__PTZNodeExtension has binding name 'tt__PTZNodeExtension' for type 'tt:PTZNodeExtension' */
#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (587)
#endif

/* tt__PTZNode has binding name 'tt__PTZNode' for type 'tt:PTZNode' */
#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (586)
#endif

/* tt__DigitalInput has binding name 'tt__DigitalInput' for type 'tt:DigitalInput' */
#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (585)
#endif

/* tt__RelayOutput has binding name 'tt__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (584)
#endif

/* tt__RelayOutputSettings has binding name 'tt__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (583)
#endif

/* tt__GenericEapPwdConfigurationExtension has binding name 'tt__GenericEapPwdConfigurationExtension' for type 'tt:GenericEapPwdConfigurationExtension' */
#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (582)
#endif

/* tt__TLSConfiguration has binding name 'tt__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (581)
#endif

/* tt__EapMethodExtension has binding name 'tt__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (580)
#endif

/* tt__EAPMethodConfiguration has binding name 'tt__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (579)
#endif

/* tt__Dot1XConfigurationExtension has binding name 'tt__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (578)
#endif

/* tt__Dot1XConfiguration has binding name 'tt__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (577)
#endif

/* tt__CertificateInformationExtension has binding name 'tt__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (576)
#endif

/* tt__CertificateUsage has binding name 'tt__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (575)
#endif

/* tt__CertificateInformation has binding name 'tt__CertificateInformation' for type 'tt:CertificateInformation' */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (574)
#endif

/* tt__CertificateWithPrivateKey has binding name 'tt__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (573)
#endif

/* tt__CertificateStatus has binding name 'tt__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (572)
#endif

/* tt__Certificate has binding name 'tt__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (571)
#endif

/* tt__CertificateGenerationParametersExtension has binding name 'tt__CertificateGenerationParametersExtension' for type 'tt:CertificateGenerationParametersExtension' */
#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (570)
#endif

/* tt__CertificateGenerationParameters has binding name 'tt__CertificateGenerationParameters' for type 'tt:CertificateGenerationParameters' */
#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (569)
#endif

/* tt__UserExtension has binding name 'tt__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (568)
#endif

/* tt__User has binding name 'tt__User' for type 'tt:User' */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (567)
#endif

/* tt__RemoteUser has binding name 'tt__RemoteUser' for type 'tt:RemoteUser' */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (566)
#endif

/* tt__TimeZone has binding name 'tt__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (565)
#endif

/* tt__Time has binding name 'tt__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (564)
#endif

/* tt__Date has binding name 'tt__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (563)
#endif

/* tt__DateTime has binding name 'tt__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (562)
#endif

/* tt__SystemDateTimeExtension has binding name 'tt__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (561)
#endif

/* tt__SystemDateTime has binding name 'tt__SystemDateTime' for type 'tt:SystemDateTime' */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (560)
#endif

/* tt__SystemLogUri has binding name 'tt__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (559)
#endif

/* tt__SystemLogUriList has binding name 'tt__SystemLogUriList' for type 'tt:SystemLogUriList' */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (558)
#endif

/* tt__BackupFile has binding name 'tt__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (557)
#endif

/* tt__AttachmentData has binding name 'tt__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (556)
#endif

/* tt__BinaryData has binding name 'tt__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (555)
#endif

/* tt__SupportInformation has binding name 'tt__SupportInformation' for type 'tt:SupportInformation' */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (554)
#endif

/* tt__SystemLog has binding name 'tt__SystemLog' for type 'tt:SystemLog' */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (553)
#endif

/* tt__AnalyticsDeviceExtension has binding name 'tt__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (552)
#endif

/* tt__AnalyticsDeviceCapabilities has binding name 'tt__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (551)
#endif

/* tt__ReceiverCapabilities has binding name 'tt__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (550)
#endif

/* tt__ReplayCapabilities has binding name 'tt__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (549)
#endif

/* tt__SearchCapabilities has binding name 'tt__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (548)
#endif

/* tt__RecordingCapabilities has binding name 'tt__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (547)
#endif

/* tt__DisplayCapabilities has binding name 'tt__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (546)
#endif

/* tt__DeviceIOCapabilities has binding name 'tt__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (545)
#endif

/* tt__PTZCapabilities has binding name 'tt__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (544)
#endif

/* tt__ImagingCapabilities has binding name 'tt__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (543)
#endif

/* tt__OnvifVersion has binding name 'tt__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (542)
#endif

/* tt__SystemCapabilitiesExtension2 has binding name 'tt__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (541)
#endif

/* tt__SystemCapabilitiesExtension has binding name 'tt__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (540)
#endif

/* tt__SystemCapabilities has binding name 'tt__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (539)
#endif

/* tt__SecurityCapabilitiesExtension2 has binding name 'tt__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (538)
#endif

/* tt__SecurityCapabilitiesExtension has binding name 'tt__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (537)
#endif

/* tt__SecurityCapabilities has binding name 'tt__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (536)
#endif

/* tt__NetworkCapabilitiesExtension2 has binding name 'tt__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (535)
#endif

/* tt__NetworkCapabilitiesExtension has binding name 'tt__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (534)
#endif

/* tt__NetworkCapabilities has binding name 'tt__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (533)
#endif

/* tt__ProfileCapabilities has binding name 'tt__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (532)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension has binding name 'tt__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (531)
#endif

/* tt__RealTimeStreamingCapabilities has binding name 'tt__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (530)
#endif

/* tt__MediaCapabilitiesExtension has binding name 'tt__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (529)
#endif

/* tt__MediaCapabilities has binding name 'tt__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (528)
#endif

/* tt__IOCapabilitiesExtension2 has binding name 'tt__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (527)
#endif

/* tt__IOCapabilitiesExtension has binding name 'tt__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (526)
#endif

/* tt__IOCapabilities has binding name 'tt__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (525)
#endif

/* tt__EventCapabilities has binding name 'tt__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (524)
#endif

/* tt__DeviceCapabilitiesExtension has binding name 'tt__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (523)
#endif

/* tt__DeviceCapabilities has binding name 'tt__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (522)
#endif

/* tt__AnalyticsCapabilities has binding name 'tt__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (521)
#endif

/* tt__CapabilitiesExtension2 has binding name 'tt__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (520)
#endif

/* tt__CapabilitiesExtension has binding name 'tt__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (519)
#endif

/* tt__Capabilities has binding name 'tt__Capabilities' for type 'tt:Capabilities' */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (518)
#endif

/* tt__Dot11AvailableNetworksExtension has binding name 'tt__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (517)
#endif

/* tt__Dot11AvailableNetworks has binding name 'tt__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (516)
#endif

/* tt__Dot11Status has binding name 'tt__Dot11Status' for type 'tt:Dot11Status' */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (515)
#endif

/* tt__Dot11Capabilities has binding name 'tt__Dot11Capabilities' for type 'tt:Dot11Capabilities' */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (514)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 has binding name 'tt__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (513)
#endif

/* tt__Dot11PSKSetExtension has binding name 'tt__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (512)
#endif

/* tt__Dot11PSKSet has binding name 'tt__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (511)
#endif

/* tt__Dot11SecurityConfigurationExtension has binding name 'tt__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (510)
#endif

/* tt__Dot11SecurityConfiguration has binding name 'tt__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (509)
#endif

/* tt__Dot11Configuration has binding name 'tt__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (508)
#endif

/* tt__IPAddressFilterExtension has binding name 'tt__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (507)
#endif

/* tt__IPAddressFilter has binding name 'tt__IPAddressFilter' for type 'tt:IPAddressFilter' */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (506)
#endif

/* tt__NetworkZeroConfigurationExtension2 has binding name 'tt__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (505)
#endif

/* tt__NetworkZeroConfigurationExtension has binding name 'tt__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (504)
#endif

/* tt__NetworkZeroConfiguration has binding name 'tt__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (503)
#endif

/* tt__NetworkGateway has binding name 'tt__NetworkGateway' for type 'tt:NetworkGateway' */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (502)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration has binding name 'tt__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (501)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration has binding name 'tt__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (500)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension has binding name 'tt__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (499)
#endif

/* tt__NetworkInterfaceSetConfiguration has binding name 'tt__NetworkInterfaceSetConfiguration' for type 'tt:NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (498)
#endif

/* tt__DynamicDNSInformationExtension has binding name 'tt__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (497)
#endif

/* tt__DynamicDNSInformation has binding name 'tt__DynamicDNSInformation' for type 'tt:DynamicDNSInformation' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (496)
#endif

/* tt__NTPInformationExtension has binding name 'tt__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (495)
#endif

/* tt__NTPInformation has binding name 'tt__NTPInformation' for type 'tt:NTPInformation' */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (494)
#endif

/* tt__DNSInformationExtension has binding name 'tt__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (493)
#endif

/* tt__DNSInformation has binding name 'tt__DNSInformation' for type 'tt:DNSInformation' */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (492)
#endif

/* tt__HostnameInformationExtension has binding name 'tt__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (491)
#endif

/* tt__HostnameInformation has binding name 'tt__HostnameInformation' for type 'tt:HostnameInformation' */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (490)
#endif

/* tt__PrefixedIPv6Address has binding name 'tt__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (489)
#endif

/* tt__PrefixedIPv4Address has binding name 'tt__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (488)
#endif

/* tt__IPAddress has binding name 'tt__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (487)
#endif

/* tt__NetworkHostExtension has binding name 'tt__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (486)
#endif

/* tt__NetworkHost has binding name 'tt__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (485)
#endif

/* tt__NetworkProtocolExtension has binding name 'tt__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (484)
#endif

/* tt__NetworkProtocol has binding name 'tt__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (483)
#endif

/* tt__IPv6ConfigurationExtension has binding name 'tt__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (482)
#endif

/* tt__IPv6Configuration has binding name 'tt__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (481)
#endif

/* tt__IPv4Configuration has binding name 'tt__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (480)
#endif

/* tt__IPv4NetworkInterface has binding name 'tt__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (479)
#endif

/* tt__IPv6NetworkInterface has binding name 'tt__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (478)
#endif

/* tt__NetworkInterfaceInfo has binding name 'tt__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (477)
#endif

/* tt__NetworkInterfaceConnectionSetting has binding name 'tt__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (476)
#endif

/* tt__NetworkInterfaceLink has binding name 'tt__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (475)
#endif

/* tt__NetworkInterfaceExtension2 has binding name 'tt__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (474)
#endif

/* tt__Dot3Configuration has binding name 'tt__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (473)
#endif

/* tt__NetworkInterfaceExtension has binding name 'tt__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (472)
#endif

/* tt__NetworkInterface has binding name 'tt__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (471)
#endif

/* tt__Scope has binding name 'tt__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (470)
#endif

/* tt__MediaUri has binding name 'tt__MediaUri' for type 'tt:MediaUri' */
#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (469)
#endif

/* tt__Transport has binding name 'tt__Transport' for type 'tt:Transport' */
#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (468)
#endif

/* tt__StreamSetup has binding name 'tt__StreamSetup' for type 'tt:StreamSetup' */
#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (467)
#endif

/* tt__MulticastConfiguration has binding name 'tt__MulticastConfiguration' for type 'tt:MulticastConfiguration' */
#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (466)
#endif

/* tt__AudioDecoderConfigurationOptionsExtension has binding name 'tt__AudioDecoderConfigurationOptionsExtension' for type 'tt:AudioDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (465)
#endif

/* tt__G726DecOptions has binding name 'tt__G726DecOptions' for type 'tt:G726DecOptions' */
#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (464)
#endif

/* tt__AACDecOptions has binding name 'tt__AACDecOptions' for type 'tt:AACDecOptions' */
#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (463)
#endif

/* tt__G711DecOptions has binding name 'tt__G711DecOptions' for type 'tt:G711DecOptions' */
#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (462)
#endif

/* tt__AudioDecoderConfigurationOptions has binding name 'tt__AudioDecoderConfigurationOptions' for type 'tt:AudioDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (461)
#endif

/* tt__AudioDecoderConfiguration has binding name 'tt__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (460)
#endif

/* tt__AudioOutputConfigurationOptions has binding name 'tt__AudioOutputConfigurationOptions' for type 'tt:AudioOutputConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (459)
#endif

/* tt__AudioOutputConfiguration has binding name 'tt__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (458)
#endif

/* tt__AudioOutput has binding name 'tt__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (457)
#endif

/* tt__VideoDecoderConfigurationOptionsExtension has binding name 'tt__VideoDecoderConfigurationOptionsExtension' for type 'tt:VideoDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (456)
#endif

/* tt__Mpeg4DecOptions has binding name 'tt__Mpeg4DecOptions' for type 'tt:Mpeg4DecOptions' */
#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (455)
#endif

/* tt__JpegDecOptions has binding name 'tt__JpegDecOptions' for type 'tt:JpegDecOptions' */
#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (454)
#endif

/* tt__H264DecOptions has binding name 'tt__H264DecOptions' for type 'tt:H264DecOptions' */
#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (453)
#endif

/* tt__VideoDecoderConfigurationOptions has binding name 'tt__VideoDecoderConfigurationOptions' for type 'tt:VideoDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (452)
#endif

/* tt__VideoOutputConfigurationOptions has binding name 'tt__VideoOutputConfigurationOptions' for type 'tt:VideoOutputConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (451)
#endif

/* tt__VideoOutputConfiguration has binding name 'tt__VideoOutputConfiguration' for type 'tt:VideoOutputConfiguration' */
#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (450)
#endif

/* tt__VideoOutputExtension has binding name 'tt__VideoOutputExtension' for type 'tt:VideoOutputExtension' */
#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (449)
#endif

/* tt__VideoOutput has binding name 'tt__VideoOutput' for type 'tt:VideoOutput' */
#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (448)
#endif

/* tt__PTZStatusFilterOptionsExtension has binding name 'tt__PTZStatusFilterOptionsExtension' for type 'tt:PTZStatusFilterOptionsExtension' */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (447)
#endif

/* tt__PTZStatusFilterOptions has binding name 'tt__PTZStatusFilterOptions' for type 'tt:PTZStatusFilterOptions' */
#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (446)
#endif

/* tt__MetadataConfigurationOptionsExtension2 has binding name 'tt__MetadataConfigurationOptionsExtension2' for type 'tt:MetadataConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (445)
#endif

/* tt__MetadataConfigurationOptionsExtension has binding name 'tt__MetadataConfigurationOptionsExtension' for type 'tt:MetadataConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (444)
#endif

/* tt__MetadataConfigurationOptions has binding name 'tt__MetadataConfigurationOptions' for type 'tt:MetadataConfigurationOptions' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (443)
#endif

/* tt__EventSubscription has binding name 'tt__EventSubscription' for type 'tt:EventSubscription' */
#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (442)
#endif

/* tt__PTZFilter has binding name 'tt__PTZFilter' for type 'tt:PTZFilter' */
#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (441)
#endif

/* tt__MetadataConfigurationExtension has binding name 'tt__MetadataConfigurationExtension' for type 'tt:MetadataConfigurationExtension' */
#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (440)
#endif

/* tt__MetadataConfiguration has binding name 'tt__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (439)
#endif

/* tt__VideoAnalyticsConfiguration has binding name 'tt__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (438)
#endif

/* tt__AudioEncoder2ConfigurationOptions has binding name 'tt__AudioEncoder2ConfigurationOptions' for type 'tt:AudioEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (437)
#endif

/* tt__AudioEncoder2Configuration has binding name 'tt__AudioEncoder2Configuration' for type 'tt:AudioEncoder2Configuration' */
#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (436)
#endif

/* tt__AudioEncoderConfigurationOption has binding name 'tt__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (435)
#endif

/* tt__AudioEncoderConfigurationOptions has binding name 'tt__AudioEncoderConfigurationOptions' for type 'tt:AudioEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (434)
#endif

/* tt__AudioEncoderConfiguration has binding name 'tt__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (433)
#endif

/* tt__AudioSourceOptionsExtension has binding name 'tt__AudioSourceOptionsExtension' for type 'tt:AudioSourceOptionsExtension' */
#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (432)
#endif

/* tt__AudioSourceConfigurationOptions has binding name 'tt__AudioSourceConfigurationOptions' for type 'tt:AudioSourceConfigurationOptions' */
#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (431)
#endif

/* tt__AudioSourceConfiguration has binding name 'tt__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (430)
#endif

/* tt__VideoEncoder2ConfigurationOptions has binding name 'tt__VideoEncoder2ConfigurationOptions' for type 'tt:VideoEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (429)
#endif

/* tt__VideoRateControl2 has binding name 'tt__VideoRateControl2' for type 'tt:VideoRateControl2' */
#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (428)
#endif

/* tt__VideoResolution2 has binding name 'tt__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (427)
#endif

/* tt__VideoEncoder2Configuration has binding name 'tt__VideoEncoder2Configuration' for type 'tt:VideoEncoder2Configuration' */
#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (426)
#endif

/* tt__H264Options2 has binding name 'tt__H264Options2' for type 'tt:H264Options2' */
#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (425)
#endif

/* tt__H264Options has binding name 'tt__H264Options' for type 'tt:H264Options' */
#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (424)
#endif

/* tt__Mpeg4Options2 has binding name 'tt__Mpeg4Options2' for type 'tt:Mpeg4Options2' */
#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (423)
#endif

/* tt__Mpeg4Options has binding name 'tt__Mpeg4Options' for type 'tt:Mpeg4Options' */
#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (422)
#endif

/* tt__JpegOptions2 has binding name 'tt__JpegOptions2' for type 'tt:JpegOptions2' */
#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (421)
#endif

/* tt__JpegOptions has binding name 'tt__JpegOptions' for type 'tt:JpegOptions' */
#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (420)
#endif

/* tt__VideoEncoderOptionsExtension2 has binding name 'tt__VideoEncoderOptionsExtension2' for type 'tt:VideoEncoderOptionsExtension2' */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (419)
#endif

/* tt__VideoEncoderOptionsExtension has binding name 'tt__VideoEncoderOptionsExtension' for type 'tt:VideoEncoderOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (418)
#endif

/* tt__VideoEncoderConfigurationOptions has binding name 'tt__VideoEncoderConfigurationOptions' for type 'tt:VideoEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (417)
#endif

/* tt__H264Configuration has binding name 'tt__H264Configuration' for type 'tt:H264Configuration' */
#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (416)
#endif

/* tt__Mpeg4Configuration has binding name 'tt__Mpeg4Configuration' for type 'tt:Mpeg4Configuration' */
#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (415)
#endif

/* tt__VideoRateControl has binding name 'tt__VideoRateControl' for type 'tt:VideoRateControl' */
#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (414)
#endif

/* tt__VideoResolution has binding name 'tt__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (413)
#endif

/* tt__VideoEncoderConfiguration has binding name 'tt__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (412)
#endif

/* tt__SceneOrientation has binding name 'tt__SceneOrientation' for type 'tt:SceneOrientation' */
#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (411)
#endif

/* tt__RotateOptionsExtension has binding name 'tt__RotateOptionsExtension' for type 'tt:RotateOptionsExtension' */
#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (410)
#endif

/* tt__RotateOptions has binding name 'tt__RotateOptions' for type 'tt:RotateOptions' */
#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (409)
#endif

/* tt__VideoSourceConfigurationOptionsExtension2 has binding name 'tt__VideoSourceConfigurationOptionsExtension2' for type 'tt:VideoSourceConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (408)
#endif

/* tt__VideoSourceConfigurationOptionsExtension has binding name 'tt__VideoSourceConfigurationOptionsExtension' for type 'tt:VideoSourceConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (407)
#endif

/* tt__VideoSourceConfigurationOptions has binding name 'tt__VideoSourceConfigurationOptions' for type 'tt:VideoSourceConfigurationOptions' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (406)
#endif

/* tt__LensDescription has binding name 'tt__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (405)
#endif

/* tt__LensOffset has binding name 'tt__LensOffset' for type 'tt:LensOffset' */
#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (404)
#endif

/* tt__LensProjection has binding name 'tt__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (403)
#endif

/* tt__RotateExtension has binding name 'tt__RotateExtension' for type 'tt:RotateExtension' */
#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (402)
#endif

/* tt__Rotate has binding name 'tt__Rotate' for type 'tt:Rotate' */
#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (401)
#endif

/* tt__VideoSourceConfigurationExtension2 has binding name 'tt__VideoSourceConfigurationExtension2' for type 'tt:VideoSourceConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (400)
#endif

/* tt__VideoSourceConfigurationExtension has binding name 'tt__VideoSourceConfigurationExtension' for type 'tt:VideoSourceConfigurationExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (399)
#endif

/* tt__VideoSourceConfiguration has binding name 'tt__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (398)
#endif

/* tt__ConfigurationEntity has binding name 'tt__ConfigurationEntity' for type 'tt:ConfigurationEntity' */
#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (397)
#endif

/* tt__ProfileExtension2 has binding name 'tt__ProfileExtension2' for type 'tt:ProfileExtension2' */
#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (396)
#endif

/* tt__ProfileExtension has binding name 'tt__ProfileExtension' for type 'tt:ProfileExtension' */
#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (395)
#endif

/* tt__Profile has binding name 'tt__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (394)
#endif

/* tt__AudioSource has binding name 'tt__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (393)
#endif

/* tt__VideoSourceExtension2 has binding name 'tt__VideoSourceExtension2' for type 'tt:VideoSourceExtension2' */
#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (392)
#endif

/* tt__VideoSourceExtension has binding name 'tt__VideoSourceExtension' for type 'tt:VideoSourceExtension' */
#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (391)
#endif

/* tt__VideoSource has binding name 'tt__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (390)
#endif

/* tt__AnyHolder has binding name 'tt__AnyHolder' for type 'tt:AnyHolder' */
#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (389)
#endif

/* tt__FloatItems has binding name 'tt__FloatItems' for type 'tt:FloatItems' */
#ifndef SOAP_TYPE_tt__FloatItems
#define SOAP_TYPE_tt__FloatItems (388)
#endif

/* tt__IntItems has binding name 'tt__IntItems' for type 'tt:IntItems' */
#ifndef SOAP_TYPE_tt__IntItems
#define SOAP_TYPE_tt__IntItems (387)
#endif

/* tt__DurationRange has binding name 'tt__DurationRange' for type 'tt:DurationRange' */
#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (386)
#endif

/* tt__FloatRange has binding name 'tt__FloatRange' for type 'tt:FloatRange' */
#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (385)
#endif

/* tt__IntRectangleRange has binding name 'tt__IntRectangleRange' for type 'tt:IntRectangleRange' */
#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (384)
#endif

/* tt__IntRectangle has binding name 'tt__IntRectangle' for type 'tt:IntRectangle' */
#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (383)
#endif

/* tt__DeviceEntity has binding name 'tt__DeviceEntity' for type 'tt:DeviceEntity' */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (382)
#endif

/* _tds__DeleteGeoLocationResponse has binding name '_tds__DeleteGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (381)
#endif

/* _tds__DeleteGeoLocation has binding name '_tds__DeleteGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (380)
#endif

/* _tds__SetGeoLocationResponse has binding name '_tds__SetGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (379)
#endif

/* _tds__SetGeoLocation has binding name '_tds__SetGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (378)
#endif

/* _tds__GetGeoLocationResponse has binding name '_tds__GetGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (377)
#endif

/* _tds__GetGeoLocation has binding name '_tds__GetGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (376)
#endif

/* _tds__DeleteStorageConfigurationResponse has binding name '_tds__DeleteStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (375)
#endif

/* _tds__DeleteStorageConfiguration has binding name '_tds__DeleteStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (374)
#endif

/* _tds__SetStorageConfigurationResponse has binding name '_tds__SetStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (373)
#endif

/* _tds__SetStorageConfiguration has binding name '_tds__SetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (372)
#endif

/* _tds__GetStorageConfigurationResponse has binding name '_tds__GetStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (371)
#endif

/* _tds__GetStorageConfiguration has binding name '_tds__GetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (370)
#endif

/* _tds__CreateStorageConfigurationResponse has binding name '_tds__CreateStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (369)
#endif

/* _tds__CreateStorageConfiguration has binding name '_tds__CreateStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (368)
#endif

/* _tds__GetStorageConfigurationsResponse has binding name '_tds__GetStorageConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (367)
#endif

/* _tds__GetStorageConfigurations has binding name '_tds__GetStorageConfigurations' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (366)
#endif

/* _tds__StartSystemRestoreResponse has binding name '_tds__StartSystemRestoreResponse' for type '' */
#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (365)
#endif

/* _tds__StartSystemRestore has binding name '_tds__StartSystemRestore' for type '' */
#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (364)
#endif

/* _tds__StartFirmwareUpgradeResponse has binding name '_tds__StartFirmwareUpgradeResponse' for type '' */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (363)
#endif

/* _tds__StartFirmwareUpgrade has binding name '_tds__StartFirmwareUpgrade' for type '' */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (362)
#endif

/* _tds__GetSystemUrisResponse has binding name '_tds__GetSystemUrisResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (361)
#endif

/* _tds__GetSystemUris has binding name '_tds__GetSystemUris' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (360)
#endif

/* _tds__ScanAvailableDot11NetworksResponse has binding name '_tds__ScanAvailableDot11NetworksResponse' for type '' */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (359)
#endif

/* _tds__ScanAvailableDot11Networks has binding name '_tds__ScanAvailableDot11Networks' for type '' */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (358)
#endif

/* _tds__GetDot11StatusResponse has binding name '_tds__GetDot11StatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (357)
#endif

/* _tds__GetDot11Status has binding name '_tds__GetDot11Status' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (356)
#endif

/* _tds__GetDot11CapabilitiesResponse has binding name '_tds__GetDot11CapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (355)
#endif

/* _tds__GetDot11Capabilities has binding name '_tds__GetDot11Capabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (354)
#endif

/* _tds__SendAuxiliaryCommandResponse has binding name '_tds__SendAuxiliaryCommandResponse' for type '' */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (353)
#endif

/* _tds__SendAuxiliaryCommand has binding name '_tds__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (352)
#endif

/* _tds__SetRelayOutputStateResponse has binding name '_tds__SetRelayOutputStateResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (351)
#endif

/* _tds__SetRelayOutputState has binding name '_tds__SetRelayOutputState' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (350)
#endif

/* _tds__SetRelayOutputSettingsResponse has binding name '_tds__SetRelayOutputSettingsResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (349)
#endif

/* _tds__SetRelayOutputSettings has binding name '_tds__SetRelayOutputSettings' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (348)
#endif

/* _tds__GetRelayOutputsResponse has binding name '_tds__GetRelayOutputsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (347)
#endif

/* _tds__GetRelayOutputs has binding name '_tds__GetRelayOutputs' for type '' */
#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (346)
#endif

/* _tds__DeleteDot1XConfigurationResponse has binding name '_tds__DeleteDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (345)
#endif

/* _tds__DeleteDot1XConfiguration has binding name '_tds__DeleteDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (344)
#endif

/* _tds__GetDot1XConfigurationsResponse has binding name '_tds__GetDot1XConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (343)
#endif

/* _tds__GetDot1XConfigurations has binding name '_tds__GetDot1XConfigurations' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (342)
#endif

/* _tds__GetDot1XConfigurationResponse has binding name '_tds__GetDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (341)
#endif

/* _tds__GetDot1XConfiguration has binding name '_tds__GetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (340)
#endif

/* _tds__SetDot1XConfigurationResponse has binding name '_tds__SetDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (339)
#endif

/* _tds__SetDot1XConfiguration has binding name '_tds__SetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (338)
#endif

/* _tds__CreateDot1XConfigurationResponse has binding name '_tds__CreateDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (337)
#endif

/* _tds__CreateDot1XConfiguration has binding name '_tds__CreateDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (336)
#endif

/* _tds__LoadCACertificatesResponse has binding name '_tds__LoadCACertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (335)
#endif

/* _tds__LoadCACertificates has binding name '_tds__LoadCACertificates' for type '' */
#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (334)
#endif

/* _tds__GetCertificateInformationResponse has binding name '_tds__GetCertificateInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (333)
#endif

/* _tds__GetCertificateInformation has binding name '_tds__GetCertificateInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (332)
#endif

/* _tds__LoadCertificateWithPrivateKeyResponse has binding name '_tds__LoadCertificateWithPrivateKeyResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (331)
#endif

/* _tds__LoadCertificateWithPrivateKey has binding name '_tds__LoadCertificateWithPrivateKey' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (330)
#endif

/* _tds__GetCACertificatesResponse has binding name '_tds__GetCACertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (329)
#endif

/* _tds__GetCACertificates has binding name '_tds__GetCACertificates' for type '' */
#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (328)
#endif

/* _tds__SetClientCertificateModeResponse has binding name '_tds__SetClientCertificateModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (327)
#endif

/* _tds__SetClientCertificateMode has binding name '_tds__SetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (326)
#endif

/* _tds__GetClientCertificateModeResponse has binding name '_tds__GetClientCertificateModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (325)
#endif

/* _tds__GetClientCertificateMode has binding name '_tds__GetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (324)
#endif

/* _tds__LoadCertificatesResponse has binding name '_tds__LoadCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (323)
#endif

/* _tds__LoadCertificates has binding name '_tds__LoadCertificates' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (322)
#endif

/* _tds__GetPkcs10RequestResponse has binding name '_tds__GetPkcs10RequestResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (321)
#endif

/* _tds__GetPkcs10Request has binding name '_tds__GetPkcs10Request' for type '' */
#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (320)
#endif

/* _tds__DeleteCertificatesResponse has binding name '_tds__DeleteCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (319)
#endif

/* _tds__DeleteCertificates has binding name '_tds__DeleteCertificates' for type '' */
#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (318)
#endif

/* _tds__SetCertificatesStatusResponse has binding name '_tds__SetCertificatesStatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (317)
#endif

/* _tds__SetCertificatesStatus has binding name '_tds__SetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (316)
#endif

/* _tds__GetCertificatesStatusResponse has binding name '_tds__GetCertificatesStatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (315)
#endif

/* _tds__GetCertificatesStatus has binding name '_tds__GetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (314)
#endif

/* _tds__GetCertificatesResponse has binding name '_tds__GetCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (313)
#endif

/* _tds__GetCertificates has binding name '_tds__GetCertificates' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (312)
#endif

/* _tds__CreateCertificateResponse has binding name '_tds__CreateCertificateResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (311)
#endif

/* _tds__CreateCertificate has binding name '_tds__CreateCertificate' for type '' */
#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (310)
#endif

/* _tds__SetAccessPolicyResponse has binding name '_tds__SetAccessPolicyResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (309)
#endif

/* _tds__SetAccessPolicy has binding name '_tds__SetAccessPolicy' for type '' */
#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (308)
#endif

/* _tds__GetAccessPolicyResponse has binding name '_tds__GetAccessPolicyResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (307)
#endif

/* _tds__GetAccessPolicy has binding name '_tds__GetAccessPolicy' for type '' */
#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (306)
#endif

/* _tds__RemoveIPAddressFilterResponse has binding name '_tds__RemoveIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (305)
#endif

/* _tds__RemoveIPAddressFilter has binding name '_tds__RemoveIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (304)
#endif

/* _tds__AddIPAddressFilterResponse has binding name '_tds__AddIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (303)
#endif

/* _tds__AddIPAddressFilter has binding name '_tds__AddIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (302)
#endif

/* _tds__SetIPAddressFilterResponse has binding name '_tds__SetIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (301)
#endif

/* _tds__SetIPAddressFilter has binding name '_tds__SetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (300)
#endif

/* _tds__GetIPAddressFilterResponse has binding name '_tds__GetIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (299)
#endif

/* _tds__GetIPAddressFilter has binding name '_tds__GetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (298)
#endif

/* _tds__SetZeroConfigurationResponse has binding name '_tds__SetZeroConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (297)
#endif

/* _tds__SetZeroConfiguration has binding name '_tds__SetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (296)
#endif

/* _tds__GetZeroConfigurationResponse has binding name '_tds__GetZeroConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (295)
#endif

/* _tds__GetZeroConfiguration has binding name '_tds__GetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (294)
#endif

/* _tds__SetNetworkDefaultGatewayResponse has binding name '_tds__SetNetworkDefaultGatewayResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (293)
#endif

/* _tds__SetNetworkDefaultGateway has binding name '_tds__SetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (292)
#endif

/* _tds__GetNetworkDefaultGatewayResponse has binding name '_tds__GetNetworkDefaultGatewayResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (291)
#endif

/* _tds__GetNetworkDefaultGateway has binding name '_tds__GetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (290)
#endif

/* _tds__SetNetworkProtocolsResponse has binding name '_tds__SetNetworkProtocolsResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (289)
#endif

/* _tds__SetNetworkProtocols has binding name '_tds__SetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (288)
#endif

/* _tds__GetNetworkProtocolsResponse has binding name '_tds__GetNetworkProtocolsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (287)
#endif

/* _tds__GetNetworkProtocols has binding name '_tds__GetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (286)
#endif

/* _tds__SetNetworkInterfacesResponse has binding name '_tds__SetNetworkInterfacesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (285)
#endif

/* _tds__SetNetworkInterfaces has binding name '_tds__SetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (284)
#endif

/* _tds__GetNetworkInterfacesResponse has binding name '_tds__GetNetworkInterfacesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (283)
#endif

/* _tds__GetNetworkInterfaces has binding name '_tds__GetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (282)
#endif

/* _tds__SetDynamicDNSResponse has binding name '_tds__SetDynamicDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (281)
#endif

/* _tds__SetDynamicDNS has binding name '_tds__SetDynamicDNS' for type '' */
#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (280)
#endif

/* _tds__GetDynamicDNSResponse has binding name '_tds__GetDynamicDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (279)
#endif

/* _tds__GetDynamicDNS has binding name '_tds__GetDynamicDNS' for type '' */
#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (278)
#endif

/* _tds__SetNTPResponse has binding name '_tds__SetNTPResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (277)
#endif

/* _tds__SetNTP has binding name '_tds__SetNTP' for type '' */
#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (276)
#endif

/* _tds__GetNTPResponse has binding name '_tds__GetNTPResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (275)
#endif

/* _tds__GetNTP has binding name '_tds__GetNTP' for type '' */
#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (274)
#endif

/* _tds__SetDNSResponse has binding name '_tds__SetDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (273)
#endif

/* _tds__SetDNS has binding name '_tds__SetDNS' for type '' */
#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (272)
#endif

/* _tds__GetDNSResponse has binding name '_tds__GetDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (271)
#endif

/* _tds__GetDNS has binding name '_tds__GetDNS' for type '' */
#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (270)
#endif

/* _tds__SetHostnameFromDHCPResponse has binding name '_tds__SetHostnameFromDHCPResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (269)
#endif

/* _tds__SetHostnameFromDHCP has binding name '_tds__SetHostnameFromDHCP' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (268)
#endif

/* _tds__SetHostnameResponse has binding name '_tds__SetHostnameResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (267)
#endif

/* _tds__SetHostname has binding name '_tds__SetHostname' for type '' */
#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (266)
#endif

/* _tds__GetHostnameResponse has binding name '_tds__GetHostnameResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (265)
#endif

/* _tds__GetHostname has binding name '_tds__GetHostname' for type '' */
#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (264)
#endif

/* _tds__GetCapabilitiesResponse has binding name '_tds__GetCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (263)
#endif

/* _tds__GetCapabilities has binding name '_tds__GetCapabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (262)
#endif

/* _tds__SetAuthFailureWarningConfigurationResponse has binding name '_tds__SetAuthFailureWarningConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse (261)
#endif

/* _tds__SetAuthFailureWarningConfiguration has binding name '_tds__SetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__SetAuthFailureWarningConfiguration (260)
#endif

/* _tds__GetAuthFailureWarningConfigurationResponse has binding name '_tds__GetAuthFailureWarningConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse (259)
#endif

/* _tds__GetAuthFailureWarningConfiguration has binding name '_tds__GetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__GetAuthFailureWarningConfiguration (258)
#endif

/* _tds__GetAuthFailureWarningOptionsResponse has binding name '_tds__GetAuthFailureWarningOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse (257)
#endif

/* _tds__GetAuthFailureWarningOptions has binding name '_tds__GetAuthFailureWarningOptions' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptions
#define SOAP_TYPE__tds__GetAuthFailureWarningOptions (256)
#endif

/* _tds__SetPasswordHistoryConfigurationResponse has binding name '_tds__SetPasswordHistoryConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse (255)
#endif

/* _tds__SetPasswordHistoryConfiguration has binding name '_tds__SetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__SetPasswordHistoryConfiguration (254)
#endif

/* _tds__GetPasswordHistoryConfigurationResponse has binding name '_tds__GetPasswordHistoryConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse (253)
#endif

/* _tds__GetPasswordHistoryConfiguration has binding name '_tds__GetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__GetPasswordHistoryConfiguration (252)
#endif

/* _tds__SetPasswordComplexityConfigurationResponse has binding name '_tds__SetPasswordComplexityConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse (251)
#endif

/* _tds__SetPasswordComplexityConfiguration has binding name '_tds__SetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__SetPasswordComplexityConfiguration (250)
#endif

/* _tds__GetPasswordComplexityConfigurationResponse has binding name '_tds__GetPasswordComplexityConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse (249)
#endif

/* _tds__GetPasswordComplexityConfiguration has binding name '_tds__GetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__GetPasswordComplexityConfiguration (248)
#endif

/* _tds__GetPasswordComplexityOptionsResponse has binding name '_tds__GetPasswordComplexityOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
#define SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse (247)
#endif

/* _tds__GetPasswordComplexityOptions has binding name '_tds__GetPasswordComplexityOptions' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptions
#define SOAP_TYPE__tds__GetPasswordComplexityOptions (246)
#endif

/* _tds__GetWsdlUrlResponse has binding name '_tds__GetWsdlUrlResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (245)
#endif

/* _tds__GetWsdlUrl has binding name '_tds__GetWsdlUrl' for type '' */
#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (244)
#endif

/* _tds__SetUserResponse has binding name '_tds__SetUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (243)
#endif

/* _tds__SetUser has binding name '_tds__SetUser' for type '' */
#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (242)
#endif

/* _tds__DeleteUsersResponse has binding name '_tds__DeleteUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (241)
#endif

/* _tds__DeleteUsers has binding name '_tds__DeleteUsers' for type '' */
#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (240)
#endif

/* _tds__CreateUsersResponse has binding name '_tds__CreateUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (239)
#endif

/* _tds__CreateUsers has binding name '_tds__CreateUsers' for type '' */
#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (238)
#endif

/* _tds__GetUsersResponse has binding name '_tds__GetUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (237)
#endif

/* _tds__GetUsers has binding name '_tds__GetUsers' for type '' */
#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (236)
#endif

/* _tds__SetRemoteUserResponse has binding name '_tds__SetRemoteUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (235)
#endif

/* _tds__SetRemoteUser has binding name '_tds__SetRemoteUser' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (234)
#endif

/* _tds__GetRemoteUserResponse has binding name '_tds__GetRemoteUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (233)
#endif

/* _tds__GetRemoteUser has binding name '_tds__GetRemoteUser' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (232)
#endif

/* _tds__GetEndpointReferenceResponse has binding name '_tds__GetEndpointReferenceResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (231)
#endif

/* _tds__GetEndpointReference has binding name '_tds__GetEndpointReference' for type '' */
#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (230)
#endif

/* _tds__SetDPAddressesResponse has binding name '_tds__SetDPAddressesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (229)
#endif

/* _tds__SetDPAddresses has binding name '_tds__SetDPAddresses' for type '' */
#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (228)
#endif

/* _tds__GetDPAddressesResponse has binding name '_tds__GetDPAddressesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (227)
#endif

/* _tds__GetDPAddresses has binding name '_tds__GetDPAddresses' for type '' */
#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (226)
#endif

/* _tds__SetRemoteDiscoveryModeResponse has binding name '_tds__SetRemoteDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (225)
#endif

/* _tds__SetRemoteDiscoveryMode has binding name '_tds__SetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (224)
#endif

/* _tds__GetRemoteDiscoveryModeResponse has binding name '_tds__GetRemoteDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (223)
#endif

/* _tds__GetRemoteDiscoveryMode has binding name '_tds__GetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (222)
#endif

/* _tds__SetDiscoveryModeResponse has binding name '_tds__SetDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (221)
#endif

/* _tds__SetDiscoveryMode has binding name '_tds__SetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (220)
#endif

/* _tds__GetDiscoveryModeResponse has binding name '_tds__GetDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (219)
#endif

/* _tds__GetDiscoveryMode has binding name '_tds__GetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (218)
#endif

/* _tds__RemoveScopesResponse has binding name '_tds__RemoveScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (217)
#endif

/* _tds__RemoveScopes has binding name '_tds__RemoveScopes' for type '' */
#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (216)
#endif

/* _tds__AddScopesResponse has binding name '_tds__AddScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (215)
#endif

/* _tds__AddScopes has binding name '_tds__AddScopes' for type '' */
#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (214)
#endif

/* _tds__SetScopesResponse has binding name '_tds__SetScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (213)
#endif

/* _tds__SetScopes has binding name '_tds__SetScopes' for type '' */
#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (212)
#endif

/* _tds__GetScopesResponse has binding name '_tds__GetScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (211)
#endif

/* _tds__GetScopes has binding name '_tds__GetScopes' for type '' */
#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (210)
#endif

/* _tds__GetSystemLogResponse has binding name '_tds__GetSystemLogResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (209)
#endif

/* _tds__GetSystemLog has binding name '_tds__GetSystemLog' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (208)
#endif

/* _tds__GetSystemSupportInformationResponse has binding name '_tds__GetSystemSupportInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (207)
#endif

/* _tds__GetSystemSupportInformation has binding name '_tds__GetSystemSupportInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (206)
#endif

/* _tds__GetSystemBackupResponse has binding name '_tds__GetSystemBackupResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (205)
#endif

/* _tds__GetSystemBackup has binding name '_tds__GetSystemBackup' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (204)
#endif

/* _tds__RestoreSystemResponse has binding name '_tds__RestoreSystemResponse' for type '' */
#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (203)
#endif

/* _tds__RestoreSystem has binding name '_tds__RestoreSystem' for type '' */
#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (202)
#endif

/* _tds__SystemRebootResponse has binding name '_tds__SystemRebootResponse' for type '' */
#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (201)
#endif

/* _tds__SystemReboot has binding name '_tds__SystemReboot' for type '' */
#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (200)
#endif

/* _tds__UpgradeSystemFirmwareResponse has binding name '_tds__UpgradeSystemFirmwareResponse' for type '' */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (199)
#endif

/* _tds__UpgradeSystemFirmware has binding name '_tds__UpgradeSystemFirmware' for type '' */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (198)
#endif

/* _tds__SetSystemFactoryDefaultResponse has binding name '_tds__SetSystemFactoryDefaultResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (197)
#endif

/* _tds__SetSystemFactoryDefault has binding name '_tds__SetSystemFactoryDefault' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (196)
#endif

/* _tds__GetSystemDateAndTimeResponse has binding name '_tds__GetSystemDateAndTimeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (195)
#endif

/* _tds__GetSystemDateAndTime has binding name '_tds__GetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (194)
#endif

/* _tds__SetSystemDateAndTimeResponse has binding name '_tds__SetSystemDateAndTimeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (193)
#endif

/* _tds__SetSystemDateAndTime has binding name '_tds__SetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (192)
#endif

/* _tds__GetDeviceInformationResponse has binding name '_tds__GetDeviceInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (191)
#endif

/* _tds__GetDeviceInformation has binding name '_tds__GetDeviceInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (190)
#endif

/* _tds__GetServiceCapabilitiesResponse has binding name '_tds__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (189)
#endif

/* _tds__GetServiceCapabilities has binding name '_tds__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (188)
#endif

/* _tds__GetServicesResponse has binding name '_tds__GetServicesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (187)
#endif

/* _tds__GetServices has binding name '_tds__GetServices' for type '' */
#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (186)
#endif

/* tds__StorageConfiguration has binding name 'tds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (185)
#endif

/* tds__StorageConfigurationData has binding name 'tds__StorageConfigurationData' for type 'tds:StorageConfigurationData' */
#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (184)
#endif

/* tds__UserCredential has binding name 'tds__UserCredential' for type 'tds:UserCredential' */
#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (183)
#endif

/* tds__MiscCapabilities has binding name 'tds__MiscCapabilities' for type 'tds:MiscCapabilities' */
#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (182)
#endif

/* tds__SystemCapabilities has binding name 'tds__SystemCapabilities' for type 'tds:SystemCapabilities' */
#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (181)
#endif

/* tds__SecurityCapabilities has binding name 'tds__SecurityCapabilities' for type 'tds:SecurityCapabilities' */
#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (180)
#endif

/* tds__NetworkCapabilities has binding name 'tds__NetworkCapabilities' for type 'tds:NetworkCapabilities' */
#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (179)
#endif

/* tds__DeviceServiceCapabilities has binding name 'tds__DeviceServiceCapabilities' for type 'tds:DeviceServiceCapabilities' */
#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (178)
#endif

/* tds__Service has binding name 'tds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (177)
#endif

/* xsd__token__ has binding name 'xsd__token__' for type 'xsd:token' */
#ifndef SOAP_TYPE_xsd__token__
#define SOAP_TYPE_xsd__token__ (175)
#endif

/* xsd__string_ has binding name 'xsd__string_' for type 'xsd:string' */
#ifndef SOAP_TYPE_xsd__string_
#define SOAP_TYPE_xsd__string_ (173)
#endif

/* xsd__nonNegativeInteger__ has binding name 'xsd__nonNegativeInteger__' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger__
#define SOAP_TYPE_xsd__nonNegativeInteger__ (172)
#endif

/* xsd__integer__ has binding name 'xsd__integer__' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer__
#define SOAP_TYPE_xsd__integer__ (170)
#endif

/* xsd__int_ has binding name 'xsd__int_' for type 'xsd:int' */
#ifndef SOAP_TYPE_xsd__int_
#define SOAP_TYPE_xsd__int_ (168)
#endif

/* xsd__hexBinary__ has binding name 'xsd__hexBinary__' for type 'xsd:hexBinary' */
#ifndef SOAP_TYPE_xsd__hexBinary__
#define SOAP_TYPE_xsd__hexBinary__ (167)
#endif

/* xsd__float_ has binding name 'xsd__float_' for type 'xsd:float' */
#ifndef SOAP_TYPE_xsd__float_
#define SOAP_TYPE_xsd__float_ (165)
#endif

/* xsd__duration__ has binding name 'xsd__duration__' for type 'xsd:duration' */
#ifndef SOAP_TYPE_xsd__duration__
#define SOAP_TYPE_xsd__duration__ (164)
#endif

/* xsd__double_ has binding name 'xsd__double_' for type 'xsd:double' */
#ifndef SOAP_TYPE_xsd__double_
#define SOAP_TYPE_xsd__double_ (161)
#endif

/* xsd__dateTime_ has binding name 'xsd__dateTime_' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime_
#define SOAP_TYPE_xsd__dateTime_ (159)
#endif

/* xsd__boolean_ has binding name 'xsd__boolean_' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_xsd__boolean_
#define SOAP_TYPE_xsd__boolean_ (157)
#endif

/* xsd__base64Binary__ has binding name 'xsd__base64Binary__' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary__
#define SOAP_TYPE_xsd__base64Binary__ (156)
#endif

/* xsd__anyURI__ has binding name 'xsd__anyURI__' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI__
#define SOAP_TYPE_xsd__anyURI__ (155)
#endif

/* xsd__anySimpleType__ has binding name 'xsd__anySimpleType__' for type 'xsd:anySimpleType' */
#ifndef SOAP_TYPE_xsd__anySimpleType__
#define SOAP_TYPE_xsd__anySimpleType__ (153)
#endif

/* xsd__QName_ has binding name 'xsd__QName_' for type 'xsd:QName' */
#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (151)
#endif

/* xsd__NCName__ has binding name 'xsd__NCName__' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_xsd__NCName__
#define SOAP_TYPE_xsd__NCName__ (150)
#endif

/* SOAP_ENV__Fault_ has binding name 'SOAP_ENV__Fault_' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault_
#define SOAP_TYPE_SOAP_ENV__Fault_ (148)
#endif

/* SOAP_ENV__Envelope_ has binding name 'SOAP_ENV__Envelope_' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope_
#define SOAP_TYPE_SOAP_ENV__Envelope_ (147)
#endif

/* wsa5__EndpointReferenceType__ has binding name 'wsa5__EndpointReferenceType__' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType__
#define SOAP_TYPE_wsa5__EndpointReferenceType__ (146)
#endif

/* wsdd10__ResolveType_ has binding name 'wsdd10__ResolveType_' for type 'wsdd10:ResolveType' */
#ifndef SOAP_TYPE_wsdd10__ResolveType_
#define SOAP_TYPE_wsdd10__ResolveType_ (145)
#endif

/* wsdd10__ProbeType_ has binding name 'wsdd10__ProbeType_' for type 'wsdd10:ProbeType' */
#ifndef SOAP_TYPE_wsdd10__ProbeType_
#define SOAP_TYPE_wsdd10__ProbeType_ (144)
#endif

/* wsdd10__ProbeMatchesType_ has binding name 'wsdd10__ProbeMatchesType_' for type 'wsdd10:ProbeMatchesType' */
#ifndef SOAP_TYPE_wsdd10__ProbeMatchesType_
#define SOAP_TYPE_wsdd10__ProbeMatchesType_ (143)
#endif

/* wsdd10__HelloType_ has binding name 'wsdd10__HelloType_' for type 'wsdd10:HelloType' */
#ifndef SOAP_TYPE_wsdd10__HelloType_
#define SOAP_TYPE_wsdd10__HelloType_ (142)
#endif

/* wsdd10__ByeType_ has binding name 'wsdd10__ByeType_' for type 'wsdd10:ByeType' */
#ifndef SOAP_TYPE_wsdd10__ByeType_
#define SOAP_TYPE_wsdd10__ByeType_ (141)
#endif

/* xsd__hexBinary has binding name 'xsd__hexBinary' for type 'xsd:hexBinary' */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (140)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (139)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (135)
#endif

/* struct SOAP_ENV__Envelope has binding name 'SOAP_ENV__Envelope' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (137)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (134)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (131)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (129)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (127)
#endif

/* struct chan__ChannelInstanceType has binding name 'chan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (121)
#endif

/* _wsa5__ProblemAction has binding name '_wsa5__ProblemAction' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (119)
#endif

/* _wsa5__FaultTo has binding name '_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (112)
#endif

/* _wsa5__From has binding name '_wsa5__From' for type '' */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (111)
#endif

/* _wsa5__ReplyTo has binding name '_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (110)
#endif

/* _wsa5__RelatesTo has binding name '_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (109)
#endif

/* _wsa5__Metadata has binding name '_wsa5__Metadata' for type '' */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (107)
#endif

/* _wsa5__ReferenceParameters has binding name '_wsa5__ReferenceParameters' for type '' */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (106)
#endif

/* _wsa5__EndpointReference has binding name '_wsa5__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (105)
#endif

/* struct wsa5__ProblemActionType has binding name 'wsa5__ProblemActionType' for type 'wsa5:ProblemActionType' */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (97)
#endif

/* struct wsa5__RelatesToType has binding name 'wsa5__RelatesToType' for type 'wsa5:RelatesToType' */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (96)
#endif

/* struct wsa5__MetadataType has binding name 'wsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (95)
#endif

/* struct wsa5__ReferenceParametersType has binding name 'wsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (94)
#endif

/* struct wsa5__EndpointReferenceType has binding name 'wsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (93)
#endif

/* struct _xop__Include has binding name '_xop__Include' for type '' */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (90)
#endif

/* _wsdd__AppSequence has binding name '_wsdd__AppSequence' for type '' */
#ifndef SOAP_TYPE__wsdd__AppSequence
#define SOAP_TYPE__wsdd__AppSequence (68)
#endif

/* _wsdd__Sig has binding name '_wsdd__Sig' for type '' */
#ifndef SOAP_TYPE__wsdd__Sig
#define SOAP_TYPE__wsdd__Sig (67)
#endif

/* _wsdd__Security has binding name '_wsdd__Security' for type '' */
#ifndef SOAP_TYPE__wsdd__Security
#define SOAP_TYPE__wsdd__Security (66)
#endif

/* _wsdd__Scopes has binding name '_wsdd__Scopes' for type '' */
#ifndef SOAP_TYPE__wsdd__Scopes
#define SOAP_TYPE__wsdd__Scopes (62)
#endif

/* _wsdd__ResolveMatches has binding name '_wsdd__ResolveMatches' for type '' */
#ifndef SOAP_TYPE__wsdd__ResolveMatches
#define SOAP_TYPE__wsdd__ResolveMatches (60)
#endif

/* _wsdd__Resolve has binding name '_wsdd__Resolve' for type '' */
#ifndef SOAP_TYPE__wsdd__Resolve
#define SOAP_TYPE__wsdd__Resolve (59)
#endif

/* _wsdd__ProbeMatches has binding name '_wsdd__ProbeMatches' for type '' */
#ifndef SOAP_TYPE__wsdd__ProbeMatches
#define SOAP_TYPE__wsdd__ProbeMatches (58)
#endif

/* _wsdd__Probe has binding name '_wsdd__Probe' for type '' */
#ifndef SOAP_TYPE__wsdd__Probe
#define SOAP_TYPE__wsdd__Probe (57)
#endif

/* _wsdd__Bye has binding name '_wsdd__Bye' for type '' */
#ifndef SOAP_TYPE__wsdd__Bye
#define SOAP_TYPE__wsdd__Bye (56)
#endif

/* _wsdd__Hello has binding name '_wsdd__Hello' for type '' */
#ifndef SOAP_TYPE__wsdd__Hello
#define SOAP_TYPE__wsdd__Hello (55)
#endif

/* struct wsdd__AppSequenceType has binding name 'wsdd__AppSequenceType' for type 'wsdd:AppSequenceType' */
#ifndef SOAP_TYPE_wsdd__AppSequenceType
#define SOAP_TYPE_wsdd__AppSequenceType (45)
#endif

/* struct wsdd__SigType has binding name 'wsdd__SigType' for type 'wsdd:SigType' */
#ifndef SOAP_TYPE_wsdd__SigType
#define SOAP_TYPE_wsdd__SigType (44)
#endif

/* struct wsdd__SecurityType has binding name 'wsdd__SecurityType' for type 'wsdd:SecurityType' */
#ifndef SOAP_TYPE_wsdd__SecurityType
#define SOAP_TYPE_wsdd__SecurityType (43)
#endif

/* struct wsdd__ScopesType has binding name 'wsdd__ScopesType' for type 'wsdd:ScopesType' */
#ifndef SOAP_TYPE_wsdd__ScopesType
#define SOAP_TYPE_wsdd__ScopesType (42)
#endif

/* struct wsdd__ResolveMatchType has binding name 'wsdd__ResolveMatchType' for type 'wsdd:ResolveMatchType' */
#ifndef SOAP_TYPE_wsdd__ResolveMatchType
#define SOAP_TYPE_wsdd__ResolveMatchType (41)
#endif

/* struct wsdd__ResolveMatchesType has binding name 'wsdd__ResolveMatchesType' for type 'wsdd:ResolveMatchesType' */
#ifndef SOAP_TYPE_wsdd__ResolveMatchesType
#define SOAP_TYPE_wsdd__ResolveMatchesType (40)
#endif

/* struct wsdd__ResolveType has binding name 'wsdd__ResolveType' for type 'wsdd:ResolveType' */
#ifndef SOAP_TYPE_wsdd__ResolveType
#define SOAP_TYPE_wsdd__ResolveType (39)
#endif

/* struct wsdd__ProbeMatchType has binding name 'wsdd__ProbeMatchType' for type 'wsdd:ProbeMatchType' */
#ifndef SOAP_TYPE_wsdd__ProbeMatchType
#define SOAP_TYPE_wsdd__ProbeMatchType (38)
#endif

/* struct wsdd__ProbeMatchesType has binding name 'wsdd__ProbeMatchesType' for type 'wsdd:ProbeMatchesType' */
#ifndef SOAP_TYPE_wsdd__ProbeMatchesType
#define SOAP_TYPE_wsdd__ProbeMatchesType (37)
#endif

/* struct wsdd__ProbeType has binding name 'wsdd__ProbeType' for type 'wsdd:ProbeType' */
#ifndef SOAP_TYPE_wsdd__ProbeType
#define SOAP_TYPE_wsdd__ProbeType (36)
#endif

/* struct wsdd__ByeType has binding name 'wsdd__ByeType' for type 'wsdd:ByeType' */
#ifndef SOAP_TYPE_wsdd__ByeType
#define SOAP_TYPE_wsdd__ByeType (35)
#endif

/* struct wsdd__HelloType has binding name 'wsdd__HelloType' for type 'wsdd:HelloType' */
#ifndef SOAP_TYPE_wsdd__HelloType
#define SOAP_TYPE_wsdd__HelloType (34)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
#endif

/* _wsa__FaultTo has binding name '_wsa__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (26)
#endif

/* _wsa__ReplyTo has binding name '_wsa__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (25)
#endif

/* _wsa__From has binding name '_wsa__From' for type '' */
#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (24)
#endif

/* _wsa__RelatesTo has binding name '_wsa__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (21)
#endif

/* _wsa__EndpointReference has binding name '_wsa__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (19)
#endif

/* struct wsa__Relationship has binding name 'wsa__Relationship' for type 'wsa:Relationship' */
#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (11)
#endif

/* struct wsa__ServiceNameType has binding name 'wsa__ServiceNameType' for type 'wsa:ServiceNameType' */
#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (10)
#endif

/* struct wsa__ReferenceParametersType has binding name 'wsa__ReferenceParametersType' for type 'wsa:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (9)
#endif

/* struct wsa__ReferencePropertiesType has binding name 'wsa__ReferencePropertiesType' for type 'wsa:ReferencePropertiesType' */
#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (8)
#endif

/* struct wsa__EndpointReferenceType has binding name 'wsa__EndpointReferenceType' for type 'wsa:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (7)
#endif

/* _trt__DeleteOSD * has binding name 'PointerTo_trt__DeleteOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__DeleteOSD
#define SOAP_TYPE_PointerTo_trt__DeleteOSD (3227)
#endif

/* _trt__CreateOSD * has binding name 'PointerTo_trt__CreateOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__CreateOSD
#define SOAP_TYPE_PointerTo_trt__CreateOSD (3223)
#endif

/* _trt__SetOSD * has binding name 'PointerTo_trt__SetOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetOSD
#define SOAP_TYPE_PointerTo_trt__SetOSD (3219)
#endif

/* _trt__GetOSDOptions * has binding name 'PointerTo_trt__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSDOptions
#define SOAP_TYPE_PointerTo_trt__GetOSDOptions (3215)
#endif

/* _trt__GetOSD * has binding name 'PointerTo_trt__GetOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSD
#define SOAP_TYPE_PointerTo_trt__GetOSD (3211)
#endif

/* _trt__GetOSDs * has binding name 'PointerTo_trt__GetOSDs' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetOSDs
#define SOAP_TYPE_PointerTo_trt__GetOSDs (3207)
#endif

/* _trt__SetVideoSourceMode * has binding name 'PointerTo_trt__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceMode
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceMode (3203)
#endif

/* _trt__GetVideoSourceModes * has binding name 'PointerTo_trt__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceModes
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceModes (3199)
#endif

/* _trt__GetSnapshotUri * has binding name 'PointerTo_trt__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetSnapshotUri
#define SOAP_TYPE_PointerTo_trt__GetSnapshotUri (3195)
#endif

/* _trt__SetSynchronizationPoint * has binding name 'PointerTo_trt__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_trt__SetSynchronizationPoint (3191)
#endif

/* _trt__StopMulticastStreaming * has binding name 'PointerTo_trt__StopMulticastStreaming' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__StopMulticastStreaming
#define SOAP_TYPE_PointerTo_trt__StopMulticastStreaming (3187)
#endif

/* _trt__StartMulticastStreaming * has binding name 'PointerTo_trt__StartMulticastStreaming' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__StartMulticastStreaming
#define SOAP_TYPE_PointerTo_trt__StartMulticastStreaming (3183)
#endif

/* _trt__GetStreamUri * has binding name 'PointerTo_trt__GetStreamUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetStreamUri
#define SOAP_TYPE_PointerTo_trt__GetStreamUri (3179)
#endif

/* _trt__GetGuaranteedNumberOfVideoEncoderInstances * has binding name 'PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE_PointerTo_trt__GetGuaranteedNumberOfVideoEncoderInstances (3175)
#endif

/* _trt__GetAudioDecoderConfigurationOptions * has binding name 'PointerTo_trt__GetAudioDecoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurationOptions (3171)
#endif

/* _trt__GetAudioOutputConfigurationOptions * has binding name 'PointerTo_trt__GetAudioOutputConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurationOptions (3167)
#endif

/* _trt__GetMetadataConfigurationOptions * has binding name 'PointerTo_trt__GetMetadataConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurationOptions (3163)
#endif

/* _trt__GetAudioEncoderConfigurationOptions * has binding name 'PointerTo_trt__GetAudioEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurationOptions (3159)
#endif

/* _trt__GetAudioSourceConfigurationOptions * has binding name 'PointerTo_trt__GetAudioSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurationOptions (3155)
#endif

/* _trt__GetVideoEncoderConfigurationOptions * has binding name 'PointerTo_trt__GetVideoEncoderConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurationOptions (3151)
#endif

/* _trt__GetVideoSourceConfigurationOptions * has binding name 'PointerTo_trt__GetVideoSourceConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurationOptions (3147)
#endif

/* _trt__SetAudioDecoderConfiguration * has binding name 'PointerTo_trt__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioDecoderConfiguration (3143)
#endif

/* _trt__SetAudioOutputConfiguration * has binding name 'PointerTo_trt__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioOutputConfiguration (3139)
#endif

/* _trt__SetMetadataConfiguration * has binding name 'PointerTo_trt__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__SetMetadataConfiguration (3135)
#endif

/* _trt__SetVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__SetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoAnalyticsConfiguration (3131)
#endif

/* _trt__SetAudioEncoderConfiguration * has binding name 'PointerTo_trt__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioEncoderConfiguration (3127)
#endif

/* _trt__SetAudioSourceConfiguration * has binding name 'PointerTo_trt__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__SetAudioSourceConfiguration (3123)
#endif

/* _trt__SetVideoEncoderConfiguration * has binding name 'PointerTo_trt__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoEncoderConfiguration (3119)
#endif

/* _trt__SetVideoSourceConfiguration * has binding name 'PointerTo_trt__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__SetVideoSourceConfiguration (3115)
#endif

/* _trt__GetCompatibleAudioDecoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioDecoderConfigurations (3111)
#endif

/* _trt__GetCompatibleAudioOutputConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioOutputConfigurations (3107)
#endif

/* _trt__GetCompatibleMetadataConfigurations * has binding name 'PointerTo_trt__GetCompatibleMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleMetadataConfigurations (3103)
#endif

/* _trt__GetCompatibleVideoAnalyticsConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoAnalyticsConfigurations (3099)
#endif

/* _trt__GetCompatibleAudioSourceConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioSourceConfigurations (3095)
#endif

/* _trt__GetCompatibleAudioEncoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleAudioEncoderConfigurations (3091)
#endif

/* _trt__GetCompatibleVideoSourceConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoSourceConfigurations (3087)
#endif

/* _trt__GetCompatibleVideoEncoderConfigurations * has binding name 'PointerTo_trt__GetCompatibleVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetCompatibleVideoEncoderConfigurations (3083)
#endif

/* _trt__GetAudioDecoderConfiguration * has binding name 'PointerTo_trt__GetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfiguration (3079)
#endif

/* _trt__GetAudioOutputConfiguration * has binding name 'PointerTo_trt__GetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfiguration (3075)
#endif

/* _trt__GetMetadataConfiguration * has binding name 'PointerTo_trt__GetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfiguration (3071)
#endif

/* _trt__GetVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__GetVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfiguration (3067)
#endif

/* _trt__GetAudioEncoderConfiguration * has binding name 'PointerTo_trt__GetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfiguration (3063)
#endif

/* _trt__GetAudioSourceConfiguration * has binding name 'PointerTo_trt__GetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfiguration (3059)
#endif

/* _trt__GetVideoEncoderConfiguration * has binding name 'PointerTo_trt__GetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfiguration (3055)
#endif

/* _trt__GetVideoSourceConfiguration * has binding name 'PointerTo_trt__GetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfiguration (3051)
#endif

/* _trt__GetAudioDecoderConfigurations * has binding name 'PointerTo_trt__GetAudioDecoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioDecoderConfigurations (3047)
#endif

/* _trt__GetAudioOutputConfigurations * has binding name 'PointerTo_trt__GetAudioOutputConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputConfigurations (3043)
#endif

/* _trt__GetMetadataConfigurations * has binding name 'PointerTo_trt__GetMetadataConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations
#define SOAP_TYPE_PointerTo_trt__GetMetadataConfigurations (3039)
#endif

/* _trt__GetVideoAnalyticsConfigurations * has binding name 'PointerTo_trt__GetVideoAnalyticsConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoAnalyticsConfigurations (3035)
#endif

/* _trt__GetAudioEncoderConfigurations * has binding name 'PointerTo_trt__GetAudioEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioEncoderConfigurations (3031)
#endif

/* _trt__GetAudioSourceConfigurations * has binding name 'PointerTo_trt__GetAudioSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetAudioSourceConfigurations (3027)
#endif

/* _trt__GetVideoEncoderConfigurations * has binding name 'PointerTo_trt__GetVideoEncoderConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoEncoderConfigurations (3023)
#endif

/* _trt__GetVideoSourceConfigurations * has binding name 'PointerTo_trt__GetVideoSourceConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations
#define SOAP_TYPE_PointerTo_trt__GetVideoSourceConfigurations (3019)
#endif

/* _trt__DeleteProfile * has binding name 'PointerTo_trt__DeleteProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__DeleteProfile
#define SOAP_TYPE_PointerTo_trt__DeleteProfile (3015)
#endif

/* _trt__RemoveAudioDecoderConfiguration * has binding name 'PointerTo_trt__RemoveAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioDecoderConfiguration (3011)
#endif

/* _trt__RemoveAudioOutputConfiguration * has binding name 'PointerTo_trt__RemoveAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioOutputConfiguration (3007)
#endif

/* _trt__RemoveMetadataConfiguration * has binding name 'PointerTo_trt__RemoveMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveMetadataConfiguration (3003)
#endif

/* _trt__RemoveVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__RemoveVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoAnalyticsConfiguration (2999)
#endif

/* _trt__RemovePTZConfiguration * has binding name 'PointerTo_trt__RemovePTZConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration
#define SOAP_TYPE_PointerTo_trt__RemovePTZConfiguration (2995)
#endif

/* _trt__RemoveAudioSourceConfiguration * has binding name 'PointerTo_trt__RemoveAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioSourceConfiguration (2991)
#endif

/* _trt__RemoveAudioEncoderConfiguration * has binding name 'PointerTo_trt__RemoveAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveAudioEncoderConfiguration (2987)
#endif

/* _trt__RemoveVideoSourceConfiguration * has binding name 'PointerTo_trt__RemoveVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoSourceConfiguration (2983)
#endif

/* _trt__RemoveVideoEncoderConfiguration * has binding name 'PointerTo_trt__RemoveVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__RemoveVideoEncoderConfiguration (2979)
#endif

/* _trt__AddAudioDecoderConfiguration * has binding name 'PointerTo_trt__AddAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioDecoderConfiguration (2975)
#endif

/* _trt__AddAudioOutputConfiguration * has binding name 'PointerTo_trt__AddAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioOutputConfiguration (2971)
#endif

/* _trt__AddMetadataConfiguration * has binding name 'PointerTo_trt__AddMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration
#define SOAP_TYPE_PointerTo_trt__AddMetadataConfiguration (2967)
#endif

/* _trt__AddVideoAnalyticsConfiguration * has binding name 'PointerTo_trt__AddVideoAnalyticsConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoAnalyticsConfiguration (2963)
#endif

/* _trt__AddPTZConfiguration * has binding name 'PointerTo_trt__AddPTZConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddPTZConfiguration
#define SOAP_TYPE_PointerTo_trt__AddPTZConfiguration (2959)
#endif

/* _trt__AddAudioSourceConfiguration * has binding name 'PointerTo_trt__AddAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioSourceConfiguration (2955)
#endif

/* _trt__AddAudioEncoderConfiguration * has binding name 'PointerTo_trt__AddAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddAudioEncoderConfiguration (2951)
#endif

/* _trt__AddVideoSourceConfiguration * has binding name 'PointerTo_trt__AddVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoSourceConfiguration (2947)
#endif

/* _trt__AddVideoEncoderConfiguration * has binding name 'PointerTo_trt__AddVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_trt__AddVideoEncoderConfiguration (2943)
#endif

/* _trt__GetProfiles * has binding name 'PointerTo_trt__GetProfiles' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetProfiles
#define SOAP_TYPE_PointerTo_trt__GetProfiles (2939)
#endif

/* _trt__GetProfile * has binding name 'PointerTo_trt__GetProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetProfile
#define SOAP_TYPE_PointerTo_trt__GetProfile (2935)
#endif

/* _trt__CreateProfile * has binding name 'PointerTo_trt__CreateProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__CreateProfile
#define SOAP_TYPE_PointerTo_trt__CreateProfile (2931)
#endif

/* _trt__GetAudioOutputs * has binding name 'PointerTo_trt__GetAudioOutputs' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioOutputs
#define SOAP_TYPE_PointerTo_trt__GetAudioOutputs (2927)
#endif

/* _trt__GetAudioSources * has binding name 'PointerTo_trt__GetAudioSources' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetAudioSources
#define SOAP_TYPE_PointerTo_trt__GetAudioSources (2923)
#endif

/* _trt__GetVideoSources * has binding name 'PointerTo_trt__GetVideoSources' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetVideoSources
#define SOAP_TYPE_PointerTo_trt__GetVideoSources (2919)
#endif

/* _trt__GetServiceCapabilities * has binding name 'PointerTo_trt__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_trt__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_trt__GetServiceCapabilities (2915)
#endif

/* _tr2__DeleteMask * has binding name 'PointerTo_tr2__DeleteMask' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__DeleteMask
#define SOAP_TYPE_PointerTo_tr2__DeleteMask (2911)
#endif

/* _tr2__CreateMask * has binding name 'PointerTo_tr2__CreateMask' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__CreateMask
#define SOAP_TYPE_PointerTo_tr2__CreateMask (2907)
#endif

/* _tr2__SetMask * has binding name 'PointerTo_tr2__SetMask' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetMask
#define SOAP_TYPE_PointerTo_tr2__SetMask (2903)
#endif

/* _tr2__GetMaskOptions * has binding name 'PointerTo_tr2__GetMaskOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetMaskOptions
#define SOAP_TYPE_PointerTo_tr2__GetMaskOptions (2899)
#endif

/* _tr2__GetMasks * has binding name 'PointerTo_tr2__GetMasks' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetMasks
#define SOAP_TYPE_PointerTo_tr2__GetMasks (2895)
#endif

/* _tr2__DeleteOSD * has binding name 'PointerTo_tr2__DeleteOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__DeleteOSD
#define SOAP_TYPE_PointerTo_tr2__DeleteOSD (2891)
#endif

/* _tr2__CreateOSD * has binding name 'PointerTo_tr2__CreateOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__CreateOSD
#define SOAP_TYPE_PointerTo_tr2__CreateOSD (2887)
#endif

/* _tr2__SetOSD * has binding name 'PointerTo_tr2__SetOSD' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetOSD
#define SOAP_TYPE_PointerTo_tr2__SetOSD (2883)
#endif

/* _tr2__GetOSDOptions * has binding name 'PointerTo_tr2__GetOSDOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetOSDOptions
#define SOAP_TYPE_PointerTo_tr2__GetOSDOptions (2879)
#endif

/* _tr2__GetOSDs * has binding name 'PointerTo_tr2__GetOSDs' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetOSDs
#define SOAP_TYPE_PointerTo_tr2__GetOSDs (2875)
#endif

/* _tr2__SetVideoSourceMode * has binding name 'PointerTo_tr2__SetVideoSourceMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetVideoSourceMode
#define SOAP_TYPE_PointerTo_tr2__SetVideoSourceMode (2871)
#endif

/* _tr2__GetVideoSourceModes * has binding name 'PointerTo_tr2__GetVideoSourceModes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetVideoSourceModes
#define SOAP_TYPE_PointerTo_tr2__GetVideoSourceModes (2867)
#endif

/* _tr2__GetSnapshotUri * has binding name 'PointerTo_tr2__GetSnapshotUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetSnapshotUri
#define SOAP_TYPE_PointerTo_tr2__GetSnapshotUri (2863)
#endif

/* _tr2__SetSynchronizationPoint * has binding name 'PointerTo_tr2__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_tr2__SetSynchronizationPoint (2859)
#endif

/* tr2__StartStopMulticastStreaming * has binding name 'PointerTotr2__StartStopMulticastStreaming' for type 'tr2:StartStopMulticastStreaming' */
#ifndef SOAP_TYPE_PointerTotr2__StartStopMulticastStreaming
#define SOAP_TYPE_PointerTotr2__StartStopMulticastStreaming (2852)
#endif

/* _tr2__GetStreamUri * has binding name 'PointerTo_tr2__GetStreamUri' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetStreamUri
#define SOAP_TYPE_PointerTo_tr2__GetStreamUri (2848)
#endif

/* _tr2__GetVideoEncoderInstances * has binding name 'PointerTo_tr2__GetVideoEncoderInstances' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetVideoEncoderInstances
#define SOAP_TYPE_PointerTo_tr2__GetVideoEncoderInstances (2844)
#endif

/* _tr2__SetAudioDecoderConfiguration * has binding name 'PointerTo_tr2__SetAudioDecoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetAudioDecoderConfiguration (2819)
#endif

/* _tr2__SetAudioOutputConfiguration * has binding name 'PointerTo_tr2__SetAudioOutputConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetAudioOutputConfiguration (2815)
#endif

/* _tr2__SetMetadataConfiguration * has binding name 'PointerTo_tr2__SetMetadataConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetMetadataConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetMetadataConfiguration (2811)
#endif

/* _tr2__SetAudioEncoderConfiguration * has binding name 'PointerTo_tr2__SetAudioEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetAudioEncoderConfiguration (2807)
#endif

/* _tr2__SetAudioSourceConfiguration * has binding name 'PointerTo_tr2__SetAudioSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetAudioSourceConfiguration (2803)
#endif

/* _tr2__SetVideoEncoderConfiguration * has binding name 'PointerTo_tr2__SetVideoEncoderConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetVideoEncoderConfiguration (2799)
#endif

/* _tr2__SetVideoSourceConfiguration * has binding name 'PointerTo_tr2__SetVideoSourceConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__SetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_tr2__SetVideoSourceConfiguration (2794)
#endif

/* tr2__GetConfiguration * has binding name 'PointerTotr2__GetConfiguration' for type 'tr2:GetConfiguration' */
#ifndef SOAP_TYPE_PointerTotr2__GetConfiguration
#define SOAP_TYPE_PointerTotr2__GetConfiguration (2769)
#endif

/* _tr2__DeleteProfile * has binding name 'PointerTo_tr2__DeleteProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__DeleteProfile
#define SOAP_TYPE_PointerTo_tr2__DeleteProfile (2765)
#endif

/* _tr2__RemoveConfiguration * has binding name 'PointerTo_tr2__RemoveConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__RemoveConfiguration
#define SOAP_TYPE_PointerTo_tr2__RemoveConfiguration (2761)
#endif

/* _tr2__AddConfiguration * has binding name 'PointerTo_tr2__AddConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__AddConfiguration
#define SOAP_TYPE_PointerTo_tr2__AddConfiguration (2757)
#endif

/* _tr2__GetProfiles * has binding name 'PointerTo_tr2__GetProfiles' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetProfiles
#define SOAP_TYPE_PointerTo_tr2__GetProfiles (2753)
#endif

/* _tr2__CreateProfile * has binding name 'PointerTo_tr2__CreateProfile' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__CreateProfile
#define SOAP_TYPE_PointerTo_tr2__CreateProfile (2749)
#endif

/* _tr2__GetServiceCapabilities * has binding name 'PointerTo_tr2__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tr2__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tr2__GetServiceCapabilities (2745)
#endif

/* _tptz__MoveAndStartTracking * has binding name 'PointerTo_tptz__MoveAndStartTracking' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking
#define SOAP_TYPE_PointerTo_tptz__MoveAndStartTracking (2741)
#endif

/* _tptz__GetCompatibleConfigurations * has binding name 'PointerTo_tptz__GetCompatibleConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations
#define SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations (2737)
#endif

/* _tptz__RemovePresetTour * has binding name 'PointerTo_tptz__RemovePresetTour' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__RemovePresetTour
#define SOAP_TYPE_PointerTo_tptz__RemovePresetTour (2733)
#endif

/* _tptz__OperatePresetTour * has binding name 'PointerTo_tptz__OperatePresetTour' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__OperatePresetTour
#define SOAP_TYPE_PointerTo_tptz__OperatePresetTour (2729)
#endif

/* _tptz__ModifyPresetTour * has binding name 'PointerTo_tptz__ModifyPresetTour' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__ModifyPresetTour
#define SOAP_TYPE_PointerTo_tptz__ModifyPresetTour (2725)
#endif

/* _tptz__CreatePresetTour * has binding name 'PointerTo_tptz__CreatePresetTour' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__CreatePresetTour
#define SOAP_TYPE_PointerTo_tptz__CreatePresetTour (2721)
#endif

/* _tptz__GetPresetTourOptions * has binding name 'PointerTo_tptz__GetPresetTourOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions
#define SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions (2717)
#endif

/* _tptz__GetPresetTour * has binding name 'PointerTo_tptz__GetPresetTour' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTour
#define SOAP_TYPE_PointerTo_tptz__GetPresetTour (2713)
#endif

/* _tptz__GetPresetTours * has binding name 'PointerTo_tptz__GetPresetTours' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTours
#define SOAP_TYPE_PointerTo_tptz__GetPresetTours (2709)
#endif

/* _tptz__Stop * has binding name 'PointerTo_tptz__Stop' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__Stop
#define SOAP_TYPE_PointerTo_tptz__Stop (2705)
#endif

/* _tptz__GeoMove * has binding name 'PointerTo_tptz__GeoMove' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GeoMove
#define SOAP_TYPE_PointerTo_tptz__GeoMove (2701)
#endif

/* _tptz__AbsoluteMove * has binding name 'PointerTo_tptz__AbsoluteMove' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__AbsoluteMove
#define SOAP_TYPE_PointerTo_tptz__AbsoluteMove (2697)
#endif

/* _tptz__SendAuxiliaryCommand * has binding name 'PointerTo_tptz__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand
#define SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand (2693)
#endif

/* _tptz__RelativeMove * has binding name 'PointerTo_tptz__RelativeMove' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__RelativeMove
#define SOAP_TYPE_PointerTo_tptz__RelativeMove (2689)
#endif

/* _tptz__ContinuousMove * has binding name 'PointerTo_tptz__ContinuousMove' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__ContinuousMove
#define SOAP_TYPE_PointerTo_tptz__ContinuousMove (2685)
#endif

/* _tptz__SetHomePosition * has binding name 'PointerTo_tptz__SetHomePosition' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__SetHomePosition
#define SOAP_TYPE_PointerTo_tptz__SetHomePosition (2681)
#endif

/* _tptz__GotoHomePosition * has binding name 'PointerTo_tptz__GotoHomePosition' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GotoHomePosition
#define SOAP_TYPE_PointerTo_tptz__GotoHomePosition (2677)
#endif

/* _tptz__GetConfigurationOptions * has binding name 'PointerTo_tptz__GetConfigurationOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions
#define SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions (2673)
#endif

/* _tptz__SetConfiguration * has binding name 'PointerTo_tptz__SetConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__SetConfiguration
#define SOAP_TYPE_PointerTo_tptz__SetConfiguration (2669)
#endif

/* _tptz__GetNode * has binding name 'PointerTo_tptz__GetNode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetNode
#define SOAP_TYPE_PointerTo_tptz__GetNode (2665)
#endif

/* _tptz__GetNodes * has binding name 'PointerTo_tptz__GetNodes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetNodes
#define SOAP_TYPE_PointerTo_tptz__GetNodes (2661)
#endif

/* _tptz__GetConfiguration * has binding name 'PointerTo_tptz__GetConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetConfiguration
#define SOAP_TYPE_PointerTo_tptz__GetConfiguration (2657)
#endif

/* _tptz__GetStatus * has binding name 'PointerTo_tptz__GetStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetStatus
#define SOAP_TYPE_PointerTo_tptz__GetStatus (2653)
#endif

/* _tptz__GotoPreset * has binding name 'PointerTo_tptz__GotoPreset' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GotoPreset
#define SOAP_TYPE_PointerTo_tptz__GotoPreset (2649)
#endif

/* _tptz__RemovePreset * has binding name 'PointerTo_tptz__RemovePreset' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__RemovePreset
#define SOAP_TYPE_PointerTo_tptz__RemovePreset (2645)
#endif

/* _tptz__SetPreset * has binding name 'PointerTo_tptz__SetPreset' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__SetPreset
#define SOAP_TYPE_PointerTo_tptz__SetPreset (2641)
#endif

/* _tptz__GetPresets * has binding name 'PointerTo_tptz__GetPresets' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetPresets
#define SOAP_TYPE_PointerTo_tptz__GetPresets (2637)
#endif

/* _tptz__GetConfigurations * has binding name 'PointerTo_tptz__GetConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurations
#define SOAP_TYPE_PointerTo_tptz__GetConfigurations (2633)
#endif

/* _tptz__GetServiceCapabilities * has binding name 'PointerTo_tptz__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities (2629)
#endif

/* _timg__SetCurrentPreset * has binding name 'PointerTo_timg__SetCurrentPreset' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__SetCurrentPreset
#define SOAP_TYPE_PointerTo_timg__SetCurrentPreset (2625)
#endif

/* _timg__GetCurrentPreset * has binding name 'PointerTo_timg__GetCurrentPreset' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetCurrentPreset
#define SOAP_TYPE_PointerTo_timg__GetCurrentPreset (2621)
#endif

/* _timg__GetPresets * has binding name 'PointerTo_timg__GetPresets' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetPresets
#define SOAP_TYPE_PointerTo_timg__GetPresets (2617)
#endif

/* _timg__GetMoveOptions * has binding name 'PointerTo_timg__GetMoveOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetMoveOptions
#define SOAP_TYPE_PointerTo_timg__GetMoveOptions (2613)
#endif

/* _timg__GetStatus * has binding name 'PointerTo_timg__GetStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetStatus
#define SOAP_TYPE_PointerTo_timg__GetStatus (2609)
#endif

/* _timg__Stop * has binding name 'PointerTo_timg__Stop' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__Stop
#define SOAP_TYPE_PointerTo_timg__Stop (2605)
#endif

/* _timg__Move * has binding name 'PointerTo_timg__Move' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__Move
#define SOAP_TYPE_PointerTo_timg__Move (2601)
#endif

/* _timg__GetOptions * has binding name 'PointerTo_timg__GetOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetOptions
#define SOAP_TYPE_PointerTo_timg__GetOptions (2597)
#endif

/* _timg__SetImagingSettings * has binding name 'PointerTo_timg__SetImagingSettings' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__SetImagingSettings
#define SOAP_TYPE_PointerTo_timg__SetImagingSettings (2593)
#endif

/* _timg__GetImagingSettings * has binding name 'PointerTo_timg__GetImagingSettings' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetImagingSettings
#define SOAP_TYPE_PointerTo_timg__GetImagingSettings (2589)
#endif

/* _timg__GetServiceCapabilities * has binding name 'PointerTo_timg__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_timg__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_timg__GetServiceCapabilities (2585)
#endif

/* _wsnt__ResumeSubscription * has binding name 'PointerTo_wsnt__ResumeSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__ResumeSubscription
#define SOAP_TYPE_PointerTo_wsnt__ResumeSubscription (2581)
#endif

/* _wsnt__PauseSubscription * has binding name 'PointerTo_wsnt__PauseSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__PauseSubscription
#define SOAP_TYPE_PointerTo_wsnt__PauseSubscription (2577)
#endif

/* _wsnt__CreatePullPoint * has binding name 'PointerTo_wsnt__CreatePullPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__CreatePullPoint
#define SOAP_TYPE_PointerTo_wsnt__CreatePullPoint (2569)
#endif

/* _wsnt__DestroyPullPoint * has binding name 'PointerTo_wsnt__DestroyPullPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint
#define SOAP_TYPE_PointerTo_wsnt__DestroyPullPoint (2563)
#endif

/* _wsnt__GetMessages * has binding name 'PointerTo_wsnt__GetMessages' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__GetMessages
#define SOAP_TYPE_PointerTo_wsnt__GetMessages (2559)
#endif

/* _wsnt__Notify * has binding name 'PointerTo_wsnt__Notify' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Notify
#define SOAP_TYPE_PointerTo_wsnt__Notify (2556)
#endif

/* _wsnt__GetCurrentMessage * has binding name 'PointerTo_wsnt__GetCurrentMessage' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage
#define SOAP_TYPE_PointerTo_wsnt__GetCurrentMessage (2552)
#endif

/* _wsnt__Subscribe * has binding name 'PointerTo_wsnt__Subscribe' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe
#define SOAP_TYPE_PointerTo_wsnt__Subscribe (2548)
#endif

/* _wsnt__Renew * has binding name 'PointerTo_wsnt__Renew' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Renew
#define SOAP_TYPE_PointerTo_wsnt__Renew (2542)
#endif

/* _tev__GetEventBrokers * has binding name 'PointerTo_tev__GetEventBrokers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__GetEventBrokers
#define SOAP_TYPE_PointerTo_tev__GetEventBrokers (2538)
#endif

/* _tev__DeleteEventBroker * has binding name 'PointerTo_tev__DeleteEventBroker' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__DeleteEventBroker
#define SOAP_TYPE_PointerTo_tev__DeleteEventBroker (2534)
#endif

/* _tev__AddEventBroker * has binding name 'PointerTo_tev__AddEventBroker' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__AddEventBroker
#define SOAP_TYPE_PointerTo_tev__AddEventBroker (2530)
#endif

/* _tev__GetEventProperties * has binding name 'PointerTo_tev__GetEventProperties' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__GetEventProperties
#define SOAP_TYPE_PointerTo_tev__GetEventProperties (2526)
#endif

/* _tev__CreatePullPointSubscription * has binding name 'PointerTo_tev__CreatePullPointSubscription' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription (2522)
#endif

/* _tev__GetServiceCapabilities * has binding name 'PointerTo_tev__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tev__GetServiceCapabilities (2518)
#endif

/* _wsnt__Unsubscribe * has binding name 'PointerTo_wsnt__Unsubscribe' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Unsubscribe
#define SOAP_TYPE_PointerTo_wsnt__Unsubscribe (2514)
#endif

/* _tev__SetSynchronizationPoint * has binding name 'PointerTo_tev__SetSynchronizationPoint' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_tev__SetSynchronizationPoint (2510)
#endif

/* _tev__Seek * has binding name 'PointerTo_tev__Seek' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__Seek
#define SOAP_TYPE_PointerTo_tev__Seek (2506)
#endif

/* _tev__PullMessages * has binding name 'PointerTo_tev__PullMessages' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__PullMessages
#define SOAP_TYPE_PointerTo_tev__PullMessages (2502)
#endif

/* _tds__DeleteGeoLocation * has binding name 'PointerTo_tds__DeleteGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteGeoLocation
#define SOAP_TYPE_PointerTo_tds__DeleteGeoLocation (2498)
#endif

/* _tds__SetGeoLocation * has binding name 'PointerTo_tds__SetGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetGeoLocation
#define SOAP_TYPE_PointerTo_tds__SetGeoLocation (2494)
#endif

/* _tds__GetGeoLocation * has binding name 'PointerTo_tds__GetGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetGeoLocation
#define SOAP_TYPE_PointerTo_tds__GetGeoLocation (2490)
#endif

/* _tds__DeleteStorageConfiguration * has binding name 'PointerTo_tds__DeleteStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration (2486)
#endif

/* _tds__SetStorageConfiguration * has binding name 'PointerTo_tds__SetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__SetStorageConfiguration (2482)
#endif

/* _tds__GetStorageConfiguration * has binding name 'PointerTo_tds__GetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__GetStorageConfiguration (2478)
#endif

/* _tds__CreateStorageConfiguration * has binding name 'PointerTo_tds__CreateStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration (2474)
#endif

/* _tds__GetStorageConfigurations * has binding name 'PointerTo_tds__GetStorageConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfigurations
#define SOAP_TYPE_PointerTo_tds__GetStorageConfigurations (2470)
#endif

/* _tds__StartSystemRestore * has binding name 'PointerTo_tds__StartSystemRestore' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StartSystemRestore
#define SOAP_TYPE_PointerTo_tds__StartSystemRestore (2466)
#endif

/* _tds__StartFirmwareUpgrade * has binding name 'PointerTo_tds__StartFirmwareUpgrade' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade
#define SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade (2462)
#endif

/* _tds__GetSystemUris * has binding name 'PointerTo_tds__GetSystemUris' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUris
#define SOAP_TYPE_PointerTo_tds__GetSystemUris (2458)
#endif

/* _tds__ScanAvailableDot11Networks * has binding name 'PointerTo_tds__ScanAvailableDot11Networks' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks
#define SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks (2454)
#endif

/* _tds__GetDot11Status * has binding name 'PointerTo_tds__GetDot11Status' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Status
#define SOAP_TYPE_PointerTo_tds__GetDot11Status (2450)
#endif

/* _tds__GetDot11Capabilities * has binding name 'PointerTo_tds__GetDot11Capabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Capabilities
#define SOAP_TYPE_PointerTo_tds__GetDot11Capabilities (2446)
#endif

/* _tds__DeleteDot1XConfiguration * has binding name 'PointerTo_tds__DeleteDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration (2442)
#endif

/* _tds__GetDot1XConfigurations * has binding name 'PointerTo_tds__GetDot1XConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations (2438)
#endif

/* _tds__GetDot1XConfiguration * has binding name 'PointerTo_tds__GetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration (2434)
#endif

/* _tds__SetDot1XConfiguration * has binding name 'PointerTo_tds__SetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration (2430)
#endif

/* _tds__CreateDot1XConfiguration * has binding name 'PointerTo_tds__CreateDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration (2426)
#endif

/* _tds__LoadCACertificates * has binding name 'PointerTo_tds__LoadCACertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCACertificates
#define SOAP_TYPE_PointerTo_tds__LoadCACertificates (2422)
#endif

/* _tds__GetCertificateInformation * has binding name 'PointerTo_tds__GetCertificateInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificateInformation
#define SOAP_TYPE_PointerTo_tds__GetCertificateInformation (2418)
#endif

/* _tds__LoadCertificateWithPrivateKey * has binding name 'PointerTo_tds__LoadCertificateWithPrivateKey' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey (2414)
#endif

/* _tds__GetCACertificates * has binding name 'PointerTo_tds__GetCACertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCACertificates
#define SOAP_TYPE_PointerTo_tds__GetCACertificates (2410)
#endif

/* _tds__SendAuxiliaryCommand * has binding name 'PointerTo_tds__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand
#define SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand (2406)
#endif

/* _tds__SetRelayOutputState * has binding name 'PointerTo_tds__SetRelayOutputState' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputState
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputState (2402)
#endif

/* _tds__SetRelayOutputSettings * has binding name 'PointerTo_tds__SetRelayOutputSettings' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings (2398)
#endif

/* _tds__GetRelayOutputs * has binding name 'PointerTo_tds__GetRelayOutputs' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRelayOutputs
#define SOAP_TYPE_PointerTo_tds__GetRelayOutputs (2394)
#endif

/* _tds__SetClientCertificateMode * has binding name 'PointerTo_tds__SetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetClientCertificateMode
#define SOAP_TYPE_PointerTo_tds__SetClientCertificateMode (2390)
#endif

/* _tds__GetClientCertificateMode * has binding name 'PointerTo_tds__GetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetClientCertificateMode
#define SOAP_TYPE_PointerTo_tds__GetClientCertificateMode (2386)
#endif

/* _tds__LoadCertificates * has binding name 'PointerTo_tds__LoadCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificates
#define SOAP_TYPE_PointerTo_tds__LoadCertificates (2382)
#endif

/* _tds__GetPkcs10Request * has binding name 'PointerTo_tds__GetPkcs10Request' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPkcs10Request
#define SOAP_TYPE_PointerTo_tds__GetPkcs10Request (2378)
#endif

/* _tds__DeleteCertificates * has binding name 'PointerTo_tds__DeleteCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteCertificates
#define SOAP_TYPE_PointerTo_tds__DeleteCertificates (2374)
#endif

/* _tds__SetCertificatesStatus * has binding name 'PointerTo_tds__SetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetCertificatesStatus
#define SOAP_TYPE_PointerTo_tds__SetCertificatesStatus (2370)
#endif

/* _tds__GetCertificatesStatus * has binding name 'PointerTo_tds__GetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificatesStatus
#define SOAP_TYPE_PointerTo_tds__GetCertificatesStatus (2366)
#endif

/* _tds__GetCertificates * has binding name 'PointerTo_tds__GetCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificates
#define SOAP_TYPE_PointerTo_tds__GetCertificates (2362)
#endif

/* _tds__CreateCertificate * has binding name 'PointerTo_tds__CreateCertificate' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateCertificate
#define SOAP_TYPE_PointerTo_tds__CreateCertificate (2358)
#endif

/* _tds__SetAccessPolicy * has binding name 'PointerTo_tds__SetAccessPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetAccessPolicy
#define SOAP_TYPE_PointerTo_tds__SetAccessPolicy (2354)
#endif

/* _tds__GetAccessPolicy * has binding name 'PointerTo_tds__GetAccessPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAccessPolicy
#define SOAP_TYPE_PointerTo_tds__GetAccessPolicy (2350)
#endif

/* _tds__RemoveIPAddressFilter * has binding name 'PointerTo_tds__RemoveIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter (2346)
#endif

/* _tds__AddIPAddressFilter * has binding name 'PointerTo_tds__AddIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__AddIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__AddIPAddressFilter (2342)
#endif

/* _tds__SetIPAddressFilter * has binding name 'PointerTo_tds__SetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__SetIPAddressFilter (2338)
#endif

/* _tds__GetIPAddressFilter * has binding name 'PointerTo_tds__GetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__GetIPAddressFilter (2334)
#endif

/* _tds__SetZeroConfiguration * has binding name 'PointerTo_tds__SetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetZeroConfiguration
#define SOAP_TYPE_PointerTo_tds__SetZeroConfiguration (2330)
#endif

/* _tds__GetZeroConfiguration * has binding name 'PointerTo_tds__GetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetZeroConfiguration
#define SOAP_TYPE_PointerTo_tds__GetZeroConfiguration (2326)
#endif

/* _tds__SetNetworkDefaultGateway * has binding name 'PointerTo_tds__SetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway
#define SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway (2322)
#endif

/* _tds__GetNetworkDefaultGateway * has binding name 'PointerTo_tds__GetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway
#define SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway (2318)
#endif

/* _tds__SetNetworkProtocols * has binding name 'PointerTo_tds__SetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkProtocols
#define SOAP_TYPE_PointerTo_tds__SetNetworkProtocols (2314)
#endif

/* _tds__GetNetworkProtocols * has binding name 'PointerTo_tds__GetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkProtocols
#define SOAP_TYPE_PointerTo_tds__GetNetworkProtocols (2310)
#endif

/* _tds__SetNetworkInterfaces * has binding name 'PointerTo_tds__SetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces
#define SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces (2306)
#endif

/* _tds__GetNetworkInterfaces * has binding name 'PointerTo_tds__GetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces
#define SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces (2302)
#endif

/* _tds__SetDynamicDNS * has binding name 'PointerTo_tds__SetDynamicDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDynamicDNS
#define SOAP_TYPE_PointerTo_tds__SetDynamicDNS (2298)
#endif

/* _tds__GetDynamicDNS * has binding name 'PointerTo_tds__GetDynamicDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDynamicDNS
#define SOAP_TYPE_PointerTo_tds__GetDynamicDNS (2294)
#endif

/* _tds__SetNTP * has binding name 'PointerTo_tds__SetNTP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNTP
#define SOAP_TYPE_PointerTo_tds__SetNTP (2290)
#endif

/* _tds__GetNTP * has binding name 'PointerTo_tds__GetNTP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNTP
#define SOAP_TYPE_PointerTo_tds__GetNTP (2286)
#endif

/* _tds__SetDNS * has binding name 'PointerTo_tds__SetDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDNS
#define SOAP_TYPE_PointerTo_tds__SetDNS (2282)
#endif

/* _tds__GetDNS * has binding name 'PointerTo_tds__GetDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDNS
#define SOAP_TYPE_PointerTo_tds__GetDNS (2278)
#endif

/* _tds__SetHostnameFromDHCP * has binding name 'PointerTo_tds__SetHostnameFromDHCP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP
#define SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP (2274)
#endif

/* _tds__SetHostname * has binding name 'PointerTo_tds__SetHostname' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetHostname
#define SOAP_TYPE_PointerTo_tds__SetHostname (2270)
#endif

/* _tds__GetHostname * has binding name 'PointerTo_tds__GetHostname' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetHostname
#define SOAP_TYPE_PointerTo_tds__GetHostname (2266)
#endif

/* _tds__SetDPAddresses * has binding name 'PointerTo_tds__SetDPAddresses' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDPAddresses
#define SOAP_TYPE_PointerTo_tds__SetDPAddresses (2262)
#endif

/* _tds__GetCapabilities * has binding name 'PointerTo_tds__GetCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCapabilities
#define SOAP_TYPE_PointerTo_tds__GetCapabilities (2258)
#endif

/* _tds__SetAuthFailureWarningConfiguration * has binding name 'PointerTo_tds__SetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration (2254)
#endif

/* _tds__GetAuthFailureWarningConfiguration * has binding name 'PointerTo_tds__GetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration (2250)
#endif

/* _tds__GetAuthFailureWarningOptions * has binding name 'PointerTo_tds__GetAuthFailureWarningOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions (2246)
#endif

/* _tds__SetPasswordHistoryConfiguration * has binding name 'PointerTo_tds__SetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration (2242)
#endif

/* _tds__GetPasswordHistoryConfiguration * has binding name 'PointerTo_tds__GetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration (2238)
#endif

/* _tds__SetPasswordComplexityConfiguration * has binding name 'PointerTo_tds__SetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration (2234)
#endif

/* _tds__GetPasswordComplexityConfiguration * has binding name 'PointerTo_tds__GetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration (2230)
#endif

/* _tds__GetPasswordComplexityOptions * has binding name 'PointerTo_tds__GetPasswordComplexityOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions (2226)
#endif

/* _tds__GetWsdlUrl * has binding name 'PointerTo_tds__GetWsdlUrl' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetWsdlUrl
#define SOAP_TYPE_PointerTo_tds__GetWsdlUrl (2222)
#endif

/* _tds__SetUser * has binding name 'PointerTo_tds__SetUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetUser
#define SOAP_TYPE_PointerTo_tds__SetUser (2218)
#endif

/* _tds__DeleteUsers * has binding name 'PointerTo_tds__DeleteUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteUsers
#define SOAP_TYPE_PointerTo_tds__DeleteUsers (2214)
#endif

/* _tds__CreateUsers * has binding name 'PointerTo_tds__CreateUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateUsers
#define SOAP_TYPE_PointerTo_tds__CreateUsers (2210)
#endif

/* _tds__GetUsers * has binding name 'PointerTo_tds__GetUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetUsers
#define SOAP_TYPE_PointerTo_tds__GetUsers (2206)
#endif

/* _tds__SetRemoteUser * has binding name 'PointerTo_tds__SetRemoteUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteUser
#define SOAP_TYPE_PointerTo_tds__SetRemoteUser (2202)
#endif

/* _tds__GetRemoteUser * has binding name 'PointerTo_tds__GetRemoteUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteUser
#define SOAP_TYPE_PointerTo_tds__GetRemoteUser (2198)
#endif

/* _tds__GetEndpointReference * has binding name 'PointerTo_tds__GetEndpointReference' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetEndpointReference
#define SOAP_TYPE_PointerTo_tds__GetEndpointReference (2194)
#endif

/* _tds__GetDPAddresses * has binding name 'PointerTo_tds__GetDPAddresses' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDPAddresses
#define SOAP_TYPE_PointerTo_tds__GetDPAddresses (2190)
#endif

/* _tds__SetRemoteDiscoveryMode * has binding name 'PointerTo_tds__SetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode (2186)
#endif

/* _tds__GetRemoteDiscoveryMode * has binding name 'PointerTo_tds__GetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode (2182)
#endif

/* _tds__SetDiscoveryMode * has binding name 'PointerTo_tds__SetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__SetDiscoveryMode (2178)
#endif

/* _tds__GetDiscoveryMode * has binding name 'PointerTo_tds__GetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__GetDiscoveryMode (2174)
#endif

/* _tds__RemoveScopes * has binding name 'PointerTo_tds__RemoveScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RemoveScopes
#define SOAP_TYPE_PointerTo_tds__RemoveScopes (2170)
#endif

/* _tds__AddScopes * has binding name 'PointerTo_tds__AddScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__AddScopes
#define SOAP_TYPE_PointerTo_tds__AddScopes (2166)
#endif

/* _tds__SetScopes * has binding name 'PointerTo_tds__SetScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetScopes
#define SOAP_TYPE_PointerTo_tds__SetScopes (2162)
#endif

/* _tds__GetScopes * has binding name 'PointerTo_tds__GetScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetScopes
#define SOAP_TYPE_PointerTo_tds__GetScopes (2158)
#endif

/* _tds__GetSystemSupportInformation * has binding name 'PointerTo_tds__GetSystemSupportInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation
#define SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation (2154)
#endif

/* _tds__GetSystemLog * has binding name 'PointerTo_tds__GetSystemLog' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemLog
#define SOAP_TYPE_PointerTo_tds__GetSystemLog (2150)
#endif

/* _tds__GetSystemBackup * has binding name 'PointerTo_tds__GetSystemBackup' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemBackup
#define SOAP_TYPE_PointerTo_tds__GetSystemBackup (2146)
#endif

/* _tds__RestoreSystem * has binding name 'PointerTo_tds__RestoreSystem' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RestoreSystem
#define SOAP_TYPE_PointerTo_tds__RestoreSystem (2142)
#endif

/* _tds__SystemReboot * has binding name 'PointerTo_tds__SystemReboot' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SystemReboot
#define SOAP_TYPE_PointerTo_tds__SystemReboot (2138)
#endif

/* _tds__UpgradeSystemFirmware * has binding name 'PointerTo_tds__UpgradeSystemFirmware' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware
#define SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware (2134)
#endif

/* _tds__SetSystemFactoryDefault * has binding name 'PointerTo_tds__SetSystemFactoryDefault' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault
#define SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault (2130)
#endif

/* _tds__GetSystemDateAndTime * has binding name 'PointerTo_tds__GetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime
#define SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime (2126)
#endif

/* _tds__SetSystemDateAndTime * has binding name 'PointerTo_tds__SetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime
#define SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime (2122)
#endif

/* _tds__GetDeviceInformation * has binding name 'PointerTo_tds__GetDeviceInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDeviceInformation
#define SOAP_TYPE_PointerTo_tds__GetDeviceInformation (2118)
#endif

/* _tds__GetServiceCapabilities * has binding name 'PointerTo_tds__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tds__GetServiceCapabilities (2114)
#endif

/* _tds__GetServices * has binding name 'PointerTo_tds__GetServices' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetServices
#define SOAP_TYPE_PointerTo_tds__GetServices (2110)
#endif

/* wsnt__UnsupportedPolicyRequestFaultType * has binding name 'PointerTowsnt__UnsupportedPolicyRequestFaultType' for type 'wsnt:UnsupportedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnsupportedPolicyRequestFaultType (2100)
#endif

/* wsnt__UnrecognizedPolicyRequestFaultType * has binding name 'PointerTowsnt__UnrecognizedPolicyRequestFaultType' for type 'wsnt:UnrecognizedPolicyRequestFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_PointerTowsnt__UnrecognizedPolicyRequestFaultType (2099)
#endif

/* wsnt__UnacceptableTerminationTimeFaultType * has binding name 'PointerTowsnt__UnacceptableTerminationTimeFaultType' for type 'wsnt:UnacceptableTerminationTimeFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableTerminationTimeFaultType (2098)
#endif

/* wsnt__UnacceptableInitialTerminationTimeFaultType * has binding name 'PointerTowsnt__UnacceptableInitialTerminationTimeFaultType' for type 'wsnt:UnacceptableInitialTerminationTimeFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_PointerTowsnt__UnacceptableInitialTerminationTimeFaultType (2097)
#endif

/* wsnt__UnableToGetMessagesFaultType * has binding name 'PointerTowsnt__UnableToGetMessagesFaultType' for type 'wsnt:UnableToGetMessagesFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToGetMessagesFaultType (2096)
#endif

/* wsnt__UnableToDestroySubscriptionFaultType * has binding name 'PointerTowsnt__UnableToDestroySubscriptionFaultType' for type 'wsnt:UnableToDestroySubscriptionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroySubscriptionFaultType (2095)
#endif

/* wsnt__UnableToDestroyPullPointFaultType * has binding name 'PointerTowsnt__UnableToDestroyPullPointFaultType' for type 'wsnt:UnableToDestroyPullPointFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToDestroyPullPointFaultType (2094)
#endif

/* wsnt__UnableToCreatePullPointFaultType * has binding name 'PointerTowsnt__UnableToCreatePullPointFaultType' for type 'wsnt:UnableToCreatePullPointFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_PointerTowsnt__UnableToCreatePullPointFaultType (2093)
#endif

/* wsnt__TopicNotSupportedFaultType * has binding name 'PointerTowsnt__TopicNotSupportedFaultType' for type 'wsnt:TopicNotSupportedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__TopicNotSupportedFaultType (2092)
#endif

/* wsnt__TopicExpressionDialectUnknownFaultType * has binding name 'PointerTowsnt__TopicExpressionDialectUnknownFaultType' for type 'wsnt:TopicExpressionDialectUnknownFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionDialectUnknownFaultType (2091)
#endif

/* wsnt__SubscribeCreationFailedFaultType * has binding name 'PointerTowsnt__SubscribeCreationFailedFaultType' for type 'wsnt:SubscribeCreationFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_PointerTowsnt__SubscribeCreationFailedFaultType (2090)
#endif

/* wsnt__ResumeFailedFaultType * has binding name 'PointerTowsnt__ResumeFailedFaultType' for type 'wsnt:ResumeFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType
#define SOAP_TYPE_PointerTowsnt__ResumeFailedFaultType (2089)
#endif

/* wsrfr__ResourceUnknownFaultType * has binding name 'PointerTowsrfr__ResourceUnknownFaultType' for type 'wsrfr:ResourceUnknownFaultType' */
#ifndef SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_PointerTowsrfr__ResourceUnknownFaultType (2088)
#endif

/* _tev__PullMessagesFaultResponse * has binding name 'PointerTo_tev__PullMessagesFaultResponse' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse
#define SOAP_TYPE_PointerTo_tev__PullMessagesFaultResponse (2087)
#endif

/* wsnt__PauseFailedFaultType * has binding name 'PointerTowsnt__PauseFailedFaultType' for type 'wsnt:PauseFailedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__PauseFailedFaultType
#define SOAP_TYPE_PointerTowsnt__PauseFailedFaultType (2086)
#endif

/* wsnt__NotifyMessageNotSupportedFaultType * has binding name 'PointerTowsnt__NotifyMessageNotSupportedFaultType' for type 'wsnt:NotifyMessageNotSupportedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_PointerTowsnt__NotifyMessageNotSupportedFaultType (2085)
#endif

/* wsnt__NoCurrentMessageOnTopicFaultType * has binding name 'PointerTowsnt__NoCurrentMessageOnTopicFaultType' for type 'wsnt:NoCurrentMessageOnTopicFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_PointerTowsnt__NoCurrentMessageOnTopicFaultType (2084)
#endif

/* wsnt__MultipleTopicsSpecifiedFaultType * has binding name 'PointerTowsnt__MultipleTopicsSpecifiedFaultType' for type 'wsnt:MultipleTopicsSpecifiedFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_PointerTowsnt__MultipleTopicsSpecifiedFaultType (2083)
#endif

/* wsnt__InvalidTopicExpressionFaultType * has binding name 'PointerTowsnt__InvalidTopicExpressionFaultType' for type 'wsnt:InvalidTopicExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidTopicExpressionFaultType (2082)
#endif

/* wsnt__InvalidProducerPropertiesExpressionFaultType * has binding name 'PointerTowsnt__InvalidProducerPropertiesExpressionFaultType' for type 'wsnt:InvalidProducerPropertiesExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidProducerPropertiesExpressionFaultType (2081)
#endif

/* wsnt__InvalidMessageContentExpressionFaultType * has binding name 'PointerTowsnt__InvalidMessageContentExpressionFaultType' for type 'wsnt:InvalidMessageContentExpressionFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidMessageContentExpressionFaultType (2080)
#endif

/* wsnt__InvalidFilterFaultType * has binding name 'PointerTowsnt__InvalidFilterFaultType' for type 'wsnt:InvalidFilterFaultType' */
#ifndef SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType
#define SOAP_TYPE_PointerTowsnt__InvalidFilterFaultType (2079)
#endif

/* _wstop__TopicNamespaceType_Topic * has binding name 'PointerTo_wstop__TopicNamespaceType_Topic' for type '' */
#ifndef SOAP_TYPE_PointerTo_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_PointerTo_wstop__TopicNamespaceType_Topic (2078)
#endif

/* wstop__TopicType ** has binding name 'PointerToPointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_PointerToPointerTowstop__TopicType
#define SOAP_TYPE_PointerToPointerTowstop__TopicType (2077)
#endif

/* wstop__TopicType * has binding name 'PointerTowstop__TopicType' for type 'wstop:TopicType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicType
#define SOAP_TYPE_PointerTowstop__TopicType (2076)
#endif

/* wstop__QueryExpressionType * has binding name 'PointerTowstop__QueryExpressionType' for type 'wstop:QueryExpressionType' */
#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType
#define SOAP_TYPE_PointerTowstop__QueryExpressionType (2075)
#endif

/* tt__OSDConfigurationExtension * has binding name 'PointerTott__OSDConfigurationExtension' for type 'tt:OSDConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationExtension (2073)
#endif

/* tt__OSDImgConfiguration * has binding name 'PointerTott__OSDImgConfiguration' for type 'tt:OSDImgConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDImgConfiguration
#define SOAP_TYPE_PointerTott__OSDImgConfiguration (2072)
#endif

/* tt__OSDTextConfiguration * has binding name 'PointerTott__OSDTextConfiguration' for type 'tt:OSDTextConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDTextConfiguration
#define SOAP_TYPE_PointerTott__OSDTextConfiguration (2071)
#endif

/* tt__OSDPosConfiguration * has binding name 'PointerTott__OSDPosConfiguration' for type 'tt:OSDPosConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDPosConfiguration
#define SOAP_TYPE_PointerTott__OSDPosConfiguration (2070)
#endif

/* tt__OSDReference * has binding name 'PointerTott__OSDReference' for type 'tt:OSDReference' */
#ifndef SOAP_TYPE_PointerTott__OSDReference
#define SOAP_TYPE_PointerTott__OSDReference (2069)
#endif

/* tt__MetadataInput * has binding name 'PointerTott__MetadataInput' for type 'tt:MetadataInput' */
#ifndef SOAP_TYPE_PointerTott__MetadataInput
#define SOAP_TYPE_PointerTott__MetadataInput (2068)
#endif

/* tt__SourceIdentification * has binding name 'PointerTott__SourceIdentification' for type 'tt:SourceIdentification' */
#ifndef SOAP_TYPE_PointerTott__SourceIdentification
#define SOAP_TYPE_PointerTott__SourceIdentification (2067)
#endif

/* tt__AnalyticsDeviceEngineConfiguration * has binding name 'PointerTott__AnalyticsDeviceEngineConfiguration' for type 'tt:AnalyticsDeviceEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration (2066)
#endif

/* tt__PTZConfigurationExtension * has binding name 'PointerTott__PTZConfigurationExtension' for type 'tt:PTZConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension (2065)
#endif

/* tt__ZoomLimits * has binding name 'PointerTott__ZoomLimits' for type 'tt:ZoomLimits' */
#ifndef SOAP_TYPE_PointerTott__ZoomLimits
#define SOAP_TYPE_PointerTott__ZoomLimits (2064)
#endif

/* tt__PanTiltLimits * has binding name 'PointerTott__PanTiltLimits' for type 'tt:PanTiltLimits' */
#ifndef SOAP_TYPE_PointerTott__PanTiltLimits
#define SOAP_TYPE_PointerTott__PanTiltLimits (2063)
#endif

/* tt__PTZNodeExtension * has binding name 'PointerTott__PTZNodeExtension' for type 'tt:PTZNodeExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension
#define SOAP_TYPE_PointerTott__PTZNodeExtension (2062)
#endif

/* enum tt__DigitalIdleState * has binding name 'PointerTott__DigitalIdleState' for type 'tt:DigitalIdleState' */
#ifndef SOAP_TYPE_PointerTott__DigitalIdleState
#define SOAP_TYPE_PointerTott__DigitalIdleState (2061)
#endif

/* tt__NetworkInterfaceExtension * has binding name 'PointerTott__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension (2060)
#endif

/* tt__IPv6NetworkInterface * has binding name 'PointerTott__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface (2059)
#endif

/* tt__IPv4NetworkInterface * has binding name 'PointerTott__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface (2058)
#endif

/* tt__NetworkInterfaceLink * has binding name 'PointerTott__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink (2057)
#endif

/* tt__NetworkInterfaceInfo * has binding name 'PointerTott__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo (2056)
#endif

/* tt__VideoOutputExtension * has binding name 'PointerTott__VideoOutputExtension' for type 'tt:VideoOutputExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoOutputExtension
#define SOAP_TYPE_PointerTott__VideoOutputExtension (2055)
#endif

/* tt__Layout * has binding name 'PointerTott__Layout' for type 'tt:Layout' */
#ifndef SOAP_TYPE_PointerTott__Layout
#define SOAP_TYPE_PointerTott__Layout (2054)
#endif

/* tt__MetadataConfigurationExtension * has binding name 'PointerTott__MetadataConfigurationExtension' for type 'tt:MetadataConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationExtension (2053)
#endif

/* tt__EventSubscription * has binding name 'PointerTott__EventSubscription' for type 'tt:EventSubscription' */
#ifndef SOAP_TYPE_PointerTott__EventSubscription
#define SOAP_TYPE_PointerTott__EventSubscription (2052)
#endif

/* tt__PTZFilter * has binding name 'PointerTott__PTZFilter' for type 'tt:PTZFilter' */
#ifndef SOAP_TYPE_PointerTott__PTZFilter
#define SOAP_TYPE_PointerTott__PTZFilter (2051)
#endif

/* tt__RuleEngineConfiguration * has binding name 'PointerTott__RuleEngineConfiguration' for type 'tt:RuleEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RuleEngineConfiguration
#define SOAP_TYPE_PointerTott__RuleEngineConfiguration (2050)
#endif

/* tt__AnalyticsEngineConfiguration * has binding name 'PointerTott__AnalyticsEngineConfiguration' for type 'tt:AnalyticsEngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration (2049)
#endif

/* tt__VideoRateControl2 * has binding name 'PointerTott__VideoRateControl2' for type 'tt:VideoRateControl2' */
#ifndef SOAP_TYPE_PointerTott__VideoRateControl2
#define SOAP_TYPE_PointerTott__VideoRateControl2 (2048)
#endif

/* tt__MulticastConfiguration * has binding name 'PointerTott__MulticastConfiguration' for type 'tt:MulticastConfiguration' */
#ifndef SOAP_TYPE_PointerTott__MulticastConfiguration
#define SOAP_TYPE_PointerTott__MulticastConfiguration (2047)
#endif

/* tt__H264Configuration * has binding name 'PointerTott__H264Configuration' for type 'tt:H264Configuration' */
#ifndef SOAP_TYPE_PointerTott__H264Configuration
#define SOAP_TYPE_PointerTott__H264Configuration (2046)
#endif

/* tt__Mpeg4Configuration * has binding name 'PointerTott__Mpeg4Configuration' for type 'tt:Mpeg4Configuration' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Configuration
#define SOAP_TYPE_PointerTott__Mpeg4Configuration (2045)
#endif

/* tt__VideoRateControl * has binding name 'PointerTott__VideoRateControl' for type 'tt:VideoRateControl' */
#ifndef SOAP_TYPE_PointerTott__VideoRateControl
#define SOAP_TYPE_PointerTott__VideoRateControl (2044)
#endif

/* tt__VideoSourceConfigurationExtension * has binding name 'PointerTott__VideoSourceConfigurationExtension' for type 'tt:VideoSourceConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension (2043)
#endif

/* tt__IntRectangle * has binding name 'PointerTott__IntRectangle' for type 'tt:IntRectangle' */
#ifndef SOAP_TYPE_PointerTott__IntRectangle
#define SOAP_TYPE_PointerTott__IntRectangle (2042)
#endif

/* tt__VideoSourceExtension * has binding name 'PointerTott__VideoSourceExtension' for type 'tt:VideoSourceExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension
#define SOAP_TYPE_PointerTott__VideoSourceExtension (2041)
#endif

/* tt__ImagingSettings * has binding name 'PointerTott__ImagingSettings' for type 'tt:ImagingSettings' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettings
#define SOAP_TYPE_PointerTott__ImagingSettings (2040)
#endif

/* tt__PTZPresetTourOptions * has binding name 'PointerTott__PTZPresetTourOptions' for type 'tt:PTZPresetTourOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourOptions (2039)
#endif

/* tt__PresetTour ** has binding name 'PointerToPointerTott__PresetTour' for type 'tt:PresetTour' */
#ifndef SOAP_TYPE_PointerToPointerTott__PresetTour
#define SOAP_TYPE_PointerToPointerTott__PresetTour (2038)
#endif

/* tt__PresetTour * has binding name 'PointerTott__PresetTour' for type 'tt:PresetTour' */
#ifndef SOAP_TYPE_PointerTott__PresetTour
#define SOAP_TYPE_PointerTott__PresetTour (2037)
#endif

/* tt__PTZStatus * has binding name 'PointerTott__PTZStatus' for type 'tt:PTZStatus' */
#ifndef SOAP_TYPE_PointerTott__PTZStatus
#define SOAP_TYPE_PointerTott__PTZStatus (2036)
#endif

/* tt__PTZPreset ** has binding name 'PointerToPointerTott__PTZPreset' for type 'tt:PTZPreset' */
#ifndef SOAP_TYPE_PointerToPointerTott__PTZPreset
#define SOAP_TYPE_PointerToPointerTott__PTZPreset (2035)
#endif

/* tt__PTZPreset * has binding name 'PointerTott__PTZPreset' for type 'tt:PTZPreset' */
#ifndef SOAP_TYPE_PointerTott__PTZPreset
#define SOAP_TYPE_PointerTott__PTZPreset (2034)
#endif

/* tt__PTZConfigurationOptions * has binding name 'PointerTott__PTZConfigurationOptions' for type 'tt:PTZConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions (2033)
#endif

/* struct __tptz__SetConfigurationResponse_sequence * has binding name 'PointerTo__tptz__SetConfigurationResponse_sequence' for type '-tptz:SetConfigurationResponse-sequence' */
#ifndef SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence
#define SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence (2032)
#endif

/* tt__PTZConfiguration ** has binding name 'PointerToPointerTott__PTZConfiguration' for type 'tt:PTZConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__PTZConfiguration
#define SOAP_TYPE_PointerToPointerTott__PTZConfiguration (2030)
#endif

/* tt__PTZNode ** has binding name 'PointerToPointerTott__PTZNode' for type 'tt:PTZNode' */
#ifndef SOAP_TYPE_PointerToPointerTott__PTZNode
#define SOAP_TYPE_PointerToPointerTott__PTZNode (2029)
#endif

/* tt__PTZNode * has binding name 'PointerTott__PTZNode' for type 'tt:PTZNode' */
#ifndef SOAP_TYPE_PointerTott__PTZNode
#define SOAP_TYPE_PointerTott__PTZNode (2028)
#endif

/* tptz__Capabilities * has binding name 'PointerTotptz__Capabilities' for type 'tptz:Capabilities' */
#ifndef SOAP_TYPE_PointerTotptz__Capabilities
#define SOAP_TYPE_PointerTotptz__Capabilities (2027)
#endif

/* tr2__MaskOptions * has binding name 'PointerTotr2__MaskOptions' for type 'tr2:MaskOptions' */
#ifndef SOAP_TYPE_PointerTotr2__MaskOptions
#define SOAP_TYPE_PointerTotr2__MaskOptions (2026)
#endif

/* tr2__Mask ** has binding name 'PointerToPointerTotr2__Mask' for type 'tr2:Mask' */
#ifndef SOAP_TYPE_PointerToPointerTotr2__Mask
#define SOAP_TYPE_PointerToPointerTotr2__Mask (2025)
#endif

/* tr2__Mask * has binding name 'PointerTotr2__Mask' for type 'tr2:Mask' */
#ifndef SOAP_TYPE_PointerTotr2__Mask
#define SOAP_TYPE_PointerTotr2__Mask (2024)
#endif

/* tr2__VideoSourceMode ** has binding name 'PointerToPointerTotr2__VideoSourceMode' for type 'tr2:VideoSourceMode' */
#ifndef SOAP_TYPE_PointerToPointerTotr2__VideoSourceMode
#define SOAP_TYPE_PointerToPointerTotr2__VideoSourceMode (2023)
#endif

/* tr2__VideoSourceMode * has binding name 'PointerTotr2__VideoSourceMode' for type 'tr2:VideoSourceMode' */
#ifndef SOAP_TYPE_PointerTotr2__VideoSourceMode
#define SOAP_TYPE_PointerTotr2__VideoSourceMode (2022)
#endif

/* tr2__EncoderInstanceInfo * has binding name 'PointerTotr2__EncoderInstanceInfo' for type 'tr2:EncoderInstanceInfo' */
#ifndef SOAP_TYPE_PointerTotr2__EncoderInstanceInfo
#define SOAP_TYPE_PointerTotr2__EncoderInstanceInfo (2021)
#endif

/* tt__AudioEncoder2ConfigurationOptions ** has binding name 'PointerToPointerTott__AudioEncoder2ConfigurationOptions' for type 'tt:AudioEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerToPointerTott__AudioEncoder2ConfigurationOptions (2020)
#endif

/* tt__AudioEncoder2ConfigurationOptions * has binding name 'PointerTott__AudioEncoder2ConfigurationOptions' for type 'tt:AudioEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioEncoder2ConfigurationOptions (2019)
#endif

/* tt__VideoEncoder2ConfigurationOptions ** has binding name 'PointerToPointerTott__VideoEncoder2ConfigurationOptions' for type 'tt:VideoEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerToPointerTott__VideoEncoder2ConfigurationOptions (2018)
#endif

/* tt__VideoEncoder2ConfigurationOptions * has binding name 'PointerTott__VideoEncoder2ConfigurationOptions' for type 'tt:VideoEncoder2ConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoEncoder2ConfigurationOptions (2017)
#endif

/* tt__AudioEncoder2Configuration ** has binding name 'PointerToPointerTott__AudioEncoder2Configuration' for type 'tt:AudioEncoder2Configuration' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioEncoder2Configuration
#define SOAP_TYPE_PointerToPointerTott__AudioEncoder2Configuration (2016)
#endif

/* tt__VideoEncoder2Configuration ** has binding name 'PointerToPointerTott__VideoEncoder2Configuration' for type 'tt:VideoEncoder2Configuration' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoEncoder2Configuration
#define SOAP_TYPE_PointerToPointerTott__VideoEncoder2Configuration (2015)
#endif

/* tr2__MediaProfile ** has binding name 'PointerToPointerTotr2__MediaProfile' for type 'tr2:MediaProfile' */
#ifndef SOAP_TYPE_PointerToPointerTotr2__MediaProfile
#define SOAP_TYPE_PointerToPointerTotr2__MediaProfile (2014)
#endif

/* tr2__MediaProfile * has binding name 'PointerTotr2__MediaProfile' for type 'tr2:MediaProfile' */
#ifndef SOAP_TYPE_PointerTotr2__MediaProfile
#define SOAP_TYPE_PointerTotr2__MediaProfile (2013)
#endif

/* tr2__ConfigurationRef ** has binding name 'PointerToPointerTotr2__ConfigurationRef' for type 'tr2:ConfigurationRef' */
#ifndef SOAP_TYPE_PointerToPointerTotr2__ConfigurationRef
#define SOAP_TYPE_PointerToPointerTotr2__ConfigurationRef (2012)
#endif

/* tr2__ConfigurationRef * has binding name 'PointerTotr2__ConfigurationRef' for type 'tr2:ConfigurationRef' */
#ifndef SOAP_TYPE_PointerTotr2__ConfigurationRef
#define SOAP_TYPE_PointerTotr2__ConfigurationRef (2011)
#endif

/* tr2__Capabilities2 * has binding name 'PointerTotr2__Capabilities2' for type 'tr2:Capabilities2' */
#ifndef SOAP_TYPE_PointerTotr2__Capabilities2
#define SOAP_TYPE_PointerTotr2__Capabilities2 (2010)
#endif

/* tt__Polygon * has binding name 'PointerTott__Polygon' for type 'tt:Polygon' */
#ifndef SOAP_TYPE_PointerTott__Polygon
#define SOAP_TYPE_PointerTott__Polygon (2009)
#endif

/* tr2__EncoderInstance ** has binding name 'PointerToPointerTotr2__EncoderInstance' for type 'tr2:EncoderInstance' */
#ifndef SOAP_TYPE_PointerToPointerTotr2__EncoderInstance
#define SOAP_TYPE_PointerToPointerTotr2__EncoderInstance (2008)
#endif

/* tr2__EncoderInstance * has binding name 'PointerTotr2__EncoderInstance' for type 'tr2:EncoderInstance' */
#ifndef SOAP_TYPE_PointerTotr2__EncoderInstance
#define SOAP_TYPE_PointerTotr2__EncoderInstance (2007)
#endif

/* tr2__ConfigurationSet * has binding name 'PointerTotr2__ConfigurationSet' for type 'tr2:ConfigurationSet' */
#ifndef SOAP_TYPE_PointerTotr2__ConfigurationSet
#define SOAP_TYPE_PointerTotr2__ConfigurationSet (2006)
#endif

/* tr2__ReceiverConfiguration * has binding name 'PointerTotr2__ReceiverConfiguration' for type 'tr2:ReceiverConfiguration' */
#ifndef SOAP_TYPE_PointerTotr2__ReceiverConfiguration
#define SOAP_TYPE_PointerTotr2__ReceiverConfiguration (2005)
#endif

/* tt__AudioEncoder2Configuration * has binding name 'PointerTott__AudioEncoder2Configuration' for type 'tt:AudioEncoder2Configuration' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoder2Configuration
#define SOAP_TYPE_PointerTott__AudioEncoder2Configuration (2004)
#endif

/* tt__VideoEncoder2Configuration * has binding name 'PointerTott__VideoEncoder2Configuration' for type 'tt:VideoEncoder2Configuration' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoder2Configuration
#define SOAP_TYPE_PointerTott__VideoEncoder2Configuration (2003)
#endif

/* tr2__StreamingCapabilities * has binding name 'PointerTotr2__StreamingCapabilities' for type 'tr2:StreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTotr2__StreamingCapabilities
#define SOAP_TYPE_PointerTotr2__StreamingCapabilities (2002)
#endif

/* tr2__ProfileCapabilities * has binding name 'PointerTotr2__ProfileCapabilities' for type 'tr2:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTotr2__ProfileCapabilities
#define SOAP_TYPE_PointerTotr2__ProfileCapabilities (2001)
#endif

/* timg__ImagingPreset ** has binding name 'PointerToPointerTotimg__ImagingPreset' for type 'timg:ImagingPreset' */
#ifndef SOAP_TYPE_PointerToPointerTotimg__ImagingPreset
#define SOAP_TYPE_PointerToPointerTotimg__ImagingPreset (2000)
#endif

/* timg__ImagingPreset * has binding name 'PointerTotimg__ImagingPreset' for type 'timg:ImagingPreset' */
#ifndef SOAP_TYPE_PointerTotimg__ImagingPreset
#define SOAP_TYPE_PointerTotimg__ImagingPreset (1999)
#endif

/* tt__ImagingStatus20 * has binding name 'PointerTott__ImagingStatus20' for type 'tt:ImagingStatus20' */
#ifndef SOAP_TYPE_PointerTott__ImagingStatus20
#define SOAP_TYPE_PointerTott__ImagingStatus20 (1998)
#endif

/* tt__MoveOptions20 * has binding name 'PointerTott__MoveOptions20' for type 'tt:MoveOptions20' */
#ifndef SOAP_TYPE_PointerTott__MoveOptions20
#define SOAP_TYPE_PointerTott__MoveOptions20 (1997)
#endif

/* tt__FocusMove * has binding name 'PointerTott__FocusMove' for type 'tt:FocusMove' */
#ifndef SOAP_TYPE_PointerTott__FocusMove
#define SOAP_TYPE_PointerTott__FocusMove (1996)
#endif

/* tt__ImagingOptions20 * has binding name 'PointerTott__ImagingOptions20' for type 'tt:ImagingOptions20' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20
#define SOAP_TYPE_PointerTott__ImagingOptions20 (1995)
#endif

/* timg__Capabilities * has binding name 'PointerTotimg__Capabilities' for type 'timg:Capabilities' */
#ifndef SOAP_TYPE_PointerTotimg__Capabilities
#define SOAP_TYPE_PointerTotimg__Capabilities (1994)
#endif

/* tev__EventBrokerConfig ** has binding name 'PointerToPointerTotev__EventBrokerConfig' for type 'tev:EventBrokerConfig' */
#ifndef SOAP_TYPE_PointerToPointerTotev__EventBrokerConfig
#define SOAP_TYPE_PointerToPointerTotev__EventBrokerConfig (1993)
#endif

/* tev__EventBrokerConfig * has binding name 'PointerTotev__EventBrokerConfig' for type 'tev:EventBrokerConfig' */
#ifndef SOAP_TYPE_PointerTotev__EventBrokerConfig
#define SOAP_TYPE_PointerTotev__EventBrokerConfig (1992)
#endif

/* _tev__CreatePullPointSubscription_SubscriptionPolicy * has binding name 'PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_tev__CreatePullPointSubscription_SubscriptionPolicy (1991)
#endif

/* tev__Capabilities * has binding name 'PointerTotev__Capabilities' for type 'tev:Capabilities' */
#ifndef SOAP_TYPE_PointerTotev__Capabilities
#define SOAP_TYPE_PointerTotev__Capabilities (1989)
#endif

/* tt__OSDConfigurationOptions * has binding name 'PointerTott__OSDConfigurationOptions' for type 'tt:OSDConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptions
#define SOAP_TYPE_PointerTott__OSDConfigurationOptions (1988)
#endif

/* tt__OSDConfiguration ** has binding name 'PointerToPointerTott__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__OSDConfiguration
#define SOAP_TYPE_PointerToPointerTott__OSDConfiguration (1987)
#endif

/* tt__OSDConfiguration * has binding name 'PointerTott__OSDConfiguration' for type 'tt:OSDConfiguration' */
#ifndef SOAP_TYPE_PointerTott__OSDConfiguration
#define SOAP_TYPE_PointerTott__OSDConfiguration (1986)
#endif

/* trt__VideoSourceMode ** has binding name 'PointerToPointerTotrt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_PointerToPointerTotrt__VideoSourceMode
#define SOAP_TYPE_PointerToPointerTotrt__VideoSourceMode (1985)
#endif

/* trt__VideoSourceMode * has binding name 'PointerTotrt__VideoSourceMode' for type 'trt:VideoSourceMode' */
#ifndef SOAP_TYPE_PointerTotrt__VideoSourceMode
#define SOAP_TYPE_PointerTotrt__VideoSourceMode (1984)
#endif

/* tt__MediaUri * has binding name 'PointerTott__MediaUri' for type 'tt:MediaUri' */
#ifndef SOAP_TYPE_PointerTott__MediaUri
#define SOAP_TYPE_PointerTott__MediaUri (1983)
#endif

/* tt__AudioOutputConfigurationOptions * has binding name 'PointerTott__AudioOutputConfigurationOptions' for type 'tt:AudioOutputConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions (1982)
#endif

/* tt__MetadataConfigurationOptions * has binding name 'PointerTott__MetadataConfigurationOptions' for type 'tt:MetadataConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptions
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptions (1981)
#endif

/* tt__AudioSourceConfigurationOptions * has binding name 'PointerTott__AudioSourceConfigurationOptions' for type 'tt:AudioSourceConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions (1980)
#endif

/* tt__VideoEncoderConfigurationOptions * has binding name 'PointerTott__VideoEncoderConfigurationOptions' for type 'tt:VideoEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoEncoderConfigurationOptions (1979)
#endif

/* tt__VideoSourceConfigurationOptions * has binding name 'PointerTott__VideoSourceConfigurationOptions' for type 'tt:VideoSourceConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions (1978)
#endif

/* tt__AudioDecoderConfiguration ** has binding name 'PointerToPointerTott__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_PointerToPointerTott__AudioDecoderConfiguration (1977)
#endif

/* tt__AudioOutputConfiguration ** has binding name 'PointerToPointerTott__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioOutputConfiguration
#define SOAP_TYPE_PointerToPointerTott__AudioOutputConfiguration (1976)
#endif

/* tt__MetadataConfiguration ** has binding name 'PointerToPointerTott__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__MetadataConfiguration
#define SOAP_TYPE_PointerToPointerTott__MetadataConfiguration (1975)
#endif

/* tt__VideoAnalyticsConfiguration ** has binding name 'PointerToPointerTott__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_PointerToPointerTott__VideoAnalyticsConfiguration (1974)
#endif

/* tt__AudioSourceConfiguration ** has binding name 'PointerToPointerTott__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioSourceConfiguration
#define SOAP_TYPE_PointerToPointerTott__AudioSourceConfiguration (1973)
#endif

/* tt__AudioEncoderConfiguration ** has binding name 'PointerToPointerTott__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioEncoderConfiguration
#define SOAP_TYPE_PointerToPointerTott__AudioEncoderConfiguration (1972)
#endif

/* tt__VideoSourceConfiguration ** has binding name 'PointerToPointerTott__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoSourceConfiguration
#define SOAP_TYPE_PointerToPointerTott__VideoSourceConfiguration (1971)
#endif

/* tt__VideoEncoderConfiguration ** has binding name 'PointerToPointerTott__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoEncoderConfiguration
#define SOAP_TYPE_PointerToPointerTott__VideoEncoderConfiguration (1970)
#endif

/* tt__Profile ** has binding name 'PointerToPointerTott__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_PointerToPointerTott__Profile
#define SOAP_TYPE_PointerToPointerTott__Profile (1969)
#endif

/* tt__Profile * has binding name 'PointerTott__Profile' for type 'tt:Profile' */
#ifndef SOAP_TYPE_PointerTott__Profile
#define SOAP_TYPE_PointerTott__Profile (1968)
#endif

/* tt__AudioOutput ** has binding name 'PointerToPointerTott__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioOutput
#define SOAP_TYPE_PointerToPointerTott__AudioOutput (1967)
#endif

/* tt__AudioOutput * has binding name 'PointerTott__AudioOutput' for type 'tt:AudioOutput' */
#ifndef SOAP_TYPE_PointerTott__AudioOutput
#define SOAP_TYPE_PointerTott__AudioOutput (1966)
#endif

/* tt__AudioSource ** has binding name 'PointerToPointerTott__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioSource
#define SOAP_TYPE_PointerToPointerTott__AudioSource (1965)
#endif

/* tt__AudioSource * has binding name 'PointerTott__AudioSource' for type 'tt:AudioSource' */
#ifndef SOAP_TYPE_PointerTott__AudioSource
#define SOAP_TYPE_PointerTott__AudioSource (1964)
#endif

/* tt__VideoSource ** has binding name 'PointerToPointerTott__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoSource
#define SOAP_TYPE_PointerToPointerTott__VideoSource (1963)
#endif

/* tt__VideoSource * has binding name 'PointerTott__VideoSource' for type 'tt:VideoSource' */
#ifndef SOAP_TYPE_PointerTott__VideoSource
#define SOAP_TYPE_PointerTott__VideoSource (1962)
#endif

/* trt__Capabilities * has binding name 'PointerTotrt__Capabilities' for type 'trt:Capabilities' */
#ifndef SOAP_TYPE_PointerTotrt__Capabilities
#define SOAP_TYPE_PointerTotrt__Capabilities (1961)
#endif

/* trt__VideoSourceModeExtension * has binding name 'PointerTotrt__VideoSourceModeExtension' for type 'trt:VideoSourceModeExtension' */
#ifndef SOAP_TYPE_PointerTotrt__VideoSourceModeExtension
#define SOAP_TYPE_PointerTotrt__VideoSourceModeExtension (1960)
#endif

/* trt__StreamingCapabilities * has binding name 'PointerTotrt__StreamingCapabilities' for type 'trt:StreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTotrt__StreamingCapabilities
#define SOAP_TYPE_PointerTotrt__StreamingCapabilities (1959)
#endif

/* trt__ProfileCapabilities * has binding name 'PointerTotrt__ProfileCapabilities' for type 'trt:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTotrt__ProfileCapabilities
#define SOAP_TYPE_PointerTotrt__ProfileCapabilities (1958)
#endif

/* wstop__Documentation * has binding name 'PointerTowstop__Documentation' for type 'wstop:Documentation' */
#ifndef SOAP_TYPE_PointerTowstop__Documentation
#define SOAP_TYPE_PointerTowstop__Documentation (1957)
#endif

/* _wsrfbf__BaseFaultType_FaultCause * has binding name 'PointerTo_wsrfbf__BaseFaultType_FaultCause' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause (1956)
#endif

/* _wsrfbf__BaseFaultType_Description * has binding name 'PointerTo_wsrfbf__BaseFaultType_Description' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_Description (1954)
#endif

/* _wsrfbf__BaseFaultType_ErrorCode * has binding name 'PointerTo_wsrfbf__BaseFaultType_ErrorCode' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode (1952)
#endif

/* _wsnt__Subscribe_SubscriptionPolicy * has binding name 'PointerTo_wsnt__Subscribe_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy (1950)
#endif

/* wsnt__NotificationMessageHolderType ** has binding name 'PointerToPointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_PointerToPointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerToPointerTowsnt__NotificationMessageHolderType (1948)
#endif

/* wsnt__SubscriptionPolicyType * has binding name 'PointerTowsnt__SubscriptionPolicyType' for type 'wsnt:SubscriptionPolicyType' */
#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType (1947)
#endif

/* wstop__TopicSetType * has binding name 'PointerTowstop__TopicSetType' for type 'wstop:TopicSetType' */
#ifndef SOAP_TYPE_PointerTowstop__TopicSetType
#define SOAP_TYPE_PointerTowstop__TopicSetType (1946)
#endif

/* wsnt__TopicExpressionType ** has binding name 'PointerToPointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_PointerToPointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerToPointerTowsnt__TopicExpressionType (1945)
#endif

/* wsnt__TopicExpressionType * has binding name 'PointerTowsnt__TopicExpressionType' for type 'wsnt:TopicExpressionType' */
#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType (1943)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTowsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType (1942)
#endif

/* enum tt__PropertyOperation * has binding name 'PointerTott__PropertyOperation' for type 'tt:PropertyOperation' */
#ifndef SOAP_TYPE_PointerTott__PropertyOperation
#define SOAP_TYPE_PointerTott__PropertyOperation (1941)
#endif

/* tt__MessageExtension * has binding name 'PointerTott__MessageExtension' for type 'tt:MessageExtension' */
#ifndef SOAP_TYPE_PointerTott__MessageExtension
#define SOAP_TYPE_PointerTott__MessageExtension (1940)
#endif

/* tt__LocalOrientation * has binding name 'PointerTott__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_PointerTott__LocalOrientation
#define SOAP_TYPE_PointerTott__LocalOrientation (1939)
#endif

/* tt__LocalLocation * has binding name 'PointerTott__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_PointerTott__LocalLocation
#define SOAP_TYPE_PointerTott__LocalLocation (1938)
#endif

/* tt__GeoOrientation * has binding name 'PointerTott__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_PointerTott__GeoOrientation
#define SOAP_TYPE_PointerTott__GeoOrientation (1937)
#endif

/* tt__GeoLocation * has binding name 'PointerTott__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_PointerTott__GeoLocation
#define SOAP_TYPE_PointerTott__GeoLocation (1936)
#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (1935)
#endif

/* tt__TransformationExtension * has binding name 'PointerTott__TransformationExtension' for type 'tt:TransformationExtension' */
#ifndef SOAP_TYPE_PointerTott__TransformationExtension
#define SOAP_TYPE_PointerTott__TransformationExtension (1934)
#endif

/* xsd__anyType * has binding name 'PointerToxsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_PointerToxsd__anyType
#define SOAP_TYPE_PointerToxsd__anyType (1933)
#endif

/* _tt__ColorDescriptor_ColorCluster * has binding name 'PointerTo_tt__ColorDescriptor_ColorCluster' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE_PointerTo_tt__ColorDescriptor_ColorCluster (1932)
#endif

/* tt__ColorCovariance * has binding name 'PointerTott__ColorCovariance' for type 'tt:ColorCovariance' */
#ifndef SOAP_TYPE_PointerTott__ColorCovariance
#define SOAP_TYPE_PointerTott__ColorCovariance (1931)
#endif

/* enum tt__MoveStatus * has binding name 'PointerTott__MoveStatus' for type 'tt:MoveStatus' */
#ifndef SOAP_TYPE_PointerTott__MoveStatus
#define SOAP_TYPE_PointerTott__MoveStatus (1929)
#endif

/* tt__PTZMoveStatus * has binding name 'PointerTott__PTZMoveStatus' for type 'tt:PTZMoveStatus' */
#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus
#define SOAP_TYPE_PointerTott__PTZMoveStatus (1928)
#endif

/* tt__StorageReferencePathExtension * has binding name 'PointerTott__StorageReferencePathExtension' for type 'tt:StorageReferencePathExtension' */
#ifndef SOAP_TYPE_PointerTott__StorageReferencePathExtension
#define SOAP_TYPE_PointerTott__StorageReferencePathExtension (1927)
#endif

/* tt__ArrayOfFileProgressExtension * has binding name 'PointerTott__ArrayOfFileProgressExtension' for type 'tt:ArrayOfFileProgressExtension' */
#ifndef SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension
#define SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension (1926)
#endif

/* tt__FileProgress ** has binding name 'PointerToPointerTott__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_PointerToPointerTott__FileProgress
#define SOAP_TYPE_PointerToPointerTott__FileProgress (1925)
#endif

/* tt__FileProgress * has binding name 'PointerTott__FileProgress' for type 'tt:FileProgress' */
#ifndef SOAP_TYPE_PointerTott__FileProgress
#define SOAP_TYPE_PointerTott__FileProgress (1924)
#endif

/* tt__OSDConfigurationOptionsExtension * has binding name 'PointerTott__OSDConfigurationOptionsExtension' for type 'tt:OSDConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension (1923)
#endif

/* tt__OSDImgOptions * has binding name 'PointerTott__OSDImgOptions' for type 'tt:OSDImgOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDImgOptions
#define SOAP_TYPE_PointerTott__OSDImgOptions (1922)
#endif

/* tt__OSDTextOptions * has binding name 'PointerTott__OSDTextOptions' for type 'tt:OSDTextOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDTextOptions
#define SOAP_TYPE_PointerTott__OSDTextOptions (1921)
#endif

/* enum tt__OSDType * has binding name 'PointerTott__OSDType' for type 'tt:OSDType' */
#ifndef SOAP_TYPE_PointerTott__OSDType
#define SOAP_TYPE_PointerTott__OSDType (1920)
#endif

/* tt__MaximumNumberOfOSDs * has binding name 'PointerTott__MaximumNumberOfOSDs' for type 'tt:MaximumNumberOfOSDs' */
#ifndef SOAP_TYPE_PointerTott__MaximumNumberOfOSDs
#define SOAP_TYPE_PointerTott__MaximumNumberOfOSDs (1919)
#endif

/* tt__OSDImgOptionsExtension * has binding name 'PointerTott__OSDImgOptionsExtension' for type 'tt:OSDImgOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDImgOptionsExtension
#define SOAP_TYPE_PointerTott__OSDImgOptionsExtension (1918)
#endif

/* tt__OSDTextOptionsExtension * has binding name 'PointerTott__OSDTextOptionsExtension' for type 'tt:OSDTextOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDTextOptionsExtension
#define SOAP_TYPE_PointerTott__OSDTextOptionsExtension (1917)
#endif

/* tt__OSDColorOptions * has binding name 'PointerTott__OSDColorOptions' for type 'tt:OSDColorOptions' */
#ifndef SOAP_TYPE_PointerTott__OSDColorOptions
#define SOAP_TYPE_PointerTott__OSDColorOptions (1916)
#endif

/* tt__OSDColorOptionsExtension * has binding name 'PointerTott__OSDColorOptionsExtension' for type 'tt:OSDColorOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDColorOptionsExtension
#define SOAP_TYPE_PointerTott__OSDColorOptionsExtension (1915)
#endif

/* tt__ColorOptions * has binding name 'PointerTott__ColorOptions' for type 'tt:ColorOptions' */
#ifndef SOAP_TYPE_PointerTott__ColorOptions
#define SOAP_TYPE_PointerTott__ColorOptions (1914)
#endif

/* tt__ColorspaceRange ** has binding name 'PointerToPointerTott__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_PointerToPointerTott__ColorspaceRange
#define SOAP_TYPE_PointerToPointerTott__ColorspaceRange (1913)
#endif

/* tt__ColorspaceRange * has binding name 'PointerTott__ColorspaceRange' for type 'tt:ColorspaceRange' */
#ifndef SOAP_TYPE_PointerTott__ColorspaceRange
#define SOAP_TYPE_PointerTott__ColorspaceRange (1912)
#endif

/* tt__Color ** has binding name 'PointerToPointerTott__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_PointerToPointerTott__Color
#define SOAP_TYPE_PointerToPointerTott__Color (1911)
#endif

/* tt__OSDImgConfigurationExtension * has binding name 'PointerTott__OSDImgConfigurationExtension' for type 'tt:OSDImgConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDImgConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDImgConfigurationExtension (1910)
#endif

/* tt__OSDTextConfigurationExtension * has binding name 'PointerTott__OSDTextConfigurationExtension' for type 'tt:OSDTextConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDTextConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDTextConfigurationExtension (1909)
#endif

/* tt__OSDColor * has binding name 'PointerTott__OSDColor' for type 'tt:OSDColor' */
#ifndef SOAP_TYPE_PointerTott__OSDColor
#define SOAP_TYPE_PointerTott__OSDColor (1908)
#endif

/* tt__Color * has binding name 'PointerTott__Color' for type 'tt:Color' */
#ifndef SOAP_TYPE_PointerTott__Color
#define SOAP_TYPE_PointerTott__Color (1907)
#endif

/* tt__OSDPosConfigurationExtension * has binding name 'PointerTott__OSDPosConfigurationExtension' for type 'tt:OSDPosConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__OSDPosConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDPosConfigurationExtension (1906)
#endif

/* tt__ProfileStatusExtension * has binding name 'PointerTott__ProfileStatusExtension' for type 'tt:ProfileStatusExtension' */
#ifndef SOAP_TYPE_PointerTott__ProfileStatusExtension
#define SOAP_TYPE_PointerTott__ProfileStatusExtension (1905)
#endif

/* tt__ActiveConnection ** has binding name 'PointerToPointerTott__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_PointerToPointerTott__ActiveConnection
#define SOAP_TYPE_PointerToPointerTott__ActiveConnection (1904)
#endif

/* tt__ActiveConnection * has binding name 'PointerTott__ActiveConnection' for type 'tt:ActiveConnection' */
#ifndef SOAP_TYPE_PointerTott__ActiveConnection
#define SOAP_TYPE_PointerTott__ActiveConnection (1903)
#endif

/* tt__AudioClassDescriptorExtension * has binding name 'PointerTott__AudioClassDescriptorExtension' for type 'tt:AudioClassDescriptorExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioClassDescriptorExtension
#define SOAP_TYPE_PointerTott__AudioClassDescriptorExtension (1902)
#endif

/* tt__AudioClassCandidate ** has binding name 'PointerToPointerTott__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioClassCandidate
#define SOAP_TYPE_PointerToPointerTott__AudioClassCandidate (1901)
#endif

/* tt__AudioClassCandidate * has binding name 'PointerTott__AudioClassCandidate' for type 'tt:AudioClassCandidate' */
#ifndef SOAP_TYPE_PointerTott__AudioClassCandidate
#define SOAP_TYPE_PointerTott__AudioClassCandidate (1900)
#endif

/* tt__ActionEngineEventPayloadExtension * has binding name 'PointerTott__ActionEngineEventPayloadExtension' for type 'tt:ActionEngineEventPayloadExtension' */
#ifndef SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension
#define SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension (1899)
#endif

/* struct SOAP_ENV__Fault * has binding name 'PointerToSOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Fault
#define SOAP_TYPE_PointerToSOAP_ENV__Fault (1898)
#endif

/* struct SOAP_ENV__Envelope * has binding name 'PointerToSOAP_ENV__Envelope' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Envelope
#define SOAP_TYPE_PointerToSOAP_ENV__Envelope (1897)
#endif

/* tt__AnalyticsState * has binding name 'PointerTott__AnalyticsState' for type 'tt:AnalyticsState' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsState
#define SOAP_TYPE_PointerTott__AnalyticsState (1896)
#endif

/* tt__MetadataInputExtension * has binding name 'PointerTott__MetadataInputExtension' for type 'tt:MetadataInputExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataInputExtension
#define SOAP_TYPE_PointerTott__MetadataInputExtension (1895)
#endif

/* tt__SourceIdentificationExtension * has binding name 'PointerTott__SourceIdentificationExtension' for type 'tt:SourceIdentificationExtension' */
#ifndef SOAP_TYPE_PointerTott__SourceIdentificationExtension
#define SOAP_TYPE_PointerTott__SourceIdentificationExtension (1894)
#endif

/* tt__AnalyticsEngineInputInfoExtension * has binding name 'PointerTott__AnalyticsEngineInputInfoExtension' for type 'tt:AnalyticsEngineInputInfoExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension (1893)
#endif

/* tt__AnalyticsEngineInputInfo * has binding name 'PointerTott__AnalyticsEngineInputInfo' for type 'tt:AnalyticsEngineInputInfo' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo (1892)
#endif

/* tt__AnalyticsDeviceEngineConfigurationExtension * has binding name 'PointerTott__AnalyticsDeviceEngineConfigurationExtension' for type 'tt:AnalyticsDeviceEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension (1891)
#endif

/* tt__EngineConfiguration ** has binding name 'PointerToPointerTott__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__EngineConfiguration
#define SOAP_TYPE_PointerToPointerTott__EngineConfiguration (1890)
#endif

/* tt__EngineConfiguration * has binding name 'PointerTott__EngineConfiguration' for type 'tt:EngineConfiguration' */
#ifndef SOAP_TYPE_PointerTott__EngineConfiguration
#define SOAP_TYPE_PointerTott__EngineConfiguration (1889)
#endif

/* tt__RecordingJobConfiguration * has binding name 'PointerTott__RecordingJobConfiguration' for type 'tt:RecordingJobConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobConfiguration
#define SOAP_TYPE_PointerTott__RecordingJobConfiguration (1888)
#endif

/* tt__RecordingJobStateTrack ** has binding name 'PointerToPointerTott__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_PointerToPointerTott__RecordingJobStateTrack
#define SOAP_TYPE_PointerToPointerTott__RecordingJobStateTrack (1887)
#endif

/* tt__RecordingJobStateTrack * has binding name 'PointerTott__RecordingJobStateTrack' for type 'tt:RecordingJobStateTrack' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTrack
#define SOAP_TYPE_PointerTott__RecordingJobStateTrack (1886)
#endif

/* tt__RecordingJobStateTracks * has binding name 'PointerTott__RecordingJobStateTracks' for type 'tt:RecordingJobStateTracks' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTracks
#define SOAP_TYPE_PointerTott__RecordingJobStateTracks (1885)
#endif

/* tt__RecordingJobStateInformationExtension * has binding name 'PointerTott__RecordingJobStateInformationExtension' for type 'tt:RecordingJobStateInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension
#define SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension (1884)
#endif

/* tt__RecordingJobStateSource ** has binding name 'PointerToPointerTott__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_PointerToPointerTott__RecordingJobStateSource
#define SOAP_TYPE_PointerToPointerTott__RecordingJobStateSource (1883)
#endif

/* tt__RecordingJobStateSource * has binding name 'PointerTott__RecordingJobStateSource' for type 'tt:RecordingJobStateSource' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobStateSource
#define SOAP_TYPE_PointerTott__RecordingJobStateSource (1882)
#endif

/* tt__RecordingJobSourceExtension * has binding name 'PointerTott__RecordingJobSourceExtension' for type 'tt:RecordingJobSourceExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobSourceExtension
#define SOAP_TYPE_PointerTott__RecordingJobSourceExtension (1881)
#endif

/* tt__RecordingJobTrack ** has binding name 'PointerToPointerTott__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_PointerToPointerTott__RecordingJobTrack
#define SOAP_TYPE_PointerToPointerTott__RecordingJobTrack (1880)
#endif

/* tt__RecordingJobTrack * has binding name 'PointerTott__RecordingJobTrack' for type 'tt:RecordingJobTrack' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobTrack
#define SOAP_TYPE_PointerTott__RecordingJobTrack (1879)
#endif

/* tt__RecordingJobConfigurationExtension * has binding name 'PointerTott__RecordingJobConfigurationExtension' for type 'tt:RecordingJobConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension
#define SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension (1878)
#endif

/* tt__RecordingJobSource ** has binding name 'PointerToPointerTott__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_PointerToPointerTott__RecordingJobSource
#define SOAP_TYPE_PointerToPointerTott__RecordingJobSource (1877)
#endif

/* tt__RecordingJobSource * has binding name 'PointerTott__RecordingJobSource' for type 'tt:RecordingJobSource' */
#ifndef SOAP_TYPE_PointerTott__RecordingJobSource
#define SOAP_TYPE_PointerTott__RecordingJobSource (1876)
#endif

/* tt__TrackConfiguration * has binding name 'PointerTott__TrackConfiguration' for type 'tt:TrackConfiguration' */
#ifndef SOAP_TYPE_PointerTott__TrackConfiguration
#define SOAP_TYPE_PointerTott__TrackConfiguration (1875)
#endif

/* tt__GetTracksResponseItem ** has binding name 'PointerToPointerTott__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_PointerToPointerTott__GetTracksResponseItem
#define SOAP_TYPE_PointerToPointerTott__GetTracksResponseItem (1874)
#endif

/* tt__GetTracksResponseItem * has binding name 'PointerTott__GetTracksResponseItem' for type 'tt:GetTracksResponseItem' */
#ifndef SOAP_TYPE_PointerTott__GetTracksResponseItem
#define SOAP_TYPE_PointerTott__GetTracksResponseItem (1873)
#endif

/* tt__GetTracksResponseList * has binding name 'PointerTott__GetTracksResponseList' for type 'tt:GetTracksResponseList' */
#ifndef SOAP_TYPE_PointerTott__GetTracksResponseList
#define SOAP_TYPE_PointerTott__GetTracksResponseList (1872)
#endif

/* tt__RecordingConfiguration * has binding name 'PointerTott__RecordingConfiguration' for type 'tt:RecordingConfiguration' */
#ifndef SOAP_TYPE_PointerTott__RecordingConfiguration
#define SOAP_TYPE_PointerTott__RecordingConfiguration (1871)
#endif

/* tt__TrackAttributesExtension * has binding name 'PointerTott__TrackAttributesExtension' for type 'tt:TrackAttributesExtension' */
#ifndef SOAP_TYPE_PointerTott__TrackAttributesExtension
#define SOAP_TYPE_PointerTott__TrackAttributesExtension (1870)
#endif

/* tt__MetadataAttributes * has binding name 'PointerTott__MetadataAttributes' for type 'tt:MetadataAttributes' */
#ifndef SOAP_TYPE_PointerTott__MetadataAttributes
#define SOAP_TYPE_PointerTott__MetadataAttributes (1869)
#endif

/* tt__AudioAttributes * has binding name 'PointerTott__AudioAttributes' for type 'tt:AudioAttributes' */
#ifndef SOAP_TYPE_PointerTott__AudioAttributes
#define SOAP_TYPE_PointerTott__AudioAttributes (1868)
#endif

/* tt__VideoAttributes * has binding name 'PointerTott__VideoAttributes' for type 'tt:VideoAttributes' */
#ifndef SOAP_TYPE_PointerTott__VideoAttributes
#define SOAP_TYPE_PointerTott__VideoAttributes (1867)
#endif

/* tt__TrackAttributes ** has binding name 'PointerToPointerTott__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_PointerToPointerTott__TrackAttributes
#define SOAP_TYPE_PointerToPointerTott__TrackAttributes (1866)
#endif

/* tt__TrackAttributes * has binding name 'PointerTott__TrackAttributes' for type 'tt:TrackAttributes' */
#ifndef SOAP_TYPE_PointerTott__TrackAttributes
#define SOAP_TYPE_PointerTott__TrackAttributes (1865)
#endif

/* tt__TrackInformation ** has binding name 'PointerToPointerTott__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_PointerToPointerTott__TrackInformation
#define SOAP_TYPE_PointerToPointerTott__TrackInformation (1864)
#endif

/* tt__TrackInformation * has binding name 'PointerTott__TrackInformation' for type 'tt:TrackInformation' */
#ifndef SOAP_TYPE_PointerTott__TrackInformation
#define SOAP_TYPE_PointerTott__TrackInformation (1863)
#endif

/* tt__RecordingSourceInformation * has binding name 'PointerTott__RecordingSourceInformation' for type 'tt:RecordingSourceInformation' */
#ifndef SOAP_TYPE_PointerTott__RecordingSourceInformation
#define SOAP_TYPE_PointerTott__RecordingSourceInformation (1862)
#endif

/* tt__FindMetadataResult ** has binding name 'PointerToPointerTott__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_PointerToPointerTott__FindMetadataResult
#define SOAP_TYPE_PointerToPointerTott__FindMetadataResult (1861)
#endif

/* tt__FindMetadataResult * has binding name 'PointerTott__FindMetadataResult' for type 'tt:FindMetadataResult' */
#ifndef SOAP_TYPE_PointerTott__FindMetadataResult
#define SOAP_TYPE_PointerTott__FindMetadataResult (1860)
#endif

/* tt__FindPTZPositionResult ** has binding name 'PointerToPointerTott__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_PointerToPointerTott__FindPTZPositionResult
#define SOAP_TYPE_PointerToPointerTott__FindPTZPositionResult (1859)
#endif

/* tt__FindPTZPositionResult * has binding name 'PointerTott__FindPTZPositionResult' for type 'tt:FindPTZPositionResult' */
#ifndef SOAP_TYPE_PointerTott__FindPTZPositionResult
#define SOAP_TYPE_PointerTott__FindPTZPositionResult (1858)
#endif

/* wsnt__NotificationMessageHolderType * has binding name 'PointerTowsnt__NotificationMessageHolderType' for type 'wsnt:NotificationMessageHolderType' */
#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType (1857)
#endif

/* tt__FindEventResult ** has binding name 'PointerToPointerTott__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_PointerToPointerTott__FindEventResult
#define SOAP_TYPE_PointerToPointerTott__FindEventResult (1856)
#endif

/* tt__FindEventResult * has binding name 'PointerTott__FindEventResult' for type 'tt:FindEventResult' */
#ifndef SOAP_TYPE_PointerTott__FindEventResult
#define SOAP_TYPE_PointerTott__FindEventResult (1855)
#endif

/* tt__RecordingInformation ** has binding name 'PointerToPointerTott__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_PointerToPointerTott__RecordingInformation
#define SOAP_TYPE_PointerToPointerTott__RecordingInformation (1854)
#endif

/* tt__RecordingInformation * has binding name 'PointerTott__RecordingInformation' for type 'tt:RecordingInformation' */
#ifndef SOAP_TYPE_PointerTott__RecordingInformation
#define SOAP_TYPE_PointerTott__RecordingInformation (1853)
#endif

/* tt__SearchScopeExtension * has binding name 'PointerTott__SearchScopeExtension' for type 'tt:SearchScopeExtension' */
#ifndef SOAP_TYPE_PointerTott__SearchScopeExtension
#define SOAP_TYPE_PointerTott__SearchScopeExtension (1852)
#endif

/* char ** has binding name 'PointerTott__RecordingReference' for type 'tt:RecordingReference' */
#ifndef SOAP_TYPE_PointerTott__RecordingReference
#define SOAP_TYPE_PointerTott__RecordingReference (1851)
#endif

/* tt__SourceReference ** has binding name 'PointerToPointerTott__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_PointerToPointerTott__SourceReference
#define SOAP_TYPE_PointerToPointerTott__SourceReference (1850)
#endif

/* tt__SourceReference * has binding name 'PointerTott__SourceReference' for type 'tt:SourceReference' */
#ifndef SOAP_TYPE_PointerTott__SourceReference
#define SOAP_TYPE_PointerTott__SourceReference (1849)
#endif

/* tt__StreamSetup * has binding name 'PointerTott__StreamSetup' for type 'tt:StreamSetup' */
#ifndef SOAP_TYPE_PointerTott__StreamSetup
#define SOAP_TYPE_PointerTott__StreamSetup (1848)
#endif

/* tt__ReceiverConfiguration * has binding name 'PointerTott__ReceiverConfiguration' for type 'tt:ReceiverConfiguration' */
#ifndef SOAP_TYPE_PointerTott__ReceiverConfiguration
#define SOAP_TYPE_PointerTott__ReceiverConfiguration (1847)
#endif

/* tt__PaneOptionExtension * has binding name 'PointerTott__PaneOptionExtension' for type 'tt:PaneOptionExtension' */
#ifndef SOAP_TYPE_PointerTott__PaneOptionExtension
#define SOAP_TYPE_PointerTott__PaneOptionExtension (1846)
#endif

/* tt__Rectangle ** has binding name 'PointerToPointerTott__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_PointerToPointerTott__Rectangle
#define SOAP_TYPE_PointerToPointerTott__Rectangle (1845)
#endif

/* tt__LayoutOptionsExtension * has binding name 'PointerTott__LayoutOptionsExtension' for type 'tt:LayoutOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__LayoutOptionsExtension
#define SOAP_TYPE_PointerTott__LayoutOptionsExtension (1844)
#endif

/* tt__PaneLayoutOptions ** has binding name 'PointerToPointerTott__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_PointerToPointerTott__PaneLayoutOptions
#define SOAP_TYPE_PointerToPointerTott__PaneLayoutOptions (1843)
#endif

/* tt__PaneLayoutOptions * has binding name 'PointerTott__PaneLayoutOptions' for type 'tt:PaneLayoutOptions' */
#ifndef SOAP_TYPE_PointerTott__PaneLayoutOptions
#define SOAP_TYPE_PointerTott__PaneLayoutOptions (1842)
#endif

/* tt__VideoDecoderConfigurationOptions * has binding name 'PointerTott__VideoDecoderConfigurationOptions' for type 'tt:VideoDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions (1841)
#endif

/* tt__AudioDecoderConfigurationOptions * has binding name 'PointerTott__AudioDecoderConfigurationOptions' for type 'tt:AudioDecoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions (1840)
#endif

/* tt__AudioEncoderConfigurationOptions * has binding name 'PointerTott__AudioEncoderConfigurationOptions' for type 'tt:AudioEncoderConfigurationOptions' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions (1839)
#endif

/* tt__LayoutExtension * has binding name 'PointerTott__LayoutExtension' for type 'tt:LayoutExtension' */
#ifndef SOAP_TYPE_PointerTott__LayoutExtension
#define SOAP_TYPE_PointerTott__LayoutExtension (1838)
#endif

/* tt__PaneLayout ** has binding name 'PointerToPointerTott__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_PointerToPointerTott__PaneLayout
#define SOAP_TYPE_PointerToPointerTott__PaneLayout (1837)
#endif

/* tt__PaneLayout * has binding name 'PointerTott__PaneLayout' for type 'tt:PaneLayout' */
#ifndef SOAP_TYPE_PointerTott__PaneLayout
#define SOAP_TYPE_PointerTott__PaneLayout (1836)
#endif

/* tt__Transformation * has binding name 'PointerTott__Transformation' for type 'tt:Transformation' */
#ifndef SOAP_TYPE_PointerTott__Transformation
#define SOAP_TYPE_PointerTott__Transformation (1835)
#endif

/* tt__MotionExpression * has binding name 'PointerTott__MotionExpression' for type 'tt:MotionExpression' */
#ifndef SOAP_TYPE_PointerTott__MotionExpression
#define SOAP_TYPE_PointerTott__MotionExpression (1834)
#endif

/* tt__PolylineArray * has binding name 'PointerTott__PolylineArray' for type 'tt:PolylineArray' */
#ifndef SOAP_TYPE_PointerTott__PolylineArray
#define SOAP_TYPE_PointerTott__PolylineArray (1833)
#endif

/* tt__PolylineArrayExtension * has binding name 'PointerTott__PolylineArrayExtension' for type 'tt:PolylineArrayExtension' */
#ifndef SOAP_TYPE_PointerTott__PolylineArrayExtension
#define SOAP_TYPE_PointerTott__PolylineArrayExtension (1832)
#endif

/* tt__Polyline ** has binding name 'PointerToPointerTott__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_PointerToPointerTott__Polyline
#define SOAP_TYPE_PointerToPointerTott__Polyline (1831)
#endif

/* tt__Polyline * has binding name 'PointerTott__Polyline' for type 'tt:Polyline' */
#ifndef SOAP_TYPE_PointerTott__Polyline
#define SOAP_TYPE_PointerTott__Polyline (1830)
#endif

/* tt__SupportedAnalyticsModulesExtension * has binding name 'PointerTott__SupportedAnalyticsModulesExtension' for type 'tt:SupportedAnalyticsModulesExtension' */
#ifndef SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension (1829)
#endif

/* tt__SupportedRulesExtension * has binding name 'PointerTott__SupportedRulesExtension' for type 'tt:SupportedRulesExtension' */
#ifndef SOAP_TYPE_PointerTott__SupportedRulesExtension
#define SOAP_TYPE_PointerTott__SupportedRulesExtension (1828)
#endif

/* tt__ConfigDescription ** has binding name 'PointerToPointerTott__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_PointerToPointerTott__ConfigDescription
#define SOAP_TYPE_PointerToPointerTott__ConfigDescription (1827)
#endif

/* tt__ConfigDescription * has binding name 'PointerTott__ConfigDescription' for type 'tt:ConfigDescription' */
#ifndef SOAP_TYPE_PointerTott__ConfigDescription
#define SOAP_TYPE_PointerTott__ConfigDescription (1826)
#endif

/* tt__ConfigDescriptionExtension * has binding name 'PointerTott__ConfigDescriptionExtension' for type 'tt:ConfigDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__ConfigDescriptionExtension
#define SOAP_TYPE_PointerTott__ConfigDescriptionExtension (1825)
#endif

/* _tt__ConfigDescription_Messages * has binding name 'PointerTo_tt__ConfigDescription_Messages' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ConfigDescription_Messages
#define SOAP_TYPE_PointerTo_tt__ConfigDescription_Messages (1824)
#endif

/* tt__ItemList * has binding name 'PointerTott__ItemList' for type 'tt:ItemList' */
#ifndef SOAP_TYPE_PointerTott__ItemList
#define SOAP_TYPE_PointerTott__ItemList (1822)
#endif

/* tt__RuleEngineConfigurationExtension * has binding name 'PointerTott__RuleEngineConfigurationExtension' for type 'tt:RuleEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension (1821)
#endif

/* tt__AnalyticsEngineConfigurationExtension * has binding name 'PointerTott__AnalyticsEngineConfigurationExtension' for type 'tt:AnalyticsEngineConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension (1820)
#endif

/* tt__Config ** has binding name 'PointerToPointerTott__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_PointerToPointerTott__Config
#define SOAP_TYPE_PointerToPointerTott__Config (1819)
#endif

/* tt__Config * has binding name 'PointerTott__Config' for type 'tt:Config' */
#ifndef SOAP_TYPE_PointerTott__Config
#define SOAP_TYPE_PointerTott__Config (1818)
#endif

/* tt__Vector ** has binding name 'PointerToPointerTott__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_PointerToPointerTott__Vector
#define SOAP_TYPE_PointerToPointerTott__Vector (1817)
#endif

/* tt__Vector * has binding name 'PointerTott__Vector' for type 'tt:Vector' */
#ifndef SOAP_TYPE_PointerTott__Vector
#define SOAP_TYPE_PointerTott__Vector (1816)
#endif

/* tt__ItemListDescriptionExtension * has binding name 'PointerTott__ItemListDescriptionExtension' for type 'tt:ItemListDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__ItemListDescriptionExtension
#define SOAP_TYPE_PointerTott__ItemListDescriptionExtension (1815)
#endif

/* _tt__ItemListDescription_ElementItemDescription * has binding name 'PointerTo_tt__ItemListDescription_ElementItemDescription' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_PointerTo_tt__ItemListDescription_ElementItemDescription (1814)
#endif

/* _tt__ItemListDescription_SimpleItemDescription * has binding name 'PointerTo_tt__ItemListDescription_SimpleItemDescription' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_PointerTo_tt__ItemListDescription_SimpleItemDescription (1812)
#endif

/* tt__MessageDescriptionExtension * has binding name 'PointerTott__MessageDescriptionExtension' for type 'tt:MessageDescriptionExtension' */
#ifndef SOAP_TYPE_PointerTott__MessageDescriptionExtension
#define SOAP_TYPE_PointerTott__MessageDescriptionExtension (1810)
#endif

/* tt__ItemListDescription * has binding name 'PointerTott__ItemListDescription' for type 'tt:ItemListDescription' */
#ifndef SOAP_TYPE_PointerTott__ItemListDescription
#define SOAP_TYPE_PointerTott__ItemListDescription (1809)
#endif

/* tt__ItemListExtension * has binding name 'PointerTott__ItemListExtension' for type 'tt:ItemListExtension' */
#ifndef SOAP_TYPE_PointerTott__ItemListExtension
#define SOAP_TYPE_PointerTott__ItemListExtension (1808)
#endif

/* _tt__ItemList_ElementItem * has binding name 'PointerTo_tt__ItemList_ElementItem' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ItemList_ElementItem
#define SOAP_TYPE_PointerTo_tt__ItemList_ElementItem (1807)
#endif

/* _tt__ItemList_SimpleItem * has binding name 'PointerTo_tt__ItemList_SimpleItem' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__ItemList_SimpleItem
#define SOAP_TYPE_PointerTo_tt__ItemList_SimpleItem (1805)
#endif

/* tt__FocusOptions20Extension * has binding name 'PointerTott__FocusOptions20Extension' for type 'tt:FocusOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions20Extension
#define SOAP_TYPE_PointerTott__FocusOptions20Extension (1803)
#endif

/* tt__WhiteBalanceOptions20Extension * has binding name 'PointerTott__WhiteBalanceOptions20Extension' for type 'tt:WhiteBalanceOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension (1802)
#endif

/* tt__FocusConfiguration20Extension * has binding name 'PointerTott__FocusConfiguration20Extension' for type 'tt:FocusConfiguration20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20Extension
#define SOAP_TYPE_PointerTott__FocusConfiguration20Extension (1801)
#endif

/* tt__WhiteBalance20Extension * has binding name 'PointerTott__WhiteBalance20Extension' for type 'tt:WhiteBalance20Extension' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance20Extension
#define SOAP_TYPE_PointerTott__WhiteBalance20Extension (1800)
#endif

/* tt__RelativeFocusOptions20 * has binding name 'PointerTott__RelativeFocusOptions20' for type 'tt:RelativeFocusOptions20' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions20
#define SOAP_TYPE_PointerTott__RelativeFocusOptions20 (1799)
#endif

/* enum tt__BacklightCompensationMode * has binding name 'PointerTott__BacklightCompensationMode' for type 'tt:BacklightCompensationMode' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensationMode
#define SOAP_TYPE_PointerTott__BacklightCompensationMode (1798)
#endif

/* tt__IrCutFilterAutoAdjustmentOptionsExtension * has binding name 'PointerTott__IrCutFilterAutoAdjustmentOptionsExtension' for type 'tt:IrCutFilterAutoAdjustmentOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension (1797)
#endif

/* tt__ImageStabilizationOptionsExtension * has binding name 'PointerTott__ImageStabilizationOptionsExtension' for type 'tt:ImageStabilizationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension (1796)
#endif

/* enum tt__ImageStabilizationMode * has binding name 'PointerTott__ImageStabilizationMode' for type 'tt:ImageStabilizationMode' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationMode
#define SOAP_TYPE_PointerTott__ImageStabilizationMode (1795)
#endif

/* tt__ImagingOptions20Extension4 * has binding name 'PointerTott__ImagingOptions20Extension4' for type 'tt:ImagingOptions20Extension4' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension4
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension4 (1794)
#endif

/* tt__NoiseReductionOptions * has binding name 'PointerTott__NoiseReductionOptions' for type 'tt:NoiseReductionOptions' */
#ifndef SOAP_TYPE_PointerTott__NoiseReductionOptions
#define SOAP_TYPE_PointerTott__NoiseReductionOptions (1793)
#endif

/* tt__DefoggingOptions * has binding name 'PointerTott__DefoggingOptions' for type 'tt:DefoggingOptions' */
#ifndef SOAP_TYPE_PointerTott__DefoggingOptions
#define SOAP_TYPE_PointerTott__DefoggingOptions (1792)
#endif

/* tt__ToneCompensationOptions * has binding name 'PointerTott__ToneCompensationOptions' for type 'tt:ToneCompensationOptions' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensationOptions
#define SOAP_TYPE_PointerTott__ToneCompensationOptions (1791)
#endif

/* tt__ImagingOptions20Extension3 * has binding name 'PointerTott__ImagingOptions20Extension3' for type 'tt:ImagingOptions20Extension3' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension3
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension3 (1790)
#endif

/* tt__IrCutFilterAutoAdjustmentOptions * has binding name 'PointerTott__IrCutFilterAutoAdjustmentOptions' for type 'tt:IrCutFilterAutoAdjustmentOptions' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions (1789)
#endif

/* tt__ImagingOptions20Extension2 * has binding name 'PointerTott__ImagingOptions20Extension2' for type 'tt:ImagingOptions20Extension2' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension2
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension2 (1788)
#endif

/* tt__ImageStabilizationOptions * has binding name 'PointerTott__ImageStabilizationOptions' for type 'tt:ImageStabilizationOptions' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptions
#define SOAP_TYPE_PointerTott__ImageStabilizationOptions (1787)
#endif

/* tt__ImagingOptions20Extension * has binding name 'PointerTott__ImagingOptions20Extension' for type 'tt:ImagingOptions20Extension' */
#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension (1786)
#endif

/* tt__WhiteBalanceOptions20 * has binding name 'PointerTott__WhiteBalanceOptions20' for type 'tt:WhiteBalanceOptions20' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20 (1785)
#endif

/* tt__WideDynamicRangeOptions20 * has binding name 'PointerTott__WideDynamicRangeOptions20' for type 'tt:WideDynamicRangeOptions20' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions20
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions20 (1784)
#endif

/* tt__FocusOptions20 * has binding name 'PointerTott__FocusOptions20' for type 'tt:FocusOptions20' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions20
#define SOAP_TYPE_PointerTott__FocusOptions20 (1783)
#endif

/* tt__ExposureOptions20 * has binding name 'PointerTott__ExposureOptions20' for type 'tt:ExposureOptions20' */
#ifndef SOAP_TYPE_PointerTott__ExposureOptions20
#define SOAP_TYPE_PointerTott__ExposureOptions20 (1782)
#endif

/* tt__BacklightCompensationOptions20 * has binding name 'PointerTott__BacklightCompensationOptions20' for type 'tt:BacklightCompensationOptions20' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions20
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions20 (1781)
#endif

/* tt__DefoggingExtension * has binding name 'PointerTott__DefoggingExtension' for type 'tt:DefoggingExtension' */
#ifndef SOAP_TYPE_PointerTott__DefoggingExtension
#define SOAP_TYPE_PointerTott__DefoggingExtension (1780)
#endif

/* tt__ToneCompensationExtension * has binding name 'PointerTott__ToneCompensationExtension' for type 'tt:ToneCompensationExtension' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensationExtension
#define SOAP_TYPE_PointerTott__ToneCompensationExtension (1779)
#endif

/* tt__IrCutFilterAutoAdjustmentExtension * has binding name 'PointerTott__IrCutFilterAutoAdjustmentExtension' for type 'tt:IrCutFilterAutoAdjustmentExtension' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension (1778)
#endif

/* tt__ImageStabilizationExtension * has binding name 'PointerTott__ImageStabilizationExtension' for type 'tt:ImageStabilizationExtension' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilizationExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationExtension (1777)
#endif

/* tt__ImagingSettingsExtension204 * has binding name 'PointerTott__ImagingSettingsExtension204' for type 'tt:ImagingSettingsExtension204' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension204
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension204 (1776)
#endif

/* tt__NoiseReduction * has binding name 'PointerTott__NoiseReduction' for type 'tt:NoiseReduction' */
#ifndef SOAP_TYPE_PointerTott__NoiseReduction
#define SOAP_TYPE_PointerTott__NoiseReduction (1775)
#endif

/* tt__Defogging * has binding name 'PointerTott__Defogging' for type 'tt:Defogging' */
#ifndef SOAP_TYPE_PointerTott__Defogging
#define SOAP_TYPE_PointerTott__Defogging (1774)
#endif

/* tt__ToneCompensation * has binding name 'PointerTott__ToneCompensation' for type 'tt:ToneCompensation' */
#ifndef SOAP_TYPE_PointerTott__ToneCompensation
#define SOAP_TYPE_PointerTott__ToneCompensation (1773)
#endif

/* tt__ImagingSettingsExtension203 * has binding name 'PointerTott__ImagingSettingsExtension203' for type 'tt:ImagingSettingsExtension203' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension203
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension203 (1772)
#endif

/* tt__IrCutFilterAutoAdjustment ** has binding name 'PointerToPointerTott__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_PointerToPointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_PointerToPointerTott__IrCutFilterAutoAdjustment (1771)
#endif

/* tt__IrCutFilterAutoAdjustment * has binding name 'PointerTott__IrCutFilterAutoAdjustment' for type 'tt:IrCutFilterAutoAdjustment' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment (1770)
#endif

/* tt__ImagingSettingsExtension202 * has binding name 'PointerTott__ImagingSettingsExtension202' for type 'tt:ImagingSettingsExtension202' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension202
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension202 (1769)
#endif

/* tt__ImageStabilization * has binding name 'PointerTott__ImageStabilization' for type 'tt:ImageStabilization' */
#ifndef SOAP_TYPE_PointerTott__ImageStabilization
#define SOAP_TYPE_PointerTott__ImageStabilization (1768)
#endif

/* tt__ImagingSettingsExtension20 * has binding name 'PointerTott__ImagingSettingsExtension20' for type 'tt:ImagingSettingsExtension20' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension20
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension20 (1767)
#endif

/* tt__WhiteBalance20 * has binding name 'PointerTott__WhiteBalance20' for type 'tt:WhiteBalance20' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance20
#define SOAP_TYPE_PointerTott__WhiteBalance20 (1766)
#endif

/* tt__WideDynamicRange20 * has binding name 'PointerTott__WideDynamicRange20' for type 'tt:WideDynamicRange20' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRange20
#define SOAP_TYPE_PointerTott__WideDynamicRange20 (1765)
#endif

/* tt__FocusConfiguration20 * has binding name 'PointerTott__FocusConfiguration20' for type 'tt:FocusConfiguration20' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20
#define SOAP_TYPE_PointerTott__FocusConfiguration20 (1764)
#endif

/* tt__Exposure20 * has binding name 'PointerTott__Exposure20' for type 'tt:Exposure20' */
#ifndef SOAP_TYPE_PointerTott__Exposure20
#define SOAP_TYPE_PointerTott__Exposure20 (1763)
#endif

/* tt__BacklightCompensation20 * has binding name 'PointerTott__BacklightCompensation20' for type 'tt:BacklightCompensation20' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensation20
#define SOAP_TYPE_PointerTott__BacklightCompensation20 (1762)
#endif

/* tt__FocusStatus20Extension * has binding name 'PointerTott__FocusStatus20Extension' for type 'tt:FocusStatus20Extension' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus20Extension
#define SOAP_TYPE_PointerTott__FocusStatus20Extension (1761)
#endif

/* tt__ImagingStatus20Extension * has binding name 'PointerTott__ImagingStatus20Extension' for type 'tt:ImagingStatus20Extension' */
#ifndef SOAP_TYPE_PointerTott__ImagingStatus20Extension
#define SOAP_TYPE_PointerTott__ImagingStatus20Extension (1760)
#endif

/* tt__FocusStatus20 * has binding name 'PointerTott__FocusStatus20' for type 'tt:FocusStatus20' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus20
#define SOAP_TYPE_PointerTott__FocusStatus20 (1759)
#endif

/* tt__ContinuousFocusOptions * has binding name 'PointerTott__ContinuousFocusOptions' for type 'tt:ContinuousFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__ContinuousFocusOptions
#define SOAP_TYPE_PointerTott__ContinuousFocusOptions (1758)
#endif

/* tt__RelativeFocusOptions * has binding name 'PointerTott__RelativeFocusOptions' for type 'tt:RelativeFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions
#define SOAP_TYPE_PointerTott__RelativeFocusOptions (1757)
#endif

/* tt__AbsoluteFocusOptions * has binding name 'PointerTott__AbsoluteFocusOptions' for type 'tt:AbsoluteFocusOptions' */
#ifndef SOAP_TYPE_PointerTott__AbsoluteFocusOptions
#define SOAP_TYPE_PointerTott__AbsoluteFocusOptions (1756)
#endif

/* tt__ContinuousFocus * has binding name 'PointerTott__ContinuousFocus' for type 'tt:ContinuousFocus' */
#ifndef SOAP_TYPE_PointerTott__ContinuousFocus
#define SOAP_TYPE_PointerTott__ContinuousFocus (1755)
#endif

/* tt__RelativeFocus * has binding name 'PointerTott__RelativeFocus' for type 'tt:RelativeFocus' */
#ifndef SOAP_TYPE_PointerTott__RelativeFocus
#define SOAP_TYPE_PointerTott__RelativeFocus (1754)
#endif

/* tt__AbsoluteFocus * has binding name 'PointerTott__AbsoluteFocus' for type 'tt:AbsoluteFocus' */
#ifndef SOAP_TYPE_PointerTott__AbsoluteFocus
#define SOAP_TYPE_PointerTott__AbsoluteFocus (1753)
#endif

/* enum tt__WhiteBalanceMode * has binding name 'PointerTott__WhiteBalanceMode' for type 'tt:WhiteBalanceMode' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceMode
#define SOAP_TYPE_PointerTott__WhiteBalanceMode (1752)
#endif

/* enum tt__ExposurePriority * has binding name 'PointerTott__ExposurePriority' for type 'tt:ExposurePriority' */
#ifndef SOAP_TYPE_PointerTott__ExposurePriority
#define SOAP_TYPE_PointerTott__ExposurePriority (1751)
#endif

/* enum tt__ExposureMode * has binding name 'PointerTott__ExposureMode' for type 'tt:ExposureMode' */
#ifndef SOAP_TYPE_PointerTott__ExposureMode
#define SOAP_TYPE_PointerTott__ExposureMode (1750)
#endif

/* enum tt__AutoFocusMode * has binding name 'PointerTott__AutoFocusMode' for type 'tt:AutoFocusMode' */
#ifndef SOAP_TYPE_PointerTott__AutoFocusMode
#define SOAP_TYPE_PointerTott__AutoFocusMode (1749)
#endif

/* enum tt__WideDynamicMode * has binding name 'PointerTott__WideDynamicMode' for type 'tt:WideDynamicMode' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicMode
#define SOAP_TYPE_PointerTott__WideDynamicMode (1748)
#endif

/* tt__WhiteBalanceOptions * has binding name 'PointerTott__WhiteBalanceOptions' for type 'tt:WhiteBalanceOptions' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions (1747)
#endif

/* tt__WideDynamicRangeOptions * has binding name 'PointerTott__WideDynamicRangeOptions' for type 'tt:WideDynamicRangeOptions' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions (1746)
#endif

/* tt__FocusOptions * has binding name 'PointerTott__FocusOptions' for type 'tt:FocusOptions' */
#ifndef SOAP_TYPE_PointerTott__FocusOptions
#define SOAP_TYPE_PointerTott__FocusOptions (1745)
#endif

/* tt__ExposureOptions * has binding name 'PointerTott__ExposureOptions' for type 'tt:ExposureOptions' */
#ifndef SOAP_TYPE_PointerTott__ExposureOptions
#define SOAP_TYPE_PointerTott__ExposureOptions (1744)
#endif

/* tt__BacklightCompensationOptions * has binding name 'PointerTott__BacklightCompensationOptions' for type 'tt:BacklightCompensationOptions' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions (1743)
#endif

/* tt__Rectangle * has binding name 'PointerTott__Rectangle' for type 'tt:Rectangle' */
#ifndef SOAP_TYPE_PointerTott__Rectangle
#define SOAP_TYPE_PointerTott__Rectangle (1742)
#endif

/* tt__ImagingSettingsExtension * has binding name 'PointerTott__ImagingSettingsExtension' for type 'tt:ImagingSettingsExtension' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension (1741)
#endif

/* tt__WhiteBalance * has binding name 'PointerTott__WhiteBalance' for type 'tt:WhiteBalance' */
#ifndef SOAP_TYPE_PointerTott__WhiteBalance
#define SOAP_TYPE_PointerTott__WhiteBalance (1740)
#endif

/* tt__WideDynamicRange * has binding name 'PointerTott__WideDynamicRange' for type 'tt:WideDynamicRange' */
#ifndef SOAP_TYPE_PointerTott__WideDynamicRange
#define SOAP_TYPE_PointerTott__WideDynamicRange (1739)
#endif

/* enum tt__IrCutFilterMode * has binding name 'PointerTott__IrCutFilterMode' for type 'tt:IrCutFilterMode' */
#ifndef SOAP_TYPE_PointerTott__IrCutFilterMode
#define SOAP_TYPE_PointerTott__IrCutFilterMode (1738)
#endif

/* tt__FocusConfiguration * has binding name 'PointerTott__FocusConfiguration' for type 'tt:FocusConfiguration' */
#ifndef SOAP_TYPE_PointerTott__FocusConfiguration
#define SOAP_TYPE_PointerTott__FocusConfiguration (1737)
#endif

/* tt__Exposure * has binding name 'PointerTott__Exposure' for type 'tt:Exposure' */
#ifndef SOAP_TYPE_PointerTott__Exposure
#define SOAP_TYPE_PointerTott__Exposure (1736)
#endif

/* tt__BacklightCompensation * has binding name 'PointerTott__BacklightCompensation' for type 'tt:BacklightCompensation' */
#ifndef SOAP_TYPE_PointerTott__BacklightCompensation
#define SOAP_TYPE_PointerTott__BacklightCompensation (1735)
#endif

/* tt__FocusStatus * has binding name 'PointerTott__FocusStatus' for type 'tt:FocusStatus' */
#ifndef SOAP_TYPE_PointerTott__FocusStatus
#define SOAP_TYPE_PointerTott__FocusStatus (1734)
#endif

/* tt__PTZPresetTourStartingConditionOptionsExtension * has binding name 'PointerTott__PTZPresetTourStartingConditionOptionsExtension' for type 'tt:PTZPresetTourStartingConditionOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension (1733)
#endif

/* tt__PTZPresetTourPresetDetailOptionsExtension * has binding name 'PointerTott__PTZPresetTourPresetDetailOptionsExtension' for type 'tt:PTZPresetTourPresetDetailOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension (1732)
#endif

/* tt__PTZPresetTourPresetDetailOptions * has binding name 'PointerTott__PTZPresetTourPresetDetailOptions' for type 'tt:PTZPresetTourPresetDetailOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions (1731)
#endif

/* tt__PTZPresetTourSpotOptions * has binding name 'PointerTott__PTZPresetTourSpotOptions' for type 'tt:PTZPresetTourSpotOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions (1730)
#endif

/* tt__PTZPresetTourStartingConditionOptions * has binding name 'PointerTott__PTZPresetTourStartingConditionOptions' for type 'tt:PTZPresetTourStartingConditionOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions (1729)
#endif

/* tt__PTZPresetTourStartingConditionExtension * has binding name 'PointerTott__PTZPresetTourStartingConditionExtension' for type 'tt:PTZPresetTourStartingConditionExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension (1728)
#endif

/* enum tt__PTZPresetTourDirection * has binding name 'PointerTott__PTZPresetTourDirection' for type 'tt:PTZPresetTourDirection' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection (1727)
#endif

/* tt__PTZPresetTourStatusExtension * has binding name 'PointerTott__PTZPresetTourStatusExtension' for type 'tt:PTZPresetTourStatusExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension (1726)
#endif

/* tt__PTZPresetTourTypeExtension * has binding name 'PointerTott__PTZPresetTourTypeExtension' for type 'tt:PTZPresetTourTypeExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension (1725)
#endif

/* tt__PTZPresetTourSpotExtension * has binding name 'PointerTott__PTZPresetTourSpotExtension' for type 'tt:PTZPresetTourSpotExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension (1723)
#endif

/* tt__PTZSpeed * has binding name 'PointerTott__PTZSpeed' for type 'tt:PTZSpeed' */
#ifndef SOAP_TYPE_PointerTott__PTZSpeed
#define SOAP_TYPE_PointerTott__PTZSpeed (1722)
#endif

/* tt__PTZPresetTourPresetDetail * has binding name 'PointerTott__PTZPresetTourPresetDetail' for type 'tt:PTZPresetTourPresetDetail' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail (1721)
#endif

/* tt__PTZPresetTourExtension * has binding name 'PointerTott__PTZPresetTourExtension' for type 'tt:PTZPresetTourExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension (1720)
#endif

/* tt__PTZPresetTourSpot ** has binding name 'PointerToPointerTott__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_PointerToPointerTott__PTZPresetTourSpot
#define SOAP_TYPE_PointerToPointerTott__PTZPresetTourSpot (1719)
#endif

/* tt__PTZPresetTourSpot * has binding name 'PointerTott__PTZPresetTourSpot' for type 'tt:PTZPresetTourSpot' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot (1718)
#endif

/* tt__PTZPresetTourStartingCondition * has binding name 'PointerTott__PTZPresetTourStartingCondition' for type 'tt:PTZPresetTourStartingCondition' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition (1717)
#endif

/* tt__PTZPresetTourStatus * has binding name 'PointerTott__PTZPresetTourStatus' for type 'tt:PTZPresetTourStatus' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus (1716)
#endif

/* tt__PTZVector * has binding name 'PointerTott__PTZVector' for type 'tt:PTZVector' */
#ifndef SOAP_TYPE_PointerTott__PTZVector
#define SOAP_TYPE_PointerTott__PTZVector (1715)
#endif

/* tt__Vector1D * has binding name 'PointerTott__Vector1D' for type 'tt:Vector1D' */
#ifndef SOAP_TYPE_PointerTott__Vector1D
#define SOAP_TYPE_PointerTott__Vector1D (1714)
#endif

/* tt__Vector2D * has binding name 'PointerTott__Vector2D' for type 'tt:Vector2D' */
#ifndef SOAP_TYPE_PointerTott__Vector2D
#define SOAP_TYPE_PointerTott__Vector2D (1713)
#endif

/* tt__PTZSpacesExtension * has binding name 'PointerTott__PTZSpacesExtension' for type 'tt:PTZSpacesExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension
#define SOAP_TYPE_PointerTott__PTZSpacesExtension (1712)
#endif

/* tt__Space1DDescription ** has binding name 'PointerToPointerTott__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_PointerToPointerTott__Space1DDescription
#define SOAP_TYPE_PointerToPointerTott__Space1DDescription (1711)
#endif

/* tt__Space2DDescription ** has binding name 'PointerToPointerTott__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_PointerToPointerTott__Space2DDescription
#define SOAP_TYPE_PointerToPointerTott__Space2DDescription (1710)
#endif

/* tt__Space1DDescription * has binding name 'PointerTott__Space1DDescription' for type 'tt:Space1DDescription' */
#ifndef SOAP_TYPE_PointerTott__Space1DDescription
#define SOAP_TYPE_PointerTott__Space1DDescription (1709)
#endif

/* tt__Space2DDescription * has binding name 'PointerTott__Space2DDescription' for type 'tt:Space2DDescription' */
#ifndef SOAP_TYPE_PointerTott__Space2DDescription
#define SOAP_TYPE_PointerTott__Space2DDescription (1708)
#endif

/* tt__ReverseOptionsExtension * has binding name 'PointerTott__ReverseOptionsExtension' for type 'tt:ReverseOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension (1707)
#endif

/* enum tt__ReverseMode * has binding name 'PointerTott__ReverseMode' for type 'tt:ReverseMode' */
#ifndef SOAP_TYPE_PointerTott__ReverseMode
#define SOAP_TYPE_PointerTott__ReverseMode (1706)
#endif

/* tt__EFlipOptionsExtension * has binding name 'PointerTott__EFlipOptionsExtension' for type 'tt:EFlipOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension (1705)
#endif

/* enum tt__EFlipMode * has binding name 'PointerTott__EFlipMode' for type 'tt:EFlipMode' */
#ifndef SOAP_TYPE_PointerTott__EFlipMode
#define SOAP_TYPE_PointerTott__EFlipMode (1704)
#endif

/* tt__PTControlDirectionOptionsExtension * has binding name 'PointerTott__PTControlDirectionOptionsExtension' for type 'tt:PTControlDirectionOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension (1703)
#endif

/* tt__ReverseOptions * has binding name 'PointerTott__ReverseOptions' for type 'tt:ReverseOptions' */
#ifndef SOAP_TYPE_PointerTott__ReverseOptions
#define SOAP_TYPE_PointerTott__ReverseOptions (1702)
#endif

/* tt__EFlipOptions * has binding name 'PointerTott__EFlipOptions' for type 'tt:EFlipOptions' */
#ifndef SOAP_TYPE_PointerTott__EFlipOptions
#define SOAP_TYPE_PointerTott__EFlipOptions (1701)
#endif

/* tt__PTZConfigurationOptions2 * has binding name 'PointerTott__PTZConfigurationOptions2' for type 'tt:PTZConfigurationOptions2' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2 (1700)
#endif

/* tt__PTControlDirectionOptions * has binding name 'PointerTott__PTControlDirectionOptions' for type 'tt:PTControlDirectionOptions' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions (1699)
#endif

/* tt__DurationRange * has binding name 'PointerTott__DurationRange' for type 'tt:DurationRange' */
#ifndef SOAP_TYPE_PointerTott__DurationRange
#define SOAP_TYPE_PointerTott__DurationRange (1698)
#endif

/* tt__PTZSpaces * has binding name 'PointerTott__PTZSpaces' for type 'tt:PTZSpaces' */
#ifndef SOAP_TYPE_PointerTott__PTZSpaces
#define SOAP_TYPE_PointerTott__PTZSpaces (1697)
#endif

/* tt__PTControlDirectionExtension * has binding name 'PointerTott__PTControlDirectionExtension' for type 'tt:PTControlDirectionExtension' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension (1696)
#endif

/* tt__Reverse * has binding name 'PointerTott__Reverse' for type 'tt:Reverse' */
#ifndef SOAP_TYPE_PointerTott__Reverse
#define SOAP_TYPE_PointerTott__Reverse (1695)
#endif

/* tt__EFlip * has binding name 'PointerTott__EFlip' for type 'tt:EFlip' */
#ifndef SOAP_TYPE_PointerTott__EFlip
#define SOAP_TYPE_PointerTott__EFlip (1694)
#endif

/* tt__PTZConfigurationExtension2 * has binding name 'PointerTott__PTZConfigurationExtension2' for type 'tt:PTZConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2 (1693)
#endif

/* tt__PTControlDirection * has binding name 'PointerTott__PTControlDirection' for type 'tt:PTControlDirection' */
#ifndef SOAP_TYPE_PointerTott__PTControlDirection
#define SOAP_TYPE_PointerTott__PTControlDirection (1692)
#endif

/* tt__PTZPresetTourSupportedExtension * has binding name 'PointerTott__PTZPresetTourSupportedExtension' for type 'tt:PTZPresetTourSupportedExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension (1691)
#endif

/* enum tt__PTZPresetTourOperation * has binding name 'PointerTott__PTZPresetTourOperation' for type 'tt:PTZPresetTourOperation' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOperation
#define SOAP_TYPE_PointerTott__PTZPresetTourOperation (1690)
#endif

/* tt__PTZNodeExtension2 * has binding name 'PointerTott__PTZNodeExtension2' for type 'tt:PTZNodeExtension2' */
#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2
#define SOAP_TYPE_PointerTott__PTZNodeExtension2 (1689)
#endif

/* tt__PTZPresetTourSupported * has binding name 'PointerTott__PTZPresetTourSupported' for type 'tt:PTZPresetTourSupported' */
#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported (1688)
#endif

/* tt__EapMethodExtension * has binding name 'PointerTott__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_PointerTott__EapMethodExtension
#define SOAP_TYPE_PointerTott__EapMethodExtension (1687)
#endif

/* tt__TLSConfiguration * has binding name 'PointerTott__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_PointerTott__TLSConfiguration
#define SOAP_TYPE_PointerTott__TLSConfiguration (1686)
#endif

/* tt__Dot1XConfigurationExtension * has binding name 'PointerTott__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension (1685)
#endif

/* tt__EAPMethodConfiguration * has binding name 'PointerTott__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration (1684)
#endif

/* tt__CertificateInformationExtension * has binding name 'PointerTott__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension
#define SOAP_TYPE_PointerTott__CertificateInformationExtension (1683)
#endif

/* tt__DateTimeRange * has binding name 'PointerTott__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_PointerTott__DateTimeRange
#define SOAP_TYPE_PointerTott__DateTimeRange (1682)
#endif

/* tt__CertificateUsage * has binding name 'PointerTott__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_PointerTott__CertificateUsage
#define SOAP_TYPE_PointerTott__CertificateUsage (1681)
#endif

/* tt__CertificateGenerationParametersExtension * has binding name 'PointerTott__CertificateGenerationParametersExtension' for type 'tt:CertificateGenerationParametersExtension' */
#ifndef SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension
#define SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension (1680)
#endif

/* tt__UserExtension * has binding name 'PointerTott__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_PointerTott__UserExtension
#define SOAP_TYPE_PointerTott__UserExtension (1679)
#endif

/* tt__Date * has binding name 'PointerTott__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_PointerTott__Date
#define SOAP_TYPE_PointerTott__Date (1678)
#endif

/* tt__Time * has binding name 'PointerTott__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_PointerTott__Time
#define SOAP_TYPE_PointerTott__Time (1677)
#endif

/* tt__SystemDateTimeExtension * has binding name 'PointerTott__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension (1676)
#endif

/* tt__SystemLogUri ** has binding name 'PointerToPointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_PointerToPointerTott__SystemLogUri
#define SOAP_TYPE_PointerToPointerTott__SystemLogUri (1675)
#endif

/* tt__SystemLogUri * has binding name 'PointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_PointerTott__SystemLogUri
#define SOAP_TYPE_PointerTott__SystemLogUri (1674)
#endif

/* tt__AnalyticsDeviceExtension * has binding name 'PointerTott__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension (1673)
#endif

/* tt__SystemCapabilitiesExtension2 * has binding name 'PointerTott__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2 (1672)
#endif

/* tt__SystemCapabilitiesExtension * has binding name 'PointerTott__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension (1671)
#endif

/* tt__OnvifVersion ** has binding name 'PointerToPointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_PointerToPointerTott__OnvifVersion
#define SOAP_TYPE_PointerToPointerTott__OnvifVersion (1670)
#endif

/* tt__SecurityCapabilitiesExtension2 * has binding name 'PointerTott__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2 (1669)
#endif

/* tt__SecurityCapabilitiesExtension * has binding name 'PointerTott__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension (1668)
#endif

/* tt__NetworkCapabilitiesExtension2 * has binding name 'PointerTott__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2 (1667)
#endif

/* tt__NetworkCapabilitiesExtension * has binding name 'PointerTott__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension (1666)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension * has binding name 'PointerTott__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension (1665)
#endif

/* tt__ProfileCapabilities * has binding name 'PointerTott__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities
#define SOAP_TYPE_PointerTott__ProfileCapabilities (1664)
#endif

/* tt__MediaCapabilitiesExtension * has binding name 'PointerTott__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension (1663)
#endif

/* tt__RealTimeStreamingCapabilities * has binding name 'PointerTott__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities (1662)
#endif

/* tt__IOCapabilitiesExtension2 * has binding name 'PointerTott__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2 (1661)
#endif

/* char ** has binding name 'PointerTott__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_PointerTott__AuxiliaryData
#define SOAP_TYPE_PointerTott__AuxiliaryData (1660)
#endif

/* tt__IOCapabilitiesExtension * has binding name 'PointerTott__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension (1659)
#endif

/* tt__DeviceCapabilitiesExtension * has binding name 'PointerTott__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension (1658)
#endif

/* tt__SecurityCapabilities * has binding name 'PointerTott__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities
#define SOAP_TYPE_PointerTott__SecurityCapabilities (1657)
#endif

/* tt__IOCapabilities * has binding name 'PointerTott__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilities
#define SOAP_TYPE_PointerTott__IOCapabilities (1656)
#endif

/* tt__SystemCapabilities * has binding name 'PointerTott__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilities
#define SOAP_TYPE_PointerTott__SystemCapabilities (1655)
#endif

/* tt__NetworkCapabilities * has binding name 'PointerTott__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities
#define SOAP_TYPE_PointerTott__NetworkCapabilities (1654)
#endif

/* tt__CapabilitiesExtension2 * has binding name 'PointerTott__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2 (1653)
#endif

/* tt__AnalyticsDeviceCapabilities * has binding name 'PointerTott__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities (1652)
#endif

/* tt__ReceiverCapabilities * has binding name 'PointerTott__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities
#define SOAP_TYPE_PointerTott__ReceiverCapabilities (1651)
#endif

/* tt__ReplayCapabilities * has binding name 'PointerTott__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities
#define SOAP_TYPE_PointerTott__ReplayCapabilities (1650)
#endif

/* tt__SearchCapabilities * has binding name 'PointerTott__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SearchCapabilities
#define SOAP_TYPE_PointerTott__SearchCapabilities (1649)
#endif

/* tt__RecordingCapabilities * has binding name 'PointerTott__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities
#define SOAP_TYPE_PointerTott__RecordingCapabilities (1648)
#endif

/* tt__DisplayCapabilities * has binding name 'PointerTott__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities
#define SOAP_TYPE_PointerTott__DisplayCapabilities (1647)
#endif

/* tt__DeviceIOCapabilities * has binding name 'PointerTott__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities (1646)
#endif

/* tt__CapabilitiesExtension * has binding name 'PointerTott__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension
#define SOAP_TYPE_PointerTott__CapabilitiesExtension (1645)
#endif

/* tt__PTZCapabilities * has binding name 'PointerTott__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_PointerTott__PTZCapabilities
#define SOAP_TYPE_PointerTott__PTZCapabilities (1644)
#endif

/* tt__MediaCapabilities * has binding name 'PointerTott__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilities
#define SOAP_TYPE_PointerTott__MediaCapabilities (1643)
#endif

/* tt__ImagingCapabilities * has binding name 'PointerTott__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities
#define SOAP_TYPE_PointerTott__ImagingCapabilities (1642)
#endif

/* tt__EventCapabilities * has binding name 'PointerTott__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_PointerTott__EventCapabilities
#define SOAP_TYPE_PointerTott__EventCapabilities (1641)
#endif

/* tt__DeviceCapabilities * has binding name 'PointerTott__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities
#define SOAP_TYPE_PointerTott__DeviceCapabilities (1640)
#endif

/* tt__AnalyticsCapabilities * has binding name 'PointerTott__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities (1639)
#endif

/* tt__Dot11AvailableNetworksExtension * has binding name 'PointerTott__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension (1638)
#endif

/* enum tt__Dot11AuthAndMangementSuite * has binding name 'PointerTott__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_PointerTott__Dot11AuthAndMangementSuite
#define SOAP_TYPE_PointerTott__Dot11AuthAndMangementSuite (1637)
#endif

/* enum tt__Dot11SignalStrength * has binding name 'PointerTott__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength
#define SOAP_TYPE_PointerTott__Dot11SignalStrength (1636)
#endif

/* tt__Dot11PSKSetExtension * has binding name 'PointerTott__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension (1635)
#endif

/* xsd__hexBinary * has binding name 'PointerTott__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSK
#define SOAP_TYPE_PointerTott__Dot11PSK (1634)
#endif

/* tt__Dot11SecurityConfigurationExtension * has binding name 'PointerTott__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension (1633)
#endif

/* tt__Dot11PSKSet * has binding name 'PointerTott__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet
#define SOAP_TYPE_PointerTott__Dot11PSKSet (1632)
#endif

/* enum tt__Dot11Cipher * has binding name 'PointerTott__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_PointerTott__Dot11Cipher
#define SOAP_TYPE_PointerTott__Dot11Cipher (1631)
#endif

/* tt__Dot11SecurityConfiguration * has binding name 'PointerTott__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration (1630)
#endif

/* tt__IPAddressFilterExtension * has binding name 'PointerTott__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension (1629)
#endif

/* tt__NetworkZeroConfigurationExtension2 * has binding name 'PointerTott__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2 (1628)
#endif

/* tt__NetworkZeroConfiguration ** has binding name 'PointerToPointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_PointerToPointerTott__NetworkZeroConfiguration (1627)
#endif

/* tt__NetworkZeroConfigurationExtension * has binding name 'PointerTott__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension (1626)
#endif

/* enum tt__IPv6DHCPConfiguration * has binding name 'PointerTott__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration (1625)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2 (1624)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension (1623)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration (1622)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration (1621)
#endif

/* tt__DynamicDNSInformationExtension * has binding name 'PointerTott__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension (1620)
#endif

/* tt__NTPInformationExtension * has binding name 'PointerTott__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension
#define SOAP_TYPE_PointerTott__NTPInformationExtension (1619)
#endif

/* tt__DNSInformationExtension * has binding name 'PointerTott__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension
#define SOAP_TYPE_PointerTott__DNSInformationExtension (1618)
#endif

/* tt__HostnameInformationExtension * has binding name 'PointerTott__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension
#define SOAP_TYPE_PointerTott__HostnameInformationExtension (1617)
#endif

/* tt__NetworkHostExtension * has binding name 'PointerTott__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension
#define SOAP_TYPE_PointerTott__NetworkHostExtension (1616)
#endif

/* tt__NetworkProtocolExtension * has binding name 'PointerTott__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension (1615)
#endif

/* tt__IPv6ConfigurationExtension * has binding name 'PointerTott__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension (1614)
#endif

/* tt__PrefixedIPv6Address ** has binding name 'PointerToPointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_PointerToPointerTott__PrefixedIPv6Address
#define SOAP_TYPE_PointerToPointerTott__PrefixedIPv6Address (1613)
#endif

/* tt__PrefixedIPv6Address * has binding name 'PointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address (1612)
#endif

/* tt__PrefixedIPv4Address ** has binding name 'PointerToPointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_PointerToPointerTott__PrefixedIPv4Address
#define SOAP_TYPE_PointerToPointerTott__PrefixedIPv4Address (1611)
#endif

/* tt__PrefixedIPv4Address * has binding name 'PointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address (1610)
#endif

/* tt__IPv4Configuration * has binding name 'PointerTott__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv4Configuration
#define SOAP_TYPE_PointerTott__IPv4Configuration (1609)
#endif

/* tt__IPv6Configuration * has binding name 'PointerTott__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv6Configuration
#define SOAP_TYPE_PointerTott__IPv6Configuration (1608)
#endif

/* tt__NetworkInterfaceConnectionSetting * has binding name 'PointerTott__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting (1607)
#endif

/* tt__NetworkInterfaceExtension2 * has binding name 'PointerTott__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2 (1606)
#endif

/* tt__Dot11Configuration ** has binding name 'PointerToPointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_PointerToPointerTott__Dot11Configuration
#define SOAP_TYPE_PointerToPointerTott__Dot11Configuration (1605)
#endif

/* tt__Dot11Configuration * has binding name 'PointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot11Configuration
#define SOAP_TYPE_PointerTott__Dot11Configuration (1604)
#endif

/* tt__Dot3Configuration ** has binding name 'PointerToPointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_PointerToPointerTott__Dot3Configuration
#define SOAP_TYPE_PointerToPointerTott__Dot3Configuration (1603)
#endif

/* tt__Dot3Configuration * has binding name 'PointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot3Configuration
#define SOAP_TYPE_PointerTott__Dot3Configuration (1602)
#endif

/* tt__Transport * has binding name 'PointerTott__Transport' for type 'tt:Transport' */
#ifndef SOAP_TYPE_PointerTott__Transport
#define SOAP_TYPE_PointerTott__Transport (1601)
#endif

/* tt__AudioDecoderConfigurationOptionsExtension * has binding name 'PointerTott__AudioDecoderConfigurationOptionsExtension' for type 'tt:AudioDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension (1600)
#endif

/* tt__G726DecOptions * has binding name 'PointerTott__G726DecOptions' for type 'tt:G726DecOptions' */
#ifndef SOAP_TYPE_PointerTott__G726DecOptions
#define SOAP_TYPE_PointerTott__G726DecOptions (1599)
#endif

/* tt__G711DecOptions * has binding name 'PointerTott__G711DecOptions' for type 'tt:G711DecOptions' */
#ifndef SOAP_TYPE_PointerTott__G711DecOptions
#define SOAP_TYPE_PointerTott__G711DecOptions (1598)
#endif

/* tt__AACDecOptions * has binding name 'PointerTott__AACDecOptions' for type 'tt:AACDecOptions' */
#ifndef SOAP_TYPE_PointerTott__AACDecOptions
#define SOAP_TYPE_PointerTott__AACDecOptions (1597)
#endif

/* tt__VideoDecoderConfigurationOptionsExtension * has binding name 'PointerTott__VideoDecoderConfigurationOptionsExtension' for type 'tt:VideoDecoderConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension (1596)
#endif

/* tt__Mpeg4DecOptions * has binding name 'PointerTott__Mpeg4DecOptions' for type 'tt:Mpeg4DecOptions' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4DecOptions
#define SOAP_TYPE_PointerTott__Mpeg4DecOptions (1595)
#endif

/* tt__H264DecOptions * has binding name 'PointerTott__H264DecOptions' for type 'tt:H264DecOptions' */
#ifndef SOAP_TYPE_PointerTott__H264DecOptions
#define SOAP_TYPE_PointerTott__H264DecOptions (1594)
#endif

/* tt__JpegDecOptions * has binding name 'PointerTott__JpegDecOptions' for type 'tt:JpegDecOptions' */
#ifndef SOAP_TYPE_PointerTott__JpegDecOptions
#define SOAP_TYPE_PointerTott__JpegDecOptions (1593)
#endif

/* tt__PTZStatusFilterOptionsExtension * has binding name 'PointerTott__PTZStatusFilterOptionsExtension' for type 'tt:PTZStatusFilterOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension (1592)
#endif

/* tt__MetadataConfigurationOptionsExtension2 * has binding name 'PointerTott__MetadataConfigurationOptionsExtension2' for type 'tt:MetadataConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2 (1591)
#endif

/* tt__MetadataConfigurationOptionsExtension * has binding name 'PointerTott__MetadataConfigurationOptionsExtension' for type 'tt:MetadataConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension (1590)
#endif

/* tt__PTZStatusFilterOptions * has binding name 'PointerTott__PTZStatusFilterOptions' for type 'tt:PTZStatusFilterOptions' */
#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptions
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptions (1589)
#endif

/* _tt__EventSubscription_SubscriptionPolicy * has binding name 'PointerTo_tt__EventSubscription_SubscriptionPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy (1588)
#endif

/* wsnt__FilterType * has binding name 'PointerTowsnt__FilterType' for type 'wsnt:FilterType' */
#ifndef SOAP_TYPE_PointerTowsnt__FilterType
#define SOAP_TYPE_PointerTowsnt__FilterType (1586)
#endif

/* tt__AudioEncoderConfigurationOption ** has binding name 'PointerToPointerTott__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_PointerToPointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_PointerToPointerTott__AudioEncoderConfigurationOption (1585)
#endif

/* tt__AudioEncoderConfigurationOption * has binding name 'PointerTott__AudioEncoderConfigurationOption' for type 'tt:AudioEncoderConfigurationOption' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption (1584)
#endif

/* tt__AudioSourceOptionsExtension * has binding name 'PointerTott__AudioSourceOptionsExtension' for type 'tt:AudioSourceOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceOptionsExtension
#define SOAP_TYPE_PointerTott__AudioSourceOptionsExtension (1583)
#endif

/* tt__VideoResolution2 ** has binding name 'PointerToPointerTott__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoResolution2
#define SOAP_TYPE_PointerToPointerTott__VideoResolution2 (1582)
#endif

/* tt__VideoResolution2 * has binding name 'PointerTott__VideoResolution2' for type 'tt:VideoResolution2' */
#ifndef SOAP_TYPE_PointerTott__VideoResolution2
#define SOAP_TYPE_PointerTott__VideoResolution2 (1581)
#endif

/* tt__FloatRange * has binding name 'PointerTott__FloatRange' for type 'tt:FloatRange' */
#ifndef SOAP_TYPE_PointerTott__FloatRange
#define SOAP_TYPE_PointerTott__FloatRange (1580)
#endif

/* enum tt__H264Profile * has binding name 'PointerTott__H264Profile' for type 'tt:H264Profile' */
#ifndef SOAP_TYPE_PointerTott__H264Profile
#define SOAP_TYPE_PointerTott__H264Profile (1579)
#endif

/* enum tt__Mpeg4Profile * has binding name 'PointerTott__Mpeg4Profile' for type 'tt:Mpeg4Profile' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Profile
#define SOAP_TYPE_PointerTott__Mpeg4Profile (1578)
#endif

/* tt__VideoResolution ** has binding name 'PointerToPointerTott__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_PointerToPointerTott__VideoResolution
#define SOAP_TYPE_PointerToPointerTott__VideoResolution (1577)
#endif

/* tt__VideoResolution * has binding name 'PointerTott__VideoResolution' for type 'tt:VideoResolution' */
#ifndef SOAP_TYPE_PointerTott__VideoResolution
#define SOAP_TYPE_PointerTott__VideoResolution (1576)
#endif

/* tt__VideoEncoderOptionsExtension2 * has binding name 'PointerTott__VideoEncoderOptionsExtension2' for type 'tt:VideoEncoderOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2 (1575)
#endif

/* tt__H264Options2 * has binding name 'PointerTott__H264Options2' for type 'tt:H264Options2' */
#ifndef SOAP_TYPE_PointerTott__H264Options2
#define SOAP_TYPE_PointerTott__H264Options2 (1574)
#endif

/* tt__Mpeg4Options2 * has binding name 'PointerTott__Mpeg4Options2' for type 'tt:Mpeg4Options2' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Options2
#define SOAP_TYPE_PointerTott__Mpeg4Options2 (1573)
#endif

/* tt__JpegOptions2 * has binding name 'PointerTott__JpegOptions2' for type 'tt:JpegOptions2' */
#ifndef SOAP_TYPE_PointerTott__JpegOptions2
#define SOAP_TYPE_PointerTott__JpegOptions2 (1572)
#endif

/* tt__VideoEncoderOptionsExtension * has binding name 'PointerTott__VideoEncoderOptionsExtension' for type 'tt:VideoEncoderOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension (1571)
#endif

/* tt__H264Options * has binding name 'PointerTott__H264Options' for type 'tt:H264Options' */
#ifndef SOAP_TYPE_PointerTott__H264Options
#define SOAP_TYPE_PointerTott__H264Options (1570)
#endif

/* tt__Mpeg4Options * has binding name 'PointerTott__Mpeg4Options' for type 'tt:Mpeg4Options' */
#ifndef SOAP_TYPE_PointerTott__Mpeg4Options
#define SOAP_TYPE_PointerTott__Mpeg4Options (1569)
#endif

/* tt__JpegOptions * has binding name 'PointerTott__JpegOptions' for type 'tt:JpegOptions' */
#ifndef SOAP_TYPE_PointerTott__JpegOptions
#define SOAP_TYPE_PointerTott__JpegOptions (1568)
#endif

/* tt__RotateOptionsExtension * has binding name 'PointerTott__RotateOptionsExtension' for type 'tt:RotateOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__RotateOptionsExtension
#define SOAP_TYPE_PointerTott__RotateOptionsExtension (1567)
#endif

/* tt__IntItems * has binding name 'PointerTott__IntItems' for type 'tt:IntItems' */
#ifndef SOAP_TYPE_PointerTott__IntItems
#define SOAP_TYPE_PointerTott__IntItems (1566)
#endif

/* enum tt__RotateMode * has binding name 'PointerTott__RotateMode' for type 'tt:RotateMode' */
#ifndef SOAP_TYPE_PointerTott__RotateMode
#define SOAP_TYPE_PointerTott__RotateMode (1565)
#endif

/* enum tt__SceneOrientationMode * has binding name 'PointerTott__SceneOrientationMode' for type 'tt:SceneOrientationMode' */
#ifndef SOAP_TYPE_PointerTott__SceneOrientationMode
#define SOAP_TYPE_PointerTott__SceneOrientationMode (1564)
#endif

/* tt__VideoSourceConfigurationOptionsExtension2 * has binding name 'PointerTott__VideoSourceConfigurationOptionsExtension2' for type 'tt:VideoSourceConfigurationOptionsExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2 (1563)
#endif

/* tt__RotateOptions * has binding name 'PointerTott__RotateOptions' for type 'tt:RotateOptions' */
#ifndef SOAP_TYPE_PointerTott__RotateOptions
#define SOAP_TYPE_PointerTott__RotateOptions (1562)
#endif

/* tt__VideoSourceConfigurationOptionsExtension * has binding name 'PointerTott__VideoSourceConfigurationOptionsExtension' for type 'tt:VideoSourceConfigurationOptionsExtension' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension (1561)
#endif

/* tt__IntRectangleRange * has binding name 'PointerTott__IntRectangleRange' for type 'tt:IntRectangleRange' */
#ifndef SOAP_TYPE_PointerTott__IntRectangleRange
#define SOAP_TYPE_PointerTott__IntRectangleRange (1560)
#endif

/* tt__LensProjection ** has binding name 'PointerToPointerTott__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_PointerToPointerTott__LensProjection
#define SOAP_TYPE_PointerToPointerTott__LensProjection (1559)
#endif

/* tt__LensProjection * has binding name 'PointerTott__LensProjection' for type 'tt:LensProjection' */
#ifndef SOAP_TYPE_PointerTott__LensProjection
#define SOAP_TYPE_PointerTott__LensProjection (1558)
#endif

/* tt__LensOffset * has binding name 'PointerTott__LensOffset' for type 'tt:LensOffset' */
#ifndef SOAP_TYPE_PointerTott__LensOffset
#define SOAP_TYPE_PointerTott__LensOffset (1557)
#endif

/* tt__RotateExtension * has binding name 'PointerTott__RotateExtension' for type 'tt:RotateExtension' */
#ifndef SOAP_TYPE_PointerTott__RotateExtension
#define SOAP_TYPE_PointerTott__RotateExtension (1556)
#endif

/* tt__SceneOrientation * has binding name 'PointerTott__SceneOrientation' for type 'tt:SceneOrientation' */
#ifndef SOAP_TYPE_PointerTott__SceneOrientation
#define SOAP_TYPE_PointerTott__SceneOrientation (1555)
#endif

/* tt__LensDescription ** has binding name 'PointerToPointerTott__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_PointerToPointerTott__LensDescription
#define SOAP_TYPE_PointerToPointerTott__LensDescription (1554)
#endif

/* tt__LensDescription * has binding name 'PointerTott__LensDescription' for type 'tt:LensDescription' */
#ifndef SOAP_TYPE_PointerTott__LensDescription
#define SOAP_TYPE_PointerTott__LensDescription (1553)
#endif

/* tt__VideoSourceConfigurationExtension2 * has binding name 'PointerTott__VideoSourceConfigurationExtension2' for type 'tt:VideoSourceConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2 (1552)
#endif

/* tt__Rotate * has binding name 'PointerTott__Rotate' for type 'tt:Rotate' */
#ifndef SOAP_TYPE_PointerTott__Rotate
#define SOAP_TYPE_PointerTott__Rotate (1551)
#endif

/* tt__ProfileExtension2 * has binding name 'PointerTott__ProfileExtension2' for type 'tt:ProfileExtension2' */
#ifndef SOAP_TYPE_PointerTott__ProfileExtension2
#define SOAP_TYPE_PointerTott__ProfileExtension2 (1550)
#endif

/* tt__AudioDecoderConfiguration * has binding name 'PointerTott__AudioDecoderConfiguration' for type 'tt:AudioDecoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_PointerTott__AudioDecoderConfiguration (1549)
#endif

/* tt__AudioOutputConfiguration * has binding name 'PointerTott__AudioOutputConfiguration' for type 'tt:AudioOutputConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioOutputConfiguration
#define SOAP_TYPE_PointerTott__AudioOutputConfiguration (1548)
#endif

/* tt__ProfileExtension * has binding name 'PointerTott__ProfileExtension' for type 'tt:ProfileExtension' */
#ifndef SOAP_TYPE_PointerTott__ProfileExtension
#define SOAP_TYPE_PointerTott__ProfileExtension (1547)
#endif

/* tt__MetadataConfiguration * has binding name 'PointerTott__MetadataConfiguration' for type 'tt:MetadataConfiguration' */
#ifndef SOAP_TYPE_PointerTott__MetadataConfiguration
#define SOAP_TYPE_PointerTott__MetadataConfiguration (1546)
#endif

/* tt__PTZConfiguration * has binding name 'PointerTott__PTZConfiguration' for type 'tt:PTZConfiguration' */
#ifndef SOAP_TYPE_PointerTott__PTZConfiguration
#define SOAP_TYPE_PointerTott__PTZConfiguration (1545)
#endif

/* tt__VideoAnalyticsConfiguration * has binding name 'PointerTott__VideoAnalyticsConfiguration' for type 'tt:VideoAnalyticsConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration (1544)
#endif

/* tt__AudioEncoderConfiguration * has binding name 'PointerTott__AudioEncoderConfiguration' for type 'tt:AudioEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfiguration
#define SOAP_TYPE_PointerTott__AudioEncoderConfiguration (1543)
#endif

/* tt__VideoEncoderConfiguration * has binding name 'PointerTott__VideoEncoderConfiguration' for type 'tt:VideoEncoderConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfiguration
#define SOAP_TYPE_PointerTott__VideoEncoderConfiguration (1542)
#endif

/* tt__AudioSourceConfiguration * has binding name 'PointerTott__AudioSourceConfiguration' for type 'tt:AudioSourceConfiguration' */
#ifndef SOAP_TYPE_PointerTott__AudioSourceConfiguration
#define SOAP_TYPE_PointerTott__AudioSourceConfiguration (1541)
#endif

/* tt__VideoSourceConfiguration * has binding name 'PointerTott__VideoSourceConfiguration' for type 'tt:VideoSourceConfiguration' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceConfiguration
#define SOAP_TYPE_PointerTott__VideoSourceConfiguration (1540)
#endif

/* tt__VideoSourceExtension2 * has binding name 'PointerTott__VideoSourceExtension2' for type 'tt:VideoSourceExtension2' */
#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension2
#define SOAP_TYPE_PointerTott__VideoSourceExtension2 (1539)
#endif

/* tt__ImagingSettings20 * has binding name 'PointerTott__ImagingSettings20' for type 'tt:ImagingSettings20' */
#ifndef SOAP_TYPE_PointerTott__ImagingSettings20
#define SOAP_TYPE_PointerTott__ImagingSettings20 (1538)
#endif

/* float * has binding name 'PointerTofloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (1537)
#endif

/* tt__LocationEntity ** has binding name 'PointerToPointerTott__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_PointerToPointerTott__LocationEntity
#define SOAP_TYPE_PointerToPointerTott__LocationEntity (1536)
#endif

/* tt__LocationEntity * has binding name 'PointerTott__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_PointerTott__LocationEntity
#define SOAP_TYPE_PointerTott__LocationEntity (1535)
#endif

/* tds__StorageConfigurationData * has binding name 'PointerTotds__StorageConfigurationData' for type 'tds:StorageConfigurationData' */
#ifndef SOAP_TYPE_PointerTotds__StorageConfigurationData
#define SOAP_TYPE_PointerTotds__StorageConfigurationData (1534)
#endif

/* tds__StorageConfiguration ** has binding name 'PointerToPointerTotds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTotds__StorageConfiguration
#define SOAP_TYPE_PointerToPointerTotds__StorageConfiguration (1533)
#endif

/* tds__StorageConfiguration * has binding name 'PointerTotds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_PointerTotds__StorageConfiguration
#define SOAP_TYPE_PointerTotds__StorageConfiguration (1532)
#endif

/* _tds__GetSystemUrisResponse_Extension * has binding name 'PointerTo_tds__GetSystemUrisResponse_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension (1531)
#endif

/* tt__SystemLogUriList * has binding name 'PointerTott__SystemLogUriList' for type 'tt:SystemLogUriList' */
#ifndef SOAP_TYPE_PointerTott__SystemLogUriList
#define SOAP_TYPE_PointerTott__SystemLogUriList (1529)
#endif

/* tt__Dot11AvailableNetworks ** has binding name 'PointerToPointerTott__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_PointerToPointerTott__Dot11AvailableNetworks
#define SOAP_TYPE_PointerToPointerTott__Dot11AvailableNetworks (1528)
#endif

/* tt__Dot11AvailableNetworks * has binding name 'PointerTott__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworks
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworks (1527)
#endif

/* tt__Dot11Status * has binding name 'PointerTott__Dot11Status' for type 'tt:Dot11Status' */
#ifndef SOAP_TYPE_PointerTott__Dot11Status
#define SOAP_TYPE_PointerTott__Dot11Status (1526)
#endif

/* tt__Dot11Capabilities * has binding name 'PointerTott__Dot11Capabilities' for type 'tt:Dot11Capabilities' */
#ifndef SOAP_TYPE_PointerTott__Dot11Capabilities
#define SOAP_TYPE_PointerTott__Dot11Capabilities (1525)
#endif

/* tt__RelayOutputSettings * has binding name 'PointerTott__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings
#define SOAP_TYPE_PointerTott__RelayOutputSettings (1524)
#endif

/* tt__RelayOutput ** has binding name 'PointerToPointerTott__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_PointerToPointerTott__RelayOutput
#define SOAP_TYPE_PointerToPointerTott__RelayOutput (1523)
#endif

/* tt__RelayOutput * has binding name 'PointerTott__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_PointerTott__RelayOutput
#define SOAP_TYPE_PointerTott__RelayOutput (1522)
#endif

/* char ** has binding name 'PointerTott__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_PointerTott__ReferenceToken
#define SOAP_TYPE_PointerTott__ReferenceToken (1521)
#endif

/* tt__Dot1XConfiguration ** has binding name 'PointerToPointerTott__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_PointerToPointerTott__Dot1XConfiguration
#define SOAP_TYPE_PointerToPointerTott__Dot1XConfiguration (1520)
#endif

/* tt__Dot1XConfiguration * has binding name 'PointerTott__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_PointerTott__Dot1XConfiguration
#define SOAP_TYPE_PointerTott__Dot1XConfiguration (1519)
#endif

/* tt__CertificateInformation * has binding name 'PointerTott__CertificateInformation' for type 'tt:CertificateInformation' */
#ifndef SOAP_TYPE_PointerTott__CertificateInformation
#define SOAP_TYPE_PointerTott__CertificateInformation (1518)
#endif

/* tt__CertificateWithPrivateKey ** has binding name 'PointerToPointerTott__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_PointerToPointerTott__CertificateWithPrivateKey
#define SOAP_TYPE_PointerToPointerTott__CertificateWithPrivateKey (1517)
#endif

/* tt__CertificateWithPrivateKey * has binding name 'PointerTott__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_PointerTott__CertificateWithPrivateKey
#define SOAP_TYPE_PointerTott__CertificateWithPrivateKey (1516)
#endif

/* tt__CertificateStatus ** has binding name 'PointerToPointerTott__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_PointerToPointerTott__CertificateStatus
#define SOAP_TYPE_PointerToPointerTott__CertificateStatus (1515)
#endif

/* tt__CertificateStatus * has binding name 'PointerTott__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_PointerTott__CertificateStatus
#define SOAP_TYPE_PointerTott__CertificateStatus (1514)
#endif

/* tt__Certificate ** has binding name 'PointerToPointerTott__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_PointerToPointerTott__Certificate
#define SOAP_TYPE_PointerToPointerTott__Certificate (1513)
#endif

/* tt__Certificate * has binding name 'PointerTott__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_PointerTott__Certificate
#define SOAP_TYPE_PointerTott__Certificate (1512)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (1511)
#endif

/* tt__BinaryData * has binding name 'PointerTott__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_PointerTott__BinaryData
#define SOAP_TYPE_PointerTott__BinaryData (1510)
#endif

/* tt__IPAddressFilter * has binding name 'PointerTott__IPAddressFilter' for type 'tt:IPAddressFilter' */
#ifndef SOAP_TYPE_PointerTott__IPAddressFilter
#define SOAP_TYPE_PointerTott__IPAddressFilter (1509)
#endif

/* tt__NetworkZeroConfiguration * has binding name 'PointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration (1508)
#endif

/* char ** has binding name 'PointerTott__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_PointerTott__IPv6Address
#define SOAP_TYPE_PointerTott__IPv6Address (1507)
#endif

/* char ** has binding name 'PointerTott__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_PointerTott__IPv4Address
#define SOAP_TYPE_PointerTott__IPv4Address (1506)
#endif

/* tt__NetworkGateway * has binding name 'PointerTott__NetworkGateway' for type 'tt:NetworkGateway' */
#ifndef SOAP_TYPE_PointerTott__NetworkGateway
#define SOAP_TYPE_PointerTott__NetworkGateway (1505)
#endif

/* tt__NetworkProtocol ** has binding name 'PointerToPointerTott__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_PointerToPointerTott__NetworkProtocol
#define SOAP_TYPE_PointerToPointerTott__NetworkProtocol (1504)
#endif

/* tt__NetworkProtocol * has binding name 'PointerTott__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_PointerTott__NetworkProtocol
#define SOAP_TYPE_PointerTott__NetworkProtocol (1503)
#endif

/* tt__NetworkInterfaceSetConfiguration * has binding name 'PointerTott__NetworkInterfaceSetConfiguration' for type 'tt:NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration (1502)
#endif

/* tt__NetworkInterface ** has binding name 'PointerToPointerTott__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_PointerToPointerTott__NetworkInterface
#define SOAP_TYPE_PointerToPointerTott__NetworkInterface (1501)
#endif

/* tt__NetworkInterface * has binding name 'PointerTott__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterface
#define SOAP_TYPE_PointerTott__NetworkInterface (1500)
#endif

/* tt__DynamicDNSInformation * has binding name 'PointerTott__DynamicDNSInformation' for type 'tt:DynamicDNSInformation' */
#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformation
#define SOAP_TYPE_PointerTott__DynamicDNSInformation (1499)
#endif

/* tt__NTPInformation * has binding name 'PointerTott__NTPInformation' for type 'tt:NTPInformation' */
#ifndef SOAP_TYPE_PointerTott__NTPInformation
#define SOAP_TYPE_PointerTott__NTPInformation (1498)
#endif

/* tt__IPAddress ** has binding name 'PointerToPointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_PointerToPointerTott__IPAddress
#define SOAP_TYPE_PointerToPointerTott__IPAddress (1497)
#endif

/* tt__IPAddress * has binding name 'PointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_PointerTott__IPAddress
#define SOAP_TYPE_PointerTott__IPAddress (1496)
#endif

/* char ** has binding name 'PointerToxsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (1495)
#endif

/* tt__DNSInformation * has binding name 'PointerTott__DNSInformation' for type 'tt:DNSInformation' */
#ifndef SOAP_TYPE_PointerTott__DNSInformation
#define SOAP_TYPE_PointerTott__DNSInformation (1494)
#endif

/* tt__HostnameInformation * has binding name 'PointerTott__HostnameInformation' for type 'tt:HostnameInformation' */
#ifndef SOAP_TYPE_PointerTott__HostnameInformation
#define SOAP_TYPE_PointerTott__HostnameInformation (1493)
#endif

/* tt__Capabilities * has binding name 'PointerTott__Capabilities' for type 'tt:Capabilities' */
#ifndef SOAP_TYPE_PointerTott__Capabilities
#define SOAP_TYPE_PointerTott__Capabilities (1492)
#endif

/* enum tt__CapabilityCategory * has binding name 'PointerTott__CapabilityCategory' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_PointerTott__CapabilityCategory
#define SOAP_TYPE_PointerTott__CapabilityCategory (1491)
#endif

/* tt__IntRange * has binding name 'PointerTott__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_PointerTott__IntRange
#define SOAP_TYPE_PointerTott__IntRange (1490)
#endif

/* char ** has binding name 'PointerTostring' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (1489)
#endif

/* tt__User ** has binding name 'PointerToPointerTott__User' for type 'tt:User' */
#ifndef SOAP_TYPE_PointerToPointerTott__User
#define SOAP_TYPE_PointerToPointerTott__User (1488)
#endif

/* tt__User * has binding name 'PointerTott__User' for type 'tt:User' */
#ifndef SOAP_TYPE_PointerTott__User
#define SOAP_TYPE_PointerTott__User (1487)
#endif

/* tt__RemoteUser * has binding name 'PointerTott__RemoteUser' for type 'tt:RemoteUser' */
#ifndef SOAP_TYPE_PointerTott__RemoteUser
#define SOAP_TYPE_PointerTott__RemoteUser (1486)
#endif

/* tt__NetworkHost ** has binding name 'PointerToPointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_PointerToPointerTott__NetworkHost
#define SOAP_TYPE_PointerToPointerTott__NetworkHost (1485)
#endif

/* tt__NetworkHost * has binding name 'PointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_PointerTott__NetworkHost
#define SOAP_TYPE_PointerTott__NetworkHost (1484)
#endif

/* char ** has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (1483)
#endif

/* tt__Scope ** has binding name 'PointerToPointerTott__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_PointerToPointerTott__Scope
#define SOAP_TYPE_PointerToPointerTott__Scope (1482)
#endif

/* tt__Scope * has binding name 'PointerTott__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_PointerTott__Scope
#define SOAP_TYPE_PointerTott__Scope (1481)
#endif

/* tt__SystemLog * has binding name 'PointerTott__SystemLog' for type 'tt:SystemLog' */
#ifndef SOAP_TYPE_PointerTott__SystemLog
#define SOAP_TYPE_PointerTott__SystemLog (1480)
#endif

/* tt__SupportInformation * has binding name 'PointerTott__SupportInformation' for type 'tt:SupportInformation' */
#ifndef SOAP_TYPE_PointerTott__SupportInformation
#define SOAP_TYPE_PointerTott__SupportInformation (1479)
#endif

/* tt__BackupFile ** has binding name 'PointerToPointerTott__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_PointerToPointerTott__BackupFile
#define SOAP_TYPE_PointerToPointerTott__BackupFile (1478)
#endif

/* tt__BackupFile * has binding name 'PointerTott__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_PointerTott__BackupFile
#define SOAP_TYPE_PointerTott__BackupFile (1477)
#endif

/* tt__AttachmentData * has binding name 'PointerTott__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_PointerTott__AttachmentData
#define SOAP_TYPE_PointerTott__AttachmentData (1476)
#endif

/* tt__SystemDateTime * has binding name 'PointerTott__SystemDateTime' for type 'tt:SystemDateTime' */
#ifndef SOAP_TYPE_PointerTott__SystemDateTime
#define SOAP_TYPE_PointerTott__SystemDateTime (1475)
#endif

/* tt__DateTime * has binding name 'PointerTott__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_PointerTott__DateTime
#define SOAP_TYPE_PointerTott__DateTime (1474)
#endif

/* tt__TimeZone * has binding name 'PointerTott__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_PointerTott__TimeZone
#define SOAP_TYPE_PointerTott__TimeZone (1473)
#endif

/* tds__DeviceServiceCapabilities * has binding name 'PointerTotds__DeviceServiceCapabilities' for type 'tds:DeviceServiceCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__DeviceServiceCapabilities
#define SOAP_TYPE_PointerTotds__DeviceServiceCapabilities (1472)
#endif

/* tds__Service ** has binding name 'PointerToPointerTotds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_PointerToPointerTotds__Service
#define SOAP_TYPE_PointerToPointerTotds__Service (1471)
#endif

/* tds__Service * has binding name 'PointerTotds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_PointerTotds__Service
#define SOAP_TYPE_PointerTotds__Service (1470)
#endif

/* _tds__StorageConfigurationData_Extension * has binding name 'PointerTo_tds__StorageConfigurationData_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension
#define SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension (1469)
#endif

/* tds__UserCredential * has binding name 'PointerTotds__UserCredential' for type 'tds:UserCredential' */
#ifndef SOAP_TYPE_PointerTotds__UserCredential
#define SOAP_TYPE_PointerTotds__UserCredential (1467)
#endif

/* _tds__UserCredential_Extension * has binding name 'PointerTo_tds__UserCredential_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__UserCredential_Extension
#define SOAP_TYPE_PointerTo_tds__UserCredential_Extension (1466)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (1464)
#endif

/* tds__MiscCapabilities * has binding name 'PointerTotds__MiscCapabilities' for type 'tds:MiscCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__MiscCapabilities
#define SOAP_TYPE_PointerTotds__MiscCapabilities (1463)
#endif

/* tds__SystemCapabilities * has binding name 'PointerTotds__SystemCapabilities' for type 'tds:SystemCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__SystemCapabilities
#define SOAP_TYPE_PointerTotds__SystemCapabilities (1462)
#endif

/* tds__SecurityCapabilities * has binding name 'PointerTotds__SecurityCapabilities' for type 'tds:SecurityCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__SecurityCapabilities
#define SOAP_TYPE_PointerTotds__SecurityCapabilities (1461)
#endif

/* tds__NetworkCapabilities * has binding name 'PointerTotds__NetworkCapabilities' for type 'tds:NetworkCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__NetworkCapabilities
#define SOAP_TYPE_PointerTotds__NetworkCapabilities (1460)
#endif

/* tt__OnvifVersion * has binding name 'PointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_PointerTott__OnvifVersion
#define SOAP_TYPE_PointerTott__OnvifVersion (1459)
#endif

/* _tds__Service_Capabilities * has binding name 'PointerTo_tds__Service_Capabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__Service_Capabilities
#define SOAP_TYPE_PointerTo_tds__Service_Capabilities (1458)
#endif

/* tt__RecordingJobReference has binding name 'tt__RecordingJobReference' for type 'tt:RecordingJobReference' */
#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (1455)
#endif

/* tt__JobToken has binding name 'tt__JobToken' for type 'tt:JobToken' */
#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (1453)
#endif

/* tt__TrackReference has binding name 'tt__TrackReference' for type 'tt:TrackReference' */
#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (1451)
#endif

/* tt__RecordingReference has binding name 'tt__RecordingReference' for type 'tt:RecordingReference' */
#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (1449)
#endif

/* tt__ReceiverReference has binding name 'tt__ReceiverReference' for type 'tt:ReceiverReference' */
#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (1447)
#endif

/* wstop__SimpleTopicExpression has binding name 'wstop__SimpleTopicExpression' for type 'xsd:QName' */
#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (1433)
#endif

/* wstop__ConcreteTopicExpression has binding name 'wstop__ConcreteTopicExpression' for type 'wstop:ConcreteTopicExpression' */
#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (1431)
#endif

/* wstop__FullTopicExpression has binding name 'wstop__FullTopicExpression' for type 'wstop:FullTopicExpression' */
#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (1429)
#endif

/* tt__ReferenceToken has binding name 'tt__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (1423)
#endif

/* tt__RecordingJobState has binding name 'tt__RecordingJobState' for type 'tt:RecordingJobState' */
#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (1415)
#endif

/* tt__RecordingJobMode has binding name 'tt__RecordingJobMode' for type 'tt:RecordingJobMode' */
#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (1413)
#endif

/* tt__XPathExpression has binding name 'tt__XPathExpression' for type 'tt:XPathExpression' */
#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (1405)
#endif

/* tt__Description has binding name 'tt__Description' for type 'tt:Description' */
#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (1403)
#endif

/* tt__AuxiliaryData has binding name 'tt__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (1357)
#endif

/* tt__Dot11PSKPassphrase has binding name 'tt__Dot11PSKPassphrase' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (1329)
#endif

/* tt__Domain has binding name 'tt__Domain' for type 'tt:Domain' */
#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (1313)
#endif

/* tt__DNSName has binding name 'tt__DNSName' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (1311)
#endif

/* tt__HwAddress has binding name 'tt__HwAddress' for type 'tt:HwAddress' */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (1307)
#endif

/* tt__IPv6Address has binding name 'tt__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (1305)
#endif

/* tt__IPv4Address has binding name 'tt__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (1303)
#endif

/* tt__NetworkInterfaceConfigPriority has binding name 'tt__NetworkInterfaceConfigPriority' for type 'tt:NetworkInterfaceConfigPriority' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (1291)
#endif

/* tt__Name has binding name 'tt__Name' for type 'tt:Name' */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (1257)
#endif

/* wsnt__AbsoluteOrRelativeTimeType has binding name 'wsnt__AbsoluteOrRelativeTimeType' for type 'wsnt:AbsoluteOrRelativeTimeType' */
#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (1252)
#endif

/* tt__ReferenceTokenList has binding name 'tt__ReferenceTokenList' for type 'tt:ReferenceTokenList' */
#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (1251)
#endif

/* tt__StringList has binding name 'tt__StringList' for type 'tt:StringList' */
#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (1250)
#endif

/* tt__StringAttrList has binding name 'tt__StringAttrList' for type 'tt:StringAttrList' */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (1249)
#endif

/* tt__FloatList has binding name 'tt__FloatList' for type 'tt:FloatList' */
#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (1248)
#endif

/* tt__IntList has binding name 'tt__IntList' for type 'tt:IntList' */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (1247)
#endif

/* _xml__lang has binding name '_xml__lang' for type '' */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (176)
#endif

/* xsd__token has binding name 'xsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (174)
#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (171)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (169)
#endif

/* xsd__duration has binding name 'xsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (163)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (154)
#endif

/* xsd__anySimpleType has binding name 'xsd__anySimpleType' for type 'xsd:anySimpleType' */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (152)
#endif

/* xsd__NCName has binding name 'xsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (149)
#endif

/* struct SOAP_ENV__Header * has binding name 'PointerToSOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header
#define SOAP_TYPE_PointerToSOAP_ENV__Header (138)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (132)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (130)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (128)
#endif

/* struct chan__ChannelInstanceType * has binding name 'PointerTochan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (126)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (125)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (124)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (123)
#endif

/* struct wsa5__RelatesToType * has binding name 'PointerTo_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (122)
#endif

/* _wsa5__ProblemIRI has binding name '_wsa5__ProblemIRI' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (118)
#endif

/* _wsa5__ProblemHeaderQName has binding name '_wsa5__ProblemHeaderQName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (117)
#endif

/* _wsa5__Action has binding name '_wsa5__Action' for type '' */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (114)
#endif

/* _wsa5__To has binding name '_wsa5__To' for type '' */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (113)
#endif

/* _wsa5__MessageID has binding name '_wsa5__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (108)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (104)
#endif

/* struct wsa5__MetadataType * has binding name 'PointerTowsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (103)
#endif

/* struct wsa5__ReferenceParametersType * has binding name 'PointerTowsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (102)
#endif

/* wsa5__FaultCodesOpenEnumType has binding name 'wsa5__FaultCodesOpenEnumType' for type 'wsa5:FaultCodesOpenEnumType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (99)
#endif

/* wsa5__RelationshipTypeOpenEnum has binding name 'wsa5__RelationshipTypeOpenEnum' for type 'wsa5:RelationshipTypeOpenEnum' */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (98)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (92)
#endif

/* struct wsdd__ResolveMatchesType * has binding name 'PointerTowsdd__ResolveMatchesType' for type 'wsdd:ResolveMatchesType' */
#ifndef SOAP_TYPE_PointerTowsdd__ResolveMatchesType
#define SOAP_TYPE_PointerTowsdd__ResolveMatchesType (87)
#endif

/* struct wsdd__ResolveType * has binding name 'PointerTowsdd__ResolveType' for type 'wsdd:ResolveType' */
#ifndef SOAP_TYPE_PointerTowsdd__ResolveType
#define SOAP_TYPE_PointerTowsdd__ResolveType (84)
#endif

/* struct wsdd__ProbeMatchesType * has binding name 'PointerTowsdd__ProbeMatchesType' for type 'wsdd:ProbeMatchesType' */
#ifndef SOAP_TYPE_PointerTowsdd__ProbeMatchesType
#define SOAP_TYPE_PointerTowsdd__ProbeMatchesType (81)
#endif

/* struct wsdd__ProbeType * has binding name 'PointerTowsdd__ProbeType' for type 'wsdd:ProbeType' */
#ifndef SOAP_TYPE_PointerTowsdd__ProbeType
#define SOAP_TYPE_PointerTowsdd__ProbeType (78)
#endif

/* struct wsdd__ByeType * has binding name 'PointerTowsdd__ByeType' for type 'wsdd:ByeType' */
#ifndef SOAP_TYPE_PointerTowsdd__ByeType
#define SOAP_TYPE_PointerTowsdd__ByeType (75)
#endif

/* struct wsdd__HelloType * has binding name 'PointerTowsdd__HelloType' for type 'wsdd:HelloType' */
#ifndef SOAP_TYPE_PointerTowsdd__HelloType
#define SOAP_TYPE_PointerTowsdd__HelloType (71)
#endif

/* struct wsdd__AppSequenceType * has binding name 'PointerTowsdd__AppSequenceType' for type 'wsdd:AppSequenceType' */
#ifndef SOAP_TYPE_PointerTowsdd__AppSequenceType
#define SOAP_TYPE_PointerTowsdd__AppSequenceType (70)
#endif

/* _wsdd__Id has binding name '_wsdd__Id' for type '' */
#ifndef SOAP_TYPE__wsdd__Id
#define SOAP_TYPE__wsdd__Id (69)
#endif

/* _wsdd__SupportedMatchingRules has binding name '_wsdd__SupportedMatchingRules' for type '' */
#ifndef SOAP_TYPE__wsdd__SupportedMatchingRules
#define SOAP_TYPE__wsdd__SupportedMatchingRules (65)
#endif

/* _wsdd__XAddrs has binding name '_wsdd__XAddrs' for type '' */
#ifndef SOAP_TYPE__wsdd__XAddrs
#define SOAP_TYPE__wsdd__XAddrs (63)
#endif

/* _wsdd__Types has binding name '_wsdd__Types' for type 'xsd:QName' */
#ifndef SOAP_TYPE__wsdd__Types
#define SOAP_TYPE__wsdd__Types (61)
#endif

/* struct wsdd__SigType * has binding name 'PointerTowsdd__SigType' for type 'wsdd:SigType' */
#ifndef SOAP_TYPE_PointerTowsdd__SigType
#define SOAP_TYPE_PointerTowsdd__SigType (54)
#endif

/* struct wsdd__ResolveMatchType * has binding name 'PointerTowsdd__ResolveMatchType' for type 'wsdd:ResolveMatchType' */
#ifndef SOAP_TYPE_PointerTowsdd__ResolveMatchType
#define SOAP_TYPE_PointerTowsdd__ResolveMatchType (53)
#endif

/* struct wsdd__ProbeMatchType * has binding name 'PointerTowsdd__ProbeMatchType' for type 'wsdd:ProbeMatchType' */
#ifndef SOAP_TYPE_PointerTowsdd__ProbeMatchType
#define SOAP_TYPE_PointerTowsdd__ProbeMatchType (52)
#endif

/* unsigned int * has binding name 'PointerTounsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_PointerTounsignedInt
#define SOAP_TYPE_PointerTounsignedInt (51)
#endif

/* struct wsdd__ScopesType * has binding name 'PointerTowsdd__ScopesType' for type 'wsdd:ScopesType' */
#ifndef SOAP_TYPE_PointerTowsdd__ScopesType
#define SOAP_TYPE_PointerTowsdd__ScopesType (50)
#endif

/* wsdd__FaultCodeOpenType has binding name 'wsdd__FaultCodeOpenType' for type 'wsdd:FaultCodeOpenType' */
#ifndef SOAP_TYPE_wsdd__FaultCodeOpenType
#define SOAP_TYPE_wsdd__FaultCodeOpenType (48)
#endif

/* wsdd__UriListType has binding name 'wsdd__UriListType' for type 'wsdd:UriListType' */
#ifndef SOAP_TYPE_wsdd__UriListType
#define SOAP_TYPE_wsdd__UriListType (47)
#endif

/* wsdd__QNameListType has binding name 'wsdd__QNameListType' for type 'xsd:QName' */
#ifndef SOAP_TYPE_wsdd__QNameListType
#define SOAP_TYPE_wsdd__QNameListType (46)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__FaultTo
#define SOAP_TYPE_PointerTo_wsa__FaultTo (33)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__ReplyTo
#define SOAP_TYPE_PointerTo_wsa__ReplyTo (32)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__From
#define SOAP_TYPE_PointerTo_wsa__From (31)
#endif

/* struct wsa__Relationship * has binding name 'PointerTo_wsa__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__RelatesTo
#define SOAP_TYPE_PointerTo_wsa__RelatesTo (30)
#endif

/* _wsa__Action has binding name '_wsa__Action' for type '' */
#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (23)
#endif

/* _wsa__To has binding name '_wsa__To' for type '' */
#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (22)
#endif

/* _wsa__MessageID has binding name '_wsa__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (20)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (18)
#endif

/* struct wsa__ServiceNameType * has binding name 'PointerTowsa__ServiceNameType' for type 'wsa:ServiceNameType' */
#ifndef SOAP_TYPE_PointerTowsa__ServiceNameType
#define SOAP_TYPE_PointerTowsa__ServiceNameType (17)
#endif

/* char ** has binding name 'PointerTo_QName' for type '' */
#ifndef SOAP_TYPE_PointerTo_QName
#define SOAP_TYPE_PointerTo_QName (16)
#endif

/* struct wsa__ReferenceParametersType * has binding name 'PointerTowsa__ReferenceParametersType' for type 'wsa:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa__ReferenceParametersType (15)
#endif

/* struct wsa__ReferencePropertiesType * has binding name 'PointerTowsa__ReferencePropertiesType' for type 'wsa:ReferencePropertiesType' */
#ifndef SOAP_TYPE_PointerTowsa__ReferencePropertiesType
#define SOAP_TYPE_PointerTowsa__ReferencePropertiesType (14)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
